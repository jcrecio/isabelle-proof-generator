{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/While/WEquivalence.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma Skip_WCFG_edge_Exit:\n  \"\\<lbrakk>labels prog l Skip\\<rbrakk> \\<Longrightarrow> prog \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\"", "lemma step_WCFG_edge:\n  assumes \"prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\"\n  obtains et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" and \"transfer et s = s'\"\n  and \"pred et s\"", "lemma WCFG_edge_Exit_Skip:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l. n = (_ l _) \\<and> labels prog l Skip \\<and> et = \\<Up>id\"", "lemma WCFG_edge_step:\n  \"\\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'. prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels prog l c \\<and> labels prog l' c'\""], "translations": [["", "lemma Skip_WCFG_edge_Exit:\n  \"\\<lbrakk>labels prog l Skip\\<rbrakk> \\<Longrightarrow> prog \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels prog l Skip \\<Longrightarrow>\n    prog \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "proof(induct prog l Skip rule:labels.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>V e. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 5. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case Labels_Base"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>V e. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 5. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 6. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(fastforce intro:WCFG_Skip)"], ["proof (state)\nthis:\n  Skip \\<turnstile> (_ 0 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (5 subgoals):\n 1. \\<And>V e. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>V e. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case (Labels_LAss V e)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>V e. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 5. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(rule WCFG_LAssSkip)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case (Labels_Seq2 c\\<^sub>2 l c\\<^sub>1)"], ["proof (state)\nthis:\n  labels c\\<^sub>2 l Skip\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "from \\<open>c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "have \"c\\<^sub>1;;c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1", "by(fastforce intro:WCFG_SeqSecond)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 l c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>1;;\n                         c\\<^sub>2 \\<turnstile> (_ l +\n             #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 4. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "thus ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    c\\<^sub>2 \\<turnstile> (_ l +\n                              #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(simp del:id_apply)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> (_ l +\n                            #:c\\<^sub>1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case (Labels_CondTrue c\\<^sub>1 l b c\\<^sub>2)"], ["proof (state)\nthis:\n  labels c\\<^sub>1 l Skip\n  c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "from \\<open>c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> 1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> 1", "by(fastforce intro:WCFG_CondThen)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> 1\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>1 l b c\\<^sub>2.\n       \\<lbrakk>labels c\\<^sub>1 l Skip;\n        c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 3. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "thus ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ l + 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(simp del:id_apply)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l + 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case (Labels_CondFalse c\\<^sub>2 l b c\\<^sub>1)"], ["proof (state)\nthis:\n  labels c\\<^sub>2 l Skip\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "from \\<open>c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> (#:c\\<^sub>1 + 1) -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> (#:c\\<^sub>1 + 1)\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n           1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1 + 1", "by(fastforce intro:WCFG_CondElse)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n         1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>2 l b c\\<^sub>1.\n       \\<lbrakk>labels c\\<^sub>2 l Skip;\n        c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> if (b) c\\<^sub>1\n                         else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                  1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n 2. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "thus ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n         1 -\\<Up>id\\<rightarrow> (_Exit_) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                                   1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(simp del:id_apply)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ l + #:c\\<^sub>1 +\n                                 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "case (Labels_WhileExit b c')"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>b c'.\n       while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(rule WCFG_WhileFalseSkip)"], ["proof (state)\nthis:\n  while (b) c' \\<turnstile> (_ 1 _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_WCFG_edge:\n  assumes \"prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\"\n  obtains et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" and \"transfer et s = s'\"\n  and \"pred et s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>", "have \"\\<exists>et. prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n       transfer et s = s' \\<and> pred et s", "proof(induct rule:step.induct)"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>V e s.\n       \\<exists>et.\n          V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s(V := interpret e s) \\<and> pred et s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 3. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) prog\n                             else c\\<^sub>2 \\<turnstile> (_ l +\n                      1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 12 subgoals...", "case (StepLAss V e s)"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. \\<And>V e s.\n       \\<exists>et.\n          V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s(V := interpret e s) \\<and> pred et s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 3. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) prog\n                             else c\\<^sub>2 \\<turnstile> (_ l +\n                      1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 12 subgoals...", "have \"pred \\<Up>(\\<lambda>s. s(V:=(interpret e s))) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred \\<Up>\\<lambda>s. s(V := interpret e s) s", "by simp"], ["proof (state)\nthis:\n  pred \\<Up>\\<lambda>s. s(V := interpret e s) s\n\ngoal (12 subgoals):\n 1. \\<And>V e s.\n       \\<exists>et.\n          V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s(V := interpret e s) \\<and> pred et s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 3. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) prog\n                             else c\\<^sub>2 \\<turnstile> (_ l +\n                      1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 12 subgoals...", "have \"V:=e \\<turnstile> (_0_) -\\<Up>(\\<lambda>s. s(V:=(interpret e s)))\\<rightarrow> (_1_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V:=e \\<turnstile> (_ 0 _) -\\<Up>\\<lambda>s. s\n (V := interpret e s)\\<rightarrow> (_ 1 _)", "by(rule WCFG_LAss)"], ["proof (state)\nthis:\n  V:=e \\<turnstile> (_ 0 _) -\\<Up>\\<lambda>s. s\n                                     (V :=\n  interpret e s)\\<rightarrow> (_ 1 _)\n\ngoal (12 subgoals):\n 1. \\<And>V e s.\n       \\<exists>et.\n          V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s(V := interpret e s) \\<and> pred et s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 3. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) prog\n                             else c\\<^sub>2 \\<turnstile> (_ l +\n                      1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 12 subgoals...", "have \"transfer \\<Up>(\\<lambda>s. s(V:=(interpret e s))) s = s(V:=(interpret e s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s\n    (V := interpret e s)", "by simp"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s(V := interpret e s)\n\ngoal (12 subgoals):\n 1. \\<And>V e s.\n       \\<exists>et.\n          V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s(V := interpret e s) \\<and> pred et s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 3. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) prog\n                             else c\\<^sub>2 \\<turnstile> (_ l +\n                      1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 12 subgoals...", "with \\<open>pred \\<Up>(\\<lambda>s. s(V:=(interpret e s))) s\\<close>\n      \\<open>V:=e \\<turnstile> (_0_) -\\<Up>(\\<lambda>s. s(V:=(interpret e s)))\\<rightarrow> (_1_)\\<close>"], ["proof (chain)\npicking this:\n  pred \\<Up>\\<lambda>s. s(V := interpret e s) s\n  V:=e \\<turnstile> (_ 0 _) -\\<Up>\\<lambda>s. s\n                                     (V :=\n  interpret e s)\\<rightarrow> (_ 1 _)\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s(V := interpret e s)", "show ?case"], ["proof (prove)\nusing this:\n  pred \\<Up>\\<lambda>s. s(V := interpret e s) s\n  V:=e \\<turnstile> (_ 0 _) -\\<Up>\\<lambda>s. s\n                                     (V :=\n  interpret e s)\\<rightarrow> (_ 1 _)\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s(V := interpret e s)\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n       transfer et s = s(V := interpret e s) \\<and> pred et s", "by blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     V:=e \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n     transfer et s = s(V := interpret e s) \\<and> pred et s\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "case (StepSeq c\\<^sub>1 c\\<^sub>2 l s)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n  l < #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "from \\<open>labels (c\\<^sub>1;;c\\<^sub>2) l (Skip;;c\\<^sub>2)\\<close> \\<open>l < #:c\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  l < #:c\\<^sub>1", "have \"labels c\\<^sub>1 l Skip\""], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. labels c\\<^sub>1 l Skip", "by(auto elim:labels.cases intro:Labels_Base)"], ["proof (state)\nthis:\n  labels c\\<^sub>1 l Skip\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "hence \"c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l Skip\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(fastforce intro:Skip_WCFG_edge_Exit)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "hence \"c\\<^sub>1;;c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_0_) \\<oplus> #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1", "by(rule WCFG_SeqConnect,simp)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 l s.\n       \\<lbrakk>labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2);\n        labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2;\n        l < #:c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s \\<and> pred et s\n 2. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n        \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             if (b) c\\<^sub>1\n                             else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                             transfer et s = s' \\<and> pred et s\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> (_ l _) -\\<Up>id\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       c\\<^sub>1;;\n       c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by auto"], ["proof (state)\nthis:\n  \\<exists>et.\n     c\\<^sub>1;;\n     c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ #:c\\<^sub>1 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "case (StepSeqWhile b cx l s)"], ["proof (state)\nthis:\n  labels (while (b) cx) l (Skip;; while (b) cx)\n\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "from \\<open>labels (while (b) cx) l (Skip;;while (b) cx)\\<close>"], ["proof (chain)\npicking this:\n  labels (while (b) cx) l (Skip;; while (b) cx)", "obtain lx where \"labels cx lx Skip\" \n      and [simp]:\"l = lx + 2\""], ["proof (prove)\nusing this:\n  labels (while (b) cx) l (Skip;; while (b) cx)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>labels cx lx Skip; l = lx + 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:labels.cases)"], ["proof (state)\nthis:\n  labels cx lx Skip\n  l = lx + 2\n\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "hence \"cx \\<turnstile> (_ lx _) -\\<Up>id\\<rightarrow> (_Exit_)\""], ["proof (prove)\nusing this:\n  labels cx lx Skip\n  l = lx + 2\n\ngoal (1 subgoal):\n 1. cx \\<turnstile> (_ lx _) -\\<Up>id\\<rightarrow> (_Exit_)", "by(fastforce intro:Skip_WCFG_edge_Exit)"], ["proof (state)\nthis:\n  cx \\<turnstile> (_ lx _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "hence \"while (b) cx \\<turnstile> (_ lx _) \\<oplus> 2 -\\<Up>id\\<rightarrow> (_0_)\""], ["proof (prove)\nusing this:\n  cx \\<turnstile> (_ lx _) -\\<Up>id\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> (_ lx _) \\<oplus> 2 -\\<Up>id\\<rightarrow> (_ 0 _)", "by(fastforce intro:WCFG_WhileBodyExit)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> (_ lx _) \\<oplus> 2 -\\<Up>id\\<rightarrow> (_ 0 _)\n\ngoal (10 subgoals):\n 1. \\<And>b c' l s.\n       labels (while (b) c') l (Skip;; while (b) c') \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c' \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 10. \\<And>cx c s l c' s' l' b.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         \\<exists>et.\n            cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n            transfer et s = s' \\<and> pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>et.\n                             while (b) cx \\<turnstile> (_ l +\n                    2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                             transfer et s = s' \\<and> pred et s", "thus ?case"], ["proof (prove)\nusing this:\n  while (b) cx \\<turnstile> (_ lx _) \\<oplus> 2 -\\<Up>id\\<rightarrow> (_ 0 _)\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       while (b) cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by auto"], ["proof (state)\nthis:\n  \\<exists>et.\n     while (b) cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ 0 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepCondTrue b s c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  interpret b s = Some true\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>interpret b s = Some true\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some true", "have \"pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\""], ["proof (prove)\nusing this:\n  interpret b s = Some true\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_0_) \\<oplus> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n       interpret b s =\n       Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1", "by(rule WCFG_CondTrue)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s", "by simp"], ["proof (state)\nthis:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\n\ngoal (9 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 9. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s", "show ?case"], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 1\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by auto"], ["proof (state)\nthis:\n  \\<exists>et.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepCondFalse b s c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  interpret b s = Some false\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>interpret b s = Some false\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some false", "have \"pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\""], ["proof (prove)\nusing this:\n  interpret b s = Some false\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> \n                                   (_0_) \\<oplus> (#:c\\<^sub>1 + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n       interpret b s =\n       Some\n        false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1", "by(rule WCFG_CondFalse)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s", "by simp"], ["proof (state)\nthis:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\n\ngoal (8 subgoals):\n 1. \\<And>b s c\\<^sub>1 c\\<^sub>2.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          if (b) c\\<^sub>1\n          else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                            1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 8. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s", "show ?case"], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> (_ 0 _) -(\\<lambda>s.\n     interpret b s =\n     Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                         1 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by auto"], ["proof (state)\nthis:\n  \\<exists>et.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ #:c\\<^sub>1 +\n                       1 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepWhileTrue b s c)"], ["proof (state)\nthis:\n  interpret b s = Some true\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>interpret b s = Some true\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some true", "have \"pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\""], ["proof (prove)\nusing this:\n  interpret b s = Some true\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"while (b) c \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_0_) \\<oplus> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n    interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2", "by(rule WCFG_WhileTrue)"], ["proof (state)\nthis:\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s", "by simp"], ["proof (state)\nthis:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\n\ngoal (7 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some true \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 7. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s", "show ?case"], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some true)\\<^sub>\\<surd>\\<rightarrow> (_ 0 _) \\<oplus> 2\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by(auto simp del:add_2_eq_Suc')"], ["proof (state)\nthis:\n  \\<exists>et.\n     while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 2 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepWhileFalse b s c)"], ["proof (state)\nthis:\n  interpret b s = Some false\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>interpret b s = Some false\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some false", "have \"pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\""], ["proof (prove)\nusing this:\n  interpret b s = Some false\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"while (b) c \\<turnstile> (_0_) -(\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_1_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n    interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)", "by(rule WCFG_WhileFalse)"], ["proof (state)\nthis:\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "have \"transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s", "by simp"], ["proof (state)\nthis:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\n\ngoal (6 subgoals):\n 1. \\<And>b s c.\n       interpret b s = Some false \\<Longrightarrow>\n       \\<exists>et.\n          while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n          transfer et s = s \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 6. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s", "show ?case"], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  while (b) c \\<turnstile> (_ 0 _) -(\\<lambda>s.\n  interpret b s = Some false)\\<^sub>\\<surd>\\<rightarrow> (_ 1 _)\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n       transfer et s = s \\<and> pred et s", "by auto"], ["proof (state)\nthis:\n  \\<exists>et.\n     while (b) c \\<turnstile> (_ 0 _) -et\\<rightarrow> (_ 1 _) \\<and>\n     transfer et s = s \\<and> pred et s\n\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepRecSeq1 prog c s l c' s' l' c\\<^sub>2)"], ["proof (state)\nthis:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>\\<exists>et. prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "obtain et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" \n      and \"transfer et s = s'\" and \"pred et s\""], ["proof (prove)\nusing this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "have \"prog;;c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (1 subgoal):\n 1. prog;; c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "by(fastforce intro:WCFG_SeqFirst)"], ["proof (state)\nthis:\n  prog;; c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (5 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            prog;;\n                            c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 5. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  prog;; c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "show ?case"], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  prog;; c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       prog;;\n       c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n       transfer et s = s' \\<and> pred et s", "by blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     prog;; c\\<^sub>2 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepRecSeq2 prog c s l c' s' l' c\\<^sub>1)"], ["proof (state)\nthis:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>\\<exists>et. prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "obtain et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" \n      and \"transfer et s = s'\" and \"pred et s\""], ["proof (prove)\nusing this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "have \"c\\<^sub>1;;prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1", "by(fastforce intro:WCFG_SeqSecond)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>prog c s l c' s' l' c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            c\\<^sub>1;;\n                            prog \\<turnstile> (_ l +\n           #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 4. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  c\\<^sub>1;;\n  prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  c\\<^sub>1;;\n  prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       c\\<^sub>1;;\n       prog \\<turnstile> (_ l +\n                            #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' +\n                         #:c\\<^sub>1 _) \\<and>\n       transfer et s = s' \\<and> pred et s", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     c\\<^sub>1;;\n     prog \\<turnstile> (_ l +\n                          #:c\\<^sub>1 _) -et\\<rightarrow> (_ l' +\n                       #:c\\<^sub>1 _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepRecCond1 prog c s l c' s' l' b c\\<^sub>2)"], ["proof (state)\nthis:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>\\<exists>et. prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "obtain et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" \n      and \"transfer et s = s'\" and \"pred et s\""], ["proof (prove)\nusing this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "have \"if (b) prog else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (1 subgoal):\n 1. if (b) prog\n    else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1", "by(fastforce intro:WCFG_CondThen)"], ["proof (state)\nthis:\n  if (b) prog\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\n\ngoal (3 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>2.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) prog\n                            else c\\<^sub>2 \\<turnstile> (_ l +\n                     1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 3. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  if (b) prog\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1", "show ?case"], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  if (b) prog\n  else c\\<^sub>2 \\<turnstile> (_ l _) \\<oplus> 1 -et\\<rightarrow> (_ l' _) \\<oplus> 1\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       if (b) prog\n       else c\\<^sub>2 \\<turnstile> (_ l +\n1 _) -et\\<rightarrow> (_ l' + 1 _) \\<and>\n       transfer et s = s' \\<and> pred et s", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     if (b) prog\n     else c\\<^sub>2 \\<turnstile> (_ l +\n                                    1 _) -et\\<rightarrow> (_ l' +\n                       1 _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepRecCond2 prog c s l c' s' l' b c\\<^sub>1)"], ["proof (state)\nthis:\n  prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>\\<exists>et. prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "obtain et where \"prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\" \n      and \"transfer et s = s'\" and \"pred et s\""], ["proof (prove)\nusing this:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)", "have \"if (b) c\\<^sub>1 else prog \\<turnstile> (_ l _) \\<oplus> (#:c\\<^sub>1 + 1) -et\\<rightarrow> (_ l' _) \\<oplus> (#:c\\<^sub>1 + 1)\""], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n      1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1 + 1", "by(fastforce intro:WCFG_CondElse)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n    1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (2 subgoals):\n 1. \\<And>prog c s l c' s' l' b c\\<^sub>1.\n       \\<lbrakk>prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            if (b) c\\<^sub>1\n                            else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 + 1 _) \\<and>\n                            transfer et s = s' \\<and> pred et s\n 2. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  if (b) c\\<^sub>1\n  else prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n    1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1 + 1", "show ?case"], ["proof (prove)\nusing this:\n  prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  if (b) c\\<^sub>1\n  else prog \\<turnstile> (_ l _) \\<oplus> #:c\\<^sub>1 +\n    1 -et\\<rightarrow> (_ l' _) \\<oplus> #:c\\<^sub>1 + 1\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       if (b) c\\<^sub>1\n       else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                                 1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 +\n                    1 _) \\<and>\n       transfer et s = s' \\<and> pred et s", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     if (b) c\\<^sub>1\n     else prog \\<turnstile> (_ l + #:c\\<^sub>1 +\n                               1 _) -et\\<rightarrow> (_ l' + #:c\\<^sub>1 +\n                  1 _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "case (StepRecWhile cx c s l c' s' l' b)"], ["proof (state)\nthis:\n  cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  \\<exists>et.\n     cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "from \\<open>\\<exists>et. cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and> transfer et s = s' \\<and> pred et s\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>et.\n     cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "obtain et where \"cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\"\n      and \"transfer et s = s'\" and \"pred et s\""], ["proof (prove)\nusing this:\n  \\<exists>et.\n     cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "moreover"], ["proof (state)\nthis:\n  cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "hence \"while (b) cx \\<turnstile> (_ l _) \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\""], ["proof (prove)\nusing this:\n  cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> (_ l _) \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2", "by(fastforce intro:WCFG_WhileBody)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> (_ l _) \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. \\<And>cx c s l c' s' l' b.\n       \\<lbrakk>cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                \\<langle>c',s',l'\\<rangle>;\n        \\<exists>et.\n           cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n           transfer et s = s' \\<and> pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>et.\n                            while (b) cx \\<turnstile> (_ l +\n                   2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n                            transfer et s = s' \\<and> pred et s", "ultimately"], ["proof (chain)\npicking this:\n  cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  while (b) cx \\<turnstile> (_ l _) \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2", "show ?case"], ["proof (prove)\nusing this:\n  cx \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  transfer et s = s'\n  pred et s\n  while (b) cx \\<turnstile> (_ l _) \\<oplus> 2 -et\\<rightarrow> (_ l' _) \\<oplus> 2\n\ngoal (1 subgoal):\n 1. \\<exists>et.\n       while (b) cx \\<turnstile> (_ l +\n                                    2 _) -et\\<rightarrow> (_ l' +\n                       2 _) \\<and>\n       transfer et s = s' \\<and> pred et s", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>et.\n     while (b) cx \\<turnstile> (_ l +\n                                  2 _) -et\\<rightarrow> (_ l' + 2 _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. (\\<And>et.\n        \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n         transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>prog \\<turnstile> (_ l _) -?et\\<rightarrow> (_ l' _);\n   transfer ?et s = s'; pred ?et s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prog \\<turnstile> (_ l _) -?et\\<rightarrow> (_ l' _);\n   transfer ?et s = s'; pred ?et s\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>et.\n     prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _) \\<and>\n     transfer et s = s' \\<and> pred et s\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>From @{term \"c \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\"} with @{term transfers} \n  and @{term preds} to\\\\\n  @{term \"prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\"}\\<close>"], ["", "(*<*)"], ["", "declare One_nat_def [simp del] add_2_eq_Suc' [simp del]"], ["", "(*>*)"], ["", "lemma WCFG_edge_Exit_Skip:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l. n = (_ l _) \\<and> labels prog l Skip \\<and> et = \\<Up>id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> (_Exit_);\n     n \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l.\n                         n = (_ l _) \\<and>\n                         labels prog l Skip \\<and> et = \\<Up>id", "proof(induct prog n et \"(_Exit_)\" rule:WCFG_induct)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. (_ 0 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>l.\n       (_ 0 _) = (_ l _) \\<and> labels Skip l Skip \\<and> \\<Up>id = \\<Up>id\n 3. \\<And>V e.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (V:=e) l Skip \\<and> \\<Up>id = \\<Up>id\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n         n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                             labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                              Skip \\<and>\n                             et = \\<Up>id\nA total of 13 subgoals...", "case WCFG_Skip"], ["proof (state)\nthis:\n  (_ 0 _) \\<noteq> (_Entry_)\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. (_ 0 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n    \\<exists>l.\n       (_ 0 _) = (_ l _) \\<and> labels Skip l Skip \\<and> \\<Up>id = \\<Up>id\n 3. \\<And>V e.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (V:=e) l Skip \\<and> \\<Up>id = \\<Up>id\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n         n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                             labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                              Skip \\<and>\n                             et = \\<Up>id\nA total of 13 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (_ 0 _) = (_ l _) \\<and> labels Skip l Skip \\<and> \\<Up>id = \\<Up>id", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  \\<exists>l.\n     (_ 0 _) = (_ l _) \\<and> labels Skip l Skip \\<and> \\<Up>id = \\<Up>id\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>V e.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (V:=e) l Skip \\<and> \\<Up>id = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 10. \\<And>b c'.\n        \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n         (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             (_ 0 _) = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             \\<Up>id\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>V e.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (V:=e) l Skip \\<and> \\<Up>id = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 10. \\<And>b c'.\n        \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n         (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             (_ 0 _) = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             \\<Up>id\nA total of 12 subgoals...", "case WCFG_LAssSkip"], ["proof (state)\nthis:\n  (_ 1 _) \\<noteq> (_Entry_)\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>V e.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (V:=e) l Skip \\<and> \\<Up>id = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 10. \\<And>b c'.\n        \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n         (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             (_ 0 _) = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             (\\<lambda>s.\n                                 interpret b s = Some true)\\<^sub>\\<surd> =\n                             \\<Up>id\nA total of 12 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (_ 1 _) = (_ l _) \\<and>\n       labels (V_:=e_) l Skip \\<and> \\<Up>id = \\<Up>id", "by(fastforce intro:Labels_LAss)"], ["proof (state)\nthis:\n  \\<exists>l.\n     (_ 1 _) = (_ l _) \\<and>\n     labels (V_:=e_) l Skip \\<and> \\<Up>id = \\<Up>id\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> #:c\\<^sub>1 = (_Exit_)\n  n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "note IH = \\<open>\\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk> \n    \\<Longrightarrow> \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "from \\<open>n' \\<oplus> #:c\\<^sub>1 = (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 = (_Exit_)", "have \"n' = (_Exit_)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = (_Exit_)", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_Exit_)\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "from IH[OF this \\<open>n \\<noteq> (_Entry_)\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id", "obtain l where [simp]:\"n = (_ l _)\" \"et = \\<Up>id\"\n    and \"labels c\\<^sub>2 l Skip\""], ["proof (prove)\nusing this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>n = (_ l _); et = \\<Up>id; labels c\\<^sub>2 l Skip\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>2 l Skip\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "hence \"labels (c\\<^sub>1;;c\\<^sub>2) (l + #:c\\<^sub>1) Skip\""], ["proof (prove)\nusing this:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>2 l Skip\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) Skip", "by(fastforce intro:Labels_Seq2)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) Skip\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 9. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 10. \\<And>b c'.\n        (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           (_ 1 _) = (_ l _) \\<and>\n           labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) Skip\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and> et = \\<Up>id", "by(fastforce simp:id_def)"], ["proof (state)\nthis:\n  \\<exists>l.\n     n \\<oplus> #:c\\<^sub>1 = (_ l _) \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and> et = \\<Up>id\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> 1 = (_Exit_)\n  n \\<oplus> 1 \\<noteq> (_Entry_)\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "note IH = \\<open>\\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "from \\<open>n' \\<oplus> 1 = (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 1 = (_Exit_)", "have \"n' = (_Exit_)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> 1 = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = (_Exit_)", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_Exit_)\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "from IH[OF this \\<open>n \\<noteq> (_Entry_)\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id", "obtain l where [simp]:\"n = (_ l _)\" \"et = \\<Up>id\"\n    and \"labels c\\<^sub>1 l Skip\""], ["proof (prove)\nusing this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>n = (_ l _); et = \\<Up>id; labels c\\<^sub>1 l Skip\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>1 l Skip\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "hence \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) Skip\""], ["proof (prove)\nusing this:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>1 l Skip\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) Skip", "by(fastforce intro:Labels_CondTrue)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) Skip\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> 1 = (_Exit_);\n        n \\<oplus> 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 8. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 9. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n         \\<Longrightarrow> \\<exists>l.\n                              n = (_ l _) \\<and>\n                              labels c' l Skip \\<and> et = \\<Up>id;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n \\<oplus> 2 = (_ l _) \\<and>\n                             labels (while (b) c') l Skip \\<and>\n                             et = \\<Up>id", "thus ?case"], ["proof (prove)\nusing this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) Skip\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       n \\<oplus> 1 = (_ l _) \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l Skip \\<and> et = \\<Up>id", "by(fastforce simp:id_def)"], ["proof (state)\nthis:\n  \\<exists>l.\n     n \\<oplus> 1 = (_ l _) \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l Skip \\<and> et = \\<Up>id\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n  n \\<noteq> (_Entry_)\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_)\n  n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "note IH = \\<open>\\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "from \\<open>n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_)", "have \"n' = (_Exit_)\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_)\n\ngoal (1 subgoal):\n 1. n' = (_Exit_)", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_Exit_)\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "from IH[OF this \\<open>n \\<noteq> (_Entry_)\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id", "obtain l where [simp]:\"n = (_ l _)\" \"et = \\<Up>id\"\n    and label:\"labels c\\<^sub>2 l Skip\""], ["proof (prove)\nusing this:\n  \\<exists>l. n = (_ l _) \\<and> labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>n = (_ l _); et = \\<Up>id; labels c\\<^sub>2 l Skip\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>2 l Skip\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "hence \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) Skip\""], ["proof (prove)\nusing this:\n  n = (_ l _)\n  et = \\<Up>id\n  labels c\\<^sub>2 l Skip\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) Skip", "by(fastforce intro:Labels_CondFalse)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) Skip\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c\\<^sub>2 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        n \\<oplus> #:c\\<^sub>1 + 1 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            et = \\<Up>id\n 7. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 8. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "thus ?case"], ["proof (prove)\nusing this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) Skip\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l Skip \\<and> et = \\<Up>id", "by(fastforce simp:add.assoc id_def)"], ["proof (state)\nthis:\n  \\<exists>l.\n     n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _) \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l Skip \\<and> et = \\<Up>id\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "case WCFG_WhileFalseSkip"], ["proof (state)\nthis:\n  (_ 1 _) \\<noteq> (_Entry_)\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>b c'.\n       (_ 1 _) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_ 1 _) = (_ l _) \\<and>\n          labels (while (b) c') l Skip \\<and> \\<Up>id = \\<Up>id\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (_ 1 _) = (_ l _) \\<and>\n       labels (while (b_) c'_) l Skip \\<and> \\<Up>id = \\<Up>id", "by(fastforce intro:Labels_WhileExit)"], ["proof (state)\nthis:\n  \\<exists>l.\n     (_ 1 _) = (_ l _) \\<and>\n     labels (while (b_) c'_) l Skip \\<and> \\<Up>id = \\<Up>id\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c' l Skip \\<and> et = \\<Up>id\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n' \\<oplus> 2 = (_Exit_)\n  n \\<oplus> 2 \\<noteq> (_Entry_)\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l.\n                             n = (_ l _) \\<and>\n                             labels c' l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        n' \\<oplus> 2 = (_Exit_); n \\<oplus> 2 \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n \\<oplus> 2 = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and> et = \\<Up>id", "thus ?case"], ["proof (prove)\nusing this:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n' = (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       n = (_ l _) \\<and>\n                       labels c' l Skip \\<and> et = \\<Up>id\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n' \\<oplus> 2 = (_Exit_)\n  n \\<oplus> 2 \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       n \\<oplus> 2 = (_ l _) \\<and>\n       labels (while (b) c') l Skip \\<and> et = \\<Up>id", "by(cases n') auto"], ["proof (state)\nthis:\n  \\<exists>l.\n     n \\<oplus> 2 = (_ l _) \\<and>\n     labels (while (b) c') l Skip \\<and> et = \\<Up>id\n\ngoal (6 subgoals):\n 1. \\<And>prog.\n       (_Entry_) \\<noteq> (_Entry_) \\<Longrightarrow>\n       \\<exists>l.\n          (_Entry_) = (_ l _) \\<and>\n          labels prog l Skip \\<and>\n          (\\<lambda>s. False)\\<^sub>\\<surd> = \\<Up>id\n 2. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        (_Exit_) \\<noteq> (_Exit_); n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 3. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_) \\<Longrightarrow>\n        \\<exists>l.\n           n = (_ l _) \\<and> labels c\\<^sub>1 l Skip \\<and> et = \\<Up>id;\n        n \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_Exit_);\n        n \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            n = (_ l _) \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l Skip \\<and>\n                            et = \\<Up>id\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some false)\\<^sub>\\<surd> =\n                            \\<Up>id\n 6. \\<And>b c'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_Exit_);\n        (_ 0 _) \\<noteq> (_Entry_)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l.\n                            (_ 0 _) = (_ l _) \\<and>\n                            labels (while (b) c') l Skip \\<and>\n                            (\\<lambda>s.\n                                interpret b s = Some true)\\<^sub>\\<surd> =\n                            \\<Up>id", "qed simp_all"], ["", "lemma WCFG_edge_step:\n  \"\\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'. prog \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels prog l c \\<and> labels prog l' c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n     transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'.\n                         prog \\<turnstile> \\<langle>c,s,\n      l\\<rangle> \\<leadsto>\n                         \\<langle>c',s',l'\\<rangle> \\<and>\n                         labels prog l c \\<and> labels prog l' c'", "proof(induct prog \"(_ l _)\" et \"(_ l' _)\" arbitrary:l l' rule:WCFG_induct)"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "case (WCFG_LAss V e)"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s'\n  pred \\<Up>\\<lambda>s. s(V := interpret e s) s\n\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "from \\<open>transfer \\<Up>\\<lambda>s. s(V:=(interpret e s)) s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s'", "have [simp]:\"s' = s(V:=(interpret e s))\""], ["proof (prove)\nusing this:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s'\n\ngoal (1 subgoal):\n 1. s' = s(V := interpret e s)", "by(simp del:fun_upd_apply)"], ["proof (state)\nthis:\n  s' = s(V := interpret e s)\n\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "have \"labels (V:=e) 0 (V:=e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (V:=e) 0 (V:=e)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (V:=e) 0 (V:=e)\n\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "moreover"], ["proof (state)\nthis:\n  labels (V:=e) 0 (V:=e)\n\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "hence \"labels (V:=e) 1 Skip\""], ["proof (prove)\nusing this:\n  labels (V:=e) 0 (V:=e)\n\ngoal (1 subgoal):\n 1. labels (V:=e) 1 Skip", "by(fastforce intro:Labels_LAss)"], ["proof (state)\nthis:\n  labels (V:=e) 1 Skip\n\ngoal (12 subgoals):\n 1. \\<And>V e.\n       \\<lbrakk>transfer \\<Up>\\<lambda>s. s(V := interpret e s) s = s';\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            V:=e \\<turnstile> \\<langle>c,s,\n         0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',1\\<rangle> \\<and>\n                            labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 9. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>b c'.\n        \\<lbrakk>transfer\n                  (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                 s';\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  0\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',1\\<rangle> \\<and>\n                             labels (while (b) c') 0 c \\<and>\n                             labels (while (b) c') 1 c'a\nA total of 12 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  labels (V:=e) 0 (V:=e)\n  labels (V:=e) 1 Skip", "show ?case"], ["proof (prove)\nusing this:\n  labels (V:=e) 0 (V:=e)\n  labels (V:=e) 1 Skip\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       V:=e \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n       \\<langle>c',s',1\\<rangle> \\<and>\n       labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'", "apply(rule_tac x=\"V:=e\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>labels (V:=e) 0 (V:=e); labels (V:=e) 1 Skip\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'.\n                         V:=e \\<turnstile> \\<langle>V:=e,s,\n      0\\<rangle> \\<leadsto>\n                         \\<langle>c',s',1\\<rangle> \\<and>\n                         labels (V:=e) 0 (V:=e) \\<and> labels (V:=e) 1 c'", "apply(rule_tac x=\"Skip\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>labels (V:=e) 0 (V:=e); labels (V:=e) 1 Skip\\<rbrakk>\n    \\<Longrightarrow> V:=e \\<turnstile> \\<langle>V:=e,s,\n   0\\<rangle> \\<leadsto>\n                      \\<langle>Skip,s',1\\<rangle> \\<and>\n                      labels (V:=e) 0 (V:=e) \\<and> labels (V:=e) 1 Skip", "by(fastforce intro:StepLAss simp del:fun_upd_apply)"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     V:=e \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n     \\<langle>c',s',1\\<rangle> \\<and>\n     labels (V:=e) 0 c \\<and> labels (V:=e) 1 c'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _)\n  \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n         l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',l'\\<rangle> \\<and>\n                       labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'\n  (_ l' _) \\<noteq> (_Exit_)\n  transfer et s = s'\n  pred et s\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "note IH = \\<open>\\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'. c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n         l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',l'\\<rangle> \\<and>\n                       labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "from IH[OF \\<open>transfer et s = s'\\<close> \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>c c'.\n     c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'", "obtain c c' where \"c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\"\n    and \"labels c\\<^sub>1 l c\" and \"labels c\\<^sub>1 l' c'\""], ["proof (prove)\nusing this:\n  \\<exists>c c'.\n     c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'\n\ngoal (1 subgoal):\n 1. (\\<And>c c'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n                 \\<langle>c',s',l'\\<rangle>;\n         labels c\\<^sub>1 l c; labels c\\<^sub>1 l' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels c\\<^sub>1 l c\n  labels c\\<^sub>1 l' c'\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "from \\<open>c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>", "have \"c\\<^sub>1;;c\\<^sub>2 \\<turnstile> \\<langle>c;;c\\<^sub>2,s,l\\<rangle> \\<leadsto> \\<langle>c';;c\\<^sub>2,s',l'\\<rangle>\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    c\\<^sub>2 \\<turnstile> \\<langle>c;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n    \\<langle>c';; c\\<^sub>2,s',l'\\<rangle>", "by(rule StepRecSeq1)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>c;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c';; c\\<^sub>2,s',l'\\<rangle>\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "moreover"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>c;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c';; c\\<^sub>2,s',l'\\<rangle>\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "from \\<open>labels c\\<^sub>1 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l c", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l (c;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l c\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)", "by(fastforce intro:Labels_Seq1)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "moreover"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "from \\<open>labels c\\<^sub>1 l' c'\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l' c'", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l' (c';;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l' c'\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l' (c';; c\\<^sub>2)", "by(fastforce intro:Labels_Seq1)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l' (c';; c\\<^sub>2)\n\ngoal (11 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_ l' _);\n        \\<lbrakk>transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'.\n                             c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n               l\\<rangle> \\<leadsto>\n                             \\<langle>c',s',l'\\<rangle> \\<and>\n                             labels c\\<^sub>1 l c \\<and>\n                             labels c\\<^sub>1 l' c';\n        (_ l' _) \\<noteq> (_Exit_); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 8. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 10. \\<And>c' n et n' b l l'.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<And>l l'.\n            \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n             pred et s\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c c'a.\n                                 c' \\<turnstile> \\<langle>c,s,\n            l\\<rangle> \\<leadsto>\n                                 \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                 labels c' l c \\<and> labels c' l' c'a;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n         n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',l'\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') l' c'a\nA total of 11 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>c;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c';; c\\<^sub>2,s',l'\\<rangle>\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  labels (c\\<^sub>1;; c\\<^sub>2) l' (c';; c\\<^sub>2)", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>c;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c';; c\\<^sub>2,s',l'\\<rangle>\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  labels (c\\<^sub>1;; c\\<^sub>2) l' (c';; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l' c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "case (WCFG_SeqConnect c\\<^sub>1 et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n  (_ l _) \\<noteq> (_Entry_)\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "from \\<open>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)", "have \"labels c\\<^sub>1 l Skip\" and [simp]:\"et = \\<Up>id\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. labels c\\<^sub>1 l Skip &&& et = \\<Up>id", "by(auto dest:WCFG_edge_Exit_Skip)"], ["proof (state)\nthis:\n  labels c\\<^sub>1 l Skip\n  et = \\<Up>id\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "from \\<open>transfer et s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer et s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer et s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "have \"labels c\\<^sub>2 0 c\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels c\\<^sub>2 0 c\\<^sub>2", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels c\\<^sub>2 0 c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "hence \"labels (c\\<^sub>1;;c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 0 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2", "by(fastforce dest:Labels_Seq2)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>1 l Skip\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l Skip", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l (Skip;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l Skip\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)", "by(fastforce intro:Labels_Seq1)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>1 l Skip\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l Skip", "have \"l < #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l Skip\n\ngoal (1 subgoal):\n 1. l < #:c\\<^sub>1", "by(rule label_less_num_inner_nodes)"], ["proof (state)\nthis:\n  l < #:c\\<^sub>1\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  l < #:c\\<^sub>1", "have \"c\\<^sub>1;;c\\<^sub>2 \\<turnstile> \\<langle>Skip;;c\\<^sub>2,s,l\\<rangle> \\<leadsto> \\<langle>c\\<^sub>2,s,#:c\\<^sub>1\\<rangle>\""], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  l < #:c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;;\n    c\\<^sub>2 \\<turnstile> \\<langle>Skip;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n    \\<langle>c\\<^sub>2,s,#:c\\<^sub>1\\<rangle>", "by -(rule StepSeq)"], ["proof (state)\nthis:\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>Skip;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1\\<rangle>\n\ngoal (10 subgoals):\n 1. \\<And>c\\<^sub>1 et c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        (_ l _) \\<noteq> (_Entry_); (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _);\n        transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 7. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 9. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 10. \\<And>c' n et b l.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c c'a.\n                             while (b) c' \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                             \\<langle>c'a,s',0\\<rangle> \\<and>\n                             labels (while (b) c') l c \\<and>\n                             labels (while (b) c') 0 c'a", "with \\<open>labels (c\\<^sub>1;;c\\<^sub>2) l (Skip;;c\\<^sub>2)\\<close>\n    \\<open>labels (c\\<^sub>1;;c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\\<close> \\<open>(_0_) \\<oplus> #:c\\<^sub>1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>Skip;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (Skip;; c\\<^sub>2)\n  labels (c\\<^sub>1;; c\\<^sub>2) #:c\\<^sub>1 c\\<^sub>2\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 = (_ l' _)\n  c\\<^sub>1;;\n  c\\<^sub>2 \\<turnstile> \\<langle>Skip;; c\\<^sub>2,s,l\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l' c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>2 ?l c \\<and> labels c\\<^sub>2 ?l' c'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n  n' \\<oplus> #:c\\<^sub>1 = (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "note IH = \\<open>\\<And>l l'. \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'. c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels c\\<^sub>2 l c \\<and> labels c\\<^sub>2 l' c'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>2 ?l c \\<and> labels c\\<^sub>2 ?l' c'\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n \\<oplus> #:c\\<^sub>1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)", "obtain lx where \"n = (_ lx _)\" \n    and [simp]:\"l = lx + #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>n = (_ lx _); l = lx + #:c\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ lx _)\n  l = lx + #:c\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n' \\<oplus> #:c\\<^sub>1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l' _)", "obtain lx' where \"n' = (_ lx' _)\" \n    and [simp]:\"l' = lx' + #:c\\<^sub>1\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 = (_ l' _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx'.\n        \\<lbrakk>n' = (_ lx' _); l' = lx' + #:c\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ lx' _)\n  l' = lx' + #:c\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from IH[OF \\<open>n = (_ lx _)\\<close> \\<open>n' = (_ lx' _)\\<close> \\<open>transfer et s = s'\\<close> \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>c c'.\n     c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>2 lx c \\<and> labels c\\<^sub>2 lx' c'", "obtain c c' where \"c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\"\n    and \"labels c\\<^sub>2 lx c\" and \"labels c\\<^sub>2 lx' c'\""], ["proof (prove)\nusing this:\n  \\<exists>c c'.\n     c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>2 lx c \\<and> labels c\\<^sub>2 lx' c'\n\ngoal (1 subgoal):\n 1. (\\<And>c c'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n                 \\<langle>c',s',lx'\\<rangle>;\n         labels c\\<^sub>2 lx c; labels c\\<^sub>2 lx' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n  labels c\\<^sub>2 lx c\n  labels c\\<^sub>2 lx' c'\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>", "have \"c\\<^sub>1;;c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n\ngoal (1 subgoal):\n 1. c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n    \\<langle>c',s',l'\\<rangle>", "by(fastforce intro:StepRecSeq2)"], ["proof (state)\nthis:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>2 lx c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 lx c", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 lx c\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l c", "by(fastforce intro:Labels_Seq2)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l c\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l c\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>2 lx' c'\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 lx' c'", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l' c'\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 lx' c'\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l' c'", "by(fastforce intro:Labels_Seq2)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n\ngoal (9 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            c\\<^sub>1;;\n                            c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n              l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n                            labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 6. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 8. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 9. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (c\\<^sub>1;; c\\<^sub>2) l c\n  labels (c\\<^sub>1;; c\\<^sub>2) l' c'", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (c\\<^sub>1;; c\\<^sub>2) l c\n  labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n       labels (c\\<^sub>1;; c\\<^sub>2) l' c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     c\\<^sub>1;; c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l c \\<and>\n     labels (c\\<^sub>1;; c\\<^sub>2) l' c'\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_CondTrue b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  (_ 0 _) \\<oplus> 1 = (_ l' _)\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>(_0_) \\<oplus> 1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  (_ 0 _) \\<oplus> 1 = (_ l' _)", "have [simp]:\"l' = 1\""], ["proof (prove)\nusing this:\n  (_ 0 _) \\<oplus> 1 = (_ l' _)\n\ngoal (1 subgoal):\n 1. l' = 1", "by simp"], ["proof (state)\nthis:\n  l' = 1\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n     (if (b) c\\<^sub>1 else c\\<^sub>2)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels c\\<^sub>1 0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels c\\<^sub>1 0 c\\<^sub>1", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels c\\<^sub>1 0 c\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 0 c\\<^sub>1\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1", "by(fastforce dest:Labels_CondTrue)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s", "have \"interpret b s = Some true\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (1 subgoal):\n 1. interpret b s = Some true", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some true\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,0\\<rangle> \\<leadsto> \\<langle>c\\<^sub>1,s,1\\<rangle>\""], ["proof (prove)\nusing this:\n  interpret b s = Some true\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                                 0\\<rangle> \\<leadsto>\n    \\<langle>c\\<^sub>1,s,1\\<rangle>", "by(rule StepCondTrue)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>1,s,1\\<rangle>\n\ngoal (8 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 5. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 7. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 8. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "with  \\<open>labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\\<close>\n    \\<open>labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>1,s,1\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 1 c\\<^sub>1\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>1,s,1\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 c \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 c \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_CondFalse b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>(_0_) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)", "have [simp]:\"l' = #:c\\<^sub>1 + 1\""], ["proof (prove)\nusing this:\n  (_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\n\ngoal (1 subgoal):\n 1. l' = #:c\\<^sub>1 + 1", "by simp"], ["proof (state)\nthis:\n  l' = #:c\\<^sub>1 + 1\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n     (if (b) c\\<^sub>1 else c\\<^sub>2)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels c\\<^sub>2 0 c\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels c\\<^sub>2 0 c\\<^sub>2", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels c\\<^sub>2 0 c\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 0 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2", "by(fastforce dest:Labels_CondFalse)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s", "have \"interpret b s = Some false\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (1 subgoal):\n 1. interpret b s = Some false", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some false\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,0\\<rangle> \\<leadsto> \\<langle>c\\<^sub>2,s,#:c\\<^sub>1 + 1\\<rangle>\""], ["proof (prove)\nusing this:\n  interpret b s = Some false\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                                 0\\<rangle> \\<leadsto>\n    \\<langle>c\\<^sub>2,s,#:c\\<^sub>1 + 1\\<rangle>", "by(rule StepCondFalse)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1 + 1\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>b c\\<^sub>1 c\\<^sub>2 l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   0\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 4. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 6. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 7. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "with \\<open>labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\\<close>\n    \\<open>labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1 + 1\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (#:c\\<^sub>1 + 1) c\\<^sub>2\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>if (b) c\\<^sub>1 else c\\<^sub>2,s,\n                               0\\<rangle> \\<leadsto>\n  \\<langle>c\\<^sub>2,s,#:c\\<^sub>1 + 1\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 c \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 c \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>1 ?l c \\<and> labels c\\<^sub>1 ?l' c'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 1 = (_ l _)\n  n' \\<oplus> 1 = (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "note IH = \\<open>\\<And>l l'. \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'. c\\<^sub>1 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels c\\<^sub>1 l c \\<and> labels c\\<^sub>1 l' c'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>1 ?l c \\<and> labels c\\<^sub>1 ?l' c'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n \\<oplus> 1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 1 = (_ l _)", "obtain lx where \"n = (_ lx _)\" and [simp]:\"l = lx + 1\""], ["proof (prove)\nusing this:\n  n \\<oplus> 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>n = (_ lx _); l = lx + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ lx _)\n  l = lx + 1\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n' \\<oplus> 1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 1 = (_ l' _)", "obtain lx' where \"n' = (_ lx' _)\" and [simp]:\"l' = lx' + 1\""], ["proof (prove)\nusing this:\n  n' \\<oplus> 1 = (_ l' _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx'.\n        \\<lbrakk>n' = (_ lx' _); l' = lx' + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ lx' _)\n  l' = lx' + 1\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from IH[OF \\<open>n = (_ lx _)\\<close> \\<open>n' = (_ lx' _)\\<close> \\<open>transfer et s = s'\\<close> \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>c c'.\n     c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>1 lx c \\<and> labels c\\<^sub>1 lx' c'", "obtain c c'  where \"c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\"\n    and \"labels c\\<^sub>1 lx c\" and \"labels c\\<^sub>1 lx' c'\""], ["proof (prove)\nusing this:\n  \\<exists>c c'.\n     c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>1 lx c \\<and> labels c\\<^sub>1 lx' c'\n\ngoal (1 subgoal):\n 1. (\\<And>c c'.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n                 \\<langle>c',s',lx'\\<rangle>;\n         labels c\\<^sub>1 lx c; labels c\\<^sub>1 lx' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n  labels c\\<^sub>1 lx c\n  labels c\\<^sub>1 lx' c'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\""], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n    \\<langle>c',s',l'\\<rangle>", "by(fastforce intro:StepRecCond1)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>1 lx c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 lx c", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 lx c\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c", "by(fastforce intro:Labels_CondTrue)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>1 lx' c'\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 lx' c'", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 lx' c'\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by(fastforce intro:Labels_CondTrue)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2 l l'.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>1 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>1 l c \\<and>\n                                labels c\\<^sub>1 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> 1 = (_ l _);\n        n' \\<oplus> 1 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 3. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 5. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 6. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "show ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>2 ?l c \\<and> labels c\\<^sub>2 ?l' c'\n  n \\<noteq> (_Entry_)\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "note IH = \\<open>\\<And>l l'. \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'. c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels c\\<^sub>2 l c \\<and> labels c\\<^sub>2 l' c'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n         ?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels c\\<^sub>2 ?l c \\<and> labels c\\<^sub>2 ?l' c'\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)", "obtain lx where \"n = (_ lx _)\" \n    and [simp]:\"l = lx + #:c\\<^sub>1 + 1\""], ["proof (prove)\nusing this:\n  n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>n = (_ lx _); l = lx + #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ lx _)\n  l = lx + #:c\\<^sub>1 + 1\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)", "obtain lx' where \"n' = (_ lx' _)\" \n    and [simp]:\"l' = lx' + #:c\\<^sub>1 + 1\""], ["proof (prove)\nusing this:\n  n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx'.\n        \\<lbrakk>n' = (_ lx' _); l' = lx' + #:c\\<^sub>1 + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ lx' _)\n  l' = lx' + #:c\\<^sub>1 + 1\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from IH[OF \\<open>n = (_ lx _)\\<close> \\<open>n' = (_ lx' _)\\<close> \\<open>transfer et s = s'\\<close> \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>c c'.\n     c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>2 lx c \\<and> labels c\\<^sub>2 lx' c'", "obtain c c' where \"c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\"\n    and \"labels c\\<^sub>2 lx c\" and \"labels c\\<^sub>2 lx' c'\""], ["proof (prove)\nusing this:\n  \\<exists>c c'.\n     c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels c\\<^sub>2 lx c \\<and> labels c\\<^sub>2 lx' c'\n\ngoal (1 subgoal):\n 1. (\\<And>c c'.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n                 \\<langle>c',s',lx'\\<rangle>;\n         labels c\\<^sub>2 lx c; labels c\\<^sub>2 lx' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n  labels c\\<^sub>2 lx c\n  labels c\\<^sub>2 lx' c'\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>", "have \"if (b) c\\<^sub>1 else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle>\""], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n\ngoal (1 subgoal):\n 1. if (b) c\\<^sub>1\n    else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n    \\<langle>c',s',l'\\<rangle>", "by(fastforce intro:StepRecCond2)"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>2 lx c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 lx c", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 lx c\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c", "by(fastforce intro:Labels_CondFalse)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels c\\<^sub>2 lx' c'\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 lx' c'", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 lx' c'\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by(fastforce intro:Labels_CondFalse)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1 l l'.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'.\n                                c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                  l\\<rangle> \\<leadsto>\n                                \\<langle>c',s',l'\\<rangle> \\<and>\n                                labels c\\<^sub>2 l c \\<and>\n                                labels c\\<^sub>2 l' c';\n        n \\<noteq> (_Entry_); n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        n' \\<oplus> #:c\\<^sub>1 + 1 = (_ l' _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'.\n                            if (b) c\\<^sub>1\n                            else c\\<^sub>2 \\<turnstile> \\<langle>c,s,\n                   l\\<rangle> \\<leadsto>\n                            \\<langle>c',s',l'\\<rangle> \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l\n                             c \\<and>\n                            labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n 2. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 4. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 5. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "show ?case"], ["proof (prove)\nusing this:\n  if (b) c\\<^sub>1\n  else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n  \\<langle>c',s',l'\\<rangle>\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       if (b) c\\<^sub>1\n       else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c \\<and>\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     if (b) c\\<^sub>1\n     else c\\<^sub>2 \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c \\<and>\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) l' c'\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_WhileTrue b cx)"], ["proof (state)\nthis:\n  (_ 0 _) \\<oplus> 2 = (_ l' _)\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>(_0_) \\<oplus> 2 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  (_ 0 _) \\<oplus> 2 = (_ l' _)", "have [simp]:\"l' = 2\""], ["proof (prove)\nusing this:\n  (_ 0 _) \\<oplus> 2 = (_ l' _)\n\ngoal (1 subgoal):\n 1. l' = 2", "by simp"], ["proof (state)\nthis:\n  l' = 2\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (while (b) cx) 0 (while (b) cx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) cx) 0 (while (b) cx)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (while (b) cx) 0 (while (b) cx)\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels cx 0 cx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels cx 0 cx", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels cx 0 cx\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"labels (while (b) cx) 2 (cx;;while (b) cx)\""], ["proof (prove)\nusing this:\n  labels cx 0 cx\n\ngoal (1 subgoal):\n 1. labels (while (b) cx) 2 (cx;; while (b) cx)", "by(fastforce dest:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) cx) 2 (cx;; while (b) cx)\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s", "have \"interpret b s = Some true\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (1 subgoal):\n 1. interpret b s = Some true", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some true\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto> \\<langle>cx;;while (b) cx,s,2\\<rangle>\""], ["proof (prove)\nusing this:\n  interpret b s = Some true\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n    \\<langle>cx;; while (b) cx,s,2\\<rangle>", "by(rule StepWhileTrue)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>cx;; while (b) cx,s,2\\<rangle>\n\ngoal (4 subgoals):\n 1. \\<And>b c' l'.\n       \\<lbrakk>(_ 0 _) \\<oplus> 2 = (_ l' _);\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s =\n        s';\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 3. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 4. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "with \\<open>labels (while (b) cx) 0 (while (b) cx)\\<close>\n    \\<open>labels (while (b) cx) 2 (cx;;while (b) cx)\\<close>"], ["proof (chain)\npicking this:\n  labels (while (b) cx) 0 (while (b) cx)\n  labels (while (b) cx) 2 (cx;; while (b) cx)\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>cx;; while (b) cx,s,2\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  labels (while (b) cx) 0 (while (b) cx)\n  labels (while (b) cx) 2 (cx;; while (b) cx)\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>cx;; while (b) cx,s,2\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       while (b) cx \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (while (b) cx) 0 c \\<and> labels (while (b) cx) l' c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     while (b) cx \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (while (b) cx) 0 c \\<and> labels (while (b) cx) l' c'\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_WhileFalse b cx)"], ["proof (state)\nthis:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (while (b) cx) 0 (while (b) cx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) cx) 0 (while (b) cx)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (while (b) cx) 0 (while (b) cx)\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (while (b) cx) 1 Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) cx) 1 Skip", "by(fastforce intro:Labels_WhileExit)"], ["proof (state)\nthis:\n  labels (while (b) cx) 1 Skip\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s", "have \"interpret b s = Some false\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (1 subgoal):\n 1. interpret b s = Some false", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some false\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto> \\<langle>Skip,s,1\\<rangle>\""], ["proof (prove)\nusing this:\n  interpret b s = Some false\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n    \\<langle>Skip,s,1\\<rangle>", "by(rule StepWhileFalse)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>Skip,s,1\\<rangle>\n\ngoal (3 subgoals):\n 1. \\<And>b c'.\n       \\<lbrakk>transfer\n                 (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s =\n                s';\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 0\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',1\\<rangle> \\<and>\n                            labels (while (b) c') 0 c \\<and>\n                            labels (while (b) c') 1 c'a\n 2. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 3. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "with \\<open>labels (while (b) cx) 0 (while (b) cx)\\<close> \\<open>labels (while (b) cx) 1 Skip\\<close>"], ["proof (chain)\npicking this:\n  labels (while (b) cx) 0 (while (b) cx)\n  labels (while (b) cx) 1 Skip\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>Skip,s,1\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  labels (while (b) cx) 0 (while (b) cx)\n  labels (while (b) cx) 1 Skip\n  while (b) cx \\<turnstile> \\<langle>while (b) cx,s,0\\<rangle> \\<leadsto>\n  \\<langle>Skip,s,1\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       while (b) cx \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n       \\<langle>c',s',1\\<rangle> \\<and>\n       labels (while (b) cx) 0 c \\<and> labels (while (b) cx) 1 c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     while (b) cx \\<turnstile> \\<langle>c,s,0\\<rangle> \\<leadsto>\n     \\<langle>c',s',1\\<rangle> \\<and>\n     labels (while (b) cx) 0 c \\<and> labels (while (b) cx) 1 c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_WhileBody cx n et n' b)"], ["proof (state)\nthis:\n  cx \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       cx \\<turnstile> \\<langle>c,s,?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels cx ?l c \\<and> labels cx ?l' c'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  n \\<oplus> 2 = (_ l _)\n  n' \\<oplus> 2 = (_ l' _)\n  transfer et s = s'\n  pred et s\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "note IH = \\<open>\\<And>l l'. \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c c'. cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto> \\<langle>c',s',l'\\<rangle> \\<and> labels cx l c \\<and> labels cx l' c'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n = (_ ?l _); n' = (_ ?l' _); transfer et s = s';\n   pred et s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c c'.\n                       cx \\<turnstile> \\<langle>c,s,?l\\<rangle> \\<leadsto>\n                       \\<langle>c',s',?l'\\<rangle> \\<and>\n                       labels cx ?l c \\<and> labels cx ?l' c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n \\<oplus> 2 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)", "obtain lx where \"n = (_ lx _)\" and [simp]:\"l = lx + 2\""], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>n = (_ lx _); l = lx + 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ lx _)\n  l = lx + 2\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n' \\<oplus> 2 = (_ l' _)\\<close>"], ["proof (chain)\npicking this:\n  n' \\<oplus> 2 = (_ l' _)", "obtain lx' where \"n' = (_ lx' _)\" \n    and [simp]:\"l' = lx' + 2\""], ["proof (prove)\nusing this:\n  n' \\<oplus> 2 = (_ l' _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx'.\n        \\<lbrakk>n' = (_ lx' _); l' = lx' + 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n') auto"], ["proof (state)\nthis:\n  n' = (_ lx' _)\n  l' = lx' + 2\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from IH[OF \\<open>n = (_ lx _)\\<close> \\<open>n' = (_ lx' _)\\<close> \\<open>transfer et s = s'\\<close> \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>c c'.\n     cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels cx lx c \\<and> labels cx lx' c'", "obtain c c' where \"cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto> \\<langle>c',s',lx'\\<rangle>\"\n    and \"labels cx lx c\" and \"labels cx lx' c'\""], ["proof (prove)\nusing this:\n  \\<exists>c c'.\n     cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n     \\<langle>c',s',lx'\\<rangle> \\<and>\n     labels cx lx c \\<and> labels cx lx' c'\n\ngoal (1 subgoal):\n 1. (\\<And>c c'.\n        \\<lbrakk>cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n                 \\<langle>c',s',lx'\\<rangle>;\n         labels cx lx c; labels cx lx' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n  labels cx lx c\n  labels cx lx' c'\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"while (b) cx \\<turnstile> \\<langle>c;;while (b) cx,s,l\\<rangle> \\<leadsto> \\<langle>c';;while (b) cx,s',l'\\<rangle>\""], ["proof (prove)\nusing this:\n  cx \\<turnstile> \\<langle>c,s,lx\\<rangle> \\<leadsto>\n  \\<langle>c',s',lx'\\<rangle>\n  labels cx lx c\n  labels cx lx' c'\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> \\<langle>c;; while (b) cx,s,\n                               l\\<rangle> \\<leadsto>\n    \\<langle>c';; while (b) cx,s',l'\\<rangle>", "by(fastforce intro:StepRecWhile)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>c;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>c';; while (b) cx,s',l'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>c;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>c';; while (b) cx,s',l'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels cx lx c\\<close>"], ["proof (chain)\npicking this:\n  labels cx lx c", "have \"labels (while (b) cx) l (c;;while (b) cx)\""], ["proof (prove)\nusing this:\n  labels cx lx c\n\ngoal (1 subgoal):\n 1. labels (while (b) cx) l (c;; while (b) cx)", "by(fastforce intro:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) cx) l (c;; while (b) cx)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  labels (while (b) cx) l (c;; while (b) cx)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels cx lx' c'\\<close>"], ["proof (chain)\npicking this:\n  labels cx lx' c'", "have \"labels (while (b) cx) l' (c';;while (b) cx)\""], ["proof (prove)\nusing this:\n  labels cx lx' c'\n\ngoal (1 subgoal):\n 1. labels (while (b) cx) l' (c';; while (b) cx)", "by(fastforce intro:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) cx) l' (c';; while (b) cx)\n\ngoal (2 subgoals):\n 1. \\<And>c' n et n' b l l'.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<And>l l'.\n           \\<lbrakk>n = (_ l _); n' = (_ l' _); transfer et s = s';\n            pred et s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c c'a.\n                                c' \\<turnstile> \\<langle>c,s,\n           l\\<rangle> \\<leadsto>\n                                \\<langle>c'a,s',l'\\<rangle> \\<and>\n                                labels c' l c \\<and> labels c' l' c'a;\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_); n \\<oplus> 2 = (_ l _);\n        n' \\<oplus> 2 = (_ l' _); transfer et s = s'; pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',l'\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') l' c'a\n 2. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  while (b) cx \\<turnstile> \\<langle>c;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>c';; while (b) cx,s',l'\\<rangle>\n  labels (while (b) cx) l (c;; while (b) cx)\n  labels (while (b) cx) l' (c';; while (b) cx)", "show ?case"], ["proof (prove)\nusing this:\n  while (b) cx \\<turnstile> \\<langle>c;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>c';; while (b) cx,s',l'\\<rangle>\n  labels (while (b) cx) l (c;; while (b) cx)\n  labels (while (b) cx) l' (c';; while (b) cx)\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       while (b) cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',l'\\<rangle> \\<and>\n       labels (while (b) cx) l c \\<and> labels (while (b) cx) l' c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     while (b) cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',l'\\<rangle> \\<and>\n     labels (while (b) cx) l c \\<and> labels (while (b) cx) l' c'\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "case (WCFG_WhileBodyExit cx n et b)"], ["proof (state)\nthis:\n  cx \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  n \\<noteq> (_Entry_)\n  n \\<oplus> 2 = (_ l _)\n  transfer et s = s'\n  pred et s\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>n \\<oplus> 2 = (_ l _)\\<close>"], ["proof (chain)\npicking this:\n  n \\<oplus> 2 = (_ l _)", "obtain lx where [simp]:\"n = (_ lx _)\" and [simp]:\"l = lx + 2\""], ["proof (prove)\nusing this:\n  n \\<oplus> 2 = (_ l _)\n\ngoal (1 subgoal):\n 1. (\\<And>lx.\n        \\<lbrakk>n = (_ lx _); l = lx + 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n) auto"], ["proof (state)\nthis:\n  n = (_ lx _)\n  l = lx + 2\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>cx \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  cx \\<turnstile> n -et\\<rightarrow> (_Exit_)", "have \"labels cx lx Skip\" and [simp]:\"et = \\<Up>id\""], ["proof (prove)\nusing this:\n  cx \\<turnstile> n -et\\<rightarrow> (_Exit_)\n\ngoal (1 subgoal):\n 1. labels cx lx Skip &&& et = \\<Up>id", "by(auto dest:WCFG_edge_Exit_Skip)"], ["proof (state)\nthis:\n  labels cx lx Skip\n  et = \\<Up>id\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>transfer et s = s'\\<close>"], ["proof (chain)\npicking this:\n  transfer et s = s'", "have [simp]:\"s' = s\""], ["proof (prove)\nusing this:\n  transfer et s = s'\n\ngoal (1 subgoal):\n 1. s' = s", "by simp"], ["proof (state)\nthis:\n  s' = s\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "from \\<open>labels cx lx Skip\\<close>"], ["proof (chain)\npicking this:\n  labels cx lx Skip", "have \"labels (while (b) cx) l (Skip;;while (b) cx)\""], ["proof (prove)\nusing this:\n  labels cx lx Skip\n\ngoal (1 subgoal):\n 1. labels (while (b) cx) l (Skip;; while (b) cx)", "by(fastforce intro:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) cx) l (Skip;; while (b) cx)\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "hence \"while (b) cx \\<turnstile> \\<langle>Skip;;while (b) cx,s,l\\<rangle> \\<leadsto> \\<langle>while (b) cx,s,0\\<rangle>\""], ["proof (prove)\nusing this:\n  labels (while (b) cx) l (Skip;; while (b) cx)\n\ngoal (1 subgoal):\n 1. while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                               l\\<rangle> \\<leadsto>\n    \\<langle>while (b) cx,s,0\\<rangle>", "by(rule StepSeqWhile)"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>while (b) cx,s,0\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "moreover"], ["proof (state)\nthis:\n  while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>while (b) cx,s,0\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "have \"labels (while (b) cx) 0 (while (b) cx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) cx) 0 (while (b) cx)", "by(fastforce intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (while (b) cx) 0 (while (b) cx)\n\ngoal (1 subgoal):\n 1. \\<And>c' n et b l.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        n \\<noteq> (_Entry_); n \\<oplus> 2 = (_ l _); transfer et s = s';\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c c'a.\n                            while (b) c' \\<turnstile> \\<langle>c,s,\n                 l\\<rangle> \\<leadsto>\n                            \\<langle>c'a,s',0\\<rangle> \\<and>\n                            labels (while (b) c') l c \\<and>\n                            labels (while (b) c') 0 c'a", "ultimately"], ["proof (chain)\npicking this:\n  while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>while (b) cx,s,0\\<rangle>\n  labels (while (b) cx) 0 (while (b) cx)", "show ?case"], ["proof (prove)\nusing this:\n  while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>while (b) cx,s,0\\<rangle>\n  labels (while (b) cx) 0 (while (b) cx)\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       while (b) cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',0\\<rangle> \\<and>\n       labels (while (b) cx) l c \\<and> labels (while (b) cx) 0 c'", "using \\<open>labels (while (b) cx) l (Skip;;while (b) cx)\\<close>"], ["proof (prove)\nusing this:\n  while (b) cx \\<turnstile> \\<langle>Skip;; while (b) cx,s,\n                             l\\<rangle> \\<leadsto>\n  \\<langle>while (b) cx,s,0\\<rangle>\n  labels (while (b) cx) 0 (while (b) cx)\n  labels (while (b) cx) l (Skip;; while (b) cx)\n\ngoal (1 subgoal):\n 1. \\<exists>c c'.\n       while (b) cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n       \\<langle>c',s',0\\<rangle> \\<and>\n       labels (while (b) cx) l c \\<and> labels (while (b) cx) 0 c'", "by simp blast"], ["proof (state)\nthis:\n  \\<exists>c c'.\n     while (b) cx \\<turnstile> \\<langle>c,s,l\\<rangle> \\<leadsto>\n     \\<langle>c',s',0\\<rangle> \\<and>\n     labels (while (b) cx) l c \\<and> labels (while (b) cx) 0 c'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}