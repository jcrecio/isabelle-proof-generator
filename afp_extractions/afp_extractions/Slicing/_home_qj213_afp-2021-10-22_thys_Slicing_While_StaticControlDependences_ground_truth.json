{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/While/StaticControlDependences.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma WhilePostdomination_aux:\n  \"Postdomination sourcenode targetnode kind (valid_edge prog) Entry Exit\"", "lemma WhileStrongPostdomination_aux:\n  \"StrongPostdomination sourcenode targetnode kind (valid_edge prog) Entry Exit\"", "lemma WStandardControlDependence_aux:\n  \"StandardControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n  Entry (Defs prog) (Uses prog) id Exit\"", "lemma Fundamental_property_scd_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (WStandardControlDependence.PDG_BS_s prog) reds (labels_nodes prog)\"", "lemma WWeakControlDependence_aux:\n  \"WeakControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n  Entry (Defs prog) (Uses prog) id Exit\"", "lemma Fundamental_property_wcd_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (WWeakControlDependence.PDG_BS_w prog) reds (labels_nodes prog)\"", "lemma Fundamental_property_wod_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (While_CFG_wf.wod_backward_slice prog) reds (labels_nodes prog)\""], "translations": [["", "lemma WhilePostdomination_aux:\n  \"Postdomination sourcenode targetnode kind (valid_edge prog) Entry Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Postdomination sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (_Exit_)", "proof(unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog (_Entry_) as n\n 2. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog (_Entry_) as n\n 2. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "assume \"CFG.valid_node sourcenode targetnode (valid_edge prog) n\""], ["proof (state)\nthis:\n  While_CFG.valid_node prog n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog (_Entry_) as n\n 2. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "hence \"valid_node prog n\""], ["proof (prove)\nusing this:\n  While_CFG.valid_node prog n\n\ngoal (1 subgoal):\n 1. valid_node prog n", "by(simp add:valid_node_def While_CFG.valid_node_def)"], ["proof (state)\nthis:\n  valid_node prog n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog (_Entry_) as n\n 2. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "thus \"\\<exists>as. prog \\<turnstile> (_Entry_) -as\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<exists>as. While_CFG.path prog (_Entry_) as n", "by(rule valid_node_Entry_path)"], ["proof (state)\nthis:\n  \\<exists>as. While_CFG.path prog (_Entry_) as n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "assume \"CFG.valid_node sourcenode targetnode (valid_edge prog) n\""], ["proof (state)\nthis:\n  While_CFG.valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "hence \"valid_node prog n\""], ["proof (prove)\nusing this:\n  While_CFG.valid_node prog n\n\ngoal (1 subgoal):\n 1. valid_node prog n", "by(simp add:valid_node_def While_CFG.valid_node_def)"], ["proof (state)\nthis:\n  valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       \\<exists>as. While_CFG.path prog n as (_Exit_)", "thus \"\\<exists>as. prog \\<turnstile> n -as\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<exists>as. While_CFG.path prog n as (_Exit_)", "by(rule valid_node_Exit_path)"], ["proof (state)\nthis:\n  \\<exists>as. While_CFG.path prog n as (_Exit_)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation WhilePostdomination: \n  Postdomination sourcenode targetnode kind \"valid_edge prog\" Entry Exit"], ["proof (prove)\ngoal (1 subgoal):\n 1. Postdomination sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (_Exit_)", "by(rule WhilePostdomination_aux)"], ["", "lemma WhileStrongPostdomination_aux:\n  \"StrongPostdomination sourcenode targetnode kind (valid_edge prog) Entry Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongPostdomination sourcenode targetnode kind (valid_edge prog)\n     (_Entry_) (_Exit_)", "proof(unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       finite\n        {n'.\n         \\<exists>a'.\n            valid_edge prog a' \\<and>\n            sourcenode a' = n \\<and> targetnode a' = n'}", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       finite\n        {n'.\n         \\<exists>a'.\n            valid_edge prog a' \\<and>\n            sourcenode a' = n \\<and> targetnode a' = n'}", "assume \"CFG.valid_node sourcenode targetnode (valid_edge prog) n\""], ["proof (state)\nthis:\n  While_CFG.valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       finite\n        {n'.\n         \\<exists>a'.\n            valid_edge prog a' \\<and>\n            sourcenode a' = n \\<and> targetnode a' = n'}", "hence \"valid_node prog n\""], ["proof (prove)\nusing this:\n  While_CFG.valid_node prog n\n\ngoal (1 subgoal):\n 1. valid_node prog n", "by(simp add:valid_node_def While_CFG.valid_node_def)"], ["proof (state)\nthis:\n  valid_node prog n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       While_CFG.valid_node prog n \\<Longrightarrow>\n       finite\n        {n'.\n         \\<exists>a'.\n            valid_edge prog a' \\<and>\n            sourcenode a' = n \\<and> targetnode a' = n'}", "show \"finite {n'. \\<exists>a'. valid_edge prog a' \\<and> sourcenode a' = n \\<and>\n                         targetnode a' = n'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {n'.\n      \\<exists>a'.\n         valid_edge prog a' \\<and>\n         sourcenode a' = n \\<and> targetnode a' = n'}", "by(rule finite_successors)"], ["proof (state)\nthis:\n  finite\n   {n'.\n    \\<exists>a'.\n       valid_edge prog a' \\<and>\n       sourcenode a' = n \\<and> targetnode a' = n'}\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation WhileStrongPostdomination: \n  StrongPostdomination sourcenode targetnode kind \"valid_edge prog\" Entry Exit"], ["proof (prove)\ngoal (1 subgoal):\n 1. StrongPostdomination sourcenode targetnode kind (valid_edge prog)\n     (_Entry_) (_Exit_)", "by(rule WhileStrongPostdomination_aux)"], ["", "subsection \\<open>Standard Control Dependence\\<close>"], ["", "lemma WStandardControlDependence_aux:\n  \"StandardControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n  Entry (Defs prog) (Uses prog) id Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StandardControlDependencePDG sourcenode targetnode kind\n     (valid_edge prog) (_Entry_) (Defs prog) (Uses prog) id (_Exit_)", "by(unfold_locales)"], ["", "interpretation WStandardControlDependence:\n  StandardControlDependencePDG sourcenode targetnode kind \"valid_edge prog\"\n                    Entry \"Defs prog\" \"Uses prog\" id Exit"], ["proof (prove)\ngoal (1 subgoal):\n 1. StandardControlDependencePDG sourcenode targetnode kind\n     (valid_edge prog) (_Entry_) (Defs prog) (Uses prog) id (_Exit_)", "by(rule WStandardControlDependence_aux)"], ["", "lemma Fundamental_property_scd_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (WStandardControlDependence.PDG_BS_s prog) reds (labels_nodes prog)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n     reds (labels_nodes prog)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n     reds (labels_nodes prog)", "interpret BackwardSlice sourcenode targetnode kind \"valid_edge prog\" Entry\n    \"Defs prog\" \"Uses prog\" id\n    \"StandardControlDependencePDG.PDG_BS_s sourcenode targetnode\n    (valid_edge prog) (Defs prog) (Uses prog) Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)", "by(rule WStandardControlDependence.PDGBackwardSliceCorrect)"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n     reds (labels_nodes prog)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n     reds (labels_nodes prog)", "by(unfold_locales)"], ["proof (state)\nthis:\n  BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n   (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n   reds (labels_nodes prog)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation Fundamental_property_scd: BackwardSlice_wf sourcenode targetnode kind \n  \"valid_edge prog\" Entry \"Defs prog\" \"Uses prog\" id \n  \"WStandardControlDependence.PDG_BS_s prog\" reds \"labels_nodes prog\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WStandardControlDependence.PDG_BS_s prog)\n     reds (labels_nodes prog)", "by(rule Fundamental_property_scd_aux)"], ["", "subsection \\<open>Weak Control Dependence\\<close>"], ["", "lemma WWeakControlDependence_aux:\n  \"WeakControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n  Entry (Defs prog) (Uses prog) id Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WeakControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n     (_Entry_) (Defs prog) (Uses prog) id (_Exit_)", "by(unfold_locales)"], ["", "interpretation WWeakControlDependence:\n  WeakControlDependencePDG sourcenode targetnode kind \"valid_edge prog\"\n                    Entry \"Defs prog\" \"Uses prog\" id Exit"], ["proof (prove)\ngoal (1 subgoal):\n 1. WeakControlDependencePDG sourcenode targetnode kind (valid_edge prog)\n     (_Entry_) (Defs prog) (Uses prog) id (_Exit_)", "by(rule WWeakControlDependence_aux)"], ["", "lemma Fundamental_property_wcd_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (WWeakControlDependence.PDG_BS_w prog) reds (labels_nodes prog)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n     (labels_nodes prog)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n     (labels_nodes prog)", "interpret BackwardSlice sourcenode targetnode kind \"valid_edge prog\" Entry\n    \"Defs prog\" \"Uses prog\" id\n    \"WeakControlDependencePDG.PDG_BS_w sourcenode targetnode\n    (valid_edge prog) (Defs prog) (Uses prog) Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog)", "by(rule WWeakControlDependence.WeakPDGBackwardSliceCorrect)"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n     (labels_nodes prog)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n     (labels_nodes prog)", "by(unfold_locales)"], ["proof (state)\nthis:\n  BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n   (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n   (labels_nodes prog)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation Fundamental_property_wcd: BackwardSlice_wf sourcenode targetnode kind \n  \"valid_edge prog\" Entry \"Defs prog\" \"Uses prog\" id \n  \"WWeakControlDependence.PDG_BS_w prog\" reds \"labels_nodes prog\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (WWeakControlDependence.PDG_BS_w prog) reds\n     (labels_nodes prog)", "by(rule Fundamental_property_wcd_aux)"], ["", "subsection \\<open>Weak Order Dependence\\<close>"], ["", "lemma Fundamental_property_wod_aux: \"BackwardSlice_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id \n  (While_CFG_wf.wod_backward_slice prog) reds (labels_nodes prog)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n     (labels_nodes prog)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n     (labels_nodes prog)", "interpret BackwardSlice sourcenode targetnode kind \"valid_edge prog\" Entry\n    \"Defs prog\" \"Uses prog\" id\n    \"CFG_wf.wod_backward_slice sourcenode targetnode (valid_edge prog)\n    (Defs prog) (Uses prog)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog)", "by(rule While_CFG_wf.WODBackwardSliceCorrect)"], ["proof (state)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n     (labels_nodes prog)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n     (labels_nodes prog)", "by(unfold_locales)"], ["proof (state)\nthis:\n  BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n   (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n   (labels_nodes prog)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation Fundamental_property_wod: BackwardSlice_wf sourcenode targetnode kind \n  \"valid_edge prog\" Entry \"Defs prog\" \"Uses prog\" id \n  \"While_CFG_wf.wod_backward_slice prog\" reds \"labels_nodes prog\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (While_CFG_wf.wod_backward_slice prog) reds\n     (labels_nodes prog)", "by(rule Fundamental_property_wod_aux)"], ["", "end"]]}