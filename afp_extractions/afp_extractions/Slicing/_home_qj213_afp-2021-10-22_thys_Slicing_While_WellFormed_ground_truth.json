{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/While/WellFormed.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma rhs_interpret_eq: \n  \"\\<lbrakk>interpret b s = Some v'; \\<forall>V \\<in> rhs_aux b. s V = s' V\\<rbrakk> \n   \\<Longrightarrow> interpret b s' = Some v'\"", "lemma WCFG_edge_no_Defs_equal:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; V \\<notin> Defs prog n\\<rbrakk> \\<Longrightarrow> (transfer et s) V = s V\"", "lemma WCFG_edge_transfer_uses_only_Uses:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; \\<forall>V \\<in> Uses prog n. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> \\<forall>V \\<in> Defs prog n. (transfer et s) V = (transfer et s') V\"", "lemma WCFG_edge_Uses_pred_eq:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; \\<forall>V \\<in> Uses prog n. s V = s' V; pred et s\\<rbrakk>\n    \\<Longrightarrow> pred et s'\"", "lemma While_CFGExit_wf_aux:\"CFGExit_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id Exit\""], "translations": [["", "lemma rhs_interpret_eq: \n  \"\\<lbrakk>interpret b s = Some v'; \\<forall>V \\<in> rhs_aux b. s V = s' V\\<rbrakk> \n   \\<Longrightarrow> interpret b s' = Some v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>interpret b s = Some v';\n     \\<forall>V\\<in>rhs_aux b. s V = s' V\\<rbrakk>\n    \\<Longrightarrow> interpret b s' = Some v'", "proof(induct b arbitrary:v')"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Val x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Val x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Val x) s' = Some v'\n 2. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 3. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "case (Val v)"], ["proof (state)\nthis:\n  interpret (Val v) s = Some v'\n  \\<forall>V\\<in>rhs_aux (Val v). s V = s' V\n\ngoal (3 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Val x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Val x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Val x) s' = Some v'\n 2. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 3. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from \\<open>interpret (Val v) s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret (Val v) s = Some v'", "have \"v' = v\""], ["proof (prove)\nusing this:\n  interpret (Val v) s = Some v'\n\ngoal (1 subgoal):\n 1. v' = v", "by(fastforce elim:interpret.cases)"], ["proof (state)\nthis:\n  v' = v\n\ngoal (3 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Val x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Val x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Val x) s' = Some v'\n 2. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 3. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "thus ?case"], ["proof (prove)\nusing this:\n  v' = v\n\ngoal (1 subgoal):\n 1. interpret (Val v) s' = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret (Val v) s' = Some v'\n\ngoal (2 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 2. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 2. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "case (Var V)"], ["proof (state)\nthis:\n  interpret (Var V) s = Some v'\n  \\<forall>V\\<in>rhs_aux (Var V). s V = s' V\n\ngoal (2 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 2. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "hence \"s' V = Some v'\""], ["proof (prove)\nusing this:\n  interpret (Var V) s = Some v'\n  \\<forall>V\\<in>rhs_aux (Var V). s V = s' V\n\ngoal (1 subgoal):\n 1. s' V = Some v'", "by(fastforce elim:interpret.cases)"], ["proof (state)\nthis:\n  s' V = Some v'\n\ngoal (2 subgoals):\n 1. \\<And>x v'.\n       \\<lbrakk>interpret (Var x) s = Some v';\n        \\<forall>V\\<in>rhs_aux (Var x). s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret (Var x) s' = Some v'\n 2. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "thus ?case"], ["proof (prove)\nusing this:\n  s' V = Some v'\n\ngoal (1 subgoal):\n 1. interpret (Var V) s' = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret (Var V) s' = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "case (BinOp b1 bop b2)"], ["proof (state)\nthis:\n  \\<lbrakk>interpret b1 s = Some ?v';\n   \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> interpret b1 s' = Some ?v'\n  \\<lbrakk>interpret b2 s = Some ?v';\n   \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> interpret b2 s' = Some ?v'\n  interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s = Some v'\n  \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "note IH1 = \\<open>\\<And>v'. \\<lbrakk>interpret b1 s = Some v'; \\<forall>V \\<in> rhs_aux b1. s V = s' V\\<rbrakk> \n             \\<Longrightarrow> interpret b1 s' = Some v'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>interpret b1 s = Some ?v';\n   \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> interpret b1 s' = Some ?v'\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "note IH2 = \\<open>\\<And>v'. \\<lbrakk>interpret b2 s = Some v'; \\<forall>V \\<in> rhs_aux b2. s V = s' V\\<rbrakk> \n             \\<Longrightarrow> interpret b2 s' = Some v'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>interpret b2 s = Some ?v';\n   \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> interpret b2 s' = Some ?v'\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from \\<open>interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s = Some v'", "have \"\\<exists>v\\<^sub>1 v\\<^sub>2. interpret b1 s = Some v\\<^sub>1 \\<and> interpret b2 s = Some v\\<^sub>2 \\<and>\n                binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\""], ["proof (prove)\nusing this:\n  interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s = Some v'\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<^sub>1 v\\<^sub>2.\n       interpret b1 s = Some v\\<^sub>1 \\<and>\n       interpret b2 s = Some v\\<^sub>2 \\<and>\n       binop bop v\\<^sub>1 v\\<^sub>2 = Some v'", "apply(cases \"interpret b1 s\",simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s =\n                Some v';\n        interpret b1 s = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<^sub>1 v\\<^sub>2.\n                            interpret b1 s = Some v\\<^sub>1 \\<and>\n                            interpret b2 s = Some v\\<^sub>2 \\<and>\n                            binop bop v\\<^sub>1 v\\<^sub>2 = Some v'", "apply(cases \"interpret b2 s\",simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s =\n                Some v';\n        interpret b1 s = Some a; interpret b2 s = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<^sub>1 v\\<^sub>2.\n                            interpret b1 s = Some v\\<^sub>1 \\<and>\n                            interpret b2 s = Some v\\<^sub>2 \\<and>\n                            binop bop v\\<^sub>1 v\\<^sub>2 = Some v'", "by(case_tac \"binop bop a aa\",simp+)"], ["proof (state)\nthis:\n  \\<exists>v\\<^sub>1 v\\<^sub>2.\n     interpret b1 s = Some v\\<^sub>1 \\<and>\n     interpret b2 s = Some v\\<^sub>2 \\<and>\n     binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "then"], ["proof (chain)\npicking this:\n  \\<exists>v\\<^sub>1 v\\<^sub>2.\n     interpret b1 s = Some v\\<^sub>1 \\<and>\n     interpret b2 s = Some v\\<^sub>2 \\<and>\n     binop bop v\\<^sub>1 v\\<^sub>2 = Some v'", "obtain v\\<^sub>1 v\\<^sub>2 where \"interpret b1 s = Some v\\<^sub>1\"\n    and \"interpret b2 s = Some v\\<^sub>2\" and \"binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<^sub>1 v\\<^sub>2.\n     interpret b1 s = Some v\\<^sub>1 \\<and>\n     interpret b2 s = Some v\\<^sub>2 \\<and>\n     binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\n\ngoal (1 subgoal):\n 1. (\\<And>v\\<^sub>1 v\\<^sub>2.\n        \\<lbrakk>interpret b1 s = Some v\\<^sub>1;\n         interpret b2 s = Some v\\<^sub>2;\n         binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  interpret b1 s = Some v\\<^sub>1\n  interpret b2 s = Some v\\<^sub>2\n  binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from \\<open>\\<forall>V \\<in> rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2).\n     s V = s' V", "have \"\\<forall>V \\<in> rhs_aux b1. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b1. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b1. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from IH1[OF \\<open>interpret b1 s = Some v\\<^sub>1\\<close> this]"], ["proof (chain)\npicking this:\n  interpret b1 s' = Some v\\<^sub>1", "have \"interpret b1 s' = Some v\\<^sub>1\""], ["proof (prove)\nusing this:\n  interpret b1 s' = Some v\\<^sub>1\n\ngoal (1 subgoal):\n 1. interpret b1 s' = Some v\\<^sub>1", "."], ["proof (state)\nthis:\n  interpret b1 s' = Some v\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from \\<open>\\<forall>V \\<in> rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2).\n     s V = s' V", "have \"\\<forall>V \\<in> rhs_aux b2. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>bop\\<guillemotright> b2).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b2. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b2. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "from IH2[OF \\<open>interpret b2 s = Some v\\<^sub>2\\<close> this]"], ["proof (chain)\npicking this:\n  interpret b2 s' = Some v\\<^sub>2", "have \"interpret b2 s' = Some v\\<^sub>2\""], ["proof (prove)\nusing this:\n  interpret b2 s' = Some v\\<^sub>2\n\ngoal (1 subgoal):\n 1. interpret b2 s' = Some v\\<^sub>2", "."], ["proof (state)\nthis:\n  interpret b2 s' = Some v\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>b1 x2a b2 v'.\n       \\<lbrakk>\\<And>v'.\n                   \\<lbrakk>interpret b1 s = Some v';\n                    \\<forall>V\\<in>rhs_aux b1. s V = s' V\\<rbrakk>\n                   \\<Longrightarrow> interpret b1 s' = Some v';\n        \\<And>v'.\n           \\<lbrakk>interpret b2 s = Some v';\n            \\<forall>V\\<in>rhs_aux b2. s V = s' V\\<rbrakk>\n           \\<Longrightarrow> interpret b2 s' = Some v';\n        interpret (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s = Some v';\n        \\<forall>V\\<in>rhs_aux (b1 \\<guillemotleft>x2a\\<guillemotright> b2).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> interpret\n                          (b1 \\<guillemotleft>x2a\\<guillemotright> b2) s' =\n                         Some v'", "with \\<open>interpret b1 s' = Some v\\<^sub>1\\<close> \\<open>binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret b1 s' = Some v\\<^sub>1\n  binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\n  interpret b2 s' = Some v\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  interpret b1 s' = Some v\\<^sub>1\n  binop bop v\\<^sub>1 v\\<^sub>2 = Some v'\n  interpret b2 s' = Some v\\<^sub>2\n\ngoal (1 subgoal):\n 1. interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s' = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret (b1 \\<guillemotleft>bop\\<guillemotright> b2) s' = Some v'\n\ngoal:\nNo subgoals!", "qed"], ["", "fun Defs :: \"cmd \\<Rightarrow> w_node \\<Rightarrow> vname set\"\nwhere \"Defs prog n = {V. \\<exists>l c.  n = (_ l _) \\<and> labels prog l c \\<and> V \\<in> lhs c}\""], ["", "fun Uses :: \"cmd \\<Rightarrow> w_node \\<Rightarrow> vname set\"\nwhere \"Uses prog n = {V. \\<exists>l c.  n = (_ l _) \\<and> labels prog l c \\<and> V \\<in> rhs c}\""], ["", "subsection \\<open>Lemmas about @{term \"prog \\<turnstile> n -et\\<rightarrow> n'\"} to show well-formed \n  properties\\<close>"], ["", "lemma WCFG_edge_no_Defs_equal:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; V \\<notin> Defs prog n\\<rbrakk> \\<Longrightarrow> (transfer et s) V = s V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n';\n     V \\<notin> Defs prog n\\<rbrakk>\n    \\<Longrightarrow> transfer et s V = s V", "proof(induct rule:WCFG_induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 0 _) \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(Va := interpret e s) s V = s V\n 5. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 17 subgoals...", "case (WCFG_LAss V' e)"], ["proof (state)\nthis:\n  V \\<notin> Defs (V':=e) (_ 0 _)\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 0 _) \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(Va := interpret e s) s V = s V\n 5. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 17 subgoals...", "have label:\"labels (V':=e) 0 (V':=e)\" and lhs:\"V' \\<in> lhs (V':=e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (V':=e) 0 (V':=e) &&& V' \\<in> lhs (V':=e)", "by(auto intro:Labels_Base)"], ["proof (state)\nthis:\n  labels (V':=e) 0 (V':=e)\n  V' \\<in> lhs (V':=e)\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 0 _) \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(Va := interpret e s) s V = s V\n 5. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 17 subgoals...", "hence \"V' \\<in> Defs (V':=e) (_0_)\""], ["proof (prove)\nusing this:\n  labels (V':=e) 0 (V':=e)\n  V' \\<in> lhs (V':=e)\n\ngoal (1 subgoal):\n 1. V' \\<in> Defs (V':=e) (_ 0 _)", "by fastforce"], ["proof (state)\nthis:\n  V' \\<in> Defs (V':=e) (_ 0 _)\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 0 _) \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(Va := interpret e s) s V = s V\n 5. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 17 subgoals...", "with \\<open>V \\<notin> Defs (V':=e) (_0_)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (V':=e) (_ 0 _)\n  V' \\<in> Defs (V':=e) (_ 0 _)", "show ?case"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (V':=e) (_ 0 _)\n  V' \\<in> Defs (V':=e) (_ 0 _)\n\ngoal (1 subgoal):\n 1. transfer \\<Up>\\<lambda>s. s(V' := interpret e s) s V = s V", "by auto"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V' := interpret e s) s V = s V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 16 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n  n' \\<noteq> (_Exit_)\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 16 subgoals...", "note IH = \\<open>V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 16 subgoals...", "have \"V \\<notin> Defs c\\<^sub>1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c\\<^sub>1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "assume \"V \\<in> Defs c\\<^sub>1 n\""], ["proof (state)\nthis:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c\\<^sub>1 n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c\\<^sub>1 l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c\\<^sub>1 l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c\\<^sub>1 l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "from \\<open>labels c\\<^sub>1 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l c", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l (c;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l c\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)", "by(fastforce intro:Labels_Seq1)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "from \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c", "have \"V \\<in> lhs (c;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> lhs (c;; c\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  V \\<in> lhs (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>labels (c\\<^sub>1;;c\\<^sub>2) l (c;;c\\<^sub>2)\\<close>"], ["proof (chain)\npicking this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  V \\<in> lhs (c;; c\\<^sub>2)", "have \"V \\<in> Defs (c\\<^sub>1;;c\\<^sub>2) n\""], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  V \\<in> lhs (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (c\\<^sub>1;;c\\<^sub>2) n\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n' \\<noteq> (_Exit_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 16 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 15 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 15 subgoals...", "note IH = \\<open>V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 15 subgoals...", "have \"V \\<notin> Defs c\\<^sub>1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c\\<^sub>1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "assume \"V \\<in> Defs c\\<^sub>1 n\""], ["proof (state)\nthis:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c\\<^sub>1 n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c\\<^sub>1 l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c\\<^sub>1 l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c\\<^sub>1 l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "from \\<open>labels c\\<^sub>1 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l c", "have \"labels (c\\<^sub>1;;c\\<^sub>2) l (c;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l c\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)", "by(fastforce intro:Labels_Seq1)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "from \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c", "have \"V \\<in> lhs (c;;c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> lhs (c;; c\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  V \\<in> lhs (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>labels (c\\<^sub>1;;c\\<^sub>2) l (c;;c\\<^sub>2)\\<close>"], ["proof (chain)\npicking this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  V \\<in> lhs (c;; c\\<^sub>2)", "have \"V \\<in> Defs (c\\<^sub>1;;c\\<^sub>2) n\""], ["proof (prove)\nusing this:\n  labels (c\\<^sub>1;; c\\<^sub>2) l (c;; c\\<^sub>2)\n  V \\<in> lhs (c;; c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (c\\<^sub>1;;c\\<^sub>2) n\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) n\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) n\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow>\n         transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                     (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 15 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n        s V\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n        s V\nA total of 14 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n        s V\nA total of 14 subgoals...", "note IH = \\<open>V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n        s V\nA total of 14 subgoals...", "have \"V \\<notin> Defs c\\<^sub>2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c\\<^sub>2 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "assume \"V \\<in> Defs c\\<^sub>2 n\""], ["proof (state)\nthis:\n  V \\<in> Defs c\\<^sub>2 n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c\\<^sub>2 n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c\\<^sub>2 l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c\\<^sub>2 n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c\\<^sub>2 l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c\\<^sub>2 l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "from \\<open>labels c\\<^sub>2 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 l c", "have \"labels (c\\<^sub>1;;c\\<^sub>2) (l + #:c\\<^sub>1) c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 l c\n\ngoal (1 subgoal):\n 1. labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) c", "by(fastforce intro:Labels_Seq2)"], ["proof (state)\nthis:\n  labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "with \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c\n  labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) c", "have \"V \\<in> Defs (c\\<^sub>1;;c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n  labels (c\\<^sub>1;; c\\<^sub>2) (l + #:c\\<^sub>1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (c\\<^sub>1;;c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\n  V \\<in> Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>2 n\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (c\\<^sub>1;; c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n        s V\nA total of 14 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 13 subgoals...", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 13 subgoals...", "note IH = \\<open>V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 13 subgoals...", "have \"V \\<notin> Defs c\\<^sub>1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c\\<^sub>1 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "assume \"V \\<in> Defs c\\<^sub>1 n\""], ["proof (state)\nthis:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c\\<^sub>1 n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c\\<^sub>1 l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c\\<^sub>1 l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c\\<^sub>1 l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "from \\<open>labels c\\<^sub>1 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>1 l c", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>1 l c\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) c", "by(fastforce intro:Labels_CondTrue)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) c", "have \"V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + 1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>1 n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>1 n\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>1 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n        transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n         V =\n        s V\nA total of 13 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n        transfer \\<Up>id s V = s V\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n        transfer \\<Up>id s V = s V\nA total of 12 subgoals...", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n              (n \\<oplus> #:c\\<^sub>1 + 1)\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n        transfer \\<Up>id s V = s V\nA total of 12 subgoals...", "note IH = \\<open>V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n        transfer \\<Up>id s V = s V\nA total of 12 subgoals...", "have \"V \\<notin> Defs c\\<^sub>2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c\\<^sub>2 n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "assume \"V \\<in> Defs c\\<^sub>2 n\""], ["proof (state)\nthis:\n  V \\<in> Defs c\\<^sub>2 n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c\\<^sub>2 n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c\\<^sub>2 l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c\\<^sub>2 n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c\\<^sub>2 l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c\\<^sub>2 l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "from \\<open>labels c\\<^sub>2 l c\\<close>"], ["proof (chain)\npicking this:\n  labels c\\<^sub>2 l c", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) c\""], ["proof (prove)\nusing this:\n  labels c\\<^sub>2 l c\n\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) c", "by(fastforce intro:Labels_CondFalse)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "with \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) c", "have \"V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1)\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) (l + #:c\\<^sub>1 + 1) c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n             (n \\<oplus> #:c\\<^sub>1 + 1)", "by(fastforce simp:add.commute add.left_commute)"], ["proof (state)\nthis:\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n           (n \\<oplus> #:c\\<^sub>1 + 1)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c\\<^sub>2 n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n              (n \\<oplus> #:c\\<^sub>1 + 1)\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n           (n \\<oplus> #:c\\<^sub>1 + 1)", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n              (n \\<oplus> #:c\\<^sub>1 + 1)\n  V \\<in> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n           (n \\<oplus> #:c\\<^sub>1 + 1)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c\\<^sub>2 n\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        V \\<notin> Defs c\\<^sub>2 n \\<Longrightarrow> transfer et s V = s V;\n        n \\<noteq> (_Entry_);\n        V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1)\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 10. \\<And>b c'.\n        V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n        transfer \\<Up>id s V = s V\nA total of 12 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 11 subgoals...", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 11 subgoals...", "note IH = \\<open>V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 11 subgoals...", "have \"V \\<notin> Defs c' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c' n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "assume \"V \\<in> Defs c' n\""], ["proof (state)\nthis:\n  V \\<in> Defs c' n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c' n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c' l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c' n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c' l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c' l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "from \\<open>labels c' l c\\<close>"], ["proof (chain)\npicking this:\n  labels c' l c", "have \"labels (while (b) c') (l + 2) (c;;while (b) c')\""], ["proof (prove)\nusing this:\n  labels c' l c\n\ngoal (1 subgoal):\n 1. labels (while (b) c') (l + 2) (c;; while (b) c')", "by(fastforce intro:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "from \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c", "have \"V \\<in> lhs (c;;while (b) c')\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> lhs (c;; while (b) c')", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> lhs (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "with \\<open>labels (while (b) c') (l + 2) (c;;while (b) c')\\<close>"], ["proof (chain)\npicking this:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n  V \\<in> lhs (c;; while (b) c')", "have \"V \\<in> Defs (while (b) c') (n \\<oplus> 2)\""], ["proof (prove)\nusing this:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n  V \\<in> lhs (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (while (b) c') (n \\<oplus> 2)", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c' n\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V\nA total of 11 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\n  n \\<noteq> (_Entry_)\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V", "note IH = \\<open>V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\\<close>"], ["proof (state)\nthis:\n  V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V", "have \"V \\<notin> Defs c' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<notin> Defs c' n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "assume \"V \\<in> Defs c' n\""], ["proof (state)\nthis:\n  V \\<in> Defs c' n\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V \\<in> Defs c' n", "obtain c l where [simp]:\"n = (_ l _)\" and \"labels c' l c\"\n      and \"V \\<in> lhs c\""], ["proof (prove)\nusing this:\n  V \\<in> Defs c' n\n\ngoal (1 subgoal):\n 1. (\\<And>l c.\n        \\<lbrakk>n = (_ l _); labels c' l c; V \\<in> lhs c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  n = (_ l _)\n  labels c' l c\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "from \\<open>labels c' l c\\<close>"], ["proof (chain)\npicking this:\n  labels c' l c", "have \"labels (while (b) c') (l + 2) (c;;while (b) c')\""], ["proof (prove)\nusing this:\n  labels c' l c\n\ngoal (1 subgoal):\n 1. labels (while (b) c') (l + 2) (c;; while (b) c')", "by(fastforce intro:Labels_WhileBody)"], ["proof (state)\nthis:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "from \\<open>V \\<in> lhs c\\<close>"], ["proof (chain)\npicking this:\n  V \\<in> lhs c", "have \"V \\<in> lhs (c;;while (b) c')\""], ["proof (prove)\nusing this:\n  V \\<in> lhs c\n\ngoal (1 subgoal):\n 1. V \\<in> lhs (c;; while (b) c')", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> lhs (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "with \\<open>labels (while (b) c') (l + 2) (c;;while (b) c')\\<close>"], ["proof (chain)\npicking this:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n  V \\<in> lhs (c;; while (b) c')", "have \"V \\<in> Defs (while (b) c') (n \\<oplus> 2)\""], ["proof (prove)\nusing this:\n  labels (while (b) c') (l + 2) (c;; while (b) c')\n  V \\<in> lhs (c;; while (b) c')\n\ngoal (1 subgoal):\n 1. V \\<in> Defs (while (b) c') (n \\<oplus> 2)", "by fastforce"], ["proof (state)\nthis:\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (1 subgoal):\n 1. V \\<in> Defs c' n \\<Longrightarrow> False", "with \\<open>V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)", "show False"], ["proof (prove)\nusing this:\n  V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\n  V \\<in> Defs (while (b) c') (n \\<oplus> 2)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<notin> Defs c' n\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         V \\<notin> Defs c' n \\<Longrightarrow> transfer et s V = s V;\n         n \\<noteq> (_Entry_);\n         V \\<notin> Defs (while (b) c') (n \\<oplus> 2)\\<rbrakk>\n        \\<Longrightarrow> transfer et s V = s V", "from IH[OF this]"], ["proof (chain)\npicking this:\n  transfer et s V = s V", "show ?case"], ["proof (prove)\nusing this:\n  transfer et s V = s V\n\ngoal (1 subgoal):\n 1. transfer et s V = s V", "."], ["proof (state)\nthis:\n  transfer et s V = s V\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V = s V\n 2. \\<And>prog.\n       V \\<notin> Defs prog (_Entry_) \\<Longrightarrow>\n       transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V = s V\n 3. V \\<notin> Defs Skip (_ 0 _) \\<Longrightarrow>\n    transfer \\<Up>id s V = s V\n 4. \\<And>Va e.\n       V \\<notin> Defs (Va:=e) (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       V \\<notin> Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                   (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 7. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s V =\n       s V\n 8. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 0 _) \\<Longrightarrow>\n       transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s V =\n       s V\n 9. \\<And>b c'.\n       V \\<notin> Defs (while (b) c') (_ 1 _) \\<Longrightarrow>\n       transfer \\<Up>id s V = s V", "qed auto"], ["", "(*<*)"], ["", "declare One_nat_def [simp del]"], ["", "(*>*)"], ["", "lemma WCFG_edge_transfer_uses_only_Uses:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; \\<forall>V \\<in> Uses prog n. s V = s' V\\<rbrakk>\n  \\<Longrightarrow> \\<forall>V \\<in> Defs prog n. (transfer et s) V = (transfer et s') V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n';\n     \\<forall>V\\<in>Uses prog n. s V = s' V\\<rbrakk>\n    \\<Longrightarrow> \\<forall>V\\<in>Defs prog n.\n                         transfer et s V = transfer et s' V", "proof(induct rule:WCFG_induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "case (WCFG_LAss V e)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "have \"Uses (V:=e) (_0_) = {V. V \\<in> rhs_aux e}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uses (V:=e) (_ 0 _) = {V. V \\<in> rhs_aux e}", "by(fastforce elim:labels.cases intro:Labels_Base)"], ["proof (state)\nthis:\n  Uses (V:=e) (_ 0 _) = {V. V \\<in> rhs_aux e}\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "with \\<open>\\<forall>V'\\<in>Uses (V:=e) (_0_). s V' = s' V'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V'\\<in>Uses (V:=e) (_ 0 _). s V' = s' V'\n  Uses (V:=e) (_ 0 _) = {V. V \\<in> rhs_aux e}", "have \"\\<forall>V'\\<in>rhs_aux e. s V' = s' V'\""], ["proof (prove)\nusing this:\n  \\<forall>V'\\<in>Uses (V:=e) (_ 0 _). s V' = s' V'\n  Uses (V:=e) (_ 0 _) = {V. V \\<in> rhs_aux e}\n\ngoal (1 subgoal):\n 1. \\<forall>V'\\<in>rhs_aux e. s V' = s' V'", "by blast"], ["proof (state)\nthis:\n  \\<forall>V'\\<in>rhs_aux e. s V' = s' V'\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "have \"Defs (V:=e) (_0_) = {V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Defs (V:=e) (_ 0 _) = {V}", "by(fastforce elim:labels.cases intro:Labels_Base)"], ["proof (state)\nthis:\n  Defs (V:=e) (_ 0 _) = {V}\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "have \"transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n        transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "proof(cases \"interpret e s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "case None"], ["proof (state)\nthis:\n  interpret e s = None\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "{"], ["proof (state)\nthis:\n  interpret e s = None\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "assume \"interpret e s' = Some v\""], ["proof (state)\nthis:\n  interpret e s' = Some v\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "with \\<open>\\<forall>V'\\<in>rhs_aux e. s V' = s' V'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V'\\<in>rhs_aux e. s V' = s' V'\n  interpret e s' = Some v", "have \"interpret e s = Some v\""], ["proof (prove)\nusing this:\n  \\<forall>V'\\<in>rhs_aux e. s V' = s' V'\n  interpret e s' = Some v\n\ngoal (1 subgoal):\n 1. interpret e s = Some v", "by(fastforce intro:rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret e s = Some v\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "with None"], ["proof (chain)\npicking this:\n  interpret e s = None\n  interpret e s = Some v", "have False"], ["proof (prove)\nusing this:\n  interpret e s = None\n  interpret e s = Some v\n\ngoal (1 subgoal):\n 1. False", "by(fastforce split:if_split_asm)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "}"], ["proof (state)\nthis:\n  interpret e s' = Some ?v2 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. interpret e s = None \\<Longrightarrow>\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n 2. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "with None"], ["proof (chain)\npicking this:\n  interpret e s = None\n  interpret e s' = Some ?v2 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  interpret e s = None\n  interpret e s' = Some ?v2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "by fastforce"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "case (Some v)"], ["proof (state)\nthis:\n  interpret e s = Some v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "hence \"interpret e s = Some v\""], ["proof (prove)\nusing this:\n  interpret e s = Some v\n\ngoal (1 subgoal):\n 1. interpret e s = Some v", "by(fastforce split:if_split_asm)"], ["proof (state)\nthis:\n  interpret e s = Some v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "with \\<open>\\<forall>V'\\<in>rhs_aux e. s V' = s' V'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V'\\<in>rhs_aux e. s V' = s' V'\n  interpret e s = Some v", "have \"interpret e s' = Some v\""], ["proof (prove)\nusing this:\n  \\<forall>V'\\<in>rhs_aux e. s V' = s' V'\n  interpret e s = Some v\n\ngoal (1 subgoal):\n 1. interpret e s' = Some v", "by(fastforce intro:rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret e s' = Some v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       interpret e s = Some a \\<Longrightarrow>\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "with Some"], ["proof (chain)\npicking this:\n  interpret e s = Some v\n  interpret e s' = Some v", "show ?thesis"], ["proof (prove)\nusing this:\n  interpret e s = Some v\n  interpret e s' = Some v\n\ngoal (1 subgoal):\n 1. transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n    transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "by simp"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V \\<Longrightarrow>\n       \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n          transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n 5. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 17 subgoals...", "with \\<open>Defs (V:=e) (_0_) = {V}\\<close>"], ["proof (chain)\npicking this:\n  Defs (V:=e) (_ 0 _) = {V}\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V", "show ?case"], ["proof (prove)\nusing this:\n  Defs (V:=e) (_ 0 _) = {V}\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s V =\n  transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' V\n\ngoal (1 subgoal):\n 1. \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n       transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va", "by simp"], ["proof (state)\nthis:\n  \\<forall>Va\\<in>Defs (V:=e) (_ 0 _).\n     transfer \\<Up>\\<lambda>s. s(V := interpret e s) s Va =\n     transfer \\<Up>\\<lambda>s. s(V := interpret e s) s' Va\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n  n' \\<noteq> (_Exit_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;;c\\<^sub>2) n. s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by auto(drule Labels_Seq1[of _ _ _ c\\<^sub>2],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>1 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                             transfer et s V = transfer et s' V\nA total of 16 subgoals...", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n       transfer et s V = transfer et s' V", "using Labels_Base"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n  labels ?c 0 ?c\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>c.\n               labels c\\<^sub>1 l c \\<and> V \\<in> lhs c) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        \\<And>c. labels c 0 c; n = (_ l _);\n        labels (c\\<^sub>1;; c\\<^sub>2) l c; V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ 0 _) -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>c.\n               labels c\\<^sub>1 0 c \\<and> V \\<in> lhs c) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        \\<And>c. labels c 0 c; n = (_ 0 _); V \\<in> lhs c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(erule_tac x=\"V\" in allE,fastforce)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n     transfer et s V = transfer et s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;;c\\<^sub>2) n. s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by auto(drule Labels_Seq1[of _ _ _ c\\<^sub>2],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n                            transfer et s V = transfer et s' V\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c\\<^sub>2 n.\n            transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs\n    (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                             transfer et s V = transfer et s' V\nA total of 15 subgoals...", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n       transfer et s V = transfer et s' V", "using Labels_Base"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n  labels ?c 0 ?c\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ l _) -et\\<rightarrow> (_Exit_);\n        \\<forall>V.\n           (\\<exists>c.\n               labels c\\<^sub>1 l c \\<and> V \\<in> lhs c) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        \\<And>c. labels c 0 c; n = (_ l _);\n        labels (c\\<^sub>1;; c\\<^sub>2) l c; V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> (_ 0 _) -et\\<rightarrow> (_Exit_);\n        \\<forall>V.\n           (\\<exists>c.\n               labels c\\<^sub>1 0 c \\<and> V \\<in> lhs c) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        \\<And>c. labels c 0 c; n = (_ 0 _); V \\<in> lhs c\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(erule_tac x=\"V\" in allE,fastforce)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) n.\n     transfer et s V = transfer et s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;;c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V", "by(auto,blast dest:Labels_Seq2)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2)\n   (n \\<oplus> #:c\\<^sub>1).\n                            transfer et s V = transfer et s' V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n            V\nA total of 14 subgoals...", "with num_inner_nodes_gr_0[of \"c\\<^sub>1\"]"], ["proof (chain)\npicking this:\n  0 < #:c\\<^sub>1\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "show ?case"], ["proof (prove)\nusing this:\n  0 < #:c\\<^sub>1\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>0 < #:c\\<^sub>1;\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 = (_ l _);\n        labels (c\\<^sub>1;; c\\<^sub>2) l c; V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V la ca.\n       \\<lbrakk>0 < #:c\\<^sub>1;\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 = (_ la _); V \\<in> lhs ca;\n        labels c\\<^sub>1 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V\n 2. \\<And>V la ca.\n       \\<lbrakk>0 < #:c\\<^sub>1;\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 = (_ la + #:c\\<^sub>1 _); V \\<in> lhs ca;\n        labels c\\<^sub>2 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(cases n,auto dest:label_less_num_inner_nodes)+"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     transfer et s V = transfer et s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by(auto,blast dest:Labels_CondTrue)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n            V =\n           transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n            s' V\nA total of 13 subgoals...", "with \\<open>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>1 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>1 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> 1 = (_ l _);\n        labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c; V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>1 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> 1 = (_ la + 1 _); V \\<in> lhs ca;\n        labels c\\<^sub>1 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V\n 2. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>1 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> 1 = (_ la + #:c\\<^sub>1 + 1 _); V \\<in> lhs ca;\n        labels c\\<^sub>2 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(cases n,auto dest:label_less_num_inner_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>1 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> 1 = (_ la + #:c\\<^sub>1 + 1 _); V \\<in> lhs ca;\n        labels c\\<^sub>2 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(cases n,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     transfer et s V = transfer et s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V", "by auto(drule Labels_CondFalse[of _ _ _ b c\\<^sub>1],erule_tac x=\"V\" in allE,\n       auto simp:add.assoc)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V;\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs\n   (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1).\n                            transfer et s V = transfer et s' V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 10. \\<And>b c'.\n        \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n           s V = s' V \\<Longrightarrow>\n        \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n           transfer \\<Up>id s V = transfer \\<Up>id s' V\nA total of 12 subgoals...", "with \\<open>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V", "show ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Defs c\\<^sub>2 n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                    (n \\<oplus> #:c\\<^sub>1 + 1).\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 + 1 = (_ l _);\n        labels (if (b) c\\<^sub>1 else c\\<^sub>2) l c; V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 + 1 = (_ la + 1 _); V \\<in> lhs ca;\n        labels c\\<^sub>1 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V\n 2. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 + 1 = (_ la + #:c\\<^sub>1 + 1 _);\n        V \\<in> lhs ca; labels c\\<^sub>2 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(cases n,auto dest:label_less_num_inner_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V la ca.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<forall>V.\n           (\\<exists>l.\n               n = (_ l _) \\<and>\n               (\\<exists>c.\n                   labels c\\<^sub>2 l c \\<and>\n                   V \\<in> lhs c)) \\<longrightarrow>\n           transfer et s V = transfer et s' V;\n        n \\<oplus> #:c\\<^sub>1 + 1 = (_ la + #:c\\<^sub>1 + 1 _);\n        V \\<in> lhs ca; labels c\\<^sub>2 la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(cases n,auto dest:WCFG_sourcelabel_less_num_nodes)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     transfer et s V = transfer et s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "note IH = \\<open>\\<forall>V\\<in>Uses c' n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V", "have \"\\<forall>V\\<in>Uses c' n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c' n. s V = s' V", "by auto(drule Labels_WhileBody[of _ _ _ b],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>\\<forall>V.\n                   (\\<exists>l.\n                       n = (_ l _) \\<and>\n                       (\\<exists>c.\n                           labels c' l c \\<and>\n                           V \\<in> lhs c)) \\<longrightarrow>\n                   transfer et s V = transfer et s' V;\n        n \\<oplus> 2 = (_ l _); labels (while (b) c') l c;\n        V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V la ca.\n       \\<lbrakk>\\<forall>V.\n                   (\\<exists>l.\n                       n = (_ l _) \\<and>\n                       (\\<exists>c.\n                           labels c' l c \\<and>\n                           V \\<in> lhs c)) \\<longrightarrow>\n                   transfer et s V = transfer et s' V;\n        n \\<oplus> 2 = (_ Suc (Suc la) _); V \\<in> lhs ca;\n        labels c' la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(cases n,auto dest:label_less_num_inner_nodes)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n     transfer et s V = transfer et s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "note IH = \\<open>\\<forall>V\\<in>Uses c' n. s V = s' V \n    \\<Longrightarrow> \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\\<close>"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V", "have \"\\<forall>V\\<in>Uses c' n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c' n. s V = s' V", "by auto(drule Labels_WhileBody[of _ _ _ b],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "from IH[OF this]"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V", "have \"\\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V", "."], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<forall>V\\<in>Uses c' n. s V = s' V \\<Longrightarrow>\n         \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V;\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2).\n            s V = s' V\\<rbrakk>\n        \\<Longrightarrow> \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n                             transfer et s V = transfer et s' V", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Defs c' n. transfer et s V = transfer et s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n       transfer et s V = transfer et s' V", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V l c.\n       \\<lbrakk>\\<forall>V.\n                   (\\<exists>l.\n                       n = (_ l _) \\<and>\n                       (\\<exists>c.\n                           labels c' l c \\<and>\n                           V \\<in> lhs c)) \\<longrightarrow>\n                   transfer et s V = transfer et s' V;\n        n \\<oplus> 2 = (_ l _); labels (while (b) c') l c;\n        V \\<in> lhs c\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "apply(erule labels.cases,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V la ca.\n       \\<lbrakk>\\<forall>V.\n                   (\\<exists>l.\n                       n = (_ l _) \\<and>\n                       (\\<exists>c.\n                           labels c' l c \\<and>\n                           V \\<in> lhs c)) \\<longrightarrow>\n                   transfer et s V = transfer et s' V;\n        n \\<oplus> 2 = (_ Suc (Suc la) _); V \\<in> lhs ca;\n        labels c' la ca\\<rbrakk>\n       \\<Longrightarrow> transfer et s V = transfer et s' V", "by(cases n,auto dest:label_less_num_inner_nodes)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs (while (b) c') (n \\<oplus> 2).\n     transfer et s V = transfer et s' V\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. False)\\<^sub>\\<surd> s' V\n 2. \\<And>prog.\n       \\<forall>V\\<in>Uses prog (_Entry_). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs prog (_Entry_).\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s V =\n          transfer (\\<lambda>s. True)\\<^sub>\\<surd> s' V\n 3. \\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V \\<Longrightarrow>\n    \\<forall>V\\<in>Defs Skip (_ 0 _).\n       transfer \\<Up>id s V = transfer \\<Up>id s' V\n 4. \\<And>V e.\n       \\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (V:=e) (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V\n 5. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 7. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n           V\n 8. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 0 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 0 _).\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n           V =\n          transfer (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n           V\n 9. \\<And>b c'.\n       \\<forall>V\\<in>Uses (while (b) c') (_ 1 _).\n          s V = s' V \\<Longrightarrow>\n       \\<forall>V\\<in>Defs (while (b) c') (_ 1 _).\n          transfer \\<Up>id s V = transfer \\<Up>id s' V", "qed (fastforce elim:labels.cases)+"], ["", "lemma WCFG_edge_Uses_pred_eq:\n  \"\\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n'; \\<forall>V \\<in> Uses prog n. s V = s' V; pred et s\\<rbrakk>\n    \\<Longrightarrow> pred et s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prog \\<turnstile> n -et\\<rightarrow> n';\n     \\<forall>V\\<in>Uses prog n. s V = s' V; pred et s\\<rbrakk>\n    \\<Longrightarrow> pred et s'", "proof(induct rule:WCFG_induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                 (_ 0 _).\n                    s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 17 subgoals...", "case (WCFG_SeqFirst c\\<^sub>1 n et n' c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n' \\<noteq> (_Exit_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n  pred et s\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                 (_ 0 _).\n                    s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 17 subgoals...", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                 (_ 0 _).\n                    s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 17 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by auto(drule Labels_Seq1[of _ _ _ c\\<^sub>2],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (17 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                 (_ 0 _).\n                    s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 17 subgoals...", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 16 subgoals...", "case (WCFG_SeqConnect c\\<^sub>1 n et c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n  pred et s\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 16 subgoals...", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 16 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by auto(drule Labels_Seq1[of _ _ _ c\\<^sub>2],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (16 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) n. s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n        \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 16 subgoals...", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 15 subgoals...", "case (WCFG_SeqSecond c\\<^sub>2 n et n' c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V\n  pred et s\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 15 subgoals...", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 15 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V", "by(auto,blast dest:Labels_Seq2)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\n\ngoal (15 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (c\\<^sub>1;; c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n        \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n          pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                         (n \\<oplus> #:c\\<^sub>1 + 1).\n            s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 15 subgoals...", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "case (WCFG_CondTrue b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_0_). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V", "have all:\"\\<forall>V. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and> \n            V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow> (s V = s' V)\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V.\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n        (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n       V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n       s V = s' V", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "obtain v' where [simp]:\"v' = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'. v' = true \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  v' = true\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "with \\<open>pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  v' = true", "have \"interpret b s = Some v'\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  v' = true\n\ngoal (1 subgoal):\n 1. interpret b s = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some v'\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n     (if (b) c\\<^sub>1 else c\\<^sub>2)", "by(rule Labels_Base)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)", "have \"\\<forall>V \\<in> rhs_aux b. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "with \\<open>interpret b s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V", "have \"interpret b s' = Some v'\""], ["proof (prove)\nusing this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (1 subgoal):\n 1. interpret b s' = Some v'", "by(rule rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret b s' = Some v'\n\ngoal (14 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some true)\\<^sub>\\<surd>\n                           s'\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  interpret b s' = Some v'\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "case (WCFG_CondFalse b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_0_). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V", "have all:\"\\<forall>V. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and> \n              V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow> (s V = s' V)\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (_ 0 _). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V.\n       labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n        (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n       V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n       s V = s' V", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "obtain v' where [simp]:\"v' = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'. v' = false \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  v' = false\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "with \\<open>pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  v' = false", "have \"interpret b s = Some v'\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  v' = false\n\ngoal (1 subgoal):\n 1. interpret b s = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some v'\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "have \"labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0 (if (b) c\\<^sub>1 else c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n     (if (b) c\\<^sub>1 else c\\<^sub>2)", "by(rule Labels_Base)"], ["proof (state)\nthis:\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)", "have \"\\<forall>V \\<in> rhs_aux b. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V.\n     labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n      (if (b) c\\<^sub>1 else c\\<^sub>2) \\<and>\n     V \\<in> rhs (if (b) c\\<^sub>1 else c\\<^sub>2) \\<longrightarrow>\n     s V = s' V\n  labels (if (b) c\\<^sub>1 else c\\<^sub>2) 0\n   (if (b) c\\<^sub>1 else c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "with \\<open>interpret b s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V", "have \"interpret b s' = Some v'\""], ["proof (prove)\nusing this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (1 subgoal):\n 1. interpret b s' = Some v'", "by(rule rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret b s' = Some v'\n\ngoal (13 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                                (_ 0 _).\n                   s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n         pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n          s\\<rbrakk>\n        \\<Longrightarrow> pred\n                           (\\<lambda>s.\n                               interpret b s = Some false)\\<^sub>\\<surd>\n                           s'\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  interpret b s' = Some v'\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n         pred \\<Up>id s\\<rbrakk>\n        \\<Longrightarrow> pred \\<Up>id s'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n         pred \\<Up>id s\\<rbrakk>\n        \\<Longrightarrow> pred \\<Up>id s'\nA total of 12 subgoals...", "case (WCFG_CondThen c\\<^sub>1 n et n' b c\\<^sub>2)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V\n  pred et s\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n         pred \\<Up>id s\\<rbrakk>\n        \\<Longrightarrow> pred \\<Up>id s'\nA total of 12 subgoals...", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n         pred \\<Up>id s\\<rbrakk>\n        \\<Longrightarrow> pred \\<Up>id s'\nA total of 12 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> 1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V", "by(auto,blast dest:Labels_CondTrue)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V\n\ngoal (12 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>1 n et n' b c\\<^sub>2.\n       \\<lbrakk>c\\<^sub>1 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>1 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 10. \\<And>b c'.\n        \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n         pred \\<Up>id s\\<rbrakk>\n        \\<Longrightarrow> pred \\<Up>id s'\nA total of 12 subgoals...", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 11 subgoals...", "case (WCFG_CondElse c\\<^sub>2 n et n' b c\\<^sub>1)"], ["proof (state)\nthis:\n  c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V\n  pred et s\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 11 subgoals...", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 11 subgoals...", "from \\<open>\\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2) (n \\<oplus> #:c\\<^sub>1 + 1). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V", "have \"\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                  (n \\<oplus> #:c\\<^sub>1 + 1).\n     s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V", "by auto(drule Labels_CondFalse[of _ _ _ b c\\<^sub>1],erule_tac x=\"V\" in allE,\n       auto simp:add.assoc)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V\n\ngoal (11 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>c\\<^sub>2 n et n' b c\\<^sub>1.\n       \\<lbrakk>c\\<^sub>2 \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c\\<^sub>2 n. s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (if (b) c\\<^sub>1 else c\\<^sub>2)\n                        (n \\<oplus> #:c\\<^sub>1 + 1).\n           s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 9. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 10. \\<And>c' n et n' b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'\nA total of 11 subgoals...", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "case (WCFG_WhileTrue b c')"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (_0_). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V", "have all:\"\\<forall>V. labels (while (b) c') 0 (while (b) c') \\<and> \n              V \\<in> rhs (while (b) c') \\<longrightarrow> (s V = s' V)\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V.\n       labels (while (b) c') 0 (while (b) c') \\<and>\n       V \\<in> rhs (while (b) c') \\<longrightarrow>\n       s V = s' V", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "obtain v' where [simp]:\"v' = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'. v' = true \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  v' = true\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "with \\<open>pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  v' = true", "have \"interpret b s = Some v'\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s\n  v' = true\n\ngoal (1 subgoal):\n 1. interpret b s = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some v'\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "have \"labels (while (b) c') 0 (while (b) c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) c') 0 (while (b) c')", "by(rule Labels_Base)"], ["proof (state)\nthis:\n  labels (while (b) c') 0 (while (b) c')\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n  labels (while (b) c') 0 (while (b) c')", "have \"\\<forall>V \\<in> rhs_aux b. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n  labels (while (b) c') 0 (while (b) c')\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "with \\<open>interpret b s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V", "have \"interpret b s' = Some v'\""], ["proof (prove)\nusing this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (1 subgoal):\n 1. interpret b s' = Some v'", "by(rule rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret b s' = Some v'\n\ngoal (10 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some true)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 8. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 9. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 10. \\<And>c' n et b.\n        \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n         \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n         \\<Longrightarrow> pred et s';\n         n \\<noteq> (_Entry_);\n         \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n         pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s'", "thus ?case"], ["proof (prove)\nusing this:\n  interpret b s' = Some v'\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some true)\\<^sub>\\<surd> s'\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "case (WCFG_WhileFalse b c')"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (_0_). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V", "have all:\"\\<forall>V. labels (while (b) c') 0 (while (b) c') \\<and> \n              V \\<in> rhs (while (b) c') \\<longrightarrow> (s V = s' V)\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V.\n       labels (while (b) c') 0 (while (b) c') \\<and>\n       V \\<in> rhs (while (b) c') \\<longrightarrow>\n       s V = s' V", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "obtain v' where [simp]:\"v' = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'. v' = false \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  v' = false\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "with \\<open>pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\\<close>"], ["proof (chain)\npicking this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  v' = false", "have \"interpret b s = Some v'\""], ["proof (prove)\nusing this:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s\n  v' = false\n\ngoal (1 subgoal):\n 1. interpret b s = Some v'", "by simp"], ["proof (state)\nthis:\n  interpret b s = Some v'\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "have \"labels (while (b) c') 0 (while (b) c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (while (b) c') 0 (while (b) c')", "by(rule Labels_Base)"], ["proof (state)\nthis:\n  labels (while (b) c') 0 (while (b) c')\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "with all"], ["proof (chain)\npicking this:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n  labels (while (b) c') 0 (while (b) c')", "have \"\\<forall>V \\<in> rhs_aux b. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V.\n     labels (while (b) c') 0 (while (b) c') \\<and>\n     V \\<in> rhs (while (b) c') \\<longrightarrow>\n     s V = s' V\n  labels (while (b) c') 0 (while (b) c')\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>rhs_aux b. s V = s' V", "by simp"], ["proof (state)\nthis:\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "with \\<open>interpret b s = Some v'\\<close>"], ["proof (chain)\npicking this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V", "have \"interpret b s' = Some v'\""], ["proof (prove)\nusing this:\n  interpret b s = Some v'\n  \\<forall>V\\<in>rhs_aux b. s V = s' V\n\ngoal (1 subgoal):\n 1. interpret b s' = Some v'", "by(rule rhs_interpret_eq)"], ["proof (state)\nthis:\n  interpret b s' = Some v'\n\ngoal (9 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 0 _). s V = s' V;\n        pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd>\n         s\\<rbrakk>\n       \\<Longrightarrow> pred\n                          (\\<lambda>s.\n                              interpret b s = Some false)\\<^sub>\\<surd>\n                          s'\n 7. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 8. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 9. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "thus ?case"], ["proof (prove)\nusing this:\n  interpret b s' = Some v'\n\ngoal (1 subgoal):\n 1. pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'", "by simp"], ["proof (state)\nthis:\n  pred (\\<lambda>s. interpret b s = Some false)\\<^sub>\\<surd> s'\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "case (WCFG_WhileBody c' n et n' b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> n'\n  \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  n' \\<noteq> (_Exit_)\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n  pred et s\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V", "have \"\\<forall>V\\<in>Uses c' n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c' n. s V = s' V", "by auto(drule Labels_WhileBody[of _ _ _ b],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V\n\ngoal (8 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et n' b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> n';\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_); n' \\<noteq> (_Exit_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'\n 8. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "case (WCFG_WhileBodyExit c' n et b)"], ["proof (state)\nthis:\n  c' \\<turnstile> n -et\\<rightarrow> (_Exit_)\n  \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n  n \\<noteq> (_Entry_)\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n  pred et s\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "note IH = \\<open>\\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk> \\<Longrightarrow> pred et s'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n  \\<Longrightarrow> pred et s'\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "from \\<open>\\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V", "have \"\\<forall>V\\<in>Uses c' n. s V = s' V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Uses c' n. s V = s' V", "by auto(drule Labels_WhileBody[of _ _ _ b],erule_tac x=\"V\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Uses c' n. s V = s' V\n\ngoal (7 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 7. \\<And>c' n et b.\n       \\<lbrakk>c' \\<turnstile> n -et\\<rightarrow> (_Exit_);\n        \\<lbrakk>\\<forall>V\\<in>Uses c' n. s V = s' V; pred et s\\<rbrakk>\n        \\<Longrightarrow> pred et s';\n        n \\<noteq> (_Entry_);\n        \\<forall>V\\<in>Uses (while (b) c') (n \\<oplus> 2). s V = s' V;\n        pred et s\\<rbrakk>\n       \\<Longrightarrow> pred et s'", "from IH[OF this \\<open>pred et s\\<close>]"], ["proof (chain)\npicking this:\n  pred et s'", "show ?case"], ["proof (prove)\nusing this:\n  pred et s'\n\ngoal (1 subgoal):\n 1. pred et s'", "."], ["proof (state)\nthis:\n  pred et s'\n\ngoal (6 subgoals):\n 1. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. False)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. False)\\<^sub>\\<surd> s'\n 2. \\<And>prog.\n       \\<lbrakk>\\<forall>V\\<in>Uses prog (_Entry_). s V = s' V;\n        pred (\\<lambda>s. True)\\<^sub>\\<surd> s\\<rbrakk>\n       \\<Longrightarrow> pred (\\<lambda>s. True)\\<^sub>\\<surd> s'\n 3. \\<lbrakk>\\<forall>V\\<in>Uses Skip (_ 0 _). s V = s' V;\n     pred \\<Up>id s\\<rbrakk>\n    \\<Longrightarrow> pred \\<Up>id s'\n 4. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 0 _). s V = s' V;\n        pred \\<Up>\\<lambda>s. s(V := interpret e s) s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>\\<lambda>s. s(V := interpret e s) s'\n 5. \\<And>V e.\n       \\<lbrakk>\\<forall>V\\<in>Uses (V:=e) (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'\n 6. \\<And>b c'.\n       \\<lbrakk>\\<forall>V\\<in>Uses (while (b) c') (_ 1 _). s V = s' V;\n        pred \\<Up>id s\\<rbrakk>\n       \\<Longrightarrow> pred \\<Up>id s'", "qed simp_all"], ["", "(*<*)"], ["", "declare One_nat_def [simp]"], ["", "(*>*)"], ["", "interpretation While_CFG_wf: CFG_wf sourcenode targetnode kind \n  \"valid_edge prog\" Entry \"Defs prog\" \"Uses prog\" id\n  for prog"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id", "proof(unfold_locales)"], ["proof (state)\ngoal (5 subgoals):\n 1. Defs prog (_Entry_) = {} \\<and> Uses prog (_Entry_) = {}\n 2. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 4. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 5. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "show \"Defs prog (_Entry_) = {} \\<and> Uses prog (_Entry_) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Defs prog (_Entry_) = {} \\<and> Uses prog (_Entry_) = {}", "by(simp add:Defs.simps Uses.simps)"], ["proof (state)\nthis:\n  Defs prog (_Entry_) = {} \\<and> Uses prog (_Entry_) = {}\n\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "fix a V s"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "assume \"valid_edge prog a\" and \"V \\<notin> Defs prog (sourcenode a)\""], ["proof (state)\nthis:\n  valid_edge prog a\n  V \\<notin> Defs prog (sourcenode a)\n\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "obtain nx et nx' where [simp]:\"a = (nx,et,nx')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nx et nx'.\n        a = (nx, et, nx') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a) auto"], ["proof (state)\nthis:\n  a = (nx, et, nx')\n\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>valid_edge prog a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge prog a\n  a = (nx, et, nx')", "have \"prog \\<turnstile> nx -et\\<rightarrow> nx'\""], ["proof (prove)\nusing this:\n  valid_edge prog a\n  a = (nx, et, nx')\n\ngoal (1 subgoal):\n 1. prog \\<turnstile> nx -et\\<rightarrow> nx'", "by(simp add:valid_edge_def)"], ["proof (state)\nthis:\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (4 subgoals):\n 1. \\<And>a V s.\n       \\<lbrakk>valid_edge prog a; V \\<notin> Defs prog (sourcenode a);\n        pred (kind a) s\\<rbrakk>\n       \\<Longrightarrow> id (transfer (kind a) s) V = id s V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 3. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 4. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>V \\<notin> Defs prog (sourcenode a)\\<close>"], ["proof (chain)\npicking this:\n  V \\<notin> Defs prog (sourcenode a)\n  prog \\<turnstile> nx -et\\<rightarrow> nx'", "show \"id (transfer (kind a) s) V = id s V\""], ["proof (prove)\nusing this:\n  V \\<notin> Defs prog (sourcenode a)\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (1 subgoal):\n 1. id (transfer (kind a) s) V = id s V", "by(fastforce intro:WCFG_edge_no_Defs_equal)"], ["proof (state)\nthis:\n  id (transfer (kind a) s) V = id s V\n\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "fix a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "fix s s'::state"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "assume \"valid_edge prog a\" \n    and \"\\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\""], ["proof (state)\nthis:\n  valid_edge prog a\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "obtain nx et nx' where [simp]:\"a = (nx,et,nx')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nx et nx'.\n        a = (nx, et, nx') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a) auto"], ["proof (state)\nthis:\n  a = (nx, et, nx')\n\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>valid_edge prog a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge prog a\n  a = (nx, et, nx')", "have \"prog \\<turnstile> nx -et\\<rightarrow> nx'\""], ["proof (prove)\nusing this:\n  valid_edge prog a\n  a = (nx, et, nx')\n\ngoal (1 subgoal):\n 1. prog \\<turnstile> nx -et\\<rightarrow> nx'", "by(simp add:valid_edge_def)"], ["proof (state)\nthis:\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (3 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V;\n        pred (kind a) s; pred (kind a) s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>V\\<in>Defs prog (sourcenode a).\n                            id (transfer (kind a) s) V =\n                            id (transfer (kind a) s') V\n 2. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 3. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>\\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n  prog \\<turnstile> nx -et\\<rightarrow> nx'", "show \"\\<forall>V\\<in>Defs prog (sourcenode a).\n             id (transfer (kind a) s) V = id (transfer (kind a) s') V\""], ["proof (prove)\nusing this:\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (1 subgoal):\n 1. \\<forall>V\\<in>Defs prog (sourcenode a).\n       id (transfer (kind a) s) V = id (transfer (kind a) s') V", "by -(drule WCFG_edge_transfer_uses_only_Uses,simp+)"], ["proof (state)\nthis:\n  \\<forall>V\\<in>Defs prog (sourcenode a).\n     id (transfer (kind a) s) V = id (transfer (kind a) s') V\n\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "fix a s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "assume pred:\"pred (kind a) s\" and valid:\"valid_edge prog a\"\n    and all:\"\\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\""], ["proof (state)\nthis:\n  pred (kind a) s\n  valid_edge prog a\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "obtain nx et nx' where [simp]:\"a = (nx,et,nx')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nx et nx'.\n        a = (nx, et, nx') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a) auto"], ["proof (state)\nthis:\n  a = (nx, et, nx')\n\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>valid_edge prog a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge prog a\n  a = (nx, et, nx')", "have \"prog \\<turnstile> nx -et\\<rightarrow> nx'\""], ["proof (prove)\nusing this:\n  valid_edge prog a\n  a = (nx, et, nx')\n\ngoal (1 subgoal):\n 1. prog \\<turnstile> nx -et\\<rightarrow> nx'", "by(simp add:valid_edge_def)"], ["proof (state)\nthis:\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (2 subgoals):\n 1. \\<And>a s s'.\n       \\<lbrakk>valid_edge prog a; pred (kind a) s;\n        \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<rbrakk>\n       \\<Longrightarrow> pred (kind a) s'\n 2. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "with \\<open>pred (kind a) s\\<close> \\<open>\\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\\<close>"], ["proof (chain)\npicking this:\n  pred (kind a) s\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n  prog \\<turnstile> nx -et\\<rightarrow> nx'", "show \"pred (kind a) s'\""], ["proof (prove)\nusing this:\n  pred (kind a) s\n  \\<forall>V\\<in>Uses prog (sourcenode a). id s V = id s' V\n  prog \\<turnstile> nx -et\\<rightarrow> nx'\n\ngoal (1 subgoal):\n 1. pred (kind a) s'", "by -(drule WCFG_edge_Uses_pred_eq,simp+)"], ["proof (state)\nthis:\n  pred (kind a) s'\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "fix a a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "assume \"valid_edge prog a\" and \"valid_edge prog a'\" \n    and \"sourcenode a = sourcenode a'\" and \"targetnode a \\<noteq> targetnode a'\""], ["proof (state)\nthis:\n  valid_edge prog a\n  valid_edge prog a'\n  sourcenode a = sourcenode a'\n  targetnode a \\<noteq> targetnode a'\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       \\<lbrakk>valid_edge prog a; valid_edge prog a';\n        sourcenode a = sourcenode a';\n        targetnode a \\<noteq> targetnode a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q Q'.\n                            kind a = (Q)\\<^sub>\\<surd> \\<and>\n                            kind a' = (Q')\\<^sub>\\<surd> \\<and>\n                            (\\<forall>s.\n                                (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n                                (Q' s \\<longrightarrow> \\<not> Q s))", "thus \"\\<exists>Q Q'. kind a = (Q)\\<^sub>\\<surd> \\<and> kind a' = (Q')\\<^sub>\\<surd> \\<and> \n               (\\<forall>s. (Q s \\<longrightarrow> \\<not> Q' s) \\<and> (Q' s \\<longrightarrow> \\<not> Q s))\""], ["proof (prove)\nusing this:\n  valid_edge prog a\n  valid_edge prog a'\n  sourcenode a = sourcenode a'\n  targetnode a \\<noteq> targetnode a'\n\ngoal (1 subgoal):\n 1. \\<exists>Q Q'.\n       kind a = (Q)\\<^sub>\\<surd> \\<and>\n       kind a' = (Q')\\<^sub>\\<surd> \\<and>\n       (\\<forall>s.\n           (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n           (Q' s \\<longrightarrow> \\<not> Q s))", "by(fastforce intro!:WCFG_deterministic simp:valid_edge_def)"], ["proof (state)\nthis:\n  \\<exists>Q Q'.\n     kind a = (Q)\\<^sub>\\<surd> \\<and>\n     kind a' = (Q')\\<^sub>\\<surd> \\<and>\n     (\\<forall>s.\n         (Q s \\<longrightarrow> \\<not> Q' s) \\<and>\n         (Q' s \\<longrightarrow> \\<not> Q s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma While_CFGExit_wf_aux:\"CFGExit_wf sourcenode targetnode kind \n  (valid_edge prog) Entry (Defs prog) (Uses prog) id Exit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFGExit_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (_Exit_)", "proof(unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. Defs prog (_Exit_) = {} \\<and> Uses prog (_Exit_) = {}", "show \"Defs prog (_Exit_) = {} \\<and> Uses prog (_Exit_) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Defs prog (_Exit_) = {} \\<and> Uses prog (_Exit_) = {}", "by(simp add:Defs.simps Uses.simps)"], ["proof (state)\nthis:\n  Defs prog (_Exit_) = {} \\<and> Uses prog (_Exit_) = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation While_CFGExit_wf: CFGExit_wf sourcenode targetnode kind \n  \"valid_edge prog\" Entry \"Defs prog\" \"Uses prog\" id Exit\n  for prog"], ["proof (prove)\ngoal (1 subgoal):\n 1. CFGExit_wf sourcenode targetnode kind (valid_edge prog) (_Entry_)\n     (Defs prog) (Uses prog) id (_Exit_)", "by(rule While_CFGExit_wf_aux)"], ["", "end"]]}