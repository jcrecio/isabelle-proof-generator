{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/Basic/CFG.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma [simp]: \"valid_edge a \\<Longrightarrow> valid_node (sourcenode a)\"", "lemma [simp]: \"valid_edge a \\<Longrightarrow> valid_node (targetnode a)\"", "lemma path_valid_node:\n  assumes \"n -as\\<rightarrow>* n'\" shows \"valid_node n\" and \"valid_node n'\"", "lemma empty_path_nodes [dest]:\"n -[]\\<rightarrow>* n' \\<Longrightarrow> n = n'\"", "lemma path_valid_edges:\"n -as\\<rightarrow>* n' \\<Longrightarrow> \\<forall>a \\<in> set as. valid_edge a\"", "lemma path_edge:\"valid_edge a \\<Longrightarrow> sourcenode a -[a]\\<rightarrow>* targetnode a\"", "lemma path_Entry_target [dest]:\n  assumes \"n -as\\<rightarrow>* (_Entry_)\"\n  shows \"n = (_Entry_)\" and \"as = []\"", "lemma path_Append:\"\\<lbrakk>n -as\\<rightarrow>* n''; n'' -as'\\<rightarrow>* n'\\<rbrakk> \n  \\<Longrightarrow> n -as@as'\\<rightarrow>* n'\"", "lemma path_split:\n  assumes \"n -as@a#as'\\<rightarrow>* n'\"\n  shows \"n -as\\<rightarrow>* sourcenode a\" and \"valid_edge a\" and \"targetnode a -as'\\<rightarrow>* n'\"", "lemma path_split_Cons:\n  assumes \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"\n  obtains a' as' where \"as = a'#as'\" and \"n = sourcenode a'\"\n  and \"valid_edge a'\" and \"targetnode a' -as'\\<rightarrow>* n'\"", "lemma path_split_snoc:\n  assumes \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"\n  obtains a' as' where \"as = as'@[a']\" and \"n -as'\\<rightarrow>* sourcenode a'\"\n  and \"valid_edge a'\" and \"n' = targetnode a'\"", "lemma path_split_second:\n  assumes \"n -as@a#as'\\<rightarrow>* n'\" shows \"sourcenode a -a#as'\\<rightarrow>* n'\"", "lemma path_Entry_Cons:\n  assumes \"(_Entry_) -as\\<rightarrow>* n'\" and \"n' \\<noteq> (_Entry_)\"\n  obtains n a where \"sourcenode a = (_Entry_)\" and \"targetnode a = n\"\n  and \"n -tl as\\<rightarrow>* n'\" and \"valid_edge a\" and \"a = hd as\"", "lemma path_det:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; n -as\\<rightarrow>* n''\\<rbrakk> \\<Longrightarrow> n' = n''\"", "lemma path_sourcenode:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> hd (sourcenodes as) = n\"", "lemma path_targetnode:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> last (targetnodes as) = n'\"", "lemma sourcenodes_is_n_Cons_butlast_targetnodes:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> \n  sourcenodes as = n#(butlast (targetnodes as))\"", "lemma targetnodes_is_tl_sourcenodes_App_n':\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> \n    targetnodes as = (tl (sourcenodes as))@[n']\"", "lemma Entry_sourcenode_hd:\n  assumes \"n -as\\<rightarrow>* n'\" and \"(_Entry_) \\<in> set (sourcenodes as)\"\n  shows \"n = (_Entry_)\" and \"(_Entry_) \\<notin> set (sourcenodes (tl as))\""], "translations": [["", "lemma [simp]: \"valid_edge a \\<Longrightarrow> valid_node (sourcenode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_edge a \\<Longrightarrow> valid_node (sourcenode a)", "by(fastforce simp:valid_node_def)"], ["", "lemma [simp]: \"valid_edge a \\<Longrightarrow> valid_node (targetnode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_edge a \\<Longrightarrow> valid_node (targetnode a)", "by(fastforce simp:valid_node_def)"], ["", "subsection \\<open>CFG paths and lemmas\\<close>"], ["", "inductive path :: \"'node \\<Rightarrow> 'edge list \\<Rightarrow> 'node \\<Rightarrow> bool\"\n  (\"_ -_\\<rightarrow>* _\" [51,0,0] 80)\nwhere \n  empty_path:\"valid_node n \\<Longrightarrow> n -[]\\<rightarrow>* n\"\n\n  | Cons_path:\n  \"\\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n    \\<Longrightarrow> n -a#as\\<rightarrow>* n'\""], ["", "lemma path_valid_node:\n  assumes \"n -as\\<rightarrow>* n'\" shows \"valid_node n\" and \"valid_node n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "using \\<open>n -as\\<rightarrow>* n'\\<close>"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(induct rule:path.induct,auto)"], ["", "lemma empty_path_nodes [dest]:\"n -[]\\<rightarrow>* n' \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* n' \\<Longrightarrow> n = n'", "by(fastforce elim:path.cases)"], ["", "lemma path_valid_edges:\"n -as\\<rightarrow>* n' \\<Longrightarrow> \\<forall>a \\<in> set as. valid_edge a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' \\<Longrightarrow>\n    \\<forall>a\\<in>set as. valid_edge a", "by(induct rule:path.induct) auto"], ["", "lemma path_edge:\"valid_edge a \\<Longrightarrow> sourcenode a -[a]\\<rightarrow>* targetnode a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_edge a \\<Longrightarrow>\n    sourcenode a -[a]\\<rightarrow>* targetnode a", "by(fastforce intro:Cons_path empty_path)"], ["", "lemma path_Entry_target [dest]:\n  assumes \"n -as\\<rightarrow>* (_Entry_)\"\n  shows \"n = (_Entry_)\" and \"as = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = (_Entry_) &&& as = []", "using \\<open>n -as\\<rightarrow>* (_Entry_)\\<close>"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* (_Entry_)\n\ngoal (1 subgoal):\n 1. n = (_Entry_) &&& as = []", "proof(induct n as n'\\<equiv>\"(_Entry_)\" rule:path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "case (Cons_path n'' as a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* (_Entry_)\n  n'' = (_Entry_)\n  as = []\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n\ngoal (4 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "from \\<open>targetnode a = n''\\<close> \\<open>valid_edge a\\<close> \\<open>n'' = (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  targetnode a = n''\n  valid_edge a\n  n'' = (_Entry_)", "have False"], ["proof (prove)\nusing this:\n  targetnode a = n''\n  valid_edge a\n  n'' = (_Entry_)\n\ngoal (1 subgoal):\n 1. False", "by -(rule Entry_target,simp_all)"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "{"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "with \\<open>False\\<close>"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n = (_Entry_)", ".."], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (3 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []\n 3. \\<And>n'' as a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* (_Entry_); n'' = (_Entry_); as = [];\n        valid_edge a; sourcenode a = n; targetnode a = n''\\<rbrakk>\n       \\<Longrightarrow> a # as = []", "with \\<open>False\\<close>"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. a # as = []", ".."], ["proof (state)\nthis:\n  a # as = []\n\ngoal (2 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []", "}"], ["proof (state)\nthis:\n  a # as = []\n\ngoal (2 subgoals):\n 1. valid_node (_Entry_) \\<Longrightarrow> (_Entry_) = (_Entry_)\n 2. valid_node (_Entry_) \\<Longrightarrow> [] = []", "qed simp_all"], ["", "lemma path_Append:\"\\<lbrakk>n -as\\<rightarrow>* n''; n'' -as'\\<rightarrow>* n'\\<rbrakk> \n  \\<Longrightarrow> n -as@as'\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n''; n'' -as'\\<rightarrow>* n'\\<rbrakk>\n    \\<Longrightarrow> n -as @ as'\\<rightarrow>* n'", "by(induct rule:path.induct,auto intro:Cons_path)"], ["", "lemma path_split:\n  assumes \"n -as@a#as'\\<rightarrow>* n'\"\n  shows \"n -as\\<rightarrow>* sourcenode a\" and \"valid_edge a\" and \"targetnode a -as'\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* sourcenode a &&&\n    valid_edge a &&& targetnode a -as'\\<rightarrow>* n'", "using \\<open>n -as@a#as'\\<rightarrow>* n'\\<close>"], ["proof (prove)\nusing this:\n  n -as @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* sourcenode a &&&\n    valid_edge a &&& targetnode a -as'\\<rightarrow>* n'", "proof(induct as arbitrary:n)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       n -[]\\<rightarrow>* sourcenode a\n 2. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 3. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 6. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       n -[]\\<rightarrow>* sourcenode a\n 2. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 3. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 6. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 1"], ["proof (state)\nthis:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (6 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       n -[]\\<rightarrow>* sourcenode a\n 2. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 3. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 6. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "thus ?case"], ["proof (prove)\nusing this:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* sourcenode a", "by(fastforce elim:path.cases intro:empty_path)"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* sourcenode a\n\ngoal (5 subgoals):\n 1. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 2. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 2. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 2. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 2"], ["proof (state)\nthis:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (5 subgoals):\n 1. \\<And>n. n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n 2. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 5. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "thus ?case"], ["proof (prove)\nusing this:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_edge a", "by(fastforce elim:path.cases intro:path_edge)"], ["proof (state)\nthis:\n  valid_edge a\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 3"], ["proof (state)\nthis:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       n -[] @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n       targetnode a -as'\\<rightarrow>* n'\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 4. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "thus ?case"], ["proof (prove)\nusing this:\n  n -[] @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n'", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case (Cons ax asx)"], ["proof (state)\nthis:\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  ?n -asx\\<rightarrow>* sourcenode a\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "note IH1 = \\<open>\\<And>n. n -asx@a#as'\\<rightarrow>* n' \\<Longrightarrow> n -asx\\<rightarrow>* sourcenode a\\<close>"], ["proof (state)\nthis:\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  ?n -asx\\<rightarrow>* sourcenode a\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "note IH2 = \\<open>\\<And>n. n -asx@a#as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\\<close>"], ["proof (state)\nthis:\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "note IH3 = \\<open>\\<And>n. n -asx@a#as'\\<rightarrow>* n' \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'\\<close>"], ["proof (state)\nthis:\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "{"], ["proof (state)\nthis:\n  ?n -asx @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 1"], ["proof (state)\nthis:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "hence \"sourcenode ax = n\" and \"targetnode ax -asx@a#as'\\<rightarrow>* n'\" and \"valid_edge ax\""], ["proof (prove)\nusing this:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. sourcenode ax = n &&&\n    targetnode ax -asx @ a # as'\\<rightarrow>* n' &&& valid_edge ax", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  sourcenode ax = n\n  targetnode ax -asx @ a # as'\\<rightarrow>* n'\n  valid_edge ax\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "from IH1[OF \\<open> targetnode ax -asx@a#as'\\<rightarrow>* n'\\<close>]"], ["proof (chain)\npicking this:\n  targetnode ax -asx\\<rightarrow>* sourcenode a", "have \"targetnode ax -asx\\<rightarrow>* sourcenode a\""], ["proof (prove)\nusing this:\n  targetnode ax -asx\\<rightarrow>* sourcenode a\n\ngoal (1 subgoal):\n 1. targetnode ax -asx\\<rightarrow>* sourcenode a", "."], ["proof (state)\nthis:\n  targetnode ax -asx\\<rightarrow>* sourcenode a\n\ngoal (3 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> n -aa # as\\<rightarrow>* sourcenode a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 3. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "with \\<open>sourcenode ax = n\\<close> \\<open>valid_edge ax\\<close>"], ["proof (chain)\npicking this:\n  sourcenode ax = n\n  valid_edge ax\n  targetnode ax -asx\\<rightarrow>* sourcenode a", "show ?case"], ["proof (prove)\nusing this:\n  sourcenode ax = n\n  valid_edge ax\n  targetnode ax -asx\\<rightarrow>* sourcenode a\n\ngoal (1 subgoal):\n 1. n -ax # asx\\<rightarrow>* sourcenode a", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  n -ax # asx\\<rightarrow>* sourcenode a\n\ngoal (2 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 2"], ["proof (state)\nthis:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "hence \"targetnode ax -asx@a#as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode ax -asx @ a # as'\\<rightarrow>* n'", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  targetnode ax -asx @ a # as'\\<rightarrow>* n'\n\ngoal (2 subgoals):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> valid_edge a\n 2. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "from IH2[OF this]"], ["proof (chain)\npicking this:\n  valid_edge a", "show ?case"], ["proof (prove)\nusing this:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. valid_edge a", "."], ["proof (state)\nthis:\n  valid_edge a\n\ngoal (1 subgoal):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "case 3"], ["proof (state)\nthis:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "hence \"targetnode ax -asx@a#as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -(ax # asx) @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode ax -asx @ a # as'\\<rightarrow>* n'", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  targetnode ax -asx @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>aa as n.\n       \\<lbrakk>\\<And>n.\n                   n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n                   n -as\\<rightarrow>* sourcenode a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow> valid_edge a;\n        \\<And>n.\n           n -as @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n           targetnode a -as'\\<rightarrow>* n';\n        n -(aa # as) @ a # as'\\<rightarrow>* n'\\<rbrakk>\n       \\<Longrightarrow> targetnode a -as'\\<rightarrow>* n'", "from IH3[OF this]"], ["proof (chain)\npicking this:\n  targetnode a -as'\\<rightarrow>* n'", "show ?case"], ["proof (prove)\nusing this:\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a -as'\\<rightarrow>* n'", "."], ["proof (state)\nthis:\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  ?na2 -(ax # asx) @ a # as'\\<rightarrow>* n' \\<Longrightarrow>\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_split_Cons:\n  assumes \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"\n  obtains a' as' where \"as = a'#as'\" and \"n = sourcenode a'\"\n  and \"valid_edge a'\" and \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>as \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  as \\<noteq> []", "obtain a' as' where \"as = a'#as'\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'. as = a' # as' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases as) auto"], ["proof (state)\nthis:\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>n -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'", "have \"n -[]@a'#as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. n -[] @ a' # as'\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  n -[] @ a' # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"n -[]\\<rightarrow>* sourcenode a'\" and \"valid_edge a'\" and \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -[] @ a' # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* sourcenode a' &&&\n    valid_edge a' &&& targetnode a' -as'\\<rightarrow>* n'", "by(rule path_split)+"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>n -[]\\<rightarrow>* sourcenode a'\\<close>"], ["proof (chain)\npicking this:\n  n -[]\\<rightarrow>* sourcenode a'", "have \"n = sourcenode a'\""], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. n = sourcenode a'", "by fast"], ["proof (state)\nthis:\n  n = sourcenode a'\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; n = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>as = a'#as'\\<close> \\<open>valid_edge a'\\<close> \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close> that"], ["proof (chain)\npicking this:\n  as = a' # as'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n  \\<lbrakk>as = ?a' # ?as'; n = sourcenode ?a'; valid_edge ?a';\n   targetnode ?a' -?as'\\<rightarrow>* n'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n = sourcenode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  as = a' # as'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n  \\<lbrakk>as = ?a' # ?as'; n = sourcenode ?a'; valid_edge ?a';\n   targetnode ?a' -?as'\\<rightarrow>* n'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n = sourcenode a'\n\ngoal (1 subgoal):\n 1. thesis", "by fastforce"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_split_snoc:\n  assumes \"n -as\\<rightarrow>* n'\" and \"as \\<noteq> []\"\n  obtains a' as' where \"as = as'@[a']\" and \"n -as'\\<rightarrow>* sourcenode a'\"\n  and \"valid_edge a'\" and \"n' = targetnode a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>as \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  as \\<noteq> []", "obtain a' as' where \"as = as'@[a']\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        as = as' @ [a'] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases as rule:rev_cases) auto"], ["proof (state)\nthis:\n  as = as' @ [a']\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>n -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  as = as' @ [a']", "have \"n -as'@a'#[]\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  as = as' @ [a']\n\ngoal (1 subgoal):\n 1. n -as' @ [a']\\<rightarrow>* n'", "by simp"], ["proof (state)\nthis:\n  n -as' @ [a']\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"n -as'\\<rightarrow>* sourcenode a'\" and \"valid_edge a'\" and \"targetnode a' -[]\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as' @ [a']\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* sourcenode a' &&&\n    valid_edge a' &&& targetnode a' -[]\\<rightarrow>* n'", "by(rule path_split)+"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* sourcenode a'\n  valid_edge a'\n  targetnode a' -[]\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>targetnode a' -[]\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -[]\\<rightarrow>* n'", "have \"n' = targetnode a'\""], ["proof (prove)\nusing this:\n  targetnode a' -[]\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n' = targetnode a'", "by fast"], ["proof (state)\nthis:\n  n' = targetnode a'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a'.\n        \\<lbrakk>as = as' @ [a']; n -as'\\<rightarrow>* sourcenode a';\n         valid_edge a'; n' = targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>as = as'@[a']\\<close> \\<open>valid_edge a'\\<close> \\<open>n -as'\\<rightarrow>* sourcenode a'\\<close> that"], ["proof (chain)\npicking this:\n  as = as' @ [a']\n  valid_edge a'\n  n -as'\\<rightarrow>* sourcenode a'\n  \\<lbrakk>as = ?as' @ [?a']; n -?as'\\<rightarrow>* sourcenode ?a';\n   valid_edge ?a'; n' = targetnode ?a'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n' = targetnode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  as = as' @ [a']\n  valid_edge a'\n  n -as'\\<rightarrow>* sourcenode a'\n  \\<lbrakk>as = ?as' @ [?a']; n -?as'\\<rightarrow>* sourcenode ?a';\n   valid_edge ?a'; n' = targetnode ?a'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n' = targetnode a'\n\ngoal (1 subgoal):\n 1. thesis", "by fastforce"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_split_second:\n  assumes \"n -as@a#as'\\<rightarrow>* n'\" shows \"sourcenode a -a#as'\\<rightarrow>* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n'", "from \\<open>n -as@a#as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as @ a # as'\\<rightarrow>* n'", "have \"valid_edge a\" and \"targetnode a -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as @ a # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. valid_edge a &&& targetnode a -as'\\<rightarrow>* n'", "by(auto intro:path_split)"], ["proof (state)\nthis:\n  valid_edge a\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as'\\<rightarrow>* n'", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # as'\\<rightarrow>* n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_Entry_Cons:\n  assumes \"(_Entry_) -as\\<rightarrow>* n'\" and \"n' \\<noteq> (_Entry_)\"\n  obtains n a where \"sourcenode a = (_Entry_)\" and \"targetnode a = n\"\n  and \"n -tl as\\<rightarrow>* n'\" and \"valid_edge a\" and \"a = hd as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a n.\n        \\<lbrakk>sourcenode a = (_Entry_); targetnode a = n;\n         n -tl as\\<rightarrow>* n'; valid_edge a; a = hd as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a n.\n        \\<lbrakk>sourcenode a = (_Entry_); targetnode a = n;\n         n -tl as\\<rightarrow>* n'; valid_edge a; a = hd as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>(_Entry_) -as\\<rightarrow>* n'\\<close> \\<open>n' \\<noteq> (_Entry_)\\<close>"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* n'\n  n' \\<noteq> (_Entry_)", "have \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* n'\n  n' \\<noteq> (_Entry_)\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by(cases as,auto elim:path.cases)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a n.\n        \\<lbrakk>sourcenode a = (_Entry_); targetnode a = n;\n         n -tl as\\<rightarrow>* n'; valid_edge a; a = hd as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>(_Entry_) -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  (_Entry_) -as\\<rightarrow>* n'\n  as \\<noteq> []", "obtain a' as' where \"as = a'#as'\" \n    and \"(_Entry_) = sourcenode a'\" and \"valid_edge a'\" and \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  (_Entry_) -as\\<rightarrow>* n'\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; (_Entry_) = sourcenode a'; valid_edge a';\n         targetnode a' -as'\\<rightarrow>* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule path_split_Cons)"], ["proof (state)\nthis:\n  as = a' # as'\n  (_Entry_) = sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. (\\<And>a n.\n        \\<lbrakk>sourcenode a = (_Entry_); targetnode a = n;\n         n -tl as\\<rightarrow>* n'; valid_edge a; a = hd as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>sourcenode ?a = (_Entry_); targetnode ?a = ?n;\n   ?n -tl as\\<rightarrow>* n'; valid_edge ?a; ?a = hd as\\<rbrakk>\n  \\<Longrightarrow> thesis\n  as = a' # as'\n  (_Entry_) = sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>sourcenode ?a = (_Entry_); targetnode ?a = ?n;\n   ?n -tl as\\<rightarrow>* n'; valid_edge ?a; ?a = hd as\\<rbrakk>\n  \\<Longrightarrow> thesis\n  as = a' # as'\n  (_Entry_) = sourcenode a'\n  valid_edge a'\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. thesis", "by fastforce"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_det:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; n -as\\<rightarrow>* n''\\<rbrakk> \\<Longrightarrow> n' = n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; n -as\\<rightarrow>* n''\\<rbrakk>\n    \\<Longrightarrow> n' = n''", "proof(induct as arbitrary:n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; n -[]\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''\n 2. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "case Nil"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n'\n  n -[]\\<rightarrow>* n''\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; n -[]\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''\n 2. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "thus ?case"], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* n'\n  n -[]\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. n' = n''", "by(auto elim:path.cases)"], ["proof (state)\nthis:\n  n' = n''\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "case (Cons a' as')"], ["proof (state)\nthis:\n  \\<lbrakk>?n -as'\\<rightarrow>* n'; ?n -as'\\<rightarrow>* n''\\<rbrakk>\n  \\<Longrightarrow> n' = n''\n  n -a' # as'\\<rightarrow>* n'\n  n -a' # as'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "note IH = \\<open>\\<And>n. \\<lbrakk>n -as'\\<rightarrow>* n'; n -as'\\<rightarrow>* n''\\<rbrakk> \\<Longrightarrow> n' = n''\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?n -as'\\<rightarrow>* n'; ?n -as'\\<rightarrow>* n''\\<rbrakk>\n  \\<Longrightarrow> n' = n''\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "from \\<open>n -a'#as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>* n'", "have \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. targetnode a' -as'\\<rightarrow>* n'", "by(fastforce elim:path_split_Cons)"], ["proof (state)\nthis:\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "from \\<open>n -a'#as'\\<rightarrow>* n''\\<close>"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>* n''", "have \"targetnode a' -as'\\<rightarrow>* n''\""], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. targetnode a' -as'\\<rightarrow>* n''", "by(fastforce elim:path_split_Cons)"], ["proof (state)\nthis:\n  targetnode a' -as'\\<rightarrow>* n''\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n';\n                    n -as\\<rightarrow>* n''\\<rbrakk>\n                   \\<Longrightarrow> n' = n'';\n        n -a # as\\<rightarrow>* n'; n -a # as\\<rightarrow>* n''\\<rbrakk>\n       \\<Longrightarrow> n' = n''", "from IH[OF \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close> this]"], ["proof (chain)\npicking this:\n  n' = n''", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = n''\n\ngoal (1 subgoal):\n 1. n' = n''", "."], ["proof (state)\nthis:\n  n' = n''\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  sourcenodes :: \"'edge list \\<Rightarrow> 'node list\"\n  where \"sourcenodes xs \\<equiv> map sourcenode xs\""], ["", "definition\n  kinds :: \"'edge list \\<Rightarrow> 'state edge_kind list\"\n  where \"kinds xs \\<equiv> map kind xs\""], ["", "definition\n  targetnodes :: \"'edge list \\<Rightarrow> 'node list\"\n  where \"targetnodes xs \\<equiv> map targetnode xs\""], ["", "lemma path_sourcenode:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> hd (sourcenodes as) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (sourcenodes as) = n", "by(fastforce elim:path_split_Cons simp:sourcenodes_def)"], ["", "lemma path_targetnode:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> last (targetnodes as) = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (targetnodes as) = n'", "by(fastforce elim:path_split_snoc simp:targetnodes_def)"], ["", "lemma sourcenodes_is_n_Cons_butlast_targetnodes:\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> \n  sourcenodes as = n#(butlast (targetnodes as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> sourcenodes as = n # butlast (targetnodes as)", "proof(induct as arbitrary:n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes [] = n # butlast (targetnodes [])\n 2. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "case Nil"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n'\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes [] = n # butlast (targetnodes [])\n 2. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "thus ?case"], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* n'\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. sourcenodes [] = n # butlast (targetnodes [])", "by simp"], ["proof (state)\nthis:\n  sourcenodes [] = n # butlast (targetnodes [])\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "case (Cons a' as')"], ["proof (state)\nthis:\n  \\<lbrakk>?n -as'\\<rightarrow>* n'; as' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> sourcenodes as' = ?n # butlast (targetnodes as')\n  n -a' # as'\\<rightarrow>* n'\n  a' # as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "note IH = \\<open>\\<And>n. \\<lbrakk>n -as'\\<rightarrow>* n'; as' \\<noteq> []\\<rbrakk>\n            \\<Longrightarrow> sourcenodes as' = n#(butlast (targetnodes as'))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?n -as'\\<rightarrow>* n'; as' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> sourcenodes as' = ?n # butlast (targetnodes as')\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "from \\<open>n -a'#as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -a' # as'\\<rightarrow>* n'", "have \"n = sourcenode a'\" and \"targetnode a' -as'\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -a' # as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n = sourcenode a' &&& targetnode a' -as'\\<rightarrow>* n'", "by(auto elim:path_split_Cons)"], ["proof (state)\nthis:\n  n = sourcenode a'\n  targetnode a' -as'\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. \\<And>a as n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sourcenodes as =\n                                     n # butlast (targetnodes as);\n        n -a # as\\<rightarrow>* n'; a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sourcenodes (a # as) =\n                         n # butlast (targetnodes (a # as))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "proof(cases \"as' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "case True"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "with \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -as'\\<rightarrow>* n'\n  as' = []", "have \"targetnode a' = n'\""], ["proof (prove)\nusing this:\n  targetnode a' -as'\\<rightarrow>* n'\n  as' = []\n\ngoal (1 subgoal):\n 1. targetnode a' = n'", "by fast"], ["proof (state)\nthis:\n  targetnode a' = n'\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "with True \\<open>n = sourcenode a'\\<close>"], ["proof (chain)\npicking this:\n  as' = []\n  n = sourcenode a'\n  targetnode a' = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  as' = []\n  n = sourcenode a'\n  targetnode a' = n'\n\ngoal (1 subgoal):\n 1. sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "by(simp add:sourcenodes_def targetnodes_def)"], ["proof (state)\nthis:\n  sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "case False"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "from IH[OF \\<open>targetnode a' -as'\\<rightarrow>* n'\\<close> this]"], ["proof (chain)\npicking this:\n  sourcenodes as' = targetnode a' # butlast (targetnodes as')", "have \"sourcenodes as' = targetnode a' # butlast (targetnodes as')\""], ["proof (prove)\nusing this:\n  sourcenodes as' = targetnode a' # butlast (targetnodes as')\n\ngoal (1 subgoal):\n 1. sourcenodes as' = targetnode a' # butlast (targetnodes as')", "."], ["proof (state)\nthis:\n  sourcenodes as' = targetnode a' # butlast (targetnodes as')\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "with \\<open>n = sourcenode a'\\<close> False"], ["proof (chain)\npicking this:\n  n = sourcenode a'\n  as' \\<noteq> []\n  sourcenodes as' = targetnode a' # butlast (targetnodes as')", "show ?thesis"], ["proof (prove)\nusing this:\n  n = sourcenode a'\n  as' \\<noteq> []\n  sourcenodes as' = targetnode a' # butlast (targetnodes as')\n\ngoal (1 subgoal):\n 1. sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))", "by(simp add:sourcenodes_def targetnodes_def)"], ["proof (state)\nthis:\n  sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenodes (a' # as') = n # butlast (targetnodes (a' # as'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma targetnodes_is_tl_sourcenodes_App_n':\n  \"\\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk> \\<Longrightarrow> \n    targetnodes as = (tl (sourcenodes as))@[n']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n -as\\<rightarrow>* n'; as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> targetnodes as = tl (sourcenodes as) @ [n']", "proof(induct as arbitrary:n' rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n'.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes [] = tl (sourcenodes []) @ [n']\n 2. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "case Nil"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n'\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n'.\n       \\<lbrakk>n -[]\\<rightarrow>* n'; [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes [] = tl (sourcenodes []) @ [n']\n 2. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "thus ?case"], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* n'\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. targetnodes [] = tl (sourcenodes []) @ [n']", "by simp"], ["proof (state)\nthis:\n  targetnodes [] = tl (sourcenodes []) @ [n']\n\ngoal (1 subgoal):\n 1. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "case (snoc a' as')"], ["proof (state)\nthis:\n  \\<lbrakk>n -as'\\<rightarrow>* ?n'; as' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> targetnodes as' = tl (sourcenodes as') @ [?n']\n  n -as' @ [a']\\<rightarrow>* n'\n  as' @ [a'] \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "note IH = \\<open>\\<And>n'. \\<lbrakk>n -as'\\<rightarrow>* n'; as' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> targetnodes as' = tl (sourcenodes as') @ [n']\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n -as'\\<rightarrow>* ?n'; as' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> targetnodes as' = tl (sourcenodes as') @ [?n']\n\ngoal (1 subgoal):\n 1. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "from \\<open>n -as'@[a']\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as' @ [a']\\<rightarrow>* n'", "have \"n -as'\\<rightarrow>* sourcenode a'\" and \"n' = targetnode a'\""], ["proof (prove)\nusing this:\n  n -as' @ [a']\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>* sourcenode a' &&& n' = targetnode a'", "by(auto elim:path_split_snoc)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>* sourcenode a'\n  n' = targetnode a'\n\ngoal (1 subgoal):\n 1. \\<And>x xs n'.\n       \\<lbrakk>\\<And>n'.\n                   \\<lbrakk>n -xs\\<rightarrow>* n'; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> targetnodes xs =\n                                     tl (sourcenodes xs) @ [n'];\n        n -xs @ [x]\\<rightarrow>* n'; xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> targetnodes (xs @ [x]) =\n                         tl (sourcenodes (xs @ [x])) @ [n']", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "proof(cases \"as' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "case True"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "with \\<open>n -as'\\<rightarrow>* sourcenode a'\\<close>"], ["proof (chain)\npicking this:\n  n -as'\\<rightarrow>* sourcenode a'\n  as' = []", "have \"n = sourcenode a'\""], ["proof (prove)\nusing this:\n  n -as'\\<rightarrow>* sourcenode a'\n  as' = []\n\ngoal (1 subgoal):\n 1. n = sourcenode a'", "by fast"], ["proof (state)\nthis:\n  n = sourcenode a'\n\ngoal (2 subgoals):\n 1. as' = [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n 2. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "with True \\<open>n' = targetnode a'\\<close>"], ["proof (chain)\npicking this:\n  as' = []\n  n' = targetnode a'\n  n = sourcenode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  as' = []\n  n' = targetnode a'\n  n = sourcenode a'\n\ngoal (1 subgoal):\n 1. targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "by(simp add:sourcenodes_def targetnodes_def)"], ["proof (state)\nthis:\n  targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "case False"], ["proof (state)\nthis:\n  as' \\<noteq> []\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "from IH[OF \\<open>n -as'\\<rightarrow>* sourcenode a'\\<close> this]"], ["proof (chain)\npicking this:\n  targetnodes as' = tl (sourcenodes as') @ [sourcenode a']", "have \"targetnodes as' = tl (sourcenodes as')@[sourcenode a']\""], ["proof (prove)\nusing this:\n  targetnodes as' = tl (sourcenodes as') @ [sourcenode a']\n\ngoal (1 subgoal):\n 1. targetnodes as' = tl (sourcenodes as') @ [sourcenode a']", "."], ["proof (state)\nthis:\n  targetnodes as' = tl (sourcenodes as') @ [sourcenode a']\n\ngoal (1 subgoal):\n 1. as' \\<noteq> [] \\<Longrightarrow>\n    targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "with \\<open>n' = targetnode a'\\<close> False"], ["proof (chain)\npicking this:\n  n' = targetnode a'\n  as' \\<noteq> []\n  targetnodes as' = tl (sourcenodes as') @ [sourcenode a']", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = targetnode a'\n  as' \\<noteq> []\n  targetnodes as' = tl (sourcenodes as') @ [sourcenode a']\n\ngoal (1 subgoal):\n 1. targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']", "by(simp add:sourcenodes_def targetnodes_def)"], ["proof (state)\nthis:\n  targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  targetnodes (as' @ [a']) = tl (sourcenodes (as' @ [a'])) @ [n']\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Entry_sourcenode_hd:\n  assumes \"n -as\\<rightarrow>* n'\" and \"(_Entry_) \\<in> set (sourcenodes as)\"\n  shows \"n = (_Entry_)\" and \"(_Entry_) \\<notin> set (sourcenodes (tl as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = (_Entry_) &&& (_Entry_) \\<notin> set (sourcenodes (tl as))", "using \\<open>n -as\\<rightarrow>* n'\\<close> \\<open>(_Entry_) \\<in> set (sourcenodes as)\\<close>"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  (_Entry_) \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. n = (_Entry_) &&& (_Entry_) \\<notin> set (sourcenodes (tl as))", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case (empty_path n)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case 1"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes [])\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 4. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "thus ?case"], ["proof (prove)\nusing this:\n  (_Entry_) \\<in> set (sourcenodes [])\n\ngoal (1 subgoal):\n 1. n = (_Entry_)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case (empty_path n)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case 2"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes [])\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; (_Entry_) \\<in> set (sourcenodes [])\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl []))\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 3. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "thus ?case"], ["proof (prove)\nusing this:\n  (_Entry_) \\<in> set (sourcenodes [])\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<notin> set (sourcenodes (tl []))", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  (_Entry_) \\<notin> set (sourcenodes (tl []))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow> n'' = (_Entry_)\n  (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n  (_Entry_) \\<notin> set (sourcenodes (tl as))\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "note IH1 = \\<open>(_Entry_) \\<in> set(sourcenodes as) \\<Longrightarrow> n'' = (_Entry_)\\<close>"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow> n'' = (_Entry_)\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "note IH2 = \\<open>(_Entry_) \\<in> set(sourcenodes as) \\<Longrightarrow> (_Entry_) \\<notin> set(sourcenodes(tl as))\\<close>"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n  (_Entry_) \\<notin> set (sourcenodes (tl as))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "have \"(_Entry_) \\<notin> set (sourcenodes(tl(a#as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes (tl (a # as))) \\<Longrightarrow> False", "assume \"(_Entry_) \\<in> set (sourcenodes (tl (a#as)))\""], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes (tl (a # as)))\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes (tl (a # as))) \\<Longrightarrow> False", "hence \"(_Entry_) \\<in> set (sourcenodes as)\""], ["proof (prove)\nusing this:\n  (_Entry_) \\<in> set (sourcenodes (tl (a # as)))\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes as)", "by simp"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes as)\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes (tl (a # as))) \\<Longrightarrow> False", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  n'' = (_Entry_)", "have \"n'' = (_Entry_)\""], ["proof (prove)\nusing this:\n  n'' = (_Entry_)\n\ngoal (1 subgoal):\n 1. n'' = (_Entry_)", "by simp"], ["proof (state)\nthis:\n  n'' = (_Entry_)\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<in> set (sourcenodes (tl (a # as))) \\<Longrightarrow> False", "with \\<open>targetnode a = n''\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  targetnode a = n''\n  valid_edge a\n  n'' = (_Entry_)", "show False"], ["proof (prove)\nusing this:\n  targetnode a = n''\n  valid_edge a\n  n'' = (_Entry_)\n\ngoal (1 subgoal):\n 1. False", "by -(erule Entry_target,simp)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "hence \"(_Entry_) \\<notin> set (sourcenodes(tl(a#as)))\""], ["proof (prove)\nusing this:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "by fastforce"], ["proof (state)\nthis:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "{"], ["proof (state)\nthis:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case 1"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes (a # as))\n\ngoal (2 subgoals):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> n = (_Entry_)\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "with \\<open>(_Entry_) \\<notin> set (sourcenodes(tl(a#as)))\\<close> \\<open>sourcenode a = n\\<close>"], ["proof (chain)\npicking this:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n  sourcenode a = n\n  (_Entry_) \\<in> set (sourcenodes (a # as))", "show ?case"], ["proof (prove)\nusing this:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n  sourcenode a = n\n  (_Entry_) \\<in> set (sourcenodes (a # as))\n\ngoal (1 subgoal):\n 1. n = (_Entry_)", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n = (_Entry_)\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "case 2"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        n'' = (_Entry_);\n        (_Entry_) \\<in> set (sourcenodes as) \\<Longrightarrow>\n        (_Entry_) \\<notin> set (sourcenodes (tl as));\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        (_Entry_) \\<in> set (sourcenodes (a # as))\\<rbrakk>\n       \\<Longrightarrow> (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "with \\<open>(_Entry_) \\<notin> set (sourcenodes(tl(a#as)))\\<close> \\<open>sourcenode a = n\\<close>"], ["proof (chain)\npicking this:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n  sourcenode a = n\n  (_Entry_) \\<in> set (sourcenodes (a # as))", "show ?case"], ["proof (prove)\nusing this:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n  sourcenode a = n\n  (_Entry_) \\<in> set (sourcenodes (a # as))\n\ngoal (1 subgoal):\n 1. (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  (_Entry_) \\<in> set (sourcenodes (a # as)) \\<Longrightarrow>\n  (_Entry_) \\<notin> set (sourcenodes (tl (a # as)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}