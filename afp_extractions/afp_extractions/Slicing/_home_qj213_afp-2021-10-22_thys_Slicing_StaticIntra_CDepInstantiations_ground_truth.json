{"file_name": "/home/qj213/afp-2021-10-22/thys/Slicing/StaticIntra/CDepInstantiations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Slicing", "problem_names": ["lemma Exit_in_obs_slice_node:\"(_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S\"", "lemma cd_closed:\n  \"\\<lbrakk>n' \\<in> PDG_BS S; n controls\\<^sub>s n'\\<rbrakk> \\<Longrightarrow> n \\<in> PDG_BS S\"", "lemma obs_postdominate:\n  assumes \"n \\<in> obs n' (PDG_BS S)\" and \"n \\<noteq> (_Exit_)\" shows \"n postdominates n'\"", "lemma obs_singleton:\"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\"", "lemma PDGBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val PDG_BS\"", "lemma Exit_in_obs_slice_node:\"(_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S\"", "lemma cd_closed:\n  \"\\<lbrakk>n' \\<in> PDG_BS S; n weakly controls n'\\<rbrakk> \\<Longrightarrow> n \\<in> PDG_BS S\"", "lemma obs_strong_postdominate:\n  assumes \"n \\<in> obs n' (PDG_BS S)\" and \"n \\<noteq> (_Exit_)\" \n  shows \"n strongly-postdominates n'\"", "lemma obs_singleton:\"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\"", "lemma WeakPDGBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val PDG_BS\"", "lemma obs_singleton: \n  (*assumes valid:\"valid_node n\"*)\n  shows \"(\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n         obs n (wod_backward_slice S) = {}\"", "lemma WODBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val wod_backward_slice\""], "translations": [["", "lemma Exit_in_obs_slice_node:\"(_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S", "by(auto elim:obsE PDG_path_CFG_path simp:PDG_BS_def split:if_split_asm)"], ["", "abbreviation PDG_path' :: \"'node \\<Rightarrow> 'node \\<Rightarrow> bool\" (\"_ \\<longrightarrow>\\<^sub>d* _\" [51,0] 80)\n  where \"n \\<longrightarrow>\\<^sub>d* n' \\<equiv> PDG.PDG_path sourcenode targetnode valid_edge Def Use\n  standard_control_dependence n n'\""], ["", "lemma cd_closed:\n  \"\\<lbrakk>n' \\<in> PDG_BS S; n controls\\<^sub>s n'\\<rbrakk> \\<Longrightarrow> n \\<in> PDG_BS S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' \\<in> PDG_BS S; n controls\\<^sub>s n'\\<rbrakk>\n    \\<Longrightarrow> n \\<in> PDG_BS S", "by(simp add:PDG_BS_def)(blast dest:PDG_cdep_edge PDG_path_Append PDG_path_cdep)"], ["", "lemma obs_postdominate:\n  assumes \"n \\<in> obs n' (PDG_BS S)\" and \"n \\<noteq> (_Exit_)\" shows \"n postdominates n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n postdominates n'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "assume \"\\<not> n postdominates n'\""], ["proof (state)\nthis:\n  \\<not> n postdominates n'\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)", "have \"valid_node n\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. valid_node n", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>n \\<in> obs n' (PDG_BS S)\\<close> \\<open>n \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  n \\<noteq> (_Exit_)\n  valid_node n", "have \"n postdominates n\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  n \\<noteq> (_Exit_)\n  valid_node n\n\ngoal (1 subgoal):\n 1. n postdominates n", "by(fastforce intro:postdominate_refl)"], ["proof (state)\nthis:\n  n postdominates n\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)", "obtain as where \"n' -as\\<rightarrow>* n\"\n    and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\"\n    and \"n \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n' -as\\<rightarrow>* n;\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n         n \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n' -as\\<rightarrow>* n\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  n \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>n postdominates n\\<close> \\<open>\\<not> n postdominates n'\\<close> \\<open>n' -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  n postdominates n\n  \\<not> n postdominates n'\n  n' -as\\<rightarrow>* n", "obtain as' a as'' where [simp]:\"as = as'@a#as''\" and \"valid_edge a\"\n    and \"\\<not> n postdominates (sourcenode a)\" and \"n postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  n postdominates n\n  \\<not> n postdominates n'\n  n' -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as''; valid_edge a;\n         \\<not> n postdominates sourcenode a;\n         n postdominates targetnode a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule postdominate_path_branch)"], ["proof (state)\nthis:\n  as = as' @ a # as''\n  valid_edge a\n  \\<not> n postdominates sourcenode a\n  n postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>\\<not> n postdominates (sourcenode a)\\<close> \\<open>valid_edge a\\<close> \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n postdominates sourcenode a\n  valid_edge a\n  valid_node n", "obtain asx  where \"sourcenode a -asx\\<rightarrow>* (_Exit_)\"\n    and \"n \\<notin> set(sourcenodes asx)\""], ["proof (prove)\nusing this:\n  \\<not> n postdominates sourcenode a\n  valid_edge a\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>asx.\n        \\<lbrakk>sourcenode a -asx\\<rightarrow>* (_Exit_);\n         n \\<notin> set (sourcenodes asx)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:postdominate_def)"], ["proof (state)\nthis:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  n \\<notin> set (sourcenodes asx)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>sourcenode a -asx\\<rightarrow>* (_Exit_)\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  valid_edge a", "obtain ax asx' where [simp]:\"asx = ax#asx'\""], ["proof (prove)\nusing this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  valid_edge a\n\ngoal (1 subgoal):\n 1. (\\<And>ax asx'.\n        asx = ax # asx' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n     sourcenode a -asx\\<rightarrow>* (_Exit_); valid_edge a\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply(erule path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = []; (_Exit_) = n;\n        valid_node n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule_tac s=\"(_Exit_)\" in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = []; valid_node n;\n        n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_edge a; sourcenode a = (_Exit_); asx = [];\n        n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply(drule Exit_source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>sourcenode a = (_Exit_); asx = []; n = (_Exit_)\\<rbrakk>\n       \\<Longrightarrow> sourcenode a = (_Exit_)\n 2. \\<And>n.\n       \\<lbrakk>sourcenode a = (_Exit_); asx = []; n = (_Exit_);\n        False\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>n'' as n' aa n.\n       \\<lbrakk>\\<And>ax asx'. asx = ax # asx' \\<Longrightarrow> thesis;\n        valid_edge a; sourcenode a = n; asx = aa # as; (_Exit_) = n';\n        n'' -as\\<rightarrow>* n'; valid_edge aa; sourcenode aa = n;\n        targetnode aa = n''\\<rbrakk>\n       \\<Longrightarrow> thesis", "by simp_all"], ["proof (state)\nthis:\n  asx = ax # asx'\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>sourcenode a -asx\\<rightarrow>* (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  asx = ax # asx'", "have \"sourcenode a -[]@ax#asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -asx\\<rightarrow>* (_Exit_)\n  asx = ax # asx'\n\ngoal (1 subgoal):\n 1. sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)", "by simp"], ["proof (state)\nthis:\n  sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "hence \"valid_edge ax\" and [simp]:\"sourcenode a = sourcenode ax\"\n    and \"targetnode ax -asx'\\<rightarrow>* (_Exit_)\""], ["proof (prove)\nusing this:\n  sourcenode a -[] @ ax # asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. valid_edge ax &&&\n    sourcenode a = sourcenode ax &&&\n    targetnode ax -asx'\\<rightarrow>* (_Exit_)", "by(fastforce dest:path_split)+"], ["proof (state)\nthis:\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>n \\<notin> set(sourcenodes asx)\\<close>"], ["proof (chain)\npicking this:\n  n \\<notin> set (sourcenodes asx)\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)", "have \"\\<not> n postdominates targetnode ax\""], ["proof (prove)\nusing this:\n  n \\<notin> set (sourcenodes asx)\n  valid_edge ax\n  sourcenode a = sourcenode ax\n  targetnode ax -asx'\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates targetnode ax", "by(fastforce simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> n postdominates targetnode ax\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close> \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S", "have \"n \\<notin> set (sourcenodes (a#as''))\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes (a # as''))", "by(fastforce elim:obs.cases simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> set (sourcenodes (a # as''))\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "from \\<open>n' -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  n' -as\\<rightarrow>* n", "have \"sourcenode a -a#as''\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  n' -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as''\\<rightarrow>* n", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  sourcenode a -a # as''\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>n postdominates (targetnode a)\\<close> \\<open>\\<not> n postdominates targetnode ax\\<close>\n    \\<open>valid_edge ax\\<close> \\<open>n \\<notin> set (sourcenodes (a#as''))\\<close>"], ["proof (chain)\npicking this:\n  n postdominates targetnode a\n  \\<not> n postdominates targetnode ax\n  valid_edge ax\n  n \\<notin> set (sourcenodes (a # as''))\n  sourcenode a -a # as''\\<rightarrow>* n", "have \"sourcenode a controls\\<^sub>s n\""], ["proof (prove)\nusing this:\n  n postdominates targetnode a\n  \\<not> n postdominates targetnode ax\n  valid_edge ax\n  n \\<notin> set (sourcenodes (a # as''))\n  sourcenode a -a # as''\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode a controls\\<^sub>s n", "by(fastforce simp:standard_control_dependence_def)"], ["proof (state)\nthis:\n  sourcenode a controls\\<^sub>s n\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  sourcenode a controls\\<^sub>s n", "have \"sourcenode a \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  sourcenode a controls\\<^sub>s n\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by(fastforce intro:cd_closed PDG_cdep_edge elim:obs.cases)"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> n postdominates n' \\<Longrightarrow> False", "with \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<in> PDG_BS S", "show False"], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. False", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_singleton:\"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "assume \"\\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\""], ["proof (state)\nthis:\n  \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "hence \"\\<exists>nx nx'. nx \\<in> obs n (PDG_BS S) \\<and> nx' \\<in> obs n (PDG_BS S) \\<and>\n    nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<exists>nx nx'.\n       nx \\<in> obs n (PDG_BS S) \\<and>\n       nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'", "obtain nx nx' where \"nx \\<in> obs n (PDG_BS S)\" and \"nx' \\<in> obs n (PDG_BS S)\"\n    and \"nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. (\\<And>nx nx'.\n        \\<lbrakk>nx \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n         nx \\<noteq> nx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>nx \\<in> obs n (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs n (PDG_BS S)", "obtain as where \"n -as\\<rightarrow>* nx\" \n    and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\" and \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs n (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* nx;\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n         nx \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* nx\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>n -as\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx", "have \"valid_node nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. valid_node nx", "by(fastforce dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<in> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> PDG_BS S\n  valid_node nx", "have \"obs nx (PDG_BS S) = {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> PDG_BS S\n  valid_node nx\n\ngoal (1 subgoal):\n 1. obs nx (PDG_BS S) = {nx}", "by -(rule n_in_obs)"], ["proof (state)\nthis:\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \\<open>nx \\<noteq> nx'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}", "have \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \n    \\<open>nx \\<noteq> nx'\\<close> \\<open>obs nx (PDG_BS S) = {nx}\\<close> \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  as \\<noteq> []", "have \"\\<exists>a as' as''. n -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* nx \\<and>\n                     valid_edge a \\<and> as = as'@a#as'' \\<and> \n                     obs (targetnode a) (PDG_BS S) = {nx} \\<and> \n                    (\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n                       obs (sourcenode a) (PDG_BS S) = {}))\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>a as' as''.\n       n -as'\\<rightarrow>* sourcenode a \\<and>\n       targetnode a -as''\\<rightarrow>* nx \\<and>\n       valid_edge a \\<and>\n       as = as' @ a # as'' \\<and>\n       obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode a) (PDG_BS S) = {})", "proof(induct arbitrary:nx' rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ?nx' \\<in> obs n'' (PDG_BS S);\n   n' \\<noteq> ?nx'; obs n' (PDG_BS S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                           obs (sourcenode a) (PDG_BS S) = {})\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = {n'}\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S\n  a # as \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note [simp] = \\<open>sourcenode a = n\\<close>[THEN sym] \\<open>targetnode a = n''\\<close>[THEN sym]"], ["proof (state)\nthis:\n  n = sourcenode a\n  n'' = targetnode a\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note more_than_one = \\<open>n' \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \\<open>n' \\<noteq> nx'\\<close>"], ["proof (state)\nthis:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note IH = \\<open>\\<And>nx'. \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx'; \n      obs n' (PDG_BS S) = {n'}; \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S); as \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> \\<exists>a as' as''. n'' -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* n' \\<and>\n      valid_edge a \\<and> as = as'@a#as'' \\<and> obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n      (\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n      obs (sourcenode a) (PDG_BS S) = {}))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ?nx' \\<in> obs n'' (PDG_BS S);\n   n' \\<noteq> ?nx'; obs n' (PDG_BS S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                           obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>\\<forall>n'\\<in>set (sourcenodes (a#as)). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S", "have \"\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\" and \"sourcenode a \\<notin> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S &&&\n    sourcenode a \\<notin> PDG_BS S", "by(simp_all add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "proof(cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  as = []", "have [simp]:\"n' = n''\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  as = []\n\ngoal (1 subgoal):\n 1. n' = n''", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  n' = n''\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from more_than_one"], ["proof (chain)\npicking this:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'", "have \"\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n               obs (sourcenode a) (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<nexists>m.\n       obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n       obs (sourcenode a) (PDG_BS S) = {}", "by auto"], ["proof (state)\nthis:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) = {n'}\\<close> True \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -[]\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ [a] \\<and>\n                      obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a) (PDG_BS S) = {})", "by(auto intro!:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "hence \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "."], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S", "have \"obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)", "by(rule path_obs_subset)"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "proof(cases \"obs n' (PDG_BS S) = obs n'' (PDG_BS S)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs n' (PDG_BS S) = obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case True"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)\n\ngoal (2 subgoals):\n 1. obs n' (PDG_BS S) = obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>valid_edge a\\<close> \\<open>obs n' (PDG_BS S) = {n'}\\<close> more_than_one"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (PDG_BS S) = {n'}\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (PDG_BS S) = {n'}\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"as\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -as\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ a # as \\<and>\n                      obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a) (PDG_BS S) = {})", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case False"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)", "have \"obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)", "by simp"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) = {n'}\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) = {n'}\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)", "obtain ni where \"n' \\<in> obs n'' (PDG_BS S)\"\n          and \"ni \\<in> obs n'' (PDG_BS S)\" and \"n' \\<noteq> ni\""], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) = {n'}\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>ni.\n        \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ni \\<in> obs n'' (PDG_BS S);\n         n' \\<noteq> ni\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<in> obs n'' (PDG_BS S)\n  ni \\<in> obs n'' (PDG_BS S)\n  n' \\<noteq> ni\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from IH[OF this \\<open>obs n' (PDG_BS S) = {n'}\\<close> \n          \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\\<close> \\<open>as \\<noteq> []\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})", "obtain a' as' as''\n          where \"n'' -as'\\<rightarrow>* sourcenode a'\" and \"targetnode a' -as''\\<rightarrow>* n'\"\n          and \"valid_edge a'\" and [simp]:\"as = as'@a'#as''\" \n          and \"obs (targetnode a') (PDG_BS S) = {n'}\"\n          and more_than_one':\"\\<not> (\\<exists>m. obs (sourcenode a') (PDG_BS S) = {m} \\<or> \n          obs (sourcenode a') (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>as' a' as''.\n        \\<lbrakk>n'' -as'\\<rightarrow>* sourcenode a';\n         targetnode a' -as''\\<rightarrow>* n'; valid_edge a';\n         as = as' @ a' # as''; obs (targetnode a') (PDG_BS S) = {n'};\n         \\<nexists>m.\n            obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n            obs (sourcenode a') (PDG_BS S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  targetnode a' -as''\\<rightarrow>* n'\n  valid_edge a'\n  as = as' @ a' # as''\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>n'' -as'\\<rightarrow>* sourcenode a'\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a", "have \"n -a#as'\\<rightarrow>* sourcenode a'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a\n\ngoal (1 subgoal):\n 1. n -a # as'\\<rightarrow>* sourcenode a'", "by(fastforce intro:path.Cons_path)"], ["proof (state)\nthis:\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>targetnode a' -as''\\<rightarrow>* n'\\<close> \\<open>obs (targetnode a') (PDG_BS S) = {n'}\\<close>\n          more_than_one' \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = as' @ a' # as'' \\<and>\n                         obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a') (PDG_BS S) = {})", "apply(rule_tac x=\"a#as'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = (a # as') @ a' # as'' \\<and>\n                         obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a') (PDG_BS S) = {})", "apply(rule_tac x=\"as''\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                      targetnode a' -as''\\<rightarrow>* n' \\<and>\n                      valid_edge a' \\<and>\n                      a # as = (a # as') @ a' # as'' \\<and>\n                      obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a') (PDG_BS S) = {})", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})", "qed simp"], ["proof (state)\nthis:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})", "obtain a as' as'' where \"valid_edge a\"\n    and \"obs (targetnode a) (PDG_BS S) = {nx}\"\n    and more_than_one:\"\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n                         obs (sourcenode a) (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; obs (targetnode a) (PDG_BS S) = {nx};\n         \\<nexists>m.\n            obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n            obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  valid_edge a\n  obs (targetnode a) (PDG_BS S) = {nx}\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "have \"sourcenode a \\<notin> (PDG_BS S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a \\<notin> PDG_BS S", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "assume \"\\<not> sourcenode a \\<notin> PDG_BS S\""], ["proof (state)\nthis:\n  \\<not> sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "hence \"sourcenode a \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by simp"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S", "have \"obs (sourcenode a) (PDG_BS S) = {sourcenode a}\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "by(fastforce intro!:n_in_obs)"], ["proof (state)\nthis:\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<notin> PDG_BS S", "have \"obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)", "by(rule edge_obs_subset)"], ["proof (state)\nthis:\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)", "have \"nx \\<in> obs (sourcenode a) (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. nx \\<in> obs (sourcenode a) (PDG_BS S)", "by simp"], ["proof (state)\nthis:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain m  where \"m \\<in> obs (sourcenode a) (PDG_BS S)\"\n    and \"nx \\<noteq> m\""], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> obs (sourcenode a) (PDG_BS S);\n         nx \\<noteq> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)", "have \"valid_node m\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. valid_node m", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}", "have \"valid_node nx\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. valid_node nx", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"m postdominates (sourcenode a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  m postdominates sourcenode a\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  m postdominates sourcenode a", "have \"m postdominates nx\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  m postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. m postdominates nx", "by(fastforce intro:postdominate_path_targetnode elim:obs.cases)"], ["proof (state)\nthis:\n  m postdominates nx\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  m postdominates nx", "have \"\\<not> nx postdominates m\""], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  m postdominates nx\n\ngoal (1 subgoal):\n 1. \\<not> nx postdominates m", "by(fastforce dest:postdominate_antisym)"], ["proof (state)\nthis:\n  \\<not> nx postdominates m\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "have \"(_Exit_) -[]\\<rightarrow>* (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) -[]\\<rightarrow>* (_Exit_)", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>m postdominates nx\\<close>"], ["proof (chain)\npicking this:\n  m postdominates nx\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)", "have \"nx \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  m postdominates nx\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. nx \\<noteq> (_Exit_)", "by(fastforce simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  nx \\<noteq> (_Exit_)\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "have \"\\<not> nx postdominates (sourcenode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> nx postdominates sourcenode a", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx postdominates sourcenode a \\<Longrightarrow> False", "assume \"\\<not> \\<not> nx postdominates sourcenode a\""], ["proof (state)\nthis:\n  \\<not> \\<not> nx postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx postdominates sourcenode a \\<Longrightarrow> False", "hence \"nx postdominates sourcenode a\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> nx postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. nx postdominates sourcenode a", "by simp"], ["proof (state)\nthis:\n  nx postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx postdominates sourcenode a \\<Longrightarrow> False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain asx' where \"sourcenode a -asx'\\<rightarrow>* m\" and \"nx \\<notin> set(sourcenodes asx')\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>asx'.\n        \\<lbrakk>sourcenode a -asx'\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes asx')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obs.cases)"], ["proof (state)\nthis:\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx postdominates sourcenode a\\<close>"], ["proof (chain)\npicking this:\n  nx postdominates sourcenode a\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')", "have \"nx postdominates m\""], ["proof (prove)\nusing this:\n  nx postdominates sourcenode a\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. nx postdominates m", "by(rule postdominate_path_targetnode)"], ["proof (state)\nthis:\n  nx postdominates m\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>\\<not> nx postdominates m\\<close>"], ["proof (chain)\npicking this:\n  \\<not> nx postdominates m\n  nx postdominates m", "show False"], ["proof (prove)\nusing this:\n  \\<not> nx postdominates m\n  nx postdominates m\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> nx postdominates sourcenode a\n\ngoal (2 subgoals):\n 1. m postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>valid_node nx\\<close> \\<open>nx \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node nx\n  nx \\<noteq> (_Exit_)\n  \\<not> nx postdominates sourcenode a", "show False"], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node nx\n  nx \\<noteq> (_Exit_)\n  \\<not> nx postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:obs_postdominate)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> m postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> m postdominates sourcenode a \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"m = Exit\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  m = (_Exit_)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain xs where \"sourcenode a -xs\\<rightarrow>* m\" and \"nx \\<notin> set(sourcenodes xs)\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>sourcenode a -xs\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  sourcenode a -xs\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "obtain x' xs' where [simp]:\"xs = x'#xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>sourcenode a -xs\\<rightarrow>* m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -xs\\<rightarrow>* m\n  xs = []", "have [simp]:\"sourcenode a = m\""], ["proof (prove)\nusing this:\n  sourcenode a -xs\\<rightarrow>* m\n  xs = []\n\ngoal (1 subgoal):\n 1. sourcenode a = m", "by fastforce"], ["proof (state)\nthis:\n  sourcenode a = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  sourcenode a = m", "have \"m \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  sourcenode a = m\n\ngoal (1 subgoal):\n 1. m \\<in> PDG_BS S", "by(metis obsE)"], ["proof (state)\nthis:\n  m \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>valid_node m\\<close>"], ["proof (chain)\npicking this:\n  valid_node m\n  m \\<in> PDG_BS S", "have \"obs m (PDG_BS S) = {m}\""], ["proof (prove)\nusing this:\n  valid_node m\n  m \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs m (PDG_BS S) = {m}", "by(rule n_in_obs)"], ["proof (state)\nthis:\n  obs m (PDG_BS S) = {m}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs m (PDG_BS S) = {m}", "have False"], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs m (PDG_BS S) = {m}\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed blast"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>sourcenode a -xs\\<rightarrow>* m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -xs\\<rightarrow>* m", "have \"sourcenode a = sourcenode x'\" \n        and \"valid_edge x'\" and \"targetnode x' -xs'\\<rightarrow>* m\""], ["proof (prove)\nusing this:\n  sourcenode a -xs\\<rightarrow>* m\n\ngoal (1 subgoal):\n 1. sourcenode a = sourcenode x' &&&\n    valid_edge x' &&& targetnode x' -xs'\\<rightarrow>* m", "by(auto elim:path_split_Cons)"], ["proof (state)\nthis:\n  sourcenode a = sourcenode x'\n  valid_edge x'\n  targetnode x' -xs'\\<rightarrow>* m\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>targetnode x' -xs'\\<rightarrow>* m\\<close> \\<open>nx \\<notin> set(sourcenodes xs)\\<close> \\<open>valid_edge x'\\<close> \n        \\<open>valid_node m\\<close> True"], ["proof (chain)\npicking this:\n  targetnode x' -xs'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n  valid_edge x'\n  valid_node m\n  m = (_Exit_)", "have \"\\<not> nx postdominates (targetnode x')\""], ["proof (prove)\nusing this:\n  targetnode x' -xs'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n  valid_edge x'\n  valid_node m\n  m = (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> nx postdominates targetnode x'", "by(fastforce simp:postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> nx postdominates targetnode x'\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>nx \\<noteq> m\\<close> True"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  m = (_Exit_)", "have \"nx \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  m = (_Exit_)\n\ngoal (1 subgoal):\n 1. nx \\<noteq> (_Exit_)", "by simp"], ["proof (state)\nthis:\n  nx \\<noteq> (_Exit_)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  nx \\<noteq> (_Exit_)", "have \"nx postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  nx \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. nx postdominates targetnode a", "by(fastforce intro:obs_postdominate)"], ["proof (state)\nthis:\n  nx postdominates targetnode a\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}", "obtain ys where \"targetnode a -ys\\<rightarrow>* nx\" \n        and \"\\<forall>nx' \\<in> set(sourcenodes ys). nx' \\<notin> (PDG_BS S)\"\n        and \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>targetnode a -ys\\<rightarrow>* nx;\n         \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S;\n         nx \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  targetnode a -ys\\<rightarrow>* nx\n  \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "hence \"nx \\<notin> set(sourcenodes ys)\""], ["proof (prove)\nusing this:\n  targetnode a -ys\\<rightarrow>* nx\n  \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. nx \\<notin> set (sourcenodes ys)", "by fastforce"], ["proof (state)\nthis:\n  nx \\<notin> set (sourcenodes ys)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "have \"sourcenode a \\<noteq> nx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a \\<noteq> nx", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "assume \"sourcenode a = nx\""], ["proof (state)\nthis:\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "from \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "have \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. nx \\<in> PDG_BS S", "by -(erule obsE)"], ["proof (state)\nthis:\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "with \\<open>valid_node nx\\<close>"], ["proof (chain)\npicking this:\n  valid_node nx\n  nx \\<in> PDG_BS S", "have \"obs nx (PDG_BS S) = {nx}\""], ["proof (prove)\nusing this:\n  valid_node nx\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs nx (PDG_BS S) = {nx}", "by -(erule n_in_obs)"], ["proof (state)\nthis:\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "with \\<open>sourcenode a = nx\\<close> \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \n          \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = nx\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs nx (PDG_BS S) = {nx}", "show False"], ["proof (prove)\nusing this:\n  sourcenode a = nx\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenode a \\<noteq> nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>nx \\<notin> set(sourcenodes ys)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<notin> set (sourcenodes ys)\n  sourcenode a \\<noteq> nx", "have \"nx \\<notin> set(sourcenodes (a#ys))\""], ["proof (prove)\nusing this:\n  nx \\<notin> set (sourcenodes ys)\n  sourcenode a \\<noteq> nx\n\ngoal (1 subgoal):\n 1. nx \\<notin> set (sourcenodes (a # ys))", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  nx \\<notin> set (sourcenodes (a # ys))\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>valid_edge a\\<close> \\<open>targetnode a -ys\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  targetnode a -ys\\<rightarrow>* nx", "have \"sourcenode a -a#ys\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a -ys\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. sourcenode a -a # ys\\<rightarrow>* nx", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # ys\\<rightarrow>* nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>sourcenode a -a#ys\\<rightarrow>* nx\\<close> \\<open>nx \\<notin> set(sourcenodes (a#ys))\\<close>\n        \\<open>nx postdominates (targetnode a)\\<close> \\<open>valid_edge x'\\<close>\n        \\<open>\\<not> nx postdominates (targetnode x')\\<close> \\<open>sourcenode a = sourcenode x'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # ys\\<rightarrow>* nx\n  nx \\<notin> set (sourcenodes (a # ys))\n  nx postdominates targetnode a\n  valid_edge x'\n  \\<not> nx postdominates targetnode x'\n  sourcenode a = sourcenode x'", "have \"(sourcenode a) controls\\<^sub>s nx\""], ["proof (prove)\nusing this:\n  sourcenode a -a # ys\\<rightarrow>* nx\n  nx \\<notin> set (sourcenodes (a # ys))\n  nx postdominates targetnode a\n  valid_edge x'\n  \\<not> nx postdominates targetnode x'\n  sourcenode a = sourcenode x'\n\ngoal (1 subgoal):\n 1. sourcenode a controls\\<^sub>s nx", "by(fastforce simp:standard_control_dependence_def)"], ["proof (state)\nthis:\n  sourcenode a controls\\<^sub>s nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>nx \\<in> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> PDG_BS S\n  sourcenode a controls\\<^sub>s nx", "have \"sourcenode a \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> PDG_BS S\n  sourcenode a controls\\<^sub>s nx\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by(rule cd_closed)"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S", "have \"obs (sourcenode a) (PDG_BS S) = {sourcenode a}\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "by(fastforce intro!:n_in_obs)"], ["proof (state)\nthis:\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>\n        \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "show False"], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  m \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>valid_node m\\<close>\n        \\<open>\\<not> m postdominates sourcenode a\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node m\n  \\<not> m postdominates sourcenode a\n  m \\<noteq> (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node m\n  \\<not> m postdominates sourcenode a\n  m \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:obs_postdominate)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PDGBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val PDG_BS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind valid_edge (_Entry_) Def Use\n     state_val PDG_BS", "proof(unfold_locales)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"n \\<in> PDG_BS S\""], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"valid_node n\""], ["proof (prove)\nusing this:\n  n \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. valid_node n", "by(rule PDG_BS_valid_node)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"valid_node n\" and \"n \\<in> S\""], ["proof (state)\nthis:\n  valid_node n\n  n \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"n \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  valid_node n\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n \\<in> PDG_BS S", "by(fastforce intro:PDG_path_Nil simp:PDG_BS_def)"], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n' S n V"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"n' \\<in> PDG_BS S\" and \"n influences V in n'\""], ["proof (state)\nthis:\n  n' \\<in> PDG_BS S\n  n influences V in n'\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"n \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  n' \\<in> PDG_BS S\n  n influences V in n'\n\ngoal (1 subgoal):\n 1. n \\<in> PDG_BS S", "by(auto dest:PDG.PDG_path_ddep[OF PDG_scd,OF PDG.PDG_ddep_edge[OF PDG_scd]]\n            dest:PDG_path_Append simp:PDG_BS_def split:if_split_asm)"], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "have \"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"finite (obs n (PDG_BS S))\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. finite (obs n (PDG_BS S))", "by fastforce"], ["proof (state)\nthis:\n  finite (obs n (PDG_BS S))\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "have \"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"card (obs n (PDG_BS S)) \\<le> 1\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. card (obs n (PDG_BS S)) \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  card (obs n (PDG_BS S)) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection\\<open>Weak control dependence\\<close>"], ["", "context WeakControlDependencePDG begin"], ["", "lemma Exit_in_obs_slice_node:\"(_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) \\<in> obs n' (PDG_BS S) \\<Longrightarrow> (_Exit_) \\<in> S", "by(auto elim:obsE PDG_path_CFG_path simp:PDG_BS_def split:if_split_asm)"], ["", "lemma cd_closed:\n  \"\\<lbrakk>n' \\<in> PDG_BS S; n weakly controls n'\\<rbrakk> \\<Longrightarrow> n \\<in> PDG_BS S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' \\<in> PDG_BS S; n weakly controls n'\\<rbrakk>\n    \\<Longrightarrow> n \\<in> PDG_BS S", "by(simp add:PDG_BS_def)(blast dest:PDG_cdep_edge PDG_path_Append PDG_path_cdep)"], ["", "lemma obs_strong_postdominate:\n  assumes \"n \\<in> obs n' (PDG_BS S)\" and \"n \\<noteq> (_Exit_)\" \n  shows \"n strongly-postdominates n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n strongly-postdominates n'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "assume \"\\<not> n strongly-postdominates n'\""], ["proof (state)\nthis:\n  \\<not> n strongly-postdominates n'\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)", "have \"valid_node n\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. valid_node n", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "with \\<open>n \\<in> obs n' (PDG_BS S)\\<close> \\<open>n \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  n \\<noteq> (_Exit_)\n  valid_node n", "have \"n strongly-postdominates n\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  n \\<noteq> (_Exit_)\n  valid_node n\n\ngoal (1 subgoal):\n 1. n strongly-postdominates n", "by(fastforce intro:strong_postdominate_refl)"], ["proof (state)\nthis:\n  n strongly-postdominates n\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)", "obtain as where \"n' -as\\<rightarrow>* n\"\n    and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\"\n    and \"n \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n' -as\\<rightarrow>* n;\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n         n \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n' -as\\<rightarrow>* n\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  n \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>n strongly-postdominates n\\<close> \\<open>\\<not> n strongly-postdominates n'\\<close> \\<open>n' -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  n strongly-postdominates n\n  \\<not> n strongly-postdominates n'\n  n' -as\\<rightarrow>* n", "obtain as' a as'' where [simp]:\"as = as'@a#as''\" and \"valid_edge a\"\n    and \"\\<not> n strongly-postdominates (sourcenode a)\" and \n    \"n strongly-postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  n strongly-postdominates n\n  \\<not> n strongly-postdominates n'\n  n' -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>as = as' @ a # as''; valid_edge a;\n         \\<not> n strongly-postdominates sourcenode a;\n         n strongly-postdominates targetnode a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule strong_postdominate_path_branch)"], ["proof (state)\nthis:\n  as = as' @ a # as''\n  valid_edge a\n  \\<not> n strongly-postdominates sourcenode a\n  n strongly-postdominates targetnode a\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>n \\<in> obs n' (PDG_BS S)\\<close> \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S", "have \"n \\<notin> set (sourcenodes (a#as''))\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. n \\<notin> set (sourcenodes (a # as''))", "by(fastforce elim:obs.cases simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> set (sourcenodes (a # as''))\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>n' -as\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  n' -as\\<rightarrow>* n", "have \"sourcenode a -a#as''\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  n' -as\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. sourcenode a -a # as''\\<rightarrow>* n", "by(fastforce dest:path_split_second)"], ["proof (state)\nthis:\n  sourcenode a -a # as''\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "from \\<open>\\<not> n strongly-postdominates (sourcenode a)\\<close> \\<open>valid_edge a\\<close> \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n strongly-postdominates sourcenode a\n  valid_edge a\n  valid_node n", "obtain a' where \"sourcenode a' = sourcenode a\"\n    and \"valid_edge a'\" and \"\\<not> n strongly-postdominates (targetnode a')\""], ["proof (prove)\nusing this:\n  \\<not> n strongly-postdominates sourcenode a\n  valid_edge a\n  valid_node n\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>sourcenode a' = sourcenode a; valid_edge a';\n         \\<not> n strongly-postdominates targetnode a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:not_strong_postdominate_predecessor_successor)"], ["proof (state)\nthis:\n  sourcenode a' = sourcenode a\n  valid_edge a'\n  \\<not> n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "with \\<open>n strongly-postdominates (targetnode a)\\<close> \\<open>n \\<notin> set (sourcenodes (a#as''))\\<close>\n    \\<open>sourcenode a -a#as''\\<rightarrow>* n\\<close>"], ["proof (chain)\npicking this:\n  n strongly-postdominates targetnode a\n  n \\<notin> set (sourcenodes (a # as''))\n  sourcenode a -a # as''\\<rightarrow>* n\n  sourcenode a' = sourcenode a\n  valid_edge a'\n  \\<not> n strongly-postdominates targetnode a'", "have \"sourcenode a weakly controls n\""], ["proof (prove)\nusing this:\n  n strongly-postdominates targetnode a\n  n \\<notin> set (sourcenodes (a # as''))\n  sourcenode a -a # as''\\<rightarrow>* n\n  sourcenode a' = sourcenode a\n  valid_edge a'\n  \\<not> n strongly-postdominates targetnode a'\n\ngoal (1 subgoal):\n 1. sourcenode a weakly controls n", "by(fastforce simp:weak_control_dependence_def)"], ["proof (state)\nthis:\n  sourcenode a weakly controls n\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "with \\<open>n \\<in> obs n' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs n' (PDG_BS S)\n  sourcenode a weakly controls n", "have \"sourcenode a \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n \\<in> obs n' (PDG_BS S)\n  sourcenode a weakly controls n\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by(fastforce intro:cd_closed PDG_cdep_edge elim:obs.cases)"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> n strongly-postdominates n' \\<Longrightarrow> False", "with \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<in> PDG_BS S", "show False"], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. False", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_singleton:\"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "assume \"\\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\""], ["proof (state)\nthis:\n  \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "hence \"\\<exists>nx nx'. nx \\<in> obs n (PDG_BS S) \\<and> nx' \\<in> obs n (PDG_BS S) \\<and>\n    nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<exists>nx nx'.\n       nx \\<in> obs n (PDG_BS S) \\<and>\n       nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'", "obtain nx nx' where \"nx \\<in> obs n (PDG_BS S)\" and \"nx' \\<in> obs n (PDG_BS S)\"\n    and \"nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (PDG_BS S) \\<and>\n     nx' \\<in> obs n (PDG_BS S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. (\\<And>nx nx'.\n        \\<lbrakk>nx \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n         nx \\<noteq> nx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>nx \\<in> obs n (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs n (PDG_BS S)", "obtain as where \"n -as\\<rightarrow>* nx\" \n    and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\" and \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs n (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* nx;\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n         nx \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* nx\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>n -as\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx", "have \"valid_node nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. valid_node nx", "by(fastforce dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<in> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> PDG_BS S\n  valid_node nx", "have \"obs nx (PDG_BS S) = {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> PDG_BS S\n  valid_node nx\n\ngoal (1 subgoal):\n 1. obs nx (PDG_BS S) = {nx}", "by -(rule n_in_obs)"], ["proof (state)\nthis:\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \\<open>nx \\<noteq> nx'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}", "have \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \n    \\<open>nx \\<noteq> nx'\\<close> \\<open>obs nx (PDG_BS S) = {nx}\\<close> \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  as \\<noteq> []", "have \"\\<exists>a as' as''. n -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* nx \\<and>\n                     valid_edge a \\<and> as = as'@a#as'' \\<and> \n                     obs (targetnode a) (PDG_BS S) = {nx} \\<and> \n                    (\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n                       obs (sourcenode a) (PDG_BS S) = {}))\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  nx \\<noteq> nx'\n  obs nx (PDG_BS S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>a as' as''.\n       n -as'\\<rightarrow>* sourcenode a \\<and>\n       targetnode a -as''\\<rightarrow>* nx \\<and>\n       valid_edge a \\<and>\n       as = as' @ a # as'' \\<and>\n       obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode a) (PDG_BS S) = {})", "proof(induct arbitrary:nx' rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ?nx' \\<in> obs n'' (PDG_BS S);\n   n' \\<noteq> ?nx'; obs n' (PDG_BS S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                           obs (sourcenode a) (PDG_BS S) = {})\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = {n'}\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S\n  a # as \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note [simp] = \\<open>sourcenode a = n\\<close>[THEN sym] \\<open>targetnode a = n''\\<close>[THEN sym]"], ["proof (state)\nthis:\n  n = sourcenode a\n  n'' = targetnode a\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note more_than_one = \\<open>n' \\<in> obs n (PDG_BS S)\\<close> \\<open>nx' \\<in> obs n (PDG_BS S)\\<close> \\<open>n' \\<noteq> nx'\\<close>"], ["proof (state)\nthis:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "note IH = \\<open>\\<And>nx'. \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx'; \n      obs n' (PDG_BS S) = {n'}; \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S); as \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> \\<exists>a as' as''. n'' -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* n' \\<and>\n      valid_edge a \\<and> as = as'@a#as'' \\<and> obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n      (\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n      obs (sourcenode a) (PDG_BS S) = {}))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ?nx' \\<in> obs n'' (PDG_BS S);\n   n' \\<noteq> ?nx'; obs n' (PDG_BS S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                           obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>\\<forall>n'\\<in>set (sourcenodes (a#as)). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S", "have \"\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\" and \"sourcenode a \\<notin> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S &&&\n    sourcenode a \\<notin> PDG_BS S", "by(simp_all add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (PDG_BS S);\n            nx' \\<in> obs n'' (PDG_BS S); n' \\<noteq> nx';\n            obs n' (PDG_BS S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a) (PDG_BS S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a) (PDG_BS S) = {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (PDG_BS S); nx' \\<in> obs n (PDG_BS S);\n        n' \\<noteq> nx'; obs n' (PDG_BS S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> PDG_BS S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode aa) (PDG_BS S) = {})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "proof(cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  as = []", "have [simp]:\"n' = n''\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  as = []\n\ngoal (1 subgoal):\n 1. n' = n''", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  n' = n''\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from more_than_one"], ["proof (chain)\npicking this:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'", "have \"\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n               obs (sourcenode a) (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<nexists>m.\n       obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n       obs (sourcenode a) (PDG_BS S) = {}", "by auto"], ["proof (state)\nthis:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) = {n'}\\<close> True \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (PDG_BS S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -[]\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ [a] \\<and>\n                      obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a) (PDG_BS S) = {})", "by(auto intro!:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "hence \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "."], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S", "have \"obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)", "by(rule path_obs_subset)"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "proof(cases \"obs n' (PDG_BS S) = obs n'' (PDG_BS S)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs n' (PDG_BS S) = obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case True"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)\n\ngoal (2 subgoals):\n 1. obs n' (PDG_BS S) = obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})\n 2. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>valid_edge a\\<close> \\<open>obs n' (PDG_BS S) = {n'}\\<close> more_than_one"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (PDG_BS S) = {n'}\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (PDG_BS S) = {n'}\n  n' \\<in> obs n (PDG_BS S)\n  nx' \\<in> obs n (PDG_BS S)\n  n' \\<noteq> nx'\n  obs n' (PDG_BS S) = obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a) (PDG_BS S) = {})", "apply(rule_tac x=\"as\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (PDG_BS S) = {n'}; n' \\<in> obs n (PDG_BS S);\n     nx' \\<in> obs n (PDG_BS S); n' \\<noteq> nx';\n     obs n' (PDG_BS S) = obs n'' (PDG_BS S)\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -as\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ a # as \\<and>\n                      obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a) (PDG_BS S) = {})", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "case False"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)", "have \"obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) \\<subseteq> obs n'' (PDG_BS S)\n  obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)", "by simp"], ["proof (state)\nthis:\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>obs n' (PDG_BS S) = {n'}\\<close>"], ["proof (chain)\npicking this:\n  obs n' (PDG_BS S) = {n'}\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)", "obtain ni where \"n' \\<in> obs n'' (PDG_BS S)\"\n          and \"ni \\<in> obs n'' (PDG_BS S)\" and \"n' \\<noteq> ni\""], ["proof (prove)\nusing this:\n  obs n' (PDG_BS S) = {n'}\n  obs n' (PDG_BS S) \\<subset> obs n'' (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>ni.\n        \\<lbrakk>n' \\<in> obs n'' (PDG_BS S); ni \\<in> obs n'' (PDG_BS S);\n         n' \\<noteq> ni\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<in> obs n'' (PDG_BS S)\n  ni \\<in> obs n'' (PDG_BS S)\n  n' \\<noteq> ni\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from IH[OF this \\<open>obs n' (PDG_BS S) = {n'}\\<close> \n          \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (PDG_BS S)\\<close> \\<open>as \\<noteq> []\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})", "obtain a' as' as''\n          where \"n'' -as'\\<rightarrow>* sourcenode a'\" and \"targetnode a' -as''\\<rightarrow>* n'\"\n          and \"valid_edge a'\" and [simp]:\"as = as'@a'#as''\" \n          and \"obs (targetnode a') (PDG_BS S) = {n'}\"\n          and more_than_one':\"\\<not> (\\<exists>m. obs (sourcenode a') (PDG_BS S) = {m} \\<or> \n          obs (sourcenode a') (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>as' a' as''.\n        \\<lbrakk>n'' -as'\\<rightarrow>* sourcenode a';\n         targetnode a' -as''\\<rightarrow>* n'; valid_edge a';\n         as = as' @ a' # as''; obs (targetnode a') (PDG_BS S) = {n'};\n         \\<nexists>m.\n            obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n            obs (sourcenode a') (PDG_BS S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  targetnode a' -as''\\<rightarrow>* n'\n  valid_edge a'\n  as = as' @ a' # as''\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "from \\<open>n'' -as'\\<rightarrow>* sourcenode a'\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a", "have \"n -a#as'\\<rightarrow>* sourcenode a'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a\n\ngoal (1 subgoal):\n 1. n -a # as'\\<rightarrow>* sourcenode a'", "by(fastforce intro:path.Cons_path)"], ["proof (state)\nthis:\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. obs n' (PDG_BS S) \\<noteq> obs n'' (PDG_BS S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "with \\<open>targetnode a' -as''\\<rightarrow>* n'\\<close> \\<open>obs (targetnode a') (PDG_BS S) = {n'}\\<close>\n          more_than_one' \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (PDG_BS S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a') (PDG_BS S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n           obs (sourcenode aa) (PDG_BS S) = {})", "apply(rule_tac x=\"a'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = as' @ a' # as'' \\<and>\n                         obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a') (PDG_BS S) = {})", "apply(rule_tac x=\"a#as'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = (a # as') @ a' # as'' \\<and>\n                         obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                             obs (sourcenode a') (PDG_BS S) = {})", "apply(rule_tac x=\"as''\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (PDG_BS S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n        obs (sourcenode a') (PDG_BS S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                      targetnode a' -as''\\<rightarrow>* n' \\<and>\n                      valid_edge a' \\<and>\n                      a # as = (a # as') @ a' # as'' \\<and>\n                      obs (targetnode a') (PDG_BS S) = {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a') (PDG_BS S) = {m} \\<or>\n                          obs (sourcenode a') (PDG_BS S) = {})", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (PDG_BS S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode aa) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (PDG_BS S);\n        nx' \\<in> obs n (PDG_BS S); n \\<noteq> nx'; obs n (PDG_BS S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> PDG_BS S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (PDG_BS S) = {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n                                obs (sourcenode a) (PDG_BS S) = {})", "qed simp"], ["proof (state)\nthis:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})", "obtain a as' as'' where \"valid_edge a\"\n    and \"obs (targetnode a) (PDG_BS S) = {nx}\"\n    and more_than_one:\"\\<not> (\\<exists>m. obs (sourcenode a) (PDG_BS S) = {m} \\<or> \n                         obs (sourcenode a) (PDG_BS S) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (PDG_BS S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n         obs (sourcenode a) (PDG_BS S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a; obs (targetnode a) (PDG_BS S) = {nx};\n         \\<nexists>m.\n            obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n            obs (sourcenode a) (PDG_BS S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  valid_edge a\n  obs (targetnode a) (PDG_BS S) = {nx}\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "have \"sourcenode a \\<notin> (PDG_BS S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a \\<notin> PDG_BS S", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "assume \"\\<not> sourcenode a \\<notin> PDG_BS S\""], ["proof (state)\nthis:\n  \\<not> sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "hence \"sourcenode a \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by simp"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S", "have \"obs (sourcenode a) (PDG_BS S) = {sourcenode a}\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "by(fastforce intro!:n_in_obs)"], ["proof (state)\nthis:\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> PDG_BS S \\<Longrightarrow> False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<notin> PDG_BS S", "have \"obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<notin> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)", "by(rule edge_obs_subset)"], ["proof (state)\nthis:\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)", "have \"nx \\<in> obs (sourcenode a) (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  obs (targetnode a) (PDG_BS S) \\<subseteq> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. nx \\<in> obs (sourcenode a) (PDG_BS S)", "by simp"], ["proof (state)\nthis:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain m  where \"m \\<in> obs (sourcenode a) (PDG_BS S)\"\n    and \"nx \\<noteq> m\""], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (PDG_BS S) = {m} \\<or>\n     obs (sourcenode a) (PDG_BS S) = {}\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> obs (sourcenode a) (PDG_BS S);\n         nx \\<noteq> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)", "have \"valid_node m\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. valid_node m", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "from \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}", "have \"valid_node nx\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. valid_node nx", "by(fastforce dest:in_obs_valid)"], ["proof (state)\nthis:\n  valid_node nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (PDG_BS S) = {m}) \\<or>\n            obs n (PDG_BS S) = {}) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"m strongly-postdominates (sourcenode a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  m strongly-postdominates sourcenode a\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  m strongly-postdominates sourcenode a", "have \"m strongly-postdominates nx\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  m strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. m strongly-postdominates nx", "by(fastforce intro:strong_postdominate_path_targetnode elim:obs.cases)"], ["proof (state)\nthis:\n  m strongly-postdominates nx\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  m strongly-postdominates nx", "have \"\\<not> nx strongly-postdominates m\""], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  m strongly-postdominates nx\n\ngoal (1 subgoal):\n 1. \\<not> nx strongly-postdominates m", "by(fastforce dest:strong_postdominate_antisym)"], ["proof (state)\nthis:\n  \\<not> nx strongly-postdominates m\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "have \"(_Exit_) -[]\\<rightarrow>* (_Exit_)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_Exit_) -[]\\<rightarrow>* (_Exit_)", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>m strongly-postdominates nx\\<close>"], ["proof (chain)\npicking this:\n  m strongly-postdominates nx\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)", "have \"nx \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  m strongly-postdominates nx\n  (_Exit_) -[]\\<rightarrow>* (_Exit_)\n\ngoal (1 subgoal):\n 1. nx \\<noteq> (_Exit_)", "by(fastforce simp:strong_postdominate_def sourcenodes_def postdominate_def)"], ["proof (state)\nthis:\n  nx \\<noteq> (_Exit_)\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "have \"\\<not> nx strongly-postdominates (sourcenode a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> nx strongly-postdominates sourcenode a", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx strongly-postdominates sourcenode a \\<Longrightarrow>\n    False", "assume \"\\<not> \\<not> nx strongly-postdominates sourcenode a\""], ["proof (state)\nthis:\n  \\<not> \\<not> nx strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx strongly-postdominates sourcenode a \\<Longrightarrow>\n    False", "hence \"nx strongly-postdominates sourcenode a\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> nx strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. nx strongly-postdominates sourcenode a", "by simp"], ["proof (state)\nthis:\n  nx strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx strongly-postdominates sourcenode a \\<Longrightarrow>\n    False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain asx' where \"sourcenode a -asx'\\<rightarrow>* m\" and \"nx \\<notin> set(sourcenodes asx')\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>asx'.\n        \\<lbrakk>sourcenode a -asx'\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes asx')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obs.cases)"], ["proof (state)\nthis:\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx strongly-postdominates sourcenode a \\<Longrightarrow>\n    False", "with \\<open>nx strongly-postdominates sourcenode a\\<close>"], ["proof (chain)\npicking this:\n  nx strongly-postdominates sourcenode a\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')", "have \"nx strongly-postdominates m\""], ["proof (prove)\nusing this:\n  nx strongly-postdominates sourcenode a\n  sourcenode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. nx strongly-postdominates m", "by(rule strong_postdominate_path_targetnode)"], ["proof (state)\nthis:\n  nx strongly-postdominates m\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> nx strongly-postdominates sourcenode a \\<Longrightarrow>\n    False", "with \\<open>\\<not> nx strongly-postdominates m\\<close>"], ["proof (chain)\npicking this:\n  \\<not> nx strongly-postdominates m\n  nx strongly-postdominates m", "show False"], ["proof (prove)\nusing this:\n  \\<not> nx strongly-postdominates m\n  nx strongly-postdominates m\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> nx strongly-postdominates sourcenode a\n\ngoal (2 subgoals):\n 1. m strongly-postdominates sourcenode a \\<Longrightarrow> False\n 2. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>valid_node nx\\<close> \\<open>nx \\<noteq> (_Exit_)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node nx\n  nx \\<noteq> (_Exit_)\n  \\<not> nx strongly-postdominates sourcenode a", "show False"], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node nx\n  nx \\<noteq> (_Exit_)\n  \\<not> nx strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:obs_strong_postdominate)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> m strongly-postdominates sourcenode a\n\ngoal (1 subgoal):\n 1. \\<not> m strongly-postdominates sourcenode a \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"m = Exit\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  m = (_Exit_)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "obtain xs where \"sourcenode a -xs\\<rightarrow>* m\" and \"nx \\<notin> set(sourcenodes xs)\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>sourcenode a -xs\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  sourcenode a -xs\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "obtain x' xs' where [simp]:\"xs = x'#xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>sourcenode a -xs\\<rightarrow>* m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -xs\\<rightarrow>* m\n  xs = []", "have [simp]:\"sourcenode a = m\""], ["proof (prove)\nusing this:\n  sourcenode a -xs\\<rightarrow>* m\n  xs = []\n\ngoal (1 subgoal):\n 1. sourcenode a = m", "by fastforce"], ["proof (state)\nthis:\n  sourcenode a = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  sourcenode a = m", "have \"m \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  sourcenode a = m\n\ngoal (1 subgoal):\n 1. m \\<in> PDG_BS S", "by (metis obsE)"], ["proof (state)\nthis:\n  m \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>valid_node m\\<close>"], ["proof (chain)\npicking this:\n  valid_node m\n  m \\<in> PDG_BS S", "have \"obs m (PDG_BS S) = {m}\""], ["proof (prove)\nusing this:\n  valid_node m\n  m \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs m (PDG_BS S) = {m}", "by(rule n_in_obs)"], ["proof (state)\nthis:\n  obs m (PDG_BS S) = {m}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs m (PDG_BS S) = {m}", "have False"], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs m (PDG_BS S) = {m}\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed blast"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>sourcenode a -xs\\<rightarrow>* m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -xs\\<rightarrow>* m", "have \"sourcenode a = sourcenode x'\" \n        and \"valid_edge x'\" and \"targetnode x' -xs'\\<rightarrow>* m\""], ["proof (prove)\nusing this:\n  sourcenode a -xs\\<rightarrow>* m\n\ngoal (1 subgoal):\n 1. sourcenode a = sourcenode x' &&&\n    valid_edge x' &&& targetnode x' -xs'\\<rightarrow>* m", "by(auto elim:path_split_Cons)"], ["proof (state)\nthis:\n  sourcenode a = sourcenode x'\n  valid_edge x'\n  targetnode x' -xs'\\<rightarrow>* m\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>targetnode x' -xs'\\<rightarrow>* m\\<close> \\<open>nx \\<notin> set(sourcenodes xs)\\<close> \\<open>valid_edge x'\\<close> \n        \\<open>valid_node m\\<close> True"], ["proof (chain)\npicking this:\n  targetnode x' -xs'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n  valid_edge x'\n  valid_node m\n  m = (_Exit_)", "have \"\\<not> nx strongly-postdominates (targetnode x')\""], ["proof (prove)\nusing this:\n  targetnode x' -xs'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes xs)\n  valid_edge x'\n  valid_node m\n  m = (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<not> nx strongly-postdominates targetnode x'", "by(fastforce simp:strong_postdominate_def postdominate_def sourcenodes_def)"], ["proof (state)\nthis:\n  \\<not> nx strongly-postdominates targetnode x'\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>nx \\<noteq> m\\<close> True"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  m = (_Exit_)", "have \"nx \\<noteq> (_Exit_)\""], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  m = (_Exit_)\n\ngoal (1 subgoal):\n 1. nx \\<noteq> (_Exit_)", "by simp"], ["proof (state)\nthis:\n  nx \\<noteq> (_Exit_)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  nx \\<noteq> (_Exit_)", "have \"nx strongly-postdominates (targetnode a)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n  nx \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. nx strongly-postdominates targetnode a", "by(fastforce intro:obs_strong_postdominate)"], ["proof (state)\nthis:\n  nx strongly-postdominates targetnode a\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>obs (targetnode a) (PDG_BS S) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (PDG_BS S) = {nx}", "obtain ys where \"targetnode a -ys\\<rightarrow>* nx\" \n        and \"\\<forall>nx' \\<in> set(sourcenodes ys). nx' \\<notin> (PDG_BS S)\"\n        and \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>targetnode a -ys\\<rightarrow>* nx;\n         \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S;\n         nx \\<in> PDG_BS S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  targetnode a -ys\\<rightarrow>* nx\n  \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "hence \"nx \\<notin> set(sourcenodes ys)\""], ["proof (prove)\nusing this:\n  targetnode a -ys\\<rightarrow>* nx\n  \\<forall>nx'\\<in>set (sourcenodes ys). nx' \\<notin> PDG_BS S\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. nx \\<notin> set (sourcenodes ys)", "by fastforce"], ["proof (state)\nthis:\n  nx \\<notin> set (sourcenodes ys)\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "have \"sourcenode a \\<noteq> nx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a \\<noteq> nx", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "assume \"sourcenode a = nx\""], ["proof (state)\nthis:\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "from \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)", "have \"nx \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n\ngoal (1 subgoal):\n 1. nx \\<in> PDG_BS S", "by -(erule obsE)"], ["proof (state)\nthis:\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "with \\<open>valid_node nx\\<close>"], ["proof (chain)\npicking this:\n  valid_node nx\n  nx \\<in> PDG_BS S", "have \"obs nx (PDG_BS S) = {nx}\""], ["proof (prove)\nusing this:\n  valid_node nx\n  nx \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs nx (PDG_BS S) = {nx}", "by -(erule n_in_obs)"], ["proof (state)\nthis:\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. sourcenode a = nx \\<Longrightarrow> False", "with \\<open>sourcenode a = nx\\<close> \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \n          \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a = nx\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs nx (PDG_BS S) = {nx}", "show False"], ["proof (prove)\nusing this:\n  sourcenode a = nx\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs nx (PDG_BS S) = {nx}\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenode a \\<noteq> nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>nx \\<notin> set(sourcenodes ys)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<notin> set (sourcenodes ys)\n  sourcenode a \\<noteq> nx", "have \"nx \\<notin> set(sourcenodes (a#ys))\""], ["proof (prove)\nusing this:\n  nx \\<notin> set (sourcenodes ys)\n  sourcenode a \\<noteq> nx\n\ngoal (1 subgoal):\n 1. nx \\<notin> set (sourcenodes (a # ys))", "by(fastforce simp:sourcenodes_def)"], ["proof (state)\nthis:\n  nx \\<notin> set (sourcenodes (a # ys))\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>valid_edge a\\<close> \\<open>targetnode a -ys\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  targetnode a -ys\\<rightarrow>* nx", "have \"sourcenode a -a#ys\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  valid_edge a\n  targetnode a -ys\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. sourcenode a -a # ys\\<rightarrow>* nx", "by(fastforce intro:Cons_path)"], ["proof (state)\nthis:\n  sourcenode a -a # ys\\<rightarrow>* nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "from \\<open>sourcenode a -a#ys\\<rightarrow>* nx\\<close> \\<open>nx \\<notin> set(sourcenodes (a#ys))\\<close>\n        \\<open>nx strongly-postdominates (targetnode a)\\<close> \\<open>valid_edge x'\\<close>\n        \\<open>\\<not> nx strongly-postdominates (targetnode x')\\<close> \\<open>sourcenode a = sourcenode x'\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a -a # ys\\<rightarrow>* nx\n  nx \\<notin> set (sourcenodes (a # ys))\n  nx strongly-postdominates targetnode a\n  valid_edge x'\n  \\<not> nx strongly-postdominates targetnode x'\n  sourcenode a = sourcenode x'", "have \"(sourcenode a) weakly controls nx\""], ["proof (prove)\nusing this:\n  sourcenode a -a # ys\\<rightarrow>* nx\n  nx \\<notin> set (sourcenodes (a # ys))\n  nx strongly-postdominates targetnode a\n  valid_edge x'\n  \\<not> nx strongly-postdominates targetnode x'\n  sourcenode a = sourcenode x'\n\ngoal (1 subgoal):\n 1. sourcenode a weakly controls nx", "by(fastforce simp:weak_control_dependence_def)"], ["proof (state)\nthis:\n  sourcenode a weakly controls nx\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>nx \\<in> (PDG_BS S)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> PDG_BS S\n  sourcenode a weakly controls nx", "have \"sourcenode a \\<in> (PDG_BS S)\""], ["proof (prove)\nusing this:\n  nx \\<in> PDG_BS S\n  sourcenode a weakly controls nx\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> PDG_BS S", "by(rule cd_closed)"], ["proof (state)\nthis:\n  sourcenode a \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S", "have \"obs (sourcenode a) (PDG_BS S) = {sourcenode a}\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "by(fastforce intro!:n_in_obs)"], ["proof (state)\nthis:\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (2 subgoals):\n 1. m = (_Exit_) \\<Longrightarrow> False\n 2. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close>\n        \\<open>nx \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>nx \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}", "show False"], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<in> obs (sourcenode a) (PDG_BS S)\n  nx \\<noteq> m\n  obs (sourcenode a) (PDG_BS S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  m \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. m \\<noteq> (_Exit_) \\<Longrightarrow> False", "with \\<open>m \\<in> obs (sourcenode a) (PDG_BS S)\\<close> \\<open>valid_node m\\<close>\n        \\<open>\\<not> m strongly-postdominates sourcenode a\\<close>"], ["proof (chain)\npicking this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node m\n  \\<not> m strongly-postdominates sourcenode a\n  m \\<noteq> (_Exit_)", "show False"], ["proof (prove)\nusing this:\n  m \\<in> obs (sourcenode a) (PDG_BS S)\n  valid_node m\n  \\<not> m strongly-postdominates sourcenode a\n  m \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce dest:obs_strong_postdominate)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WeakPDGBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val PDG_BS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind valid_edge (_Entry_) Def Use\n     state_val PDG_BS", "proof(unfold_locales)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"n \\<in> PDG_BS S\""], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> PDG_BS S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 4. \\<And>n S. finite (obs n (PDG_BS S))\n 5. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"valid_node n\""], ["proof (prove)\nusing this:\n  n \\<in> PDG_BS S\n\ngoal (1 subgoal):\n 1. valid_node n", "by(rule PDG_BS_valid_node)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"valid_node n\" and \"n \\<in> S\""], ["proof (state)\nthis:\n  valid_node n\n  n \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 3. \\<And>n S. finite (obs n (PDG_BS S))\n 4. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"n \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  valid_node n\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n \\<in> PDG_BS S", "by(fastforce intro:PDG_path_Nil simp:PDG_BS_def)"], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n' S n V"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "assume \"n' \\<in> PDG_BS S\" and \"n influences V in n'\""], ["proof (state)\nthis:\n  n' \\<in> PDG_BS S\n  n influences V in n'\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> PDG_BS S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> PDG_BS S\n 2. \\<And>n S. finite (obs n (PDG_BS S))\n 3. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"n \\<in> PDG_BS S\""], ["proof (prove)\nusing this:\n  n' \\<in> PDG_BS S\n  n influences V in n'\n\ngoal (1 subgoal):\n 1. n \\<in> PDG_BS S", "by(auto dest:PDG.PDG_path_ddep[OF PDG_wcd,OF PDG.PDG_ddep_edge[OF PDG_wcd]]\n            dest:PDG_path_Append simp:PDG_BS_def split:if_split_asm)"], ["proof (state)\nthis:\n  n \\<in> PDG_BS S\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "have \"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (PDG_BS S))\n 2. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"finite (obs n (PDG_BS S))\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. finite (obs n (PDG_BS S))", "by fastforce"], ["proof (state)\nthis:\n  finite (obs n (PDG_BS S))\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "have \"(\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (PDG_BS S)) \\<le> 1", "thus \"card (obs n (PDG_BS S)) \\<le> 1\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (PDG_BS S) = {m}) \\<or> obs n (PDG_BS S) = {}\n\ngoal (1 subgoal):\n 1. card (obs n (PDG_BS S)) \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  card (obs n (PDG_BS S)) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection\\<open>Weak order dependence\\<close>"], ["", "context CFG_wf begin"], ["", "lemma obs_singleton: \n  (*assumes valid:\"valid_node n\"*)\n  shows \"(\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n         obs n (wod_backward_slice S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n    obs n (wod_backward_slice S) = {}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "let ?WOD_BS = \"wod_backward_slice S\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "assume \"\\<not> ((\\<exists>m. obs n ?WOD_BS = {m}) \\<or> obs n ?WOD_BS = {})\""], ["proof (state)\nthis:\n  \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n          obs n (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "hence \"\\<exists>nx nx'. nx \\<in> obs n ?WOD_BS \\<and> nx' \\<in> obs n ?WOD_BS \\<and>\n    nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n          obs n (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. \\<exists>nx nx'.\n       nx \\<in> obs n (wod_backward_slice S) \\<and>\n       nx' \\<in> obs n (wod_backward_slice S) \\<and> nx \\<noteq> nx'", "by auto"], ["proof (state)\nthis:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (wod_backward_slice S) \\<and>\n     nx' \\<in> obs n (wod_backward_slice S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (wod_backward_slice S) \\<and>\n     nx' \\<in> obs n (wod_backward_slice S) \\<and> nx \\<noteq> nx'", "obtain nx nx' where \"nx \\<in> obs n ?WOD_BS\" and \"nx' \\<in> obs n ?WOD_BS\"\n    and \"nx \\<noteq> nx'\""], ["proof (prove)\nusing this:\n  \\<exists>nx nx'.\n     nx \\<in> obs n (wod_backward_slice S) \\<and>\n     nx' \\<in> obs n (wod_backward_slice S) \\<and> nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. (\\<And>nx nx'.\n        \\<lbrakk>nx \\<in> obs n (wod_backward_slice S);\n         nx' \\<in> obs n (wod_backward_slice S); nx \\<noteq> nx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  nx \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  nx \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "from \\<open>nx \\<in> obs n ?WOD_BS\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs n (wod_backward_slice S)", "obtain as where \"n -as\\<rightarrow>* nx\" \n    and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> ?WOD_BS\" and \"nx \\<in> ?WOD_BS\""], ["proof (prove)\nusing this:\n  nx \\<in> obs n (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>* nx;\n         \\<forall>n'\\<in>set (sourcenodes as).\n            n' \\<notin> wod_backward_slice S;\n         nx \\<in> wod_backward_slice S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obsE)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* nx\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S\n  nx \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "from \\<open>n -as\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx", "have \"valid_node nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. valid_node nx", "by(fastforce dest:path_valid_node)"], ["proof (state)\nthis:\n  valid_node nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<in> ?WOD_BS\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> wod_backward_slice S\n  valid_node nx", "have \"obs nx ?WOD_BS = {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> wod_backward_slice S\n  valid_node nx\n\ngoal (1 subgoal):\n 1. obs nx (wod_backward_slice S) = {nx}", "by -(rule n_in_obs)"], ["proof (state)\nthis:\n  obs nx (wod_backward_slice S) = {nx}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n ?WOD_BS\\<close> \\<open>nx' \\<in> obs n ?WOD_BS\\<close> \\<open>nx \\<noteq> nx'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  nx \\<noteq> nx'\n  obs nx (wod_backward_slice S) = {nx}", "have \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  nx \\<noteq> nx'\n  obs nx (wod_backward_slice S) = {nx}\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>n -as\\<rightarrow>* nx\\<close> \\<open>nx \\<in> obs n ?WOD_BS\\<close> \\<open>nx' \\<in> obs n ?WOD_BS\\<close> \\<open>nx \\<noteq> nx'\\<close> \n    \\<open>obs nx ?WOD_BS = {nx}\\<close> \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> ?WOD_BS\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  nx \\<noteq> nx'\n  obs nx (wod_backward_slice S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S\n  as \\<noteq> []", "have \"\\<exists>a as' as''. n -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* nx \\<and>\n                     valid_edge a \\<and> as = as'@a#as'' \\<and> \n                     obs (targetnode a) ?WOD_BS = {nx} \\<and> \n                    (\\<not> (\\<exists>m. obs (sourcenode a) ?WOD_BS = {m} \\<or> \n                       obs (sourcenode a) ?WOD_BS = {}))\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* nx\n  nx \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  nx \\<noteq> nx'\n  obs nx (wod_backward_slice S) = {nx}\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>a as' as''.\n       n -as'\\<rightarrow>* sourcenode a \\<and>\n       targetnode a -as''\\<rightarrow>* nx \\<and>\n       valid_edge a \\<and>\n       as = as' @ a # as'' \\<and>\n       obs (targetnode a) (wod_backward_slice S) = {nx} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode a) (wod_backward_slice S) = {})", "proof(induct arbitrary:nx' rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n   ?nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> ?nx';\n   obs n' (wod_backward_slice S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (wod_backward_slice S) =\n                       {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (wod_backward_slice S) =\n                           {m} \\<or>\n                           obs (sourcenode a) (wod_backward_slice S) = {})\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'\n  obs n' (wod_backward_slice S) = {n'}\n  \\<forall>n'\\<in>set (sourcenodes (a # as)).\n     n' \\<notin> wod_backward_slice S\n  a # as \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "note [simp] = \\<open>sourcenode a = n\\<close>[THEN sym] \\<open>targetnode a = n''\\<close>[THEN sym]"], ["proof (state)\nthis:\n  n = sourcenode a\n  n'' = targetnode a\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "note more_than_one = \\<open>n' \\<in> obs n (?WOD_BS)\\<close> \\<open>nx' \\<in> obs n (?WOD_BS)\\<close> \\<open>n' \\<noteq> nx'\\<close>"], ["proof (state)\nthis:\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "note IH = \\<open>\\<And>nx'. \\<lbrakk>n' \\<in> obs n'' (?WOD_BS); nx' \\<in> obs n'' (?WOD_BS); n' \\<noteq> nx'; \n      obs n' (?WOD_BS) = {n'}; \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (?WOD_BS); as \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> \\<exists>a as' as''. n'' -as'\\<rightarrow>* sourcenode a \\<and> targetnode a -as''\\<rightarrow>* n' \\<and>\n      valid_edge a \\<and> as = as'@a#as'' \\<and> obs (targetnode a) (?WOD_BS) = {n'} \\<and>\n      (\\<not> (\\<exists>m. obs (sourcenode a) (?WOD_BS) = {m} \\<or> \n      obs (sourcenode a) (?WOD_BS) = {}))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n   ?nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> ?nx';\n   obs n' (wod_backward_slice S) = {n'};\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S;\n   as \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a as' as''.\n                       n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                       targetnode a -as''\\<rightarrow>* n' \\<and>\n                       valid_edge a \\<and>\n                       as = as' @ a # as'' \\<and>\n                       obs (targetnode a) (wod_backward_slice S) =\n                       {n'} \\<and>\n                       (\\<nexists>m.\n                           obs (sourcenode a) (wod_backward_slice S) =\n                           {m} \\<or>\n                           obs (sourcenode a) (wod_backward_slice S) = {})\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "from \\<open>\\<forall>n'\\<in>set (sourcenodes (a#as)). n' \\<notin> (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)).\n     n' \\<notin> wod_backward_slice S", "have \"\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (?WOD_BS)\" and \"sourcenode a \\<notin> (?WOD_BS)\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)).\n     n' \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set (sourcenodes as).\n       n' \\<notin> wod_backward_slice S &&&\n    sourcenode a \\<notin> wod_backward_slice S", "by(simp_all add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S\n  sourcenode a \\<notin> wod_backward_slice S\n\ngoal (2 subgoals):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})\n 2. \\<And>n'' as n' a n nx'.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<And>nx'.\n           \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n            nx' \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> nx';\n            obs n' (wod_backward_slice S) = {n'};\n            \\<forall>n'\\<in>set (sourcenodes as).\n               n' \\<notin> wod_backward_slice S;\n            as \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> \\<exists>a as' as''.\n                                n'' -as'\\<rightarrow>* sourcenode a \\<and>\n                                targetnode a -as''\\<rightarrow>* n' \\<and>\n                                valid_edge a \\<and>\n                                as = as' @ a # as'' \\<and>\n                                obs (targetnode a) (wod_backward_slice S) =\n                                {n'} \\<and>\n                                (\\<nexists>m.\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {m} \\<or>\n                                    obs (sourcenode a)\n                                     (wod_backward_slice S) =\n                                    {});\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        n' \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n        obs n' (wod_backward_slice S) = {n'};\n        \\<forall>n'\\<in>set (sourcenodes (a # as)).\n           n' \\<notin> wod_backward_slice S;\n        a # as \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa as' as''.\n                            n -as'\\<rightarrow>* sourcenode aa \\<and>\n                            targetnode aa -as''\\<rightarrow>* n' \\<and>\n                            valid_edge aa \\<and>\n                            a # as = as' @ aa # as'' \\<and>\n                            obs (targetnode aa) (wod_backward_slice S) =\n                            {n'} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode aa) (wod_backward_slice S) =\n                                {})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "proof(cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  as = []", "have [simp]:\"n' = n''\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  as = []\n\ngoal (1 subgoal):\n 1. n' = n''", "by(fastforce elim:path.cases)"], ["proof (state)\nthis:\n  n' = n''\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "from more_than_one"], ["proof (chain)\npicking this:\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'", "have \"\\<not> (\\<exists>m. obs (sourcenode a) (?WOD_BS) = {m} \\<or> \n               obs (sourcenode a) (?WOD_BS) = {})\""], ["proof (prove)\nusing this:\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'\n\ngoal (1 subgoal):\n 1. \\<nexists>m.\n       obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n       obs (sourcenode a) (wod_backward_slice S) = {}", "by auto"], ["proof (state)\nthis:\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>obs n' (?WOD_BS) = {n'}\\<close> True \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  obs n' (wod_backward_slice S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  obs n' (wod_backward_slice S) = {n'}\n  as = []\n  valid_edge a\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (wod_backward_slice S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a) (wod_backward_slice S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a) (wod_backward_slice S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (wod_backward_slice S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a) (wod_backward_slice S) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a) (wod_backward_slice S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obs n' (wod_backward_slice S) = {n'}; as = []; valid_edge a;\n     \\<nexists>m.\n        obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a) (wod_backward_slice S) = {}\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -[]\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ [a] \\<and>\n                      obs (targetnode a) (wod_backward_slice S) =\n                      {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (wod_backward_slice S) =\n                          {m} \\<or>\n                          obs (sourcenode a) (wod_backward_slice S) = {})", "by(auto intro!:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode aa) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "hence \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "."], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "from \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S", "have \"obs n' (?WOD_BS) \\<subseteq> obs n'' (?WOD_BS)\""], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<subseteq> obs n'' (wod_backward_slice S)", "by(rule path_obs_subset)"], ["proof (state)\nthis:\n  obs n' (wod_backward_slice S) \\<subseteq> obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "proof(cases \"obs n' (?WOD_BS) = obs n'' (?WOD_BS)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs n' (wod_backward_slice S) =\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "case True"], ["proof (state)\nthis:\n  obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)\n\ngoal (2 subgoals):\n 1. obs n' (wod_backward_slice S) =\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})\n 2. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>n'' -as\\<rightarrow>* n'\\<close> \\<open>valid_edge a\\<close> \\<open>obs n' (?WOD_BS) = {n'}\\<close> more_than_one"], ["proof (chain)\npicking this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (wod_backward_slice S) = {n'}\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'\n  obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' -as\\<rightarrow>* n'\n  valid_edge a\n  obs n' (wod_backward_slice S) = {n'}\n  n' \\<in> obs n (wod_backward_slice S)\n  nx' \\<in> obs n (wod_backward_slice S)\n  n' \\<noteq> nx'\n  obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "apply(rule_tac x=\"a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (wod_backward_slice S) = {n'};\n     n' \\<in> obs n (wod_backward_slice S);\n     nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n     obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = as' @ a # as'' \\<and>\n                         obs (targetnode a) (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a) (wod_backward_slice S) = {})", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (wod_backward_slice S) = {n'};\n     n' \\<in> obs n (wod_backward_slice S);\n     nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n     obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -[]\\<rightarrow>* sourcenode a \\<and>\n                         targetnode a -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a \\<and>\n                         a # as = [] @ a # as'' \\<and>\n                         obs (targetnode a) (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a) (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a) (wod_backward_slice S) = {})", "apply(rule_tac x=\"as\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' -as\\<rightarrow>* n'; valid_edge a;\n     obs n' (wod_backward_slice S) = {n'};\n     n' \\<in> obs n (wod_backward_slice S);\n     nx' \\<in> obs n (wod_backward_slice S); n' \\<noteq> nx';\n     obs n' (wod_backward_slice S) = obs n'' (wod_backward_slice S)\\<rbrakk>\n    \\<Longrightarrow> n -[]\\<rightarrow>* sourcenode a \\<and>\n                      targetnode a -as\\<rightarrow>* n' \\<and>\n                      valid_edge a \\<and>\n                      a # as = [] @ a # as \\<and>\n                      obs (targetnode a) (wod_backward_slice S) =\n                      {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a) (wod_backward_slice S) =\n                          {m} \\<or>\n                          obs (sourcenode a) (wod_backward_slice S) = {})", "by(fastforce intro:empty_path)"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode aa) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "case False"], ["proof (state)\nthis:\n  obs n' (wod_backward_slice S) \\<noteq> obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>obs n' (?WOD_BS) \\<subseteq> obs n'' (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  obs n' (wod_backward_slice S) \\<subseteq> obs n'' (wod_backward_slice S)\n  obs n' (wod_backward_slice S) \\<noteq> obs n'' (wod_backward_slice S)", "have \"obs n' (?WOD_BS) \\<subset> obs n'' (?WOD_BS)\""], ["proof (prove)\nusing this:\n  obs n' (wod_backward_slice S) \\<subseteq> obs n'' (wod_backward_slice S)\n  obs n' (wod_backward_slice S) \\<noteq> obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<subset> obs n'' (wod_backward_slice S)", "by simp"], ["proof (state)\nthis:\n  obs n' (wod_backward_slice S) \\<subset> obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>obs n' (?WOD_BS) = {n'}\\<close>"], ["proof (chain)\npicking this:\n  obs n' (wod_backward_slice S) = {n'}\n  obs n' (wod_backward_slice S) \\<subset> obs n'' (wod_backward_slice S)", "obtain ni where \"n' \\<in> obs n'' (?WOD_BS)\"\n          and \"ni \\<in> obs n'' (?WOD_BS)\" and \"n' \\<noteq> ni\""], ["proof (prove)\nusing this:\n  obs n' (wod_backward_slice S) = {n'}\n  obs n' (wod_backward_slice S) \\<subset> obs n'' (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. (\\<And>ni.\n        \\<lbrakk>n' \\<in> obs n'' (wod_backward_slice S);\n         ni \\<in> obs n'' (wod_backward_slice S); n' \\<noteq> ni\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<in> obs n'' (wod_backward_slice S)\n  ni \\<in> obs n'' (wod_backward_slice S)\n  n' \\<noteq> ni\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "from IH[OF this \\<open>obs n' (?WOD_BS) = {n'}\\<close> \n          \\<open>\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> (?WOD_BS)\\<close> \\<open>as \\<noteq> []\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode a) (wod_backward_slice S) = {})", "obtain a' as' as''\n          where \"n'' -as'\\<rightarrow>* sourcenode a'\" and \"targetnode a' -as''\\<rightarrow>* n'\"\n          and \"valid_edge a'\" and [simp]:\"as = as'@a'#as''\" \n          and \"obs (targetnode a') (?WOD_BS) = {n'}\"\n          and more_than_one':\"\\<not> (\\<exists>m. obs (sourcenode a') (?WOD_BS) = {m} \\<or> \n          obs (sourcenode a') (?WOD_BS) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n'' -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* n' \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode a) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>as' a' as''.\n        \\<lbrakk>n'' -as'\\<rightarrow>* sourcenode a';\n         targetnode a' -as''\\<rightarrow>* n'; valid_edge a';\n         as = as' @ a' # as'';\n         obs (targetnode a') (wod_backward_slice S) = {n'};\n         \\<nexists>m.\n            obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n            obs (sourcenode a') (wod_backward_slice S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  targetnode a' -as''\\<rightarrow>* n'\n  valid_edge a'\n  as = as' @ a' # as''\n  obs (targetnode a') (wod_backward_slice S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a') (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "from \\<open>n'' -as'\\<rightarrow>* sourcenode a'\\<close> \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a", "have \"n -a#as'\\<rightarrow>* sourcenode a'\""], ["proof (prove)\nusing this:\n  n'' -as'\\<rightarrow>* sourcenode a'\n  valid_edge a\n\ngoal (1 subgoal):\n 1. n -a # as'\\<rightarrow>* sourcenode a'", "by(fastforce intro:path.Cons_path)"], ["proof (state)\nthis:\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. obs n' (wod_backward_slice S) \\<noteq>\n    obs n'' (wod_backward_slice S) \\<Longrightarrow>\n    \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "with \\<open>targetnode a' -as''\\<rightarrow>* n'\\<close> \\<open>obs (targetnode a') (?WOD_BS) = {n'}\\<close>\n          more_than_one' \\<open>valid_edge a'\\<close>"], ["proof (chain)\npicking this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (wod_backward_slice S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a') (wod_backward_slice S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'", "show ?thesis"], ["proof (prove)\nusing this:\n  targetnode a' -as''\\<rightarrow>* n'\n  obs (targetnode a') (wod_backward_slice S) = {n'}\n  \\<nexists>m.\n     obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a') (wod_backward_slice S) = {}\n  valid_edge a'\n  n -a # as'\\<rightarrow>* sourcenode a'\n\ngoal (1 subgoal):\n 1. \\<exists>aa as' as''.\n       n -as'\\<rightarrow>* sourcenode aa \\<and>\n       targetnode aa -as''\\<rightarrow>* n' \\<and>\n       valid_edge aa \\<and>\n       a # as = as' @ aa # as'' \\<and>\n       obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n       (\\<nexists>m.\n           obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n           obs (sourcenode aa) (wod_backward_slice S) = {})", "apply(rule_tac x=\"a'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (wod_backward_slice S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a') (wod_backward_slice S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as' as''.\n                         n -as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = as' @ a' # as'' \\<and>\n                         obs (targetnode a') (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a') (wod_backward_slice S) =\n                             {})", "apply(rule_tac x=\"a#as'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (wod_backward_slice S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a') (wod_backward_slice S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as''.\n                         n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                         targetnode a' -as''\\<rightarrow>* n' \\<and>\n                         valid_edge a' \\<and>\n                         a # as = (a # as') @ a' # as'' \\<and>\n                         obs (targetnode a') (wod_backward_slice S) =\n                         {n'} \\<and>\n                         (\\<nexists>m.\n                             obs (sourcenode a') (wod_backward_slice S) =\n                             {m} \\<or>\n                             obs (sourcenode a') (wod_backward_slice S) =\n                             {})", "apply(rule_tac x=\"as''\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>targetnode a' -as''\\<rightarrow>* n';\n     obs (targetnode a') (wod_backward_slice S) = {n'};\n     \\<nexists>m.\n        obs (sourcenode a') (wod_backward_slice S) = {m} \\<or>\n        obs (sourcenode a') (wod_backward_slice S) = {};\n     valid_edge a'; n -a # as'\\<rightarrow>* sourcenode a'\\<rbrakk>\n    \\<Longrightarrow> n -a # as'\\<rightarrow>* sourcenode a' \\<and>\n                      targetnode a' -as''\\<rightarrow>* n' \\<and>\n                      valid_edge a' \\<and>\n                      a # as = (a # as') @ a' # as'' \\<and>\n                      obs (targetnode a') (wod_backward_slice S) =\n                      {n'} \\<and>\n                      (\\<nexists>m.\n                          obs (sourcenode a') (wod_backward_slice S) =\n                          {m} \\<or>\n                          obs (sourcenode a') (wod_backward_slice S) = {})", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode aa) (wod_backward_slice S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode aa) (wod_backward_slice S) = {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aa as' as''.\n     n -as'\\<rightarrow>* sourcenode aa \\<and>\n     targetnode aa -as''\\<rightarrow>* n' \\<and>\n     valid_edge aa \\<and>\n     a # as = as' @ aa # as'' \\<and>\n     obs (targetnode aa) (wod_backward_slice S) = {n'} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode aa) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode aa) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. \\<And>n nx'.\n       \\<lbrakk>valid_node n; n \\<in> obs n (wod_backward_slice S);\n        nx' \\<in> obs n (wod_backward_slice S); n \\<noteq> nx';\n        obs n (wod_backward_slice S) = {n};\n        \\<forall>n'\\<in>set (sourcenodes []).\n           n' \\<notin> wod_backward_slice S;\n        [] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a as' as''.\n                            n -as'\\<rightarrow>* sourcenode a \\<and>\n                            targetnode a -as''\\<rightarrow>* n \\<and>\n                            valid_edge a \\<and>\n                            [] = as' @ a # as'' \\<and>\n                            obs (targetnode a) (wod_backward_slice S) =\n                            {n} \\<and>\n                            (\\<nexists>m.\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {m} \\<or>\n                                obs (sourcenode a) (wod_backward_slice S) =\n                                {})", "qed simp"], ["proof (state)\nthis:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (wod_backward_slice S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode a) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (wod_backward_slice S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode a) (wod_backward_slice S) = {})", "obtain a as' as'' where \"valid_edge a\"\n    and \"obs (targetnode a) (?WOD_BS) = {nx}\"\n    and more_than_one:\"\\<not> (\\<exists>m. obs (sourcenode a) (?WOD_BS) = {m} \\<or> \n                         obs (sourcenode a) (?WOD_BS) = {})\""], ["proof (prove)\nusing this:\n  \\<exists>a as' as''.\n     n -as'\\<rightarrow>* sourcenode a \\<and>\n     targetnode a -as''\\<rightarrow>* nx \\<and>\n     valid_edge a \\<and>\n     as = as' @ a # as'' \\<and>\n     obs (targetnode a) (wod_backward_slice S) = {nx} \\<and>\n     (\\<nexists>m.\n         obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n         obs (sourcenode a) (wod_backward_slice S) = {})\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>valid_edge a;\n         obs (targetnode a) (wod_backward_slice S) = {nx};\n         \\<nexists>m.\n            obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n            obs (sourcenode a) (wod_backward_slice S) = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  valid_edge a\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "have \"sourcenode a \\<notin> (?WOD_BS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sourcenode a \\<notin> wod_backward_slice S", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False", "assume \"\\<not> sourcenode a \\<notin> ?WOD_BS\""], ["proof (state)\nthis:\n  \\<not> sourcenode a \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False", "hence \"sourcenode a \\<in> ?WOD_BS\""], ["proof (prove)\nusing this:\n  \\<not> sourcenode a \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> wod_backward_slice S", "by simp"], ["proof (state)\nthis:\n  sourcenode a \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<in> wod_backward_slice S", "have \"obs (sourcenode a) (?WOD_BS) = {sourcenode a}\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. obs (sourcenode a) (wod_backward_slice S) = {sourcenode a}", "by(fastforce intro!:n_in_obs)"], ["proof (state)\nthis:\n  obs (sourcenode a) (wod_backward_slice S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. \\<not> sourcenode a \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n  obs (sourcenode a) (wod_backward_slice S) = {sourcenode a}", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n  obs (sourcenode a) (wod_backward_slice S) = {sourcenode a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sourcenode a \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  sourcenode a \\<notin> wod_backward_slice S", "have \"obs (targetnode a) (?WOD_BS) \\<subseteq> obs (sourcenode a) (?WOD_BS)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  sourcenode a \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. obs (targetnode a) (wod_backward_slice S)\n    \\<subseteq> obs (sourcenode a) (wod_backward_slice S)", "by(rule edge_obs_subset)"], ["proof (state)\nthis:\n  obs (targetnode a) (wod_backward_slice S)\n  \\<subseteq> obs (sourcenode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>obs (targetnode a) (?WOD_BS) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  obs (targetnode a) (wod_backward_slice S)\n  \\<subseteq> obs (sourcenode a) (wod_backward_slice S)", "have \"nx \\<in> obs (sourcenode a) (?WOD_BS)\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  obs (targetnode a) (wod_backward_slice S)\n  \\<subseteq> obs (sourcenode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. nx \\<in> obs (sourcenode a) (wod_backward_slice S)", "by simp"], ["proof (state)\nthis:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with more_than_one"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)", "obtain m  where \"m \\<in> obs (sourcenode a) (?WOD_BS)\"\n    and \"nx \\<noteq> m\""], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     obs (sourcenode a) (wod_backward_slice S) = {m} \\<or>\n     obs (sourcenode a) (wod_backward_slice S) = {}\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> obs (sourcenode a) (wod_backward_slice S);\n         nx \\<noteq> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  nx \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<in> obs (sourcenode a) (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  nx \\<noteq> m", "obtain as2 \n    where \"sourcenode a -as2\\<rightarrow>* m\" and \"nx \\<notin> set(sourcenodes as2)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  nx \\<noteq> m\n\ngoal (1 subgoal):\n 1. (\\<And>as2.\n        \\<lbrakk>sourcenode a -as2\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes as2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  sourcenode a -as2\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes as2)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "from \\<open>nx \\<in> obs (sourcenode a) (?WOD_BS)\\<close> \\<open>m \\<in> obs (sourcenode a) (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)", "obtain as1 where \"sourcenode a -as1\\<rightarrow>* nx\" and \"m \\<notin> set(sourcenodes as1)\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. (\\<And>as1.\n        \\<lbrakk>sourcenode a -as1\\<rightarrow>* nx;\n         m \\<notin> set (sourcenodes as1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  sourcenode a -as1\\<rightarrow>* nx\n  m \\<notin> set (sourcenodes as1)\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "from \\<open>obs (targetnode a) (?WOD_BS) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}", "obtain asx \n    where \"targetnode a -asx\\<rightarrow>* nx\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n\ngoal (1 subgoal):\n 1. (\\<And>asx.\n        targetnode a -asx\\<rightarrow>* nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obsE)"], ["proof (state)\nthis:\n  targetnode a -asx\\<rightarrow>* nx\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "have \"\\<forall>asx'. targetnode a -asx'\\<rightarrow>* m \\<longrightarrow> nx \\<in> set(sourcenodes asx')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asx'.\n       targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n       nx \\<in> set (sourcenodes asx')", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>asx'.\n               targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n               nx \\<in> set (sourcenodes asx')) \\<Longrightarrow>\n    False", "assume \"\\<not> (\\<forall>asx'. targetnode a -asx'\\<rightarrow>* m \\<longrightarrow> nx \\<in> set (sourcenodes asx'))\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>asx'.\n             targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n             nx \\<in> set (sourcenodes asx'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>asx'.\n               targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n               nx \\<in> set (sourcenodes asx')) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>asx'.\n             targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n             nx \\<in> set (sourcenodes asx'))", "obtain asx' where \"targetnode a -asx'\\<rightarrow>* m\" and \"nx \\<notin> set (sourcenodes asx')\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>asx'.\n             targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n             nx \\<in> set (sourcenodes asx'))\n\ngoal (1 subgoal):\n 1. (\\<And>asx'.\n        \\<lbrakk>targetnode a -asx'\\<rightarrow>* m;\n         nx \\<notin> set (sourcenodes asx')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  targetnode a -asx'\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>asx'.\n               targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n               nx \\<in> set (sourcenodes asx')) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"\\<forall>nx \\<in> set(sourcenodes asx'). nx \\<notin> ?WOD_BS\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes asx').\n       nx \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "case True"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes asx'). nx \\<notin> wod_backward_slice S\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes asx').\n       nx \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "with \\<open>targetnode a -asx'\\<rightarrow>* m\\<close> \\<open>m \\<in> obs (sourcenode a) (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  targetnode a -asx'\\<rightarrow>* m\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  \\<forall>nx\\<in>set (sourcenodes asx'). nx \\<notin> wod_backward_slice S", "have \"m \\<in> obs (targetnode a) ?WOD_BS\""], ["proof (prove)\nusing this:\n  targetnode a -asx'\\<rightarrow>* m\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  \\<forall>nx\\<in>set (sourcenodes asx'). nx \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. m \\<in> obs (targetnode a) (wod_backward_slice S)", "by(fastforce intro:obs_elem elim:obsE)"], ["proof (state)\nthis:\n  m \\<in> obs (targetnode a) (wod_backward_slice S)\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes asx').\n       nx \\<notin> wod_backward_slice S \\<Longrightarrow>\n    False\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "with \\<open>nx \\<noteq> m\\<close> \\<open>obs (targetnode a) (?WOD_BS) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  m \\<in> obs (targetnode a) (wod_backward_slice S)", "show False"], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  m \\<in> obs (targetnode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n             nx \\<notin> wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "hence \"\\<exists>nx \\<in> set(sourcenodes asx'). nx \\<in> ?WOD_BS\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n             nx \\<notin> wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes asx'). nx \\<in> wod_backward_slice S", "by blast"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes asx'). nx \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes asx'). nx \\<in> wod_backward_slice S", "obtain nx' ns ns' where \"sourcenodes asx' = ns@nx'#ns'\" and \"nx' \\<in> ?WOD_BS\"\n        and \"\\<forall>nx \\<in> set ns. nx \\<notin> ?WOD_BS\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes asx'). nx \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. (\\<And>ns nx' ns'.\n        \\<lbrakk>sourcenodes asx' = ns @ nx' # ns';\n         nx' \\<in> wod_backward_slice S;\n         \\<forall>nx\\<in>set ns. nx \\<notin> wod_backward_slice S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:split_list_first_propE)"], ["proof (state)\nthis:\n  sourcenodes asx' = ns @ nx' # ns'\n  nx' \\<in> wod_backward_slice S\n  \\<forall>nx\\<in>set ns. nx \\<notin> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "from \\<open>sourcenodes asx' = ns@nx'#ns'\\<close>"], ["proof (chain)\npicking this:\n  sourcenodes asx' = ns @ nx' # ns'", "obtain ax ai ai' \n        where [simp]:\"asx' = ai@ax#ai'\" \"ns = sourcenodes ai\" \"nx' = sourcenode ax\""], ["proof (prove)\nusing this:\n  sourcenodes asx' = ns @ nx' # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>ai ax ai'.\n        \\<lbrakk>asx' = ai @ ax # ai'; ns = sourcenodes ai;\n         nx' = sourcenode ax\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  asx' = ai @ ax # ai'\n  ns = sourcenodes ai\n  nx' = sourcenode ax\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "from \\<open>targetnode a -asx'\\<rightarrow>* m\\<close>"], ["proof (chain)\npicking this:\n  targetnode a -asx'\\<rightarrow>* m", "have \"targetnode a -ai\\<rightarrow>* sourcenode ax\""], ["proof (prove)\nusing this:\n  targetnode a -asx'\\<rightarrow>* m\n\ngoal (1 subgoal):\n 1. targetnode a -ai\\<rightarrow>* sourcenode ax", "by(fastforce dest:path_split)"], ["proof (state)\nthis:\n  targetnode a -ai\\<rightarrow>* sourcenode ax\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "with \\<open>nx' \\<in> ?WOD_BS\\<close> \\<open>\\<forall>nx \\<in> set ns. nx \\<notin> ?WOD_BS\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> wod_backward_slice S\n  \\<forall>nx\\<in>set ns. nx \\<notin> wod_backward_slice S\n  targetnode a -ai\\<rightarrow>* sourcenode ax", "have \"nx' \\<in> obs (targetnode a) ?WOD_BS\""], ["proof (prove)\nusing this:\n  nx' \\<in> wod_backward_slice S\n  \\<forall>nx\\<in>set ns. nx \\<notin> wod_backward_slice S\n  targetnode a -ai\\<rightarrow>* sourcenode ax\n\ngoal (1 subgoal):\n 1. nx' \\<in> obs (targetnode a) (wod_backward_slice S)", "by(fastforce intro:obs_elem)"], ["proof (state)\nthis:\n  nx' \\<in> obs (targetnode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "with \\<open>obs (targetnode a) (?WOD_BS) = {nx}\\<close>"], ["proof (chain)\npicking this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  nx' \\<in> obs (targetnode a) (wod_backward_slice S)", "have \"nx' = nx\""], ["proof (prove)\nusing this:\n  obs (targetnode a) (wod_backward_slice S) = {nx}\n  nx' \\<in> obs (targetnode a) (wod_backward_slice S)\n\ngoal (1 subgoal):\n 1. nx' = nx", "by simp"], ["proof (state)\nthis:\n  nx' = nx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes asx').\n               nx \\<notin> wod_backward_slice S) \\<Longrightarrow>\n    False", "with \\<open>nx \\<notin> set (sourcenodes asx')\\<close>"], ["proof (chain)\npicking this:\n  nx \\<notin> set (sourcenodes asx')\n  nx' = nx", "show False"], ["proof (prove)\nusing this:\n  nx \\<notin> set (sourcenodes asx')\n  nx' = nx\n\ngoal (1 subgoal):\n 1. False", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>asx'.\n     targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n     nx \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<noteq> m\\<close> \\<open>sourcenode a -as1\\<rightarrow>* nx\\<close> \\<open>m \\<notin> set(sourcenodes as1)\\<close> \n    \\<open>sourcenode a -as2\\<rightarrow>* m\\<close> \\<open>nx \\<notin> set(sourcenodes as2)\\<close> \\<open>valid_edge a\\<close> \n    \\<open>targetnode a -asx\\<rightarrow>* nx\\<close>"], ["proof (chain)\npicking this:\n  nx \\<noteq> m\n  sourcenode a -as1\\<rightarrow>* nx\n  m \\<notin> set (sourcenodes as1)\n  sourcenode a -as2\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes as2)\n  valid_edge a\n  targetnode a -asx\\<rightarrow>* nx\n  \\<forall>asx'.\n     targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n     nx \\<in> set (sourcenodes asx')", "have \"sourcenode a \\<longrightarrow>\\<^sub>w\\<^sub>o\\<^sub>d nx,m\""], ["proof (prove)\nusing this:\n  nx \\<noteq> m\n  sourcenode a -as1\\<rightarrow>* nx\n  m \\<notin> set (sourcenodes as1)\n  sourcenode a -as2\\<rightarrow>* m\n  nx \\<notin> set (sourcenodes as2)\n  valid_edge a\n  targetnode a -asx\\<rightarrow>* nx\n  \\<forall>asx'.\n     targetnode a -asx'\\<rightarrow>* m \\<longrightarrow>\n     nx \\<in> set (sourcenodes asx')\n\ngoal (1 subgoal):\n 1. sourcenode a \\<longrightarrow>\\<^sub>w\\<^sub>o\\<^sub>d nx,m", "by(simp add:wod_def,blast)"], ["proof (state)\nthis:\n  sourcenode a \\<longrightarrow>\\<^sub>w\\<^sub>o\\<^sub>d nx,m\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>nx \\<in> obs (sourcenode a) (?WOD_BS)\\<close> \\<open>m \\<in> obs (sourcenode a) (?WOD_BS)\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  sourcenode a \\<longrightarrow>\\<^sub>w\\<^sub>o\\<^sub>d nx,m", "have \"sourcenode a \\<in> ?WOD_BS\""], ["proof (prove)\nusing this:\n  nx \\<in> obs (sourcenode a) (wod_backward_slice S)\n  m \\<in> obs (sourcenode a) (wod_backward_slice S)\n  sourcenode a \\<longrightarrow>\\<^sub>w\\<^sub>o\\<^sub>d nx,m\n\ngoal (1 subgoal):\n 1. sourcenode a \\<in> wod_backward_slice S", "by(fastforce elim:cd_closed elim:obsE)"], ["proof (state)\nthis:\n  sourcenode a \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n            obs n (wod_backward_slice S) = {}) \\<Longrightarrow>\n    False", "with \\<open>sourcenode a \\<notin> ?WOD_BS\\<close>"], ["proof (chain)\npicking this:\n  sourcenode a \\<notin> wod_backward_slice S\n  sourcenode a \\<in> wod_backward_slice S", "show False"], ["proof (prove)\nusing this:\n  sourcenode a \\<notin> wod_backward_slice S\n  sourcenode a \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WODBackwardSliceCorrect:\n  \"BackwardSlice sourcenode targetnode kind valid_edge\n        (_Entry_) Def Use state_val wod_backward_slice\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BackwardSlice sourcenode targetnode kind valid_edge (_Entry_) Def Use\n     state_val wod_backward_slice", "proof(unfold_locales)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> wod_backward_slice S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 4. \\<And>n S. finite (obs n (wod_backward_slice S))\n 5. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> wod_backward_slice S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 4. \\<And>n S. finite (obs n (wod_backward_slice S))\n 5. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "assume \"n \\<in> wod_backward_slice S\""], ["proof (state)\nthis:\n  n \\<in> wod_backward_slice S\n\ngoal (5 subgoals):\n 1. \\<And>n S. n \\<in> wod_backward_slice S \\<Longrightarrow> valid_node n\n 2. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 4. \\<And>n S. finite (obs n (wod_backward_slice S))\n 5. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "thus \"valid_node n\""], ["proof (prove)\nusing this:\n  n \\<in> wod_backward_slice S\n\ngoal (1 subgoal):\n 1. valid_node n", "by(rule wod_backward_slice_valid_node)"], ["proof (state)\nthis:\n  valid_node n\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n S. finite (obs n (wod_backward_slice S))\n 4. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n S. finite (obs n (wod_backward_slice S))\n 4. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n S. finite (obs n (wod_backward_slice S))\n 4. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "assume \"valid_node n\" and \"n \\<in> S\""], ["proof (state)\nthis:\n  valid_node n\n  n \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_node n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 3. \\<And>n S. finite (obs n (wod_backward_slice S))\n 4. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "thus \"n \\<in> wod_backward_slice S\""], ["proof (prove)\nusing this:\n  valid_node n\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n \\<in> wod_backward_slice S", "by(rule refl)"], ["proof (state)\nthis:\n  n \\<in> wod_backward_slice S\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n S. finite (obs n (wod_backward_slice S))\n 3. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n S. finite (obs n (wod_backward_slice S))\n 3. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "fix n' S n V"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n S. finite (obs n (wod_backward_slice S))\n 3. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "assume \"n' \\<in> wod_backward_slice S\" \"n influences V in n'\""], ["proof (state)\nthis:\n  n' \\<in> wod_backward_slice S\n  n influences V in n'\n\ngoal (3 subgoals):\n 1. \\<And>n' S n V.\n       \\<lbrakk>n' \\<in> wod_backward_slice S; n influences V in n'\\<rbrakk>\n       \\<Longrightarrow> n \\<in> wod_backward_slice S\n 2. \\<And>n S. finite (obs n (wod_backward_slice S))\n 3. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "thus \"n \\<in> wod_backward_slice S\""], ["proof (prove)\nusing this:\n  n' \\<in> wod_backward_slice S\n  n influences V in n'\n\ngoal (1 subgoal):\n 1. n \\<in> wod_backward_slice S", "by -(rule dd_closed)"], ["proof (state)\nthis:\n  n \\<in> wod_backward_slice S\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (wod_backward_slice S))\n 2. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (wod_backward_slice S))\n 2. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (wod_backward_slice S))\n 2. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "have \"(\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or> \n    obs n (wod_backward_slice S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n    obs n (wod_backward_slice S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n  obs n (wod_backward_slice S) = {}\n\ngoal (2 subgoals):\n 1. \\<And>n S. finite (obs n (wod_backward_slice S))\n 2. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "thus \"finite (obs n (wod_backward_slice S))\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n  obs n (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. finite (obs n (wod_backward_slice S))", "by fastforce"], ["proof (state)\nthis:\n  finite (obs n (wod_backward_slice S))\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "fix n S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "have \"(\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or> obs n (wod_backward_slice S) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n    obs n (wod_backward_slice S) = {}", "by(rule obs_singleton)"], ["proof (state)\nthis:\n  (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n  obs n (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. \\<And>n S. card (obs n (wod_backward_slice S)) \\<le> 1", "thus \"card (obs n (wod_backward_slice S)) \\<le> 1\""], ["proof (prove)\nusing this:\n  (\\<exists>m. obs n (wod_backward_slice S) = {m}) \\<or>\n  obs n (wod_backward_slice S) = {}\n\ngoal (1 subgoal):\n 1. card (obs n (wod_backward_slice S)) \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  card (obs n (wod_backward_slice S)) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}