{"file_name": "/home/qj213/afp-2021-10-22/thys/MFOTL_Monitor/Slicing.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFOTL_Monitor", "problem_names": ["lemmas sound_slicer = equalityD1[OF correct_slicer]", "lemmas complete_slicer = equalityD2[OF correct_slicer]", "lemma mono_splitter: \"\\<pi> \\<le> \\<pi>' \\<Longrightarrow> splitter \\<pi> k \\<le> splitter \\<pi>' k\"", "lemma splitter_pslice: \"splitter \\<pi> k = MFOTL_slicer.pslice \\<phi> (slice_set k) \\<pi>\"", "lemma monitor_split: \"ok \\<phi> v \\<Longrightarrow> k \\<in> strategy v \\<Longrightarrow> (i, v) \\<in> M (splitter \\<pi> k) \\<longleftrightarrow> (i, v) \\<in> M \\<pi>\"", "lemma sat_inter_names_cong: \"(\\<And>e. e \\<in> names \\<phi> \\<Longrightarrow> {xs. (e, xs) \\<in> E} = {xs. (e, xs) \\<in> F}) \\<Longrightarrow>\n  MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi> \\<longleftrightarrow> MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> F) \\<sigma>) v i \\<phi>\"", "lemma matches_in_names: \"MFOTL.matches v \\<phi> x \\<Longrightarrow> fst x \\<in> names \\<phi>\"", "lemma unique_names_matches_absorb: \"fst x \\<in> names \\<alpha> \\<Longrightarrow> names \\<alpha> \\<inter> names \\<beta> = {} \\<Longrightarrow>\n    MFOTL.matches v \\<alpha> x \\<or> MFOTL.matches v \\<beta> x \\<longleftrightarrow> MFOTL.matches v \\<alpha> x\"\n  \"fst x \\<in> names \\<beta> \\<Longrightarrow> names \\<alpha> \\<inter> names \\<beta> = {} \\<Longrightarrow>\n    MFOTL.matches v \\<alpha> x \\<or> MFOTL.matches v \\<beta> x \\<longleftrightarrow> MFOTL.matches v \\<beta> x\"", "lemma mergeable_envsI:\n  assumes \"\\<And>v1 v2 v. v1 \\<in> S \\<Longrightarrow> v2 \\<in> S \\<Longrightarrow> length v = n \\<Longrightarrow> \\<forall>x < n. v ! x = v1 ! x \\<or> v ! x = v2 ! x \\<Longrightarrow> v \\<in> S\"\n  shows \"mergeable_envs n S\"", "lemma in_listset_nth: \"x \\<in> listset As \\<Longrightarrow> i < length As \\<Longrightarrow> x ! i \\<in> As ! i\"", "lemma all_nth_in_listset: \"length x = length As \\<Longrightarrow> (\\<And>i. i < length As \\<Longrightarrow> x ! i \\<in> As ! i) \\<Longrightarrow> x \\<in> listset As\"", "lemma mergeable_envs_listset: \"mergeable_envs (length As) (listset As)\"", "lemma mergeable_envs_Ex: \"mergeable_envs n S \\<Longrightarrow> MFOTL.nfv \\<alpha> \\<le> n \\<Longrightarrow> MFOTL.nfv \\<beta> \\<le> n \\<Longrightarrow>\n  (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<alpha>. v' ! x = v ! x) \\<Longrightarrow> (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<beta>. v' ! x = v ! x) \\<Longrightarrow>\n  (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>. v' ! x = v ! x)\"", "lemma in_set_ConsE: \"xs \\<in> set_Cons A As \\<Longrightarrow> (\\<And>y ys. xs = y # ys \\<Longrightarrow> y \\<in> A \\<Longrightarrow> ys \\<in> As \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma mergeable_envs_set_Cons: \"mergeable_envs n S \\<Longrightarrow> mergeable_envs (Suc n) (set_Cons UNIV S)\"", "lemma slice_Exists: \"MFOTL_slicer.slice (MFOTL.Exists \\<phi>) S \\<sigma> = MFOTL_slicer.slice \\<phi> (set_Cons UNIV S) \\<sigma>\"", "lemma image_Suc_fvi: \"Suc ` MFOTL.fvi (Suc b) \\<phi> = MFOTL.fvi b \\<phi> - {0}\"", "lemma nfv_Exists: \"MFOTL.nfv (MFOTL.Exists \\<phi>) = MFOTL.nfv \\<phi> - 1\"", "lemma set_Cons_empty_iff[simp]: \"set_Cons A Xs = {} \\<longleftrightarrow> A = {} \\<or> Xs = {}\"", "lemma unique_sat_slice_mem: \"safe_formula \\<phi> \\<Longrightarrow> gen_unique \\<phi> \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow>\n  mergeable_envs n S \\<Longrightarrow> MFOTL.nfv \\<phi> \\<le> n \\<Longrightarrow>\n  MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi> \\<Longrightarrow> \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\"", "lemma unique_sat_slice:\n  assumes formula: \"safe_formula \\<phi>\" \"gen_unique \\<phi>\"\n      and restr: \"S \\<noteq> {}\" \"mergeable_envs (MFOTL.nfv \\<phi>) S\"\n      and sat_slice: \"MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\"\n    shows \"MFOTL.sat \\<sigma> v i \\<phi>\"", "lemma (in splitting_strategy) unique_sat_strategy:\n  \"safe_formula \\<phi> \\<Longrightarrow> gen_unique \\<phi> \\<Longrightarrow> slice_set k \\<noteq> {} \\<Longrightarrow>\n  mergeable_envs (MFOTL.nfv \\<phi>) (slice_set k) \\<Longrightarrow>\n  MFOTL.sat (MFOTL_slicer.slice \\<phi> (slice_set k) \\<sigma>) (map the v) i \\<phi> \\<Longrightarrow>\n  ok \\<phi> v \\<Longrightarrow> k \\<in> strategy v\"", "lemma skip_joiner:\n  assumes \"safe_formula \\<phi>\" \"gen_unique \\<phi>\"\n  shows \"joiner (\\<lambda>k. M (splitter \\<pi> k)) = skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\"\n  (is \"?L = ?R\")"], "translations": [["", "lemmas sound_slicer = equalityD1[OF correct_slicer]"], ["", "lemmas complete_slicer = equalityD2[OF correct_slicer]"], ["", "end"], ["", "locale self_slicer = slicer nfv fv sat M \"\\<lambda>_. M\" splitter joiner for nfv fv sat M splitter joiner"], ["", "subsubsection \\<open>Definition 3\\<close>"], ["", "locale event_separable_splitter =\n  fixes event_splitter :: \"'a \\<Rightarrow> 'k :: finite set\"\nbegin"], ["", "lift_definition splitter :: \"'a prefix \\<Rightarrow> 'k \\<Rightarrow> 'a prefix\" is\n  \"\\<lambda>\\<pi> k. map (\\<lambda>(D, t). ({e \\<in> D. k \\<in> event_splitter e}, t)) \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list k.\n       sorted (map snd list) \\<Longrightarrow>\n       sorted\n        (map snd\n          (map (\\<lambda>(D, y). ({e \\<in> D. k \\<in> event_splitter e}, y))\n            list))", "by (auto simp: o_def split_beta)"], ["", "subsubsection \\<open>Lemma 1\\<close>"], ["", "lemma mono_splitter: \"\\<pi> \\<le> \\<pi>' \\<Longrightarrow> splitter \\<pi> k \\<le> splitter \\<pi>' k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<le> \\<pi>' \\<Longrightarrow>\n    splitter \\<pi> k \\<le> splitter \\<pi>' k", "by transfer auto"], ["", "end"], ["", "subsection \\<open>Joint data slicer\\<close>"], ["", "abbreviation (input) \"ok \\<phi> v \\<equiv> wf_tuple (MFOTL.nfv \\<phi>) (MFOTL.fv \\<phi>) v\""], ["", "locale splitting_strategy =\n  fixes \\<phi> :: \"'a MFOTL.formula\"\n  and strategy :: \"'a option list \\<Rightarrow> 'k :: finite set\"\n  assumes strategy_nonempty: \"ok \\<phi> v \\<Longrightarrow> strategy v \\<noteq> {}\"\nbegin"], ["", "abbreviation slice_set where\n  \"slice_set k \\<equiv> {v. \\<exists>v'. map the v' = v \\<and> ok \\<phi> v' \\<and> k \\<in> strategy v'}\""], ["", "end"], ["", "subsubsection \\<open>Definition 4\\<close>"], ["", "locale MFOTL_monitor =\n  monitor \"MFOTL.nfv \\<phi>\" \"MFOTL.fv \\<phi>\" \"\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>\" M for \\<phi> M"], ["", "locale joint_data_slicer = MFOTL_monitor \\<phi> M + splitting_strategy \\<phi> strategy\n  for \\<phi> M strategy\nbegin"], ["", "definition event_splitter where\n  \"event_splitter e = (\\<Union>(strategy ` {v. ok \\<phi> v \\<and> MFOTL.matches (map the v) \\<phi> e}))\""], ["", "sublocale event_separable_splitter where event_splitter = event_splitter"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition joiner where\n  \"joiner = (\\<lambda>s. \\<Union>k. s k \\<inter> (UNIV :: nat set) \\<times> {v. k \\<in> strategy v})\""], ["", "lemma splitter_pslice: \"splitter \\<pi> k = MFOTL_slicer.pslice \\<phi> (slice_set k) \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitter \\<pi> k =\n    pmap_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<pi>", "by transfer (auto simp: event_splitter_def)"], ["", "subsubsection \\<open>Lemma 2\\<close>"], ["", "text \\<open>Corresponds to the following theorem @{thm[source] sat_slice_strong} proved in theory\n   @{theory MFOTL_Monitor.Abstract_Monitor}:\n\n   @{thm sat_slice_strong[no_vars]}\\<close>"], ["", "subsubsection \\<open>Theorem 1\\<close>"], ["", "sublocale joint_monitor: MFOTL_monitor \\<phi> \"\\<lambda>\\<pi>. joiner (\\<lambda>k. M (splitter \\<pi> k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL_monitor \\<phi>\n     (\\<lambda>\\<pi>. joiner (\\<lambda>k. M (splitter \\<pi> k)))", "proof (unfold_locales, goal_cases mono wf sound complete)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<pi> \\<pi>'.\n       \\<pi> \\<le> \\<pi>' \\<Longrightarrow>\n       joiner (\\<lambda>k. M (splitter \\<pi> k))\n       \\<subseteq> joiner (\\<lambda>k. M (splitter \\<pi>' k))\n 2. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 3. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 4. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "case (mono \\<pi> \\<pi>')"], ["proof (state)\nthis:\n  \\<pi> \\<le> \\<pi>'\n\ngoal (4 subgoals):\n 1. \\<And>\\<pi> \\<pi>'.\n       \\<pi> \\<le> \\<pi>' \\<Longrightarrow>\n       joiner (\\<lambda>k. M (splitter \\<pi> k))\n       \\<subseteq> joiner (\\<lambda>k. M (splitter \\<pi>' k))\n 2. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 3. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 4. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. joiner (\\<lambda>k. M (splitter \\<pi> k))\n    \\<subseteq> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "using mono_monitor[OF mono_splitter, OF mono]"], ["proof (prove)\nusing this:\n  M (splitter \\<pi> ?k1) \\<subseteq> M (splitter \\<pi>' ?k1)\n\ngoal (1 subgoal):\n 1. joiner (\\<lambda>k. M (splitter \\<pi> k))\n    \\<subseteq> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "by (auto simp: joiner_def)"], ["proof (state)\nthis:\n  joiner (\\<lambda>k. M (splitter \\<pi> k))\n  \\<subseteq> joiner (\\<lambda>k. M (splitter \\<pi>' k))\n\ngoal (3 subgoals):\n 1. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 2. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 3. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 2. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 3. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "case (wf i v \\<pi>)"], ["proof (state)\nthis:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (3 subgoals):\n 1. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 2. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 3. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "then"], ["proof (chain)\npicking this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "obtain k where in_M: \"(i, v) \\<in> M (splitter \\<pi> k)\"  and k: \"k \\<in> strategy v\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding joiner_def"], ["proof (prove)\nusing this:\n  (i, v)\n  \\<in> (\\<Union>k.\n            M (splitter \\<pi> k) \\<inter>\n            UNIV \\<times> {v. k \\<in> strategy v})\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (3 subgoals):\n 1. \\<And>i v \\<pi>.\n       (i, v)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n 2. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 3. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "then"], ["proof (chain)\npicking this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v", "show ?case"], ["proof (prove)\nusing this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "using wf_monitor[OF in_M]"], ["proof (prove)\nusing this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "by auto"], ["proof (state)\nthis:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "case (sound i v \\<pi> \\<sigma>)"], ["proof (state)\nthis:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n  prefix_of \\<pi> \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "then"], ["proof (chain)\npicking this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n  prefix_of \\<pi> \\<sigma>", "obtain k where in_M: \"(i, v) \\<in> M (splitter \\<pi> k)\"  and k: \"k \\<in> strategy v\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n  prefix_of \\<pi> \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding joiner_def"], ["proof (prove)\nusing this:\n  (i, v)\n  \\<in> (\\<Union>k.\n            M (splitter \\<pi> k) \\<inter>\n            UNIV \\<times> {v. k \\<in> strategy v})\n  prefix_of \\<pi> \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "have wf: \"ok \\<phi> v\" and sat: \"\\<And>\\<sigma>. prefix_of (splitter \\<pi> k) \\<sigma> \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v &&&\n    (\\<And>\\<sigma>.\n        prefix_of (splitter \\<pi> k) \\<sigma> \\<Longrightarrow>\n        MFOTL.sat \\<sigma> (map the v) i \\<phi>)", "using sound_monitor[OF in_M] wf_monitor[OF in_M]"], ["proof (prove)\nusing this:\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v &&&\n    (\\<And>\\<sigma>.\n        prefix_of (splitter \\<pi> k) \\<sigma> \\<Longrightarrow>\n        MFOTL.sat \\<sigma> (map the v) i \\<phi>)", "by auto"], ["proof (state)\nthis:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "then"], ["proof (chain)\npicking this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>", "have \"MFOTL.sat \\<sigma> (map the v) i \\<phi>\" if \"prefix_of \\<pi> \\<sigma>\" for \\<sigma>"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> (map the v) i \\<phi>", "using that k"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of \\<pi> \\<sigma>\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> (map the v) i \\<phi>", "by (intro iffD2[OF sat_slice_iff[of \"map the v\" \"slice_set k\" \\<sigma> i \\<phi>]])\n      (auto simp: wf_tuple_def fvi_less_nfv splitter_pslice intro!: exI[of _ v] prefix_of_pmap_\\<Gamma>)"], ["proof (state)\nthis:\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>i v \\<pi> \\<sigma>.\n       \\<lbrakk>(i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k));\n        prefix_of \\<pi> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> MFOTL.sat \\<sigma> (map the v) i \\<phi>\n 2. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "then"], ["proof (chain)\npicking this:\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> (map the v) i \\<phi>", "using sound(2)"], ["proof (prove)\nusing this:\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of \\<pi> \\<sigma>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> (map the v) i \\<phi>", "by blast"], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma> (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "case (complete \\<pi> \\<sigma> v i)"], ["proof (state)\nthis:\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "with strategy_nonempty"], ["proof (chain)\npicking this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v \\<Longrightarrow>\n  strategy ?v \\<noteq> {}\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>", "obtain k where k: \"k \\<in> strategy v\""], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v \\<Longrightarrow>\n  strategy ?v \\<noteq> {}\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>k. k \\<in> strategy v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "have \"MFOTL.sat \\<sigma>' (map the v) i \\<phi>\" if \"prefix_of (MFOTL_slicer.pslice \\<phi> (slice_set k) \\<pi>) \\<sigma>'\" for \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "have \"MFOTL.sat \\<sigma>' (map the v) i \\<phi> = MFOTL.sat (MFOTL_slicer.slice \\<phi> (slice_set k) \\<sigma>') (map the v) i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       \\<sigma>')\n     (map the v) i \\<phi>", "using complete(2) k"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       \\<sigma>')\n     (map the v) i \\<phi>", "by (auto intro!: sat_slice_iff)"], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma>' (map the v) i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>')\n   (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "also"], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma>' (map the v) i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>')\n   (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "have \"\\<dots> = MFOTL.sat (MFOTL_slicer.slice \\<phi> (slice_set k) (replace_prefix \\<pi> \\<sigma>')) (map the v) i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       \\<sigma>')\n     (map the v) i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       (replace_prefix \\<pi> \\<sigma>'))\n     (map the v) i \\<phi>", "using that complete k"], ["proof (prove)\nusing this:\n  prefix_of\n   (pmap_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<pi>)\n   \\<sigma>'\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       \\<sigma>')\n     (map the v) i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       (replace_prefix \\<pi> \\<sigma>'))\n     (map the v) i \\<phi>", "by (subst slice_replace_prefix[symmetric]; simp)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>')\n   (map the v) i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     (replace_prefix \\<pi> \\<sigma>'))\n   (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "also"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>')\n   (map the v) i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     (replace_prefix \\<pi> \\<sigma>'))\n   (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "have \"\\<dots> = MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       (replace_prefix \\<pi> \\<sigma>'))\n     (map the v) i \\<phi> =\n    MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>", "using complete(2) k"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       (replace_prefix \\<pi> \\<sigma>'))\n     (map the v) i \\<phi> =\n    MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>", "by (auto intro!: sat_slice_iff[symmetric])"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     (replace_prefix \\<pi> \\<sigma>'))\n   (map the v) i \\<phi> =\n  MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "also"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     (replace_prefix \\<pi> \\<sigma>'))\n   (map the v) i \\<phi> =\n  MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>", "by (rule complete(3)[rule_format], rule prefix_of_replace_prefix[OF that])"], ["proof (state)\nthis:\n  MFOTL.sat (replace_prefix \\<pi> \\<sigma>') (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "finally"], ["proof (chain)\npicking this:\n  MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  MFOTL.sat \\<sigma>' (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma>' (map the v) i \\<phi>", "."], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma>' (map the v) i \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix_of\n   (pmap_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<pi>)\n   ?\\<sigma>' \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma>' (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "with complete(1-3)"], ["proof (chain)\npicking this:\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of\n   (pmap_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<pi>)\n   ?\\<sigma>' \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma>' (map the v) i \\<phi>", "obtain \\<pi>' where \\<pi>':\n    \"prefix_of \\<pi>' (MFOTL_slicer.slice \\<phi> (slice_set k) \\<sigma>)\" \"(i, v) \\<in> M \\<pi>'\""], ["proof (prove)\nusing this:\n  prefix_of \\<pi> \\<sigma>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of \\<pi> ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of\n   (pmap_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<pi>)\n   ?\\<sigma>' \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma>' (map the v) i \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>'.\n        \\<lbrakk>prefix_of \\<pi>'\n                  (map_\\<Gamma>\n                    (\\<lambda>D.\n                        D \\<inter>\n                        relevant_events \\<phi>\n                         {v. \\<exists>v'.\n                                map the v' = v \\<and>\n                                wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>)\n                                 v' \\<and>\n                                k \\<in> strategy v'})\n                    \\<sigma>);\n         (i, v) \\<in> M \\<pi>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, intro complete_monitor[where \\<pi>=\"MFOTL_slicer.pslice \\<phi> (slice_set k) \\<pi>\"])\n      (auto simp: splitter_pslice intro!: prefix_of_pmap_\\<Gamma>)"], ["proof (state)\nthis:\n  prefix_of \\<pi>'\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)\n  (i, v) \\<in> M \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "from \\<pi>'(1)"], ["proof (chain)\npicking this:\n  prefix_of \\<pi>'\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)", "obtain \\<pi>'' where \"\\<pi>' = MFOTL_slicer.pslice \\<phi> (slice_set k) \\<pi>''\" \"prefix_of \\<pi>'' \\<sigma>\""], ["proof (prove)\nusing this:\n  prefix_of \\<pi>'\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>''.\n        \\<lbrakk>\\<pi>' =\n                 pmap_\\<Gamma>\n                  (\\<lambda>D.\n                      D \\<inter>\n                      relevant_events \\<phi>\n                       {v. \\<exists>v'.\n                              map the v' = v \\<and>\n                              wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>)\n                               v' \\<and>\n                              k \\<in> strategy v'})\n                  \\<pi>'';\n         prefix_of \\<pi>'' \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim, rule prefix_of_map_\\<Gamma>_D)"], ["proof (state)\nthis:\n  \\<pi>' =\n  pmap_\\<Gamma>\n   (\\<lambda>D.\n       D \\<inter>\n       relevant_events \\<phi>\n        {v. \\<exists>v'.\n               map the v' = v \\<and>\n               wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n               k \\<in> strategy v'})\n   \\<pi>''\n  prefix_of \\<pi>'' \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> \\<sigma> v i.\n       \\<lbrakk>prefix_of \\<pi> \\<sigma>;\n        wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n        \\<And>\\<sigma>.\n           prefix_of \\<pi> \\<sigma> \\<Longrightarrow>\n           MFOTL.sat \\<sigma> (map the v) i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<pi>'.\n                            prefix_of \\<pi>' \\<sigma> \\<and>\n                            (i, v)\n                            \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "with \\<pi>' k"], ["proof (chain)\npicking this:\n  prefix_of \\<pi>'\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)\n  (i, v) \\<in> M \\<pi>'\n  k \\<in> strategy v\n  \\<pi>' =\n  pmap_\\<Gamma>\n   (\\<lambda>D.\n       D \\<inter>\n       relevant_events \\<phi>\n        {v. \\<exists>v'.\n               map the v' = v \\<and>\n               wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n               k \\<in> strategy v'})\n   \\<pi>''\n  prefix_of \\<pi>'' \\<sigma>", "show ?case"], ["proof (prove)\nusing this:\n  prefix_of \\<pi>'\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)\n  (i, v) \\<in> M \\<pi>'\n  k \\<in> strategy v\n  \\<pi>' =\n  pmap_\\<Gamma>\n   (\\<lambda>D.\n       D \\<inter>\n       relevant_events \\<phi>\n        {v. \\<exists>v'.\n               map the v' = v \\<and>\n               wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n               k \\<in> strategy v'})\n   \\<pi>''\n  prefix_of \\<pi>'' \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<pi>'.\n       prefix_of \\<pi>' \\<sigma> \\<and>\n       (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))", "by (intro exI[of _ \\<pi>'']) (auto simp: joiner_def splitter_pslice intro!: exI[of _ k])"], ["proof (state)\nthis:\n  \\<exists>\\<pi>'.\n     prefix_of \\<pi>' \\<sigma> \\<and>\n     (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Corollary 1\\<close>"], ["", "sublocale joint_slicer: slicer \"MFOTL.nfv \\<phi>\" \"MFOTL.fv \\<phi>\" \"\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>\"\n  \"\\<lambda>\\<pi>. joiner (\\<lambda>k. M (splitter \\<pi> k))\" \"\\<lambda>_. M\" splitter joiner"], ["proof (prove)\ngoal (1 subgoal):\n 1. slicer (MFOTL.nfv \\<phi>) (fv \\<phi>)\n     (\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>)\n     (\\<lambda>\\<pi>. joiner (\\<lambda>k. M (splitter \\<pi> k)))\n     (\\<lambda>_. M) splitter joiner", "by standard (auto simp: mono_splitter)"], ["", "end"], ["", "subsubsection \\<open>Definition 5\\<close>"], ["", "text \\<open>Corresponds to locale @{locale sliceable_monitor} defined in theory\n  @{theory MFOTL_Monitor.Abstract_Monitor}.\\<close>"], ["", "locale slicable_joint_data_slicer =\n  sliceable_monitor \"MFOTL.nfv \\<phi>\" \"MFOTL.fv \\<phi>\" \"relevant_events \\<phi>\" \"\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>\" M +\n  joint_data_slicer \\<phi> M strategy for \\<phi> M strategy\nbegin"], ["", "lemma monitor_split: \"ok \\<phi> v \\<Longrightarrow> k \\<in> strategy v \\<Longrightarrow> (i, v) \\<in> M (splitter \\<pi> k) \\<longleftrightarrow> (i, v) \\<in> M \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n     k \\<in> strategy v\\<rbrakk>\n    \\<Longrightarrow> ((i, v) \\<in> M (splitter \\<pi> k)) =\n                      ((i, v) \\<in> M \\<pi>)", "unfolding splitter_pslice"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v;\n     k \\<in> strategy v\\<rbrakk>\n    \\<Longrightarrow> ((i, v)\n                       \\<in> M (pmap_\\<Gamma>\n                                 (\\<lambda>D.\n                                     D \\<inter>\n                                     relevant_events \\<phi>\n{v. \\<exists>v'.\n       map the v' = v \\<and>\n       wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n       k \\<in> strategy v'})\n                                 \\<pi>)) =\n                      ((i, v) \\<in> M \\<pi>)", "by (rule sliceable_M)\n    (auto simp: wf_tuple_def fvi_less_nfv intro!: mem_restrI[rotated 2, where y=\"map the v\"])"], ["", "subsubsection \\<open>Theorem 2\\<close>"], ["", "sublocale self_slicer \"MFOTL.nfv \\<phi>\" \"MFOTL.fv \\<phi>\" \"\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>\" M splitter joiner"], ["proof (prove)\ngoal (1 subgoal):\n 1. self_slicer (MFOTL.nfv \\<phi>) (fv \\<phi>)\n     (\\<lambda>\\<sigma> v i. MFOTL.sat \\<sigma> v i \\<phi>) M splitter\n     joiner", "proof (standard, erule mono_splitter, safe, goal_cases sound complete)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> M \\<pi>\n 2. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "case (sound \\<pi> i v)"], ["proof (state)\nthis:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> M \\<pi>\n 2. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "have \"ok \\<phi> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "using joint_monitor.wf_monitor[OF sound]"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "by auto"], ["proof (state)\nthis:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> M \\<pi>\n 2. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "from sound"], ["proof (chain)\npicking this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "obtain k where \"(i, v) \\<in> M (splitter \\<pi> k)\" \"k \\<in> strategy v\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding joiner_def"], ["proof (prove)\nusing this:\n  (i, v)\n  \\<in> (\\<Union>k.\n            M (splitter \\<pi> k) \\<inter>\n            UNIV \\<times> {v. k \\<in> strategy v})\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>(i, v) \\<in> M (splitter \\<pi> k);\n         k \\<in> strategy v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> M \\<pi>\n 2. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "with \\<open>ok \\<phi> v\\<close>"], ["proof (chain)\npicking this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v", "show ?case"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. (i, v) \\<in> M \\<pi>", "by (simp add: monitor_split)"], ["proof (state)\nthis:\n  (i, v) \\<in> M \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "case (complete \\<pi> i v)"], ["proof (state)\nthis:\n  (i, v) \\<in> M \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "have \"ok \\<phi> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "using wf_monitor[OF complete]"], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "by auto"], ["proof (state)\nthis:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "with complete strategy_nonempty"], ["proof (chain)\npicking this:\n  (i, v) \\<in> M \\<pi>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v \\<Longrightarrow>\n  strategy ?v \\<noteq> {}\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "obtain k where k: \"k \\<in> strategy v\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> M \\<pi>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v \\<Longrightarrow>\n  strategy ?v \\<noteq> {}\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. (\\<And>k. k \\<in> strategy v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "then"], ["proof (chain)\npicking this:\n  k \\<in> strategy v", "have \"(i, v) \\<in> M (splitter \\<pi> k)\""], ["proof (prove)\nusing this:\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. (i, v) \\<in> M (splitter \\<pi> k)", "using complete \\<open>ok \\<phi> v\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> strategy v\n  (i, v) \\<in> M \\<pi>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (1 subgoal):\n 1. (i, v) \\<in> M (splitter \\<pi> k)", "by (simp add: monitor_split)"], ["proof (state)\nthis:\n  (i, v) \\<in> M (splitter \\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b.\n       (a, b) \\<in> M \\<pi> \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "with k"], ["proof (chain)\npicking this:\n  k \\<in> strategy v\n  (i, v) \\<in> M (splitter \\<pi> k)", "show ?case"], ["proof (prove)\nusing this:\n  k \\<in> strategy v\n  (i, v) \\<in> M (splitter \\<pi> k)\n\ngoal (1 subgoal):\n 1. (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "unfolding joiner_def"], ["proof (prove)\nusing this:\n  k \\<in> strategy v\n  (i, v) \\<in> M (splitter \\<pi> k)\n\ngoal (1 subgoal):\n 1. (i, v)\n    \\<in> (\\<Union>k.\n              M (splitter \\<pi> k) \\<inter>\n              UNIV \\<times> {v. k \\<in> strategy v})", "by blast"], ["proof (state)\nthis:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \\<open>Towards Theorem 3\\<close>"], ["", "fun names :: \"'a MFOTL.formula \\<Rightarrow> MFOTL.name set\" where\n  \"names (MFOTL.Pred e _) = {e}\"\n| \"names (MFOTL.Eq _ _) = {}\"\n| \"names (MFOTL.Neg \\<psi>) = names \\<psi>\"\n| \"names (MFOTL.Or \\<alpha> \\<beta>) = names \\<alpha> \\<union> names \\<beta>\"\n| \"names (MFOTL.Exists \\<psi>) = names \\<psi>\"\n| \"names (MFOTL.Prev I \\<psi>) = names \\<psi>\"\n| \"names (MFOTL.Next I \\<psi>) = names \\<psi>\"\n| \"names (MFOTL.Since \\<alpha> I \\<beta>) = names \\<alpha> \\<union> names \\<beta>\"\n| \"names (MFOTL.Until \\<alpha> I \\<beta>) = names \\<alpha> \\<union> names \\<beta>\""], ["", "fun gen_unique :: \"'a MFOTL.formula \\<Rightarrow> bool\" where\n  \"gen_unique (MFOTL.Pred _ _) = True\"\n| \"gen_unique (MFOTL.Eq (MFOTL.Var _) (MFOTL.Const _)) = False\"\n| \"gen_unique (MFOTL.Eq (MFOTL.Const _) (MFOTL.Var _)) = False\"\n| \"gen_unique (MFOTL.Eq _ _) = True\"\n| \"gen_unique (MFOTL.Neg \\<psi>) = gen_unique \\<psi>\"\n| \"gen_unique (MFOTL.Or \\<alpha> \\<beta>) = (gen_unique \\<alpha> \\<and> gen_unique \\<beta> \\<and> names \\<alpha> \\<inter> names \\<beta> = {})\"\n| \"gen_unique (MFOTL.Exists \\<psi>) = gen_unique \\<psi>\"\n| \"gen_unique (MFOTL.Prev I \\<psi>) = gen_unique \\<psi>\"\n| \"gen_unique (MFOTL.Next I \\<psi>) = gen_unique \\<psi>\"\n| \"gen_unique (MFOTL.Since \\<alpha> I \\<beta>) = (gen_unique \\<alpha> \\<and> gen_unique \\<beta> \\<and> names \\<alpha> \\<inter> names \\<beta> = {})\"\n| \"gen_unique (MFOTL.Until \\<alpha> I \\<beta>) = (gen_unique \\<alpha> \\<and> gen_unique \\<beta> \\<and> names \\<alpha> \\<inter> names \\<beta> = {})\""], ["", "lemma sat_inter_names_cong: \"(\\<And>e. e \\<in> names \\<phi> \\<Longrightarrow> {xs. (e, xs) \\<in> E} = {xs. (e, xs) \\<in> F}) \\<Longrightarrow>\n  MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi> \\<longleftrightarrow> MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> F) \\<sigma>) v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        e \\<in> names \\<phi> \\<Longrightarrow>\n        {xs. (e, xs) \\<in> E} = {xs. (e, xs) \\<in> F}) \\<Longrightarrow>\n    MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     \\<phi> =\n    MFOTL.sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> F) \\<sigma>) v i \\<phi>", "by (induction \\<phi> arbitrary: v i) (auto split: nat.splits)"], ["", "lemma matches_in_names: \"MFOTL.matches v \\<phi> x \\<Longrightarrow> fst x \\<in> names \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.matches v \\<phi> x \\<Longrightarrow> fst x \\<in> names \\<phi>", "by (induction \\<phi> arbitrary: v) (auto)"], ["", "lemma unique_names_matches_absorb: \"fst x \\<in> names \\<alpha> \\<Longrightarrow> names \\<alpha> \\<inter> names \\<beta> = {} \\<Longrightarrow>\n    MFOTL.matches v \\<alpha> x \\<or> MFOTL.matches v \\<beta> x \\<longleftrightarrow> MFOTL.matches v \\<alpha> x\"\n  \"fst x \\<in> names \\<beta> \\<Longrightarrow> names \\<alpha> \\<inter> names \\<beta> = {} \\<Longrightarrow>\n    MFOTL.matches v \\<alpha> x \\<or> MFOTL.matches v \\<beta> x \\<longleftrightarrow> MFOTL.matches v \\<beta> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>fst x \\<in> names \\<alpha>;\n      names \\<alpha> \\<inter> names \\<beta> = {}\\<rbrakk>\n     \\<Longrightarrow> (MFOTL.matches v \\<alpha> x \\<or>\n                        MFOTL.matches v \\<beta> x) =\n                       MFOTL.matches v \\<alpha> x) &&&\n    (\\<lbrakk>fst x \\<in> names \\<beta>;\n      names \\<alpha> \\<inter> names \\<beta> = {}\\<rbrakk>\n     \\<Longrightarrow> (MFOTL.matches v \\<alpha> x \\<or>\n                        MFOTL.matches v \\<beta> x) =\n                       MFOTL.matches v \\<beta> x)", "by (auto dest: matches_in_names)"], ["", "definition mergeable_envs where\n  \"mergeable_envs n S \\<longleftrightarrow> (\\<forall>v1\\<in>S. \\<forall>v2\\<in>S. (\\<forall>A B f.\n    (\\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x) \\<and> (\\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n    (\\<exists>v\\<in>S. \\<forall>x\\<in>A \\<union> B. v ! x = f x)))\""], ["", "lemma mergeable_envsI:\n  assumes \"\\<And>v1 v2 v. v1 \\<in> S \\<Longrightarrow> v2 \\<in> S \\<Longrightarrow> length v = n \\<Longrightarrow> \\<forall>x < n. v ! x = v1 ! x \\<or> v ! x = v2 ! x \\<Longrightarrow> v \\<in> S\"\n  shows \"mergeable_envs n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mergeable_envs n S", "unfolding mergeable_envs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v1\\<in>S.\n       \\<forall>v2\\<in>S.\n          \\<forall>A B f.\n             (\\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x) \\<and>\n             (\\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n             (\\<exists>v\\<in>S. \\<forall>x\\<in>A \\<union> B. v ! x = f x)", "proof (safe, goal_cases mergeable)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f.\n       \\<lbrakk>v1 \\<in> S; v2 \\<in> S;\n        \\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "case [simp]: (mergeable v1 v2 A B f)"], ["proof (state)\nthis:\n  v1 \\<in> S\n  v2 \\<in> S\n  \\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x\n  \\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x\n\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f.\n       \\<lbrakk>v1 \\<in> S; v2 \\<in> S;\n        \\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "let ?v = \"tabulate (\\<lambda>x. if x \\<in> A \\<union> B then f x else v1 ! x) 0 n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f.\n       \\<lbrakk>v1 \\<in> S; v2 \\<in> S;\n        \\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "from assms[of v1 v2 ?v, simplified]"], ["proof (chain)\npicking this:\n  \\<forall>x<n.\n     (if x \\<in> A \\<or> x \\<in> B then f (0 + x) else v1 ! (0 + x)) =\n     v1 ! x \\<or>\n     (if x \\<in> A \\<or> x \\<in> B then f (0 + x) else v1 ! (0 + x)) =\n     v2 ! x \\<Longrightarrow>\n  tabulate (\\<lambda>x. if x \\<in> A \\<or> x \\<in> B then f x else v1 ! x) 0\n   n\n  \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x<n.\n     (if x \\<in> A \\<or> x \\<in> B then f (0 + x) else v1 ! (0 + x)) =\n     v1 ! x \\<or>\n     (if x \\<in> A \\<or> x \\<in> B then f (0 + x) else v1 ! (0 + x)) =\n     v2 ! x \\<Longrightarrow>\n  tabulate (\\<lambda>x. if x \\<in> A \\<or> x \\<in> B then f x else v1 ! x) 0\n   n\n  \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>S. \\<forall>x\\<in>A \\<union> B. v ! x = f x", "by (auto intro!: bexI[of _ ?v])"], ["proof (state)\nthis:\n  \\<exists>v\\<in>S. \\<forall>x\\<in>A \\<union> B. v ! x = f x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_listset_nth: \"x \\<in> listset As \\<Longrightarrow> i < length As \\<Longrightarrow> x ! i \\<in> As ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> listset As; i < length As\\<rbrakk>\n    \\<Longrightarrow> x ! i \\<in> As ! i", "by (induction As arbitrary: x i) (auto simp: set_Cons_def nth_Cons split: nat.split)"], ["", "lemma all_nth_in_listset: \"length x = length As \\<Longrightarrow> (\\<And>i. i < length As \\<Longrightarrow> x ! i \\<in> As ! i) \\<Longrightarrow> x \\<in> listset As\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length x = length As;\n     \\<And>i. i < length As \\<Longrightarrow> x ! i \\<in> As ! i\\<rbrakk>\n    \\<Longrightarrow> x \\<in> listset As", "by (induction x As rule: list_induct2) (fastforce simp: set_Cons_def nth_Cons)+"], ["", "lemma mergeable_envs_listset: \"mergeable_envs (length As) (listset As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mergeable_envs (length As) (listset As)", "by (rule mergeable_envsI) (auto intro!: all_nth_in_listset elim!: in_listset_nth)"], ["", "lemma mergeable_envs_Ex: \"mergeable_envs n S \\<Longrightarrow> MFOTL.nfv \\<alpha> \\<le> n \\<Longrightarrow> MFOTL.nfv \\<beta> \\<le> n \\<Longrightarrow>\n  (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<alpha>. v' ! x = v ! x) \\<Longrightarrow> (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<beta>. v' ! x = v ! x) \\<Longrightarrow>\n  (\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>. v' ! x = v ! x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mergeable_envs n S; MFOTL.nfv \\<alpha> \\<le> n;\n     MFOTL.nfv \\<beta> \\<le> n;\n     \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<alpha>. v' ! x = v ! x;\n     \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<beta>. v' ! x = v ! x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v'\\<in>S.\n                         \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>.\n                            v' ! x = v ! x", "proof (clarify, goal_cases mergeable)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v' v'a.\n       \\<lbrakk>mergeable_envs n S; MFOTL.nfv \\<alpha> \\<le> n;\n        MFOTL.nfv \\<beta> \\<le> n; v' \\<in> S;\n        \\<forall>x\\<in>fv \\<alpha>. v' ! x = v ! x; v'a \\<in> S;\n        \\<forall>x\\<in>fv \\<beta>. v'a ! x = v ! x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>.\n                               v' ! x = v ! x", "case (mergeable v1 v2)"], ["proof (state)\nthis:\n  mergeable_envs n S\n  MFOTL.nfv \\<alpha> \\<le> n\n  MFOTL.nfv \\<beta> \\<le> n\n  v1 \\<in> S\n  \\<forall>x\\<in>fv \\<alpha>. v1 ! x = v ! x\n  v2 \\<in> S\n  \\<forall>x\\<in>fv \\<beta>. v2 ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<And>v' v'a.\n       \\<lbrakk>mergeable_envs n S; MFOTL.nfv \\<alpha> \\<le> n;\n        MFOTL.nfv \\<beta> \\<le> n; v' \\<in> S;\n        \\<forall>x\\<in>fv \\<alpha>. v' ! x = v ! x; v'a \\<in> S;\n        \\<forall>x\\<in>fv \\<beta>. v'a ! x = v ! x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>.\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  mergeable_envs n S\n  MFOTL.nfv \\<alpha> \\<le> n\n  MFOTL.nfv \\<beta> \\<le> n\n  v1 \\<in> S\n  \\<forall>x\\<in>fv \\<alpha>. v1 ! x = v ! x\n  v2 \\<in> S\n  \\<forall>x\\<in>fv \\<beta>. v2 ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  mergeable_envs n S\n  MFOTL.nfv \\<alpha> \\<le> n\n  MFOTL.nfv \\<beta> \\<le> n\n  v1 \\<in> S\n  \\<forall>x\\<in>fv \\<alpha>. v1 ! x = v ! x\n  v2 \\<in> S\n  \\<forall>x\\<in>fv \\<beta>. v2 ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>. v' ! x = v ! x", "by (auto intro: order.strict_trans2[OF fvi_less_nfv[rule_format]]\n      elim!: mergeable_envs_def[THEN iffD1, rule_format, of _ _ v1 v2])"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv \\<alpha> \\<union> fv \\<beta>. v' ! x = v ! x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_set_ConsE: \"xs \\<in> set_Cons A As \\<Longrightarrow> (\\<And>y ys. xs = y # ys \\<Longrightarrow> y \\<in> A \\<Longrightarrow> ys \\<in> As \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> set_Cons A As;\n     \\<And>y ys.\n        \\<lbrakk>xs = y # ys; y \\<in> A; ys \\<in> As\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "unfolding set_Cons_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> {x # xs |x xs. x \\<in> A \\<and> xs \\<in> As};\n     \\<And>y ys.\n        \\<lbrakk>xs = y # ys; y \\<in> A; ys \\<in> As\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by blast"], ["", "lemma mergeable_envs_set_Cons: \"mergeable_envs n S \\<Longrightarrow> mergeable_envs (Suc n) (set_Cons UNIV S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mergeable_envs n S \\<Longrightarrow>\n    mergeable_envs (Suc n) (set_Cons UNIV S)", "unfolding mergeable_envs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v1\\<in>S.\n       \\<forall>v2\\<in>S.\n          \\<forall>A B f.\n             (\\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x) \\<and>\n             (\\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n             (\\<exists>v\\<in>S.\n                 \\<forall>x\\<in>A \\<union> B. v ! x = f x) \\<Longrightarrow>\n    \\<forall>v1\\<in>set_Cons UNIV S.\n       \\<forall>v2\\<in>set_Cons UNIV S.\n          \\<forall>A B f.\n             (\\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x) \\<and>\n             (\\<forall>x\\<in>B.\n                 x < Suc n \\<and> v2 ! x = f x) \\<longrightarrow>\n             (\\<exists>v\\<in>set_Cons UNIV S.\n                 \\<forall>x\\<in>A \\<union> B. v ! x = f x)", "proof (clarify, elim in_set_ConsE, goal_cases mergeable)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "case (mergeable v1 v2 A B f y1 ys1 y2 ys2)"], ["proof (state)\nthis:\n  \\<forall>v1\\<in>S.\n     \\<forall>v2\\<in>S.\n        \\<forall>A B f.\n           (\\<forall>x\\<in>A. x < n \\<and> v1 ! x = f x) \\<and>\n           (\\<forall>x\\<in>B. x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n           (\\<exists>v\\<in>S. \\<forall>x\\<in>A \\<union> B. v ! x = f x)\n  \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x\n  \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x\n  v1 = y1 # ys1\n  y1 \\<in> UNIV\n  ys1 \\<in> S\n  v2 = y2 # ys2\n  y2 \\<in> UNIV\n  ys2 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "let ?A = \"(\\<lambda>x. x - 1) ` (A - {0})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "let ?B = \"(\\<lambda>x. x - 1) ` (B - {0})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "from mergeable(4-9)"], ["proof (chain)\npicking this:\n  v1 = y1 # ys1\n  y1 \\<in> UNIV\n  ys1 \\<in> S\n  v2 = y2 # ys2\n  y2 \\<in> UNIV\n  ys2 \\<in> S", "have \"\\<exists>v \\<in> S. \\<forall>x\\<in>?A \\<union> ?B. v ! x = f (Suc x)\""], ["proof (prove)\nusing this:\n  v1 = y1 # ys1\n  y1 \\<in> UNIV\n  ys1 \\<in> S\n  v2 = y2 # ys2\n  y2 \\<in> UNIV\n  ys2 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>S.\n       \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                      (\\<lambda>x. x - 1) ` (B - {0}).\n          v ! x = f (Suc x)", "by (auto dest!: mergeable(2,3)[rule_format] intro!: mergeable(1)[rule_format, of ys1 ys2])"], ["proof (state)\nthis:\n  \\<exists>v\\<in>S.\n     \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                    (\\<lambda>x. x - 1) ` (B - {0}).\n        v ! x = f (Suc x)\n\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "then"], ["proof (chain)\npicking this:\n  \\<exists>v\\<in>S.\n     \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                    (\\<lambda>x. x - 1) ` (B - {0}).\n        v ! x = f (Suc x)", "obtain v where \"v \\<in> S\" \"\\<forall>x\\<in>?A \\<union> ?B. v ! x = f (Suc x)\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>S.\n     \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                    (\\<lambda>x. x - 1) ` (B - {0}).\n        v ! x = f (Suc x)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> S;\n         \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                        (\\<lambda>x. x - 1) ` (B - {0}).\n            v ! x = f (Suc x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> S\n  \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                 (\\<lambda>x. x - 1) ` (B - {0}).\n     v ! x = f (Suc x)\n\ngoal (1 subgoal):\n 1. \\<And>v1 v2 A B f y ys ya ysa.\n       \\<lbrakk>\\<forall>v1\\<in>S.\n                   \\<forall>v2\\<in>S.\n                      \\<forall>A B f.\n                         (\\<forall>x\\<in>A.\n                             x < n \\<and> v1 ! x = f x) \\<and>\n                         (\\<forall>x\\<in>B.\n                             x < n \\<and> v2 ! x = f x) \\<longrightarrow>\n                         (\\<exists>v\\<in>S.\n                             \\<forall>x\\<in>A \\<union> B. v ! x = f x);\n        \\<forall>x\\<in>A. x < Suc n \\<and> v1 ! x = f x;\n        \\<forall>x\\<in>B. x < Suc n \\<and> v2 ! x = f x; v1 = y # ys;\n        y \\<in> UNIV; ys \\<in> S; v2 = ya # ysa; ya \\<in> UNIV;\n        ysa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set_Cons UNIV S.\n                            \\<forall>x\\<in>A \\<union> B. v ! x = f x", "then"], ["proof (chain)\npicking this:\n  v \\<in> S\n  \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                 (\\<lambda>x. x - 1) ` (B - {0}).\n     v ! x = f (Suc x)", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> S\n  \\<forall>x\\<in>(\\<lambda>x. x - 1) ` (A - {0}) \\<union>\n                 (\\<lambda>x. x - 1) ` (B - {0}).\n     v ! x = f (Suc x)\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>set_Cons UNIV S. \\<forall>x\\<in>A \\<union> B. v ! x = f x", "by (intro bexI[of _ \"f 0 # v\"]) (auto simp: nth_Cons' set_Cons_def)"], ["proof (state)\nthis:\n  \\<exists>v\\<in>set_Cons UNIV S. \\<forall>x\\<in>A \\<union> B. v ! x = f x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slice_Exists: \"MFOTL_slicer.slice (MFOTL.Exists \\<phi>) S \\<sigma> = MFOTL_slicer.slice \\<phi> (set_Cons UNIV S) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma> =\n    map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events \\<phi> (set_Cons UNIV S))\n     \\<sigma>", "by (auto simp: set_Cons_def intro: map_\\<Gamma>_cong)"], ["", "lemma image_Suc_fvi: \"Suc ` MFOTL.fvi (Suc b) \\<phi> = MFOTL.fvi b \\<phi> - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc ` MFOTL.fvi (Suc b) \\<phi> = MFOTL.fvi b \\<phi> - {0}", "by (auto simp: image_def Bex_def MFOTL.fvi_Suc dest: gr0_implies_Suc)"], ["", "lemma nfv_Exists: \"MFOTL.nfv (MFOTL.Exists \\<phi>) = MFOTL.nfv \\<phi> - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.nfv (formula.Exists \\<phi>) = MFOTL.nfv \\<phi> - 1", "unfolding MFOTL.nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert 0 (Suc ` fv (formula.Exists \\<phi>))) =\n    Max (insert 0 (Suc ` fv \\<phi>)) - 1", "by (cases \"fv \\<phi> = {}\") (auto simp add: image_Suc_fvi mono_Max_commute[symmetric] mono_def)"], ["", "lemma set_Cons_empty_iff[simp]: \"set_Cons A Xs = {} \\<longleftrightarrow> A = {} \\<or> Xs = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_Cons A Xs = {}) = (A = {} \\<or> Xs = {})", "unfolding set_Cons_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x # xs |x xs. x \\<in> A \\<and> xs \\<in> Xs} = {}) =\n    (A = {} \\<or> Xs = {})", "by auto"], ["", "lemma unique_sat_slice_mem: \"safe_formula \\<phi> \\<Longrightarrow> gen_unique \\<phi> \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow>\n  mergeable_envs n S \\<Longrightarrow> MFOTL.nfv \\<phi> \\<le> n \\<Longrightarrow>\n  MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi> \\<Longrightarrow> \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_formula \\<phi>; gen_unique \\<phi>; S \\<noteq> {};\n     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n     MFOTL.sat\n      (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n        \\<sigma>)\n      v i \\<phi>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v'\\<in>S.\n                         \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "proof (induction arbitrary: v i S n rule: safe_formula_induct)"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t1; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 2. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t2; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 3. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 4. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 5. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>I \\<phi> v i S n.\n        \\<lbrakk>\\<And>v i S n.\n                    \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                     MFOTL.sat\n                      (map_\\<Gamma>\n                        (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                        \\<sigma>)\n                      v i \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>v'\\<in>S.\n   \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n         mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n            \\<sigma>)\n          v i (formula.Prev I \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                                v' ! x = v ! x\nA total of 15 subgoals...", "case (1 t1 t2)"], ["proof (state)\nthis:\n  trm.is_Const t1\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)\n\ngoal (15 subgoals):\n 1. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t1; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 2. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t2; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 3. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 4. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 5. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>I \\<phi> v i S n.\n        \\<lbrakk>\\<And>v i S n.\n                    \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                     MFOTL.sat\n                      (map_\\<Gamma>\n                        (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                        \\<sigma>)\n                      v i \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>v'\\<in>S.\n   \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n         mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n            \\<sigma>)\n          v i (formula.Prev I \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                                v' ! x = v ! x\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  trm.is_Const t1\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)", "show ?case"], ["proof (prove)\nusing this:\n  trm.is_Const t1\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Eq t1 t2). v' ! x = v ! x", "by (cases \"t2\") (auto simp: MFOTL.is_Const_def)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Eq t1 t2). v' ! x = v ! x\n\ngoal (14 subgoals):\n 1. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t2; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 3. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 4. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>I \\<phi> v i S n.\n        \\<lbrakk>\\<And>v i S n.\n                    \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                     MFOTL.sat\n                      (map_\\<Gamma>\n                        (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                        \\<sigma>)\n                      v i \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>v'\\<in>S.\n   \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n         mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n            \\<sigma>)\n          v i (formula.Next I \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                                v' ! x = v ! x\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t2; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 3. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 4. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>I \\<phi> v i S n.\n        \\<lbrakk>\\<And>v i S n.\n                    \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                     MFOTL.sat\n                      (map_\\<Gamma>\n                        (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                        \\<sigma>)\n                      v i \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>v'\\<in>S.\n   \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n         mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n            \\<sigma>)\n          v i (formula.Next I \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                                v' ! x = v ! x\nA total of 14 subgoals...", "case (2 t1 t2)"], ["proof (state)\nthis:\n  trm.is_Const t2\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)\n\ngoal (14 subgoals):\n 1. \\<And>t1 t2 v i S n.\n       \\<lbrakk>trm.is_Const t2; gen_unique (formula.Eq t1 t2);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Eq t1 t2) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S)\n           \\<sigma>)\n         v i (formula.Eq t1 t2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Eq t1 t2).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 3. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 4. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>I \\<phi> v i S n.\n        \\<lbrakk>\\<And>v i S n.\n                    \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                     mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                     MFOTL.sat\n                      (map_\\<Gamma>\n                        (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                        \\<sigma>)\n                      v i \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>v'\\<in>S.\n   \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n         mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n            \\<sigma>)\n          v i (formula.Next I \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                                v' ! x = v ! x\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  trm.is_Const t2\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)", "show ?case"], ["proof (prove)\nusing this:\n  trm.is_Const t2\n  gen_unique (formula.Eq t1 t2)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Eq t1 t2) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Eq t1 t2) S) \\<sigma>)\n   v i (formula.Eq t1 t2)\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Eq t1 t2). v' ! x = v ! x", "by (cases \"t1\") (auto simp: MFOTL.is_Const_def)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Eq t1 t2). v' ! x = v ! x\n\ngoal (13 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 3. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Since \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 3. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Since \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 13 subgoals...", "case (3 x y)"], ["proof (state)\nthis:\n  gen_unique (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n\ngoal (13 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>gen_unique\n                 (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))).\n                               v' ! x = v ! x\n 2. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 3. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Since \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  gen_unique (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))", "show ?case"], ["proof (prove)\nusing this:\n  gen_unique (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg (formula.Eq (trm.Const x) (trm.Const y))) S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Const x) (trm.Const y)))\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Neg\n                           (formula.Eq (trm.Const x) (trm.Const y))).\n          v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Neg\n                         (formula.Eq (trm.Const x) (trm.Const y))).\n        v' ! x = v ! x\n\ngoal (12 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 2. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 2. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x\nA total of 12 subgoals...", "case (4 x y)"], ["proof (state)\nthis:\n  x = y\n  gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n          S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n\ngoal (12 subgoals):\n 1. \\<And>x y v i S n.\n       \\<lbrakk>x = y;\n        gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)));\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n        \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events\n                (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) S)\n           \\<sigma>)\n         v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n                               v' ! x = v ! x\n 2. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  x = y\n  gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n          S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))", "show ?case"], ["proof (prove)\nusing this:\n  x = y\n  gen_unique (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n          S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Eq (trm.Var x) (trm.Var y)))\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n          v' ! x = v ! x", "by simp"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Neg (formula.Eq (trm.Var x) (trm.Var y))).\n        v' ! x = v ! x\n\ngoal (11 subgoals):\n 1. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Until \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Until \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 11 subgoals...", "case (5 e ts)"], ["proof (state)\nthis:\n  gen_unique (formula.Pred e ts)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Pred e ts) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n     \\<sigma>)\n   v i (formula.Pred e ts)\n\ngoal (11 subgoals):\n 1. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Until \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  gen_unique (formula.Pred e ts)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Pred e ts) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n     \\<sigma>)\n   v i (formula.Pred e ts)", "obtain v' where \"v' \\<in> S\" and eq: \"\\<forall>t\\<in>set ts. MFOTL.eval_trm v' t = MFOTL.eval_trm v t\""], ["proof (prove)\nusing this:\n  gen_unique (formula.Pred e ts)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Pred e ts) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n     \\<sigma>)\n   v i (formula.Pred e ts)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> S;\n         \\<forall>t\\<in>set ts.\n            MFOTL.eval_trm v' t = MFOTL.eval_trm v t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v' \\<in> S\n  \\<forall>t\\<in>set ts. MFOTL.eval_trm v' t = MFOTL.eval_trm v t\n\ngoal (11 subgoals):\n 1. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Until \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 11 subgoals...", "have \"\\<forall>t\\<in>set ts. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "assume \"t \\<in> set ts\""], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "with eq"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set ts. MFOTL.eval_trm v' t = MFOTL.eval_trm v t\n  t \\<in> set ts", "have \"MFOTL.eval_trm v' t = MFOTL.eval_trm v t\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set ts. MFOTL.eval_trm v' t = MFOTL.eval_trm v t\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. MFOTL.eval_trm v' t = MFOTL.eval_trm v t", ".."], ["proof (state)\nthis:\n  MFOTL.eval_trm v' t = MFOTL.eval_trm v t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  MFOTL.eval_trm v' t = MFOTL.eval_trm v t", "show \"\\<forall>x\\<in>fv_trm t. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  MFOTL.eval_trm v' t = MFOTL.eval_trm v t\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "by (cases t) (simp_all)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv_trm t. v' ! x = v ! x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x\n\ngoal (11 subgoals):\n 1. \\<And>e ts v i S n.\n       \\<lbrakk>gen_unique (formula.Pred e ts); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Pred e ts) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D. D \\<inter> relevant_events (formula.Pred e ts) S)\n           \\<sigma>)\n         v i (formula.Pred e ts)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Pred e ts).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n         mergeable_envs n S;\n         MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events (formula.Until \\<phi> I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until \\<phi> I \\<psi>).\n                                v' ! x = v ! x\nA total of 11 subgoals...", "with \\<open>v' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  v' \\<in> S\n  \\<forall>t\\<in>set ts. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  v' \\<in> S\n  \\<forall>t\\<in>set ts. \\<forall>x\\<in>fv_trm t. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Pred e ts). v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv (formula.Pred e ts). v' ! x = v ! x\n\ngoal (10 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x", "case (6 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n          fv \\<psi> \\<subseteq> fv \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (MFOTL.And \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And \\<phi> \\<psi>)\n\ngoal (10 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.And \\<phi> \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (MFOTL.And \\<phi> \\<psi>)", "have\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.And \\<phi> \\<psi>) S \\<sigma>) v i \\<phi> = MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\"\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.And \\<phi> \\<psi>) S \\<sigma>) v i \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v i \\<psi>\""], ["proof (prove)\nusing this:\n  gen_unique (MFOTL.And \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n       \\<sigma>)\n     v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi> &&&\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n       \\<sigma>)\n     v i \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v i \\<psi>", "unfolding MFOTL.And_def"], ["proof (prove)\nusing this:\n  gen_unique\n   (formula.Neg (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events\n            (formula.Neg\n              (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n            S)\n       \\<sigma>)\n     v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi> &&&\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events\n            (formula.Neg\n              (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n            S)\n       \\<sigma>)\n     v i \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v i \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)+"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>\n\ngoal (10 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>\\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n                        fv \\<psi> \\<subseteq> fv \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 10. \\<And>\\<phi> I \\<psi> v i S n.\n        \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n         \\<not> safe_formula (formula.Neg \\<phi>);\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<phi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n              v i \\<phi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n         \\<And>v i S n.\n            \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n             MFOTL.nfv \\<psi> \\<le> n;\n             MFOTL.sat\n              (map_\\<Gamma>\n                (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n              v i \\<psi>\\<rbrakk>\n            \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                 \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n         gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n         S \\<noteq> {}; mergeable_envs n S;\n         MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n         MFOTL.sat\n          (map_\\<Gamma>\n            (\\<lambda>D.\n                D \\<inter>\n                relevant_events\n                 (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n            \\<sigma>)\n          v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>v'\\<in>S.\n                             \\<forall>x\n\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                                v' ! x = v ! x", "with 6(1,4-) 6(2,3)[where S=S]"], ["proof (chain)\npicking this:\n  \\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n          fv \\<psi> \\<subseteq> fv \\<phi>)\n  gen_unique (MFOTL.And \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n          fv \\<psi> \\<subseteq> fv \\<phi>)\n  gen_unique (MFOTL.And \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (MFOTL.And \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>). v' ! x = v ! x", "unfolding MFOTL.And_def"], ["proof (prove)\nusing this:\n  \\<not> (safe_formula (formula.Neg \\<psi>) \\<and>\n          fv \\<psi> \\<subseteq> fv \\<phi>)\n  gen_unique\n   (formula.Neg (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv\n   (formula.Neg (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n  \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg\n            (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n          S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg\n            (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n          S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg\n            (formula.Or (formula.Neg \\<phi>) (formula.Neg \\<psi>)))\n          S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Neg\n                           (formula.Or (formula.Neg \\<phi>)\n                             (formula.Neg \\<psi>))).\n          v' ! x = v ! x", "by (auto intro!: mergeable_envs_Ex)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (MFOTL.And \\<phi> \\<psi>). v' ! x = v ! x\n\ngoal (9 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (7 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<psi>\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (MFOTL.And_Not \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And_Not \\<phi> \\<psi>)\n\ngoal (9 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.And_Not \\<phi> \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (MFOTL.And_Not \\<phi> \\<psi>)", "have \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.And_Not \\<phi> \\<psi>) S \\<sigma>) v i \\<phi> = MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\""], ["proof (prove)\nusing this:\n  gen_unique (MFOTL.And_Not \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n       \\<sigma>)\n     v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi>", "unfolding MFOTL.And_Not_def"], ["proof (prove)\nusing this:\n  gen_unique (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>))\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events\n            (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>)) S)\n       \\<sigma>)\n     v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n\ngoal (9 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 7(1,2,5-) 7(3)[where S=S]"], ["proof (chain)\npicking this:\n  safe_formula \\<psi>\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  gen_unique (MFOTL.And_Not \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And_Not \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  safe_formula \\<psi>\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  gen_unique (MFOTL.And_Not \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (MFOTL.And_Not \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "unfolding MFOTL.And_Not_def"], ["proof (prove)\nusing this:\n  safe_formula \\<psi>\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  gen_unique (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>))\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>)) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>)) S)\n     \\<sigma>)\n   v i (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>))\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events\n          (formula.Neg (formula.Or (formula.Neg \\<phi>) \\<psi>)) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (9 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (MFOTL.And_Not \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (MFOTL.And_Not \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (MFOTL.And_Not \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (MFOTL.And_Not \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 9. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with \\<open>fv \\<psi> \\<subseteq> fv \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>). v' ! x = v ! x", "by (auto simp: MFOTL.fvi_And_Not)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (MFOTL.And_Not \\<phi> \\<psi>). v' ! x = v ! x\n\ngoal (8 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (8 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  fv \\<psi> = fv \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Or \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Or \\<phi> \\<psi>)\n\ngoal (8 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.Or \\<phi> \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Or \\<phi> \\<psi>)", "have\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Or \\<phi> \\<psi>) S \\<sigma>) v i \\<phi> = MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\"\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Or \\<phi> \\<psi>) S \\<sigma>) v i \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v i \\<psi>\""], ["proof (prove)\nusing this:\n  gen_unique (formula.Or \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n       \\<sigma>)\n     v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi> &&&\n    MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n       \\<sigma>)\n     v i \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v i \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)+"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>\n\ngoal (8 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 8(1,4-) 8(2,3)[where S=S]"], ["proof (chain)\npicking this:\n  fv \\<psi> = fv \\<phi>\n  gen_unique (formula.Or \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Or \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  fv \\<psi> = fv \\<phi>\n  gen_unique (formula.Or \\<phi> \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Or \\<phi> \\<psi>)\n  \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs ?n S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<phi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n     \\<sigma>)\n   v i \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v i \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "by (auto simp: \\<open>fv \\<psi> = fv \\<phi>\\<close>)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (8 subgoals):\n 1. \\<And>\\<phi> \\<psi> v i S n.\n       \\<lbrakk>fv \\<psi> = fv \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Or \\<phi> \\<psi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Or \\<phi> \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Or \\<phi> \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 8. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>). v' ! x = v ! x", "by (auto simp: \\<open>fv \\<psi> = fv \\<phi>\\<close>)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Or \\<phi> \\<psi>). v' ! x = v ! x\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (9 \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)", "obtain z where sat_\\<phi>: \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Exists \\<phi>) S \\<sigma>) (z # v) i \\<phi>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         (z # v) i \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   (z # v) i \\<phi>\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \"9.prems\" sat_\\<phi>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   (z # v) i \\<phi>", "have \"\\<exists>v'\\<in>set_Cons UNIV S. \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x\""], ["proof (prove)\nusing this:\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n     \\<sigma>)\n   (z # v) i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>set_Cons UNIV S.\n       \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x", "unfolding slice_Exists"], ["proof (prove)\nusing this:\n  gen_unique (formula.Exists \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Exists \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events \\<phi> (set_Cons UNIV S))\n     \\<sigma>)\n   v i (formula.Exists \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events \\<phi> (set_Cons UNIV S))\n     \\<sigma>)\n   (z # v) i \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>set_Cons UNIV S.\n       \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x", "by (intro \"9.IH\") (auto simp: nfv_Exists intro!: mergeable_envs_set_Cons)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>set_Cons UNIV S.\n     \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Exists \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Exists \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Exists \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Exists \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 7. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  \\<exists>v'\\<in>set_Cons UNIV S.\n     \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>v'\\<in>set_Cons UNIV S.\n     \\<forall>x\\<in>fv \\<phi>. v' ! x = (z # v) ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Exists \\<phi>). v' ! x = v ! x", "by (auto simp: set_Cons_def fvi_Suc Ball_def nth_Cons split: nat.splits)"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Exists \\<phi>). v' ! x = v ! x\n\ngoal (6 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (10 I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Prev I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Prev I \\<phi>)\n\ngoal (6 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Prev I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Prev I \\<phi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v j \\<phi>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Prev I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Prev I \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n           \\<sigma>)\n         v j \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto split: nat.splits)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>\n\ngoal (6 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Prev I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Prev I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 6. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 10"], ["proof (chain)\npicking this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Prev I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Prev I \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Prev I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Prev I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Prev I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Prev I \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Prev I \\<phi>). v' ! x = v ! x", "by simp"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Prev I \\<phi>). v' ! x = v ! x\n\ngoal (5 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (11 I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Next I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Next I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Next I \\<phi>)\n\ngoal (5 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Next I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Next I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Next I \\<phi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v j \\<phi>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Next I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Next I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Next I \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n           \\<sigma>)\n         v j \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto split: nat.splits)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>\n\ngoal (5 subgoals):\n 1. \\<And>I \\<phi> v i S n.\n       \\<lbrakk>\\<And>v i S n.\n                   \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {};\n                    mergeable_envs n S; MFOTL.nfv \\<phi> \\<le> n;\n                    MFOTL.sat\n                     (map_\\<Gamma>\n                       (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n                       \\<sigma>)\n                     v i \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'\\<in>S.\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        gen_unique (formula.Next I \\<phi>); S \\<noteq> {};\n        mergeable_envs n S; MFOTL.nfv (formula.Next I \\<phi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n           \\<sigma>)\n         v i (formula.Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv (formula.Next I \\<phi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 5. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 11"], ["proof (chain)\npicking this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Next I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Next I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Next I \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  gen_unique (formula.Next I \\<phi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Next I \\<phi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D. D \\<inter> relevant_events (formula.Next I \\<phi>) S)\n     \\<sigma>)\n   v i (formula.Next I \\<phi>)\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v j \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Next I \\<phi>). v' ! x = v ! x", "by simp"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Next I \\<phi>). v' ! x = v ! x\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (12 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.Since \\<phi> I \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Since \\<phi> I \\<psi>)", "have *:\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Since \\<phi> I \\<psi>) S \\<sigma>) v j \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v j \\<psi>\" for j"], ["proof (prove)\nusing this:\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n       \\<sigma>)\n     v j \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v j \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from 12"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Since \\<phi> I \\<psi>) S \\<sigma>) v j \\<psi>\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v j \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 12"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "using *"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Since \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Since \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 4. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with \\<open>fv \\<phi> \\<subseteq> fv \\<psi>\\<close>"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Since \\<phi> I \\<psi>). v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Since \\<phi> I \\<psi>). v' ! x = v ! x\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (13 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.Since (MFOTL.Neg \\<phi>) I \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)", "have *:\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Since (MFOTL.Neg \\<phi>) I \\<psi>) S \\<sigma>) v j \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v j \\<psi>\" for j"], ["proof (prove)\nusing this:\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n       \\<sigma>)\n     v j \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v j \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from 13"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Since (MFOTL.Neg \\<phi>) I \\<psi>) S \\<sigma>) v j \\<psi>\""], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v j \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 13"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "using *"], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Since (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Since (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Since (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Since (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 3. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with \\<open>fv (MFOTL.Neg \\<phi>) \\<subseteq> fv \\<psi>\\<close>"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n          v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Since (formula.Neg \\<phi>) I \\<psi>).\n        v' ! x = v ! x\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (14 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.Until \\<phi> I \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Until \\<phi> I \\<psi>)", "have *:\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Until \\<phi> I \\<psi>) S \\<sigma>) v j \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v j \\<psi>\" for j"], ["proof (prove)\nusing this:\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n       \\<sigma>)\n     v j \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v j \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from 14"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Until \\<phi> I \\<psi>) S \\<sigma>) v j \\<psi>\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v j \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 14"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "using *"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  safe_formula \\<phi>\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until \\<phi> I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until \\<phi> I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv \\<phi> \\<subseteq> fv \\<psi>; safe_formula \\<phi>;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until \\<phi> I \\<psi>); S \\<noteq> {};\n        mergeable_envs n S;\n        MFOTL.nfv (formula.Until \\<phi> I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter> relevant_events (formula.Until \\<phi> I \\<psi>) S)\n           \\<sigma>)\n         v i (formula.Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until \\<phi> I \\<psi>).\n                               v' ! x = v ! x\n 2. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with \\<open>fv \\<phi> \\<subseteq> fv \\<psi>\\<close>"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Until \\<phi> I \\<psi>). v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Until \\<phi> I \\<psi>). v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "case (15 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from \\<open>gen_unique (MFOTL.Until (MFOTL.Neg \\<phi>) I \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)", "have *:\n    \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Until (MFOTL.Neg \\<phi>) I \\<psi>) S \\<sigma>) v j \\<psi> = MFOTL.sat (MFOTL_slicer.slice \\<psi> S \\<sigma>) v j \\<psi>\" for j"], ["proof (prove)\nusing this:\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n       \\<sigma>)\n     v j \\<psi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n       \\<sigma>)\n     v j \\<psi>", "by (fastforce simp: unique_names_matches_absorb intro!: sat_inter_names_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "from 15"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)", "obtain j where \"MFOTL.sat (MFOTL_slicer.slice (MFOTL.Until (MFOTL.Neg \\<phi>) I \\<psi>) S \\<sigma>) v j \\<psi>\""], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v j \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with 15"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>", "have \"\\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\""], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "using *"], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<not> safe_formula (formula.Neg \\<phi>)\n  \\<lbrakk>gen_unique \\<phi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<phi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> ?S)\n      \\<sigma>)\n    ?v ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<phi>. v' ! x = ?v ! x\n  \\<lbrakk>gen_unique \\<psi>; ?S \\<noteq> {}; mergeable_envs ?n ?S;\n   MFOTL.nfv \\<psi> \\<le> ?n;\n   MFOTL.sat\n    (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> ?S)\n      \\<sigma>)\n    ?v ?i \\<psi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'\\<in>?S.\n                       \\<forall>x\\<in>fv \\<psi>. v' ! x = ?v ! x\n  gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  S \\<noteq> {}\n  mergeable_envs n S\n  MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v j \\<psi>\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>) S)\n     \\<sigma>)\n   v ?j \\<psi> =\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S) \\<sigma>)\n   v ?j \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I \\<psi> v i S n.\n       \\<lbrakk>fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>;\n        \\<not> safe_formula (formula.Neg \\<phi>);\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<phi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<phi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n               \\<sigma>)\n             v i \\<phi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x;\n        \\<And>v i S n.\n           \\<lbrakk>gen_unique \\<psi>; S \\<noteq> {}; mergeable_envs n S;\n            MFOTL.nfv \\<psi> \\<le> n;\n            MFOTL.sat\n             (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<psi> S)\n               \\<sigma>)\n             v i \\<psi>\\<rbrakk>\n           \\<Longrightarrow> \\<exists>v'\\<in>S.\n                                \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x;\n        gen_unique (formula.Until (formula.Neg \\<phi>) I \\<psi>);\n        S \\<noteq> {}; mergeable_envs n S;\n        MFOTL.nfv (formula.Until (formula.Neg \\<phi>) I \\<psi>) \\<le> n;\n        MFOTL.sat\n         (map_\\<Gamma>\n           (\\<lambda>D.\n               D \\<inter>\n               relevant_events (formula.Until (formula.Neg \\<phi>) I \\<psi>)\n                S)\n           \\<sigma>)\n         v i (formula.Until (formula.Neg \\<phi>) I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'\\<in>S.\n                            \\<forall>x\\<in>fv\n      (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n                               v' ! x = v ! x", "with \\<open>fv (MFOTL.Neg \\<phi>) \\<subseteq> fv \\<psi>\\<close>"], ["proof (chain)\npicking this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x", "show ?case"], ["proof (prove)\nusing this:\n  fv (formula.Neg \\<phi>) \\<subseteq> fv \\<psi>\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<psi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. \\<exists>v'\\<in>S.\n       \\<forall>x\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n          v' ! x = v ! x", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'\\<in>S.\n     \\<forall>x\\<in>fv (formula.Until (formula.Neg \\<phi>) I \\<psi>).\n        v' ! x = v ! x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_sat_slice:\n  assumes formula: \"safe_formula \\<phi>\" \"gen_unique \\<phi>\"\n      and restr: \"S \\<noteq> {}\" \"mergeable_envs (MFOTL.nfv \\<phi>) S\"\n      and sat_slice: \"MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\"\n    shows \"MFOTL.sat \\<sigma> v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "obtain v' where \"v' \\<in> S\" and fv_eq: \"\\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> S;\n         \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using unique_sat_slice_mem[OF formula restr order_refl sat_slice]"], ["proof (prove)\nusing this:\n  \\<exists>v'\\<in>S. \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> S;\n         \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  v' \\<in> S\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "with sat_slice"], ["proof (chain)\npicking this:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  v' \\<in> S\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x", "have \"MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v' i \\<phi>\""], ["proof (prove)\nusing this:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v i \\<phi>\n  v' \\<in> S\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v' i \\<phi>", "by (auto iff: sat_fvi_cong)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v' i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "then"], ["proof (chain)\npicking this:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v' i \\<phi>", "have \"MFOTL.sat \\<sigma> v' i \\<phi>\""], ["proof (prove)\nusing this:\n  MFOTL.sat\n   (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S) \\<sigma>)\n   v' i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v' i \\<phi>", "unfolding sat_slice_iff[OF \\<open>v' \\<in> S\\<close>, symmetric]"], ["proof (prove)\nusing this:\n  MFOTL.sat \\<sigma> v' i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v' i \\<phi>", "."], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma> v' i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "with fv_eq"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n  MFOTL.sat \\<sigma> v' i \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. v' ! x = v ! x\n  MFOTL.sat \\<sigma> v' i \\<phi>\n\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi>", "by (auto iff: sat_fvi_cong)"], ["proof (state)\nthis:\n  MFOTL.sat \\<sigma> v i \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Lemma 3\\<close>"], ["", "lemma (in splitting_strategy) unique_sat_strategy:\n  \"safe_formula \\<phi> \\<Longrightarrow> gen_unique \\<phi> \\<Longrightarrow> slice_set k \\<noteq> {} \\<Longrightarrow>\n  mergeable_envs (MFOTL.nfv \\<phi>) (slice_set k) \\<Longrightarrow>\n  MFOTL.sat (MFOTL_slicer.slice \\<phi> (slice_set k) \\<sigma>) (map the v) i \\<phi> \\<Longrightarrow>\n  ok \\<phi> v \\<Longrightarrow> k \\<in> strategy v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_formula \\<phi>; gen_unique \\<phi>;\n     {v. \\<exists>v'.\n            map the v' = v \\<and>\n            wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n            k \\<in> strategy v'} \\<noteq>\n     {};\n     mergeable_envs (MFOTL.nfv \\<phi>)\n      {v. \\<exists>v'.\n             map the v' = v \\<and>\n             wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n             k \\<in> strategy v'};\n     MFOTL.sat\n      (map_\\<Gamma>\n        (\\<lambda>D.\n            D \\<inter>\n            relevant_events \\<phi>\n             {v. \\<exists>v'.\n                    map the v' = v \\<and>\n                    wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                    k \\<in> strategy v'})\n        \\<sigma>)\n      (map the v) i \\<phi>;\n     wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\\<rbrakk>\n    \\<Longrightarrow> k \\<in> strategy v", "by (drule (3) unique_sat_slice_mem) (auto dest: wf_tuple_cong)"], ["", "locale skip_inter = joint_data_slicer +\n  assumes nonempty: \"slice_set k \\<noteq> {}\"\n  and mergeable: \"mergeable_envs (MFOTL.nfv \\<phi>) (slice_set k)\"\nbegin"], ["", "subsubsection \\<open>Definition of J'\\<close>"], ["", "definition \"skip_joiner = (\\<lambda>s. \\<Union>k. s k)\""], ["", "subsubsection \\<open>Theorem 3\\<close>"], ["", "lemma skip_joiner:\n  assumes \"safe_formula \\<phi>\" \"gen_unique \\<phi>\"\n  shows \"joiner (\\<lambda>k. M (splitter \\<pi> k)) = skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. joiner (\\<lambda>k. M (splitter \\<pi> k)) =\n    skip_joiner (\\<lambda>k. M (splitter \\<pi> k))", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "fix i v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "assume \"(i, v) \\<in> ?R\""], ["proof (state)\nthis:\n  (i, v) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "then"], ["proof (chain)\npicking this:\n  (i, v) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))", "obtain k where in_M: \"(i, v) \\<in> M (splitter \\<pi> k)\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (i, v) \\<in> M (splitter \\<pi> k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding skip_joiner_def"], ["proof (prove)\nusing this:\n  (i, v) \\<in> (\\<Union>k. M (splitter \\<pi> k))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (i, v) \\<in> M (splitter \\<pi> k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (i, v) \\<in> M (splitter \\<pi> k)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "from ex_prefix_of"], ["proof (chain)\npicking this:\n  \\<exists>s. prefix_of ?p s", "obtain \\<sigma> where \"prefix_of \\<pi> \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<exists>s. prefix_of ?p s\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        prefix_of \\<pi> \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prefix_of \\<pi> \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "with wf_monitor[OF in_M] sound_monitor[OF in_M]"], ["proof (chain)\npicking this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of \\<pi> \\<sigma>", "have\n    \"MFOTL.sat (MFOTL_slicer.slice \\<phi> (slice_set k) \\<sigma>) (map the v) i \\<phi>\" \"ok \\<phi> v\""], ["proof (prove)\nusing this:\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n  prefix_of (splitter \\<pi> k) ?\\<sigma> \\<Longrightarrow>\n  MFOTL.sat ?\\<sigma> (map the v) i \\<phi>\n  prefix_of \\<pi> \\<sigma>\n\ngoal (1 subgoal):\n 1. MFOTL.sat\n     (map_\\<Gamma>\n       (\\<lambda>D.\n           D \\<inter>\n           relevant_events \\<phi>\n            {v. \\<exists>v'.\n                   map the v' = v \\<and>\n                   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                   k \\<in> strategy v'})\n       \\<sigma>)\n     (map the v) i \\<phi> &&&\n    wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v", "by (auto simp: splitter_pslice intro!: prefix_of_pmap_\\<Gamma>)"], ["proof (state)\nthis:\n  MFOTL.sat\n   (map_\\<Gamma>\n     (\\<lambda>D.\n         D \\<inter>\n         relevant_events \\<phi>\n          {v. \\<exists>v'.\n                 map the v' = v \\<and>\n                 wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v' \\<and>\n                 k \\<in> strategy v'})\n     \\<sigma>)\n   (map the v) i \\<phi>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) v\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "note unique_sat_strategy[OF assms nonempty mergeable this]"], ["proof (state)\nthis:\n  k \\<in> strategy v\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))\n 2. \\<And>a b.\n       (a, b)\n       \\<in> skip_joiner\n              (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "with in_M"], ["proof (chain)\npicking this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v", "show \"(i, v) \\<in> ?L\""], ["proof (prove)\nusing this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))", "unfolding joiner_def"], ["proof (prove)\nusing this:\n  (i, v) \\<in> M (splitter \\<pi> k)\n  k \\<in> strategy v\n\ngoal (1 subgoal):\n 1. (i, v)\n    \\<in> (\\<Union>k.\n              M (splitter \\<pi> k) \\<inter>\n              UNIV \\<times> {v. k \\<in> strategy v})", "by blast"], ["proof (state)\nthis:\n  (i, v) \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> joiner (\\<lambda>k. M (splitter \\<pi> k)) \\<Longrightarrow>\n       (a, b) \\<in> skip_joiner (\\<lambda>k. M (splitter \\<pi> k))", "qed (auto simp: joiner_def skip_joiner_def)"], ["", "sublocale skip_joint_monitor: MFOTL_monitor \\<phi>\n  \"\\<lambda>\\<pi>. (if safe_formula \\<phi> \\<and> gen_unique \\<phi> then skip_joiner else joiner) (\\<lambda>k. M (splitter \\<pi> k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL_monitor \\<phi>\n     (\\<lambda>\\<pi>.\n         (if safe_formula \\<phi> \\<and> gen_unique \\<phi> then skip_joiner\n          else joiner)\n          (\\<lambda>k. M (splitter \\<pi> k)))", "using joint_monitor.mono_monitor joint_monitor.wf_monitor joint_monitor.sound_monitor joint_monitor.complete_monitor"], ["proof (prove)\nusing this:\n  ?\\<pi> \\<le> ?\\<pi>' \\<Longrightarrow>\n  joiner (\\<lambda>k. M (splitter ?\\<pi> k))\n  \\<subseteq> joiner (\\<lambda>k. M (splitter ?\\<pi>' k))\n  (?i, ?v)\n  \\<in> joiner (\\<lambda>k. M (splitter ?\\<pi> k)) \\<Longrightarrow>\n  wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v\n  \\<lbrakk>(?i, ?v) \\<in> joiner (\\<lambda>k. M (splitter ?\\<pi> k));\n   prefix_of ?\\<pi> ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> MFOTL.sat ?\\<sigma> (map the ?v) ?i \\<phi>\n  \\<lbrakk>prefix_of ?\\<pi> ?\\<sigma>;\n   wf_tuple (MFOTL.nfv \\<phi>) (fv \\<phi>) ?v;\n   \\<And>\\<sigma>.\n      prefix_of ?\\<pi> \\<sigma> \\<Longrightarrow>\n      MFOTL.sat \\<sigma> (map the ?v) ?i \\<phi>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<pi>'.\n                       prefix_of \\<pi>' ?\\<sigma> \\<and>\n                       (?i, ?v)\n                       \\<in> joiner (\\<lambda>k. M (splitter \\<pi>' k))\n\ngoal (1 subgoal):\n 1. MFOTL_monitor \\<phi>\n     (\\<lambda>\\<pi>.\n         (if safe_formula \\<phi> \\<and> gen_unique \\<phi> then skip_joiner\n          else joiner)\n          (\\<lambda>k. M (splitter \\<pi> k)))", "by unfold_locales (auto simp: skip_joiner[symmetric] split: if_splits)"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}