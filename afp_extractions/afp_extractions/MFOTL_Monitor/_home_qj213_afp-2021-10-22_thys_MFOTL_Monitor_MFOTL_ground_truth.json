{"file_name": "/home/qj213/afp-2021-10-22/thys/MFOTL_Monitor/MFOTL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFOTL_Monitor", "problem_names": ["lemma eval_trm_cong: \"\\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow> eval_trm v t = eval_trm v' t\"", "lemma finite_fvi_trm[simp]: \"finite (fvi_trm b t)\"", "lemma finite_fvi[simp]: \"finite (fvi b \\<phi>)\"", "lemma fvi_trm_Suc: \"x \\<in> fvi_trm (Suc b) t \\<longleftrightarrow> Suc x \\<in> fvi_trm b t\"", "lemma fvi_Suc: \"x \\<in> fvi (Suc b) \\<phi> \\<longleftrightarrow> Suc x \\<in> fvi b \\<phi>\"", "lemma fvi_Suc_bound:\n  assumes \"\\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < Suc n\"", "lemma nfv_simps[simp]:\n  \"nfv (Neg \\<phi>) = nfv \\<phi>\"\n  \"nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Prev I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Next I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"", "lemma fvi_less_nfv: \"\\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>\"", "lemma sat_Until_rec: \"sat \\<sigma> v i (Until \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  (\\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")", "lemma sat_Since_rec: \"sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  (i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")", "lemma sat_Since_0: \"sat \\<sigma> v 0 (Since \\<phi> I \\<psi>) \\<longleftrightarrow> mem 0 I \\<and> sat \\<sigma> v 0 \\<psi>\"", "lemma sat_Since_point: \"sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) \\<psi>) \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma sat_Since_pointD: \"sat \\<sigma> v i (Since \\<phi> (point t) \\<psi>) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\"", "lemma eval_trm_fvi_cong: \"\\<forall>x\\<in>fv_trm t. v!x = v'!x \\<Longrightarrow> eval_trm v t = eval_trm v' t\"", "lemma sat_fvi_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>\"", "lemma fvi_And: \"fvi b (And \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"", "lemma nfv_And[simp]: \"nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"", "lemma future_reach_And: \"future_reach (And \\<phi> \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>)\"", "lemma sat_And: \"sat \\<sigma> v i (And \\<phi> \\<psi>) = (sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v i \\<psi>)\"", "lemma fvi_And_Not: \"fvi b (And_Not \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"", "lemma nfv_And_Not[simp]: \"nfv (And_Not \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"", "lemma future_reach_And_Not: \"future_reach (And_Not \\<phi> \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>)\"", "lemma sat_And_Not: \"sat \\<sigma> v i (And_Not \\<phi> \\<psi>) = (sat \\<sigma> v i \\<phi> \\<and> \\<not> sat \\<sigma> v i \\<psi>)\"", "lemma disjE_Not2: \"P \\<or> Q \\<Longrightarrow> (P \\<Longrightarrow> R) \\<Longrightarrow> (\\<not>P \\<Longrightarrow> Q \\<Longrightarrow> R) \\<Longrightarrow> R\"", "lemma safe_formula_induct[consumes 1]:\n  assumes \"safe_formula \\<phi>\"\n    and \"\\<And>t1 t2. MFOTL.is_Const t1 \\<Longrightarrow> P (MFOTL.Eq t1 t2)\"\n    and \"\\<And>t1 t2. MFOTL.is_Const t2 \\<Longrightarrow> P (MFOTL.Eq t1 t2)\"\n    and \"\\<And>x y. P (MFOTL.Neg (MFOTL.Eq (MFOTL.Const x) (MFOTL.Const y)))\"\n    and \"\\<And>x y. x = y \\<Longrightarrow> P (MFOTL.Neg (MFOTL.Eq (MFOTL.Var x) (MFOTL.Var y)))\"\n    and \"\\<And>e ts. P (MFOTL.Pred e ts)\"\n    and \"\\<And>\\<phi> \\<psi>. \\<not> (safe_formula (MFOTL.Neg \\<psi>) \\<and> MFOTL.fv \\<psi> \\<subseteq> MFOTL.fv \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.And \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi> \\<psi>. safe_formula \\<psi> \\<Longrightarrow> MFOTL.fv \\<psi> \\<subseteq> MFOTL.fv \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.And_Not \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi> \\<psi>. MFOTL.fv \\<psi> = MFOTL.fv \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Or \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Exists \\<phi>)\"\n    and \"\\<And>I \\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Prev I \\<phi>)\"\n    and \"\\<And>I \\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Next I \\<phi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Since \\<phi> I \\<psi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv (MFOTL.Neg \\<phi>) \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow>\n      \\<not> safe_formula (MFOTL.Neg \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Since (MFOTL.Neg \\<phi>) I \\<psi> )\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Until \\<phi> I \\<psi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv (MFOTL.Neg \\<phi>) \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow>\n      \\<not> safe_formula (MFOTL.Neg \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Until (MFOTL.Neg \\<phi>) I \\<psi>)\"\n  shows \"P \\<phi>\"", "lemma matches_fvi_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> matches v \\<phi> e = matches v' \\<phi> e\"", "lemma sat_slice_strong: \"relevant_events \\<phi> S \\<subseteq> E \\<Longrightarrow> v \\<in> S \\<Longrightarrow>\n  sat \\<sigma> v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>\"", "lemma sat_slice_iff:\n  assumes \"v \\<in> S\"\n  shows \"MFOTL.sat \\<sigma> v i \\<phi> \\<longleftrightarrow> MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\"", "lemma slice_replace_prefix:\n  \"prefix_of (MFOTL_slicer.pslice \\<phi> R \\<pi>) \\<sigma> \\<Longrightarrow>\n    MFOTL_slicer.slice \\<phi> R (replace_prefix \\<pi> \\<sigma>) = MFOTL_slicer.slice \\<phi> R \\<sigma>\""], "translations": [["", "lemma eval_trm_cong: \"\\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow> eval_trm v t = eval_trm v' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow>\n    eval_trm v t = eval_trm v' t", "by (cases t) simp_all"], ["", "qualified"], ["", "datatype (discs_sels) 'a formula = Pred name \"'a trm list\" | Eq \"'a trm\" \"'a trm\"\n  | Neg \"'a formula\" | Or \"'a formula\" \"'a formula\" | Exists \"'a formula\"\n  | Prev \\<I> \"'a formula\" | Next \\<I> \"'a formula\"\n  | Since \"'a formula\" \\<I> \"'a formula\" | Until \"'a formula\" \\<I> \"'a formula\""], ["", "qualified"], ["", "primrec fvi :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> nat set\" where\n  \"fvi b (Pred r ts) = (\\<Union>t\\<in>set ts. fvi_trm b t)\"\n| \"fvi b (Eq t1 t2) = fvi_trm b t1 \\<union> fvi_trm b t2\"\n| \"fvi b (Neg \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Or \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (Exists \\<phi>) = fvi (Suc b) \\<phi>\"\n| \"fvi b (Prev I \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Next I \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Since \\<phi> I \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (Until \\<phi> I \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\""], ["", "abbreviation \"fv \\<equiv> fvi 0\""], ["", "lemma finite_fvi_trm[simp]: \"finite (fvi_trm b t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fvi_trm b t)", "by (cases t) simp_all"], ["", "lemma finite_fvi[simp]: \"finite (fvi b \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fvi b \\<phi>)", "by (induction \\<phi> arbitrary: b) simp_all"], ["", "lemma fvi_trm_Suc: \"x \\<in> fvi_trm (Suc b) t \\<longleftrightarrow> Suc x \\<in> fvi_trm b t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi_trm (Suc b) t) = (Suc x \\<in> fvi_trm b t)", "by (cases t) auto"], ["", "lemma fvi_Suc: \"x \\<in> fvi (Suc b) \\<phi> \\<longleftrightarrow> Suc x \\<in> fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi (Suc b) \\<phi>) = (Suc x \\<in> fvi b \\<phi>)", "by (induction \\<phi> arbitrary: b) (simp_all add: fvi_trm_Suc)"], ["", "lemma fvi_Suc_bound:\n  assumes \"\\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fvi b \\<phi>. i < Suc n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < Suc n", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < Suc n", "assume \"i \\<in> fvi b \\<phi>\""], ["proof (state)\nthis:\n  i \\<in> fvi b \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < Suc n", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\n  i \\<in> fvi b \\<phi>", "show \"i < Suc n\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\n  i \\<in> fvi b \\<phi>\n\ngoal (1 subgoal):\n 1. i < Suc n", "by (cases i) (simp_all add: fvi_Suc)"], ["proof (state)\nthis:\n  i < Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "qualified"], ["", "definition nfv :: \"'a formula \\<Rightarrow> nat\" where\n  \"nfv \\<phi> = Max (insert 0 (Suc ` fv \\<phi>))\""], ["", "qualified"], ["", "definition envs :: \"'a formula \\<Rightarrow> 'a env set\" where\n  \"envs \\<phi> = {v. length v = nfv \\<phi>}\""], ["", "lemma nfv_simps[simp]:\n  \"nfv (Neg \\<phi>) = nfv \\<phi>\"\n  \"nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Prev I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Next I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nfv (Neg \\<phi>) = nfv \\<phi> &&&\n     nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>) &&&\n     nfv (Prev I \\<phi>) = nfv \\<phi>) &&&\n    nfv (Next I \\<phi>) = nfv \\<phi> &&&\n    nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>) &&&\n    nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Max (insert 0 (Suc ` fv (Neg \\<phi>))) =\n     Max (insert 0 (Suc ` fv \\<phi>)) &&&\n     Max (insert 0 (Suc ` fv (Or \\<phi> \\<psi>))) =\n     max (Max (insert 0 (Suc ` fv \\<phi>)))\n      (Max (insert 0 (Suc ` fv \\<psi>))) &&&\n     Max (insert 0 (Suc ` fv (Prev I \\<phi>))) =\n     Max (insert 0 (Suc ` fv \\<phi>))) &&&\n    Max (insert 0 (Suc ` fv (Next I \\<phi>))) =\n    Max (insert 0 (Suc ` fv \\<phi>)) &&&\n    Max (insert 0 (Suc ` fv (Since \\<phi> I \\<psi>))) =\n    max (Max (insert 0 (Suc ` fv \\<phi>)))\n     (Max (insert 0 (Suc ` fv \\<psi>))) &&&\n    Max (insert 0 (Suc ` fv (Until \\<phi> I \\<psi>))) =\n    max (Max (insert 0 (Suc ` fv \\<phi>)))\n     (Max (insert 0 (Suc ` fv \\<psi>)))", "by (simp_all add: image_Un Max_Un[symmetric])"], ["", "lemma fvi_less_nfv: \"\\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv \\<phi>. i < Max (insert 0 (Suc ` fv \\<phi>))", "by (auto simp add: Max_gr_iff intro: max.strict_coboundedI2)"], ["", "qualified"], ["", "primrec future_reach :: \"'a formula \\<Rightarrow> enat\" where\n  \"future_reach (Pred _ _) = 0\"\n| \"future_reach (Eq _ _) = 0\"\n| \"future_reach (Neg \\<phi>) = future_reach \\<phi>\"\n| \"future_reach (Or \\<phi> \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>)\"\n| \"future_reach (Exists \\<phi>) = future_reach \\<phi>\"\n| \"future_reach (Prev I \\<phi>) = future_reach \\<phi> - left I\"\n| \"future_reach (Next I \\<phi>) = future_reach \\<phi> + right I + 1\"\n| \"future_reach (Since \\<phi> I \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi> - left I)\"\n| \"future_reach (Until \\<phi> I \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>) + right I + 1\""], ["", "qualified"], ["", "primrec sat :: \"'a trace \\<Rightarrow> 'a env \\<Rightarrow> nat \\<Rightarrow> 'a formula \\<Rightarrow> bool\" where\n  \"sat \\<sigma> v i (Pred r ts) = ((r, map (eval_trm v) ts) \\<in> \\<Gamma> \\<sigma> i)\"\n| \"sat \\<sigma> v i (Eq t1 t2) = (eval_trm v t1 = eval_trm v t2)\"\n| \"sat \\<sigma> v i (Neg \\<phi>) = (\\<not> sat \\<sigma> v i \\<phi>)\"\n| \"sat \\<sigma> v i (Or \\<phi> \\<psi>) = (sat \\<sigma> v i \\<phi> \\<or> sat \\<sigma> v i \\<psi>)\"\n| \"sat \\<sigma> v i (Exists \\<phi>) = (\\<exists>z. sat \\<sigma> (z # v) i \\<phi>)\"\n| \"sat \\<sigma> v i (Prev I \\<phi>) = (case i of 0 \\<Rightarrow> False | Suc j \\<Rightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<and> sat \\<sigma> v j \\<phi>)\"\n| \"sat \\<sigma> v i (Next I \\<phi>) = (mem (\\<tau> \\<sigma> (Suc i) - \\<tau> \\<sigma> i) I \\<and> sat \\<sigma> v (Suc i) \\<phi>)\"\n| \"sat \\<sigma> v i (Since \\<phi> I \\<psi>) = (\\<exists>j\\<le>i. mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<and> sat \\<sigma> v j \\<psi> \\<and> (\\<forall>k \\<in> {j <.. i}. sat \\<sigma> v k \\<phi>))\"\n| \"sat \\<sigma> v i (Until \\<phi> I \\<psi>) = (\\<exists>j\\<ge>i. mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I \\<and> sat \\<sigma> v j \\<psi> \\<and> (\\<forall>k \\<in> {i ..< j}. sat \\<sigma> v k \\<phi>))\""], ["", "lemma sat_Until_rec: \"sat \\<sigma> v i (Until \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  (\\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n     enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n     sat \\<sigma> v i \\<phi> \\<and>\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))", "proof (rule iffI; (elim disjE conjE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "obtain j where j: \"i \\<le> j\" \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\" \"sat \\<sigma> v j \\<psi>\" \"\\<forall>k \\<in> {i ..< j}. sat \\<sigma> v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n         sat \\<sigma> v j \\<psi>;\n         \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>\n\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>", "show ?R"], ["proof (prove)\nusing this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "proof (cases \"i = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "with j(1,2)"], ["proof (chain)\npicking this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  i \\<noteq> j", "have \"\\<Delta> \\<sigma> (i + 1) \\<le> right I\""], ["proof (prove)\nusing this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I", "by (auto elim: order_trans[rotated] simp: diff_le_mono)"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "from False j(1,4)"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  i \\<le> j\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>", "have \"sat \\<sigma> v i \\<phi>\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  i \\<le> j\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i \\<phi>", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "moreover"], ["proof (state)\nthis:\n  sat \\<sigma> v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "from False j"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>", "have \"sat \\<sigma> v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "by (cases \"right I\") (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "by blast"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  sat \\<sigma> v i \\<phi> \\<and>\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "qed simp"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  sat \\<sigma> v i \\<phi> \\<and>\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "assume \\<Delta>: \"\\<Delta> \\<sigma> (i + 1) \\<le> right I\" and now: \"sat \\<sigma> v i \\<phi>\" and\n   \"next\": \"sat \\<sigma> v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\""], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "from \"next\""], ["proof (chain)\npicking this:\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "obtain j where j: \"i + 1 \\<le> j\" \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1)) ((subtract (\\<Delta> \\<sigma> (i + 1)) I))\"\n      \"sat \\<sigma> v j \\<psi>\" \"\\<forall>k \\<in> {i + 1 ..< j}. sat \\<sigma> v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i + 1 \\<le> j;\n         mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n          (subtract (\\<Delta> \\<sigma> (i + 1)) I);\n         sat \\<sigma> v j \\<psi>;\n         \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> v k \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "from \\<Delta> j(1,2)"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)", "have \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\""], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n\ngoal (1 subgoal):\n 1. mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I", "by (cases \"right I\") (auto simp: le_diff_conv2)"], ["proof (state)\nthis:\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "with now j(1,3,4)"], ["proof (chain)\npicking this:\n  sat \\<sigma> v i \\<phi>\n  i + 1 \\<le> j\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> v k \\<phi>\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I", "show ?L"], ["proof (prove)\nusing this:\n  sat \\<sigma> v i \\<phi>\n  i + 1 \\<le> j\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> v k \\<phi>\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "by (auto simp: le_eq_less_or_eq[of i] intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi> I \\<psi>)", "qed auto"], ["", "lemma sat_Since_rec: \"sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  (i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n     0 < i \\<and>\n     enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n     sat \\<sigma> v i \\<phi> \\<and>\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))", "proof (rule iffI; (elim disjE conjE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "obtain j where j: \"j \\<le> i\" \"mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\" \"sat \\<sigma> v j \\<psi>\" \"\\<forall>k \\<in> {j <.. i}. sat \\<sigma> v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         sat \\<sigma> v j \\<psi>;\n         \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>\n\ngoal (3 subgoals):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>", "show ?R"], ["proof (prove)\nusing this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "proof (cases \"i = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "with j(1)"], ["proof (chain)\npicking this:\n  j \\<le> i\n  i \\<noteq> j", "obtain k where [simp]: \"i = k + 1\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. (\\<And>k. i = k + 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases i) auto"], ["proof (state)\nthis:\n  i = k + 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "with j(1,2) False"], ["proof (chain)\npicking this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  i \\<noteq> j\n  i = k + 1", "have \"\\<Delta> \\<sigma> i \\<le> right I\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  i \\<noteq> j\n  i = k + 1\n\ngoal (1 subgoal):\n 1. enat (\\<Delta> \\<sigma> i) \\<le> right I", "by (auto elim: order_trans[rotated] simp: diff_le_mono2 le_Suc_eq)"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "from False j(1,4)"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  j \\<le> i\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>", "have \"sat \\<sigma> v i \\<phi>\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  j \\<le> i\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i \\<phi>", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "moreover"], ["proof (state)\nthis:\n  sat \\<sigma> v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "from False j"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>", "have \"sat \\<sigma> v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "by (cases \"right I\") (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> v i \\<phi> \\<and>\n    sat \\<sigma> v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "by auto"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  sat \\<sigma> v i \\<phi> \\<and>\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> v i \\<phi> \\<and>\n                      sat \\<sigma> v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "qed simp"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> v i \\<psi> \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  sat \\<sigma> v i \\<phi> \\<and>\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "assume i: \"0 < i\" and \\<Delta>: \"\\<Delta> \\<sigma> i \\<le> right I\" and now: \"sat \\<sigma> v i \\<phi>\" and\n   \"prev\": \"sat \\<sigma> v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\""], ["proof (state)\nthis:\n  0 < i\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> v i \\<phi>\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "from \"prev\""], ["proof (chain)\npicking this:\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "obtain j where j: \"j \\<le> i - 1\" \"mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j) ((subtract (\\<Delta> \\<sigma> i) I))\"\n      \"sat \\<sigma> v j \\<psi>\" \"\\<forall>k \\<in> {j <.. i - 1}. sat \\<sigma> v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> i - 1;\n         mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n          (subtract (\\<Delta> \\<sigma> i) I);\n         sat \\<sigma> v j \\<psi>;\n         \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> v k \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "from \\<Delta> i j(1,2)"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  0 < i\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)", "have \"mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\""], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  0 < i\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n\ngoal (1 subgoal):\n 1. mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I", "by (cases \"right I\") (auto simp: le_diff_conv2)"], ["proof (state)\nthis:\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> v i \\<phi>;\n     sat \\<sigma> v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "with now i j(1,3,4)"], ["proof (chain)\npicking this:\n  sat \\<sigma> v i \\<phi>\n  0 < i\n  j \\<le> i - 1\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> v k \\<phi>\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I", "show ?L"], ["proof (prove)\nusing this:\n  sat \\<sigma> v i \\<phi>\n  0 < i\n  j \\<le> i - 1\n  sat \\<sigma> v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> v k \\<phi>\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "by (auto simp: le_Suc_eq gr0_conv_Suc intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "qed auto"], ["", "lemma sat_Since_0: \"sat \\<sigma> v 0 (Since \\<phi> I \\<psi>) \\<longleftrightarrow> mem 0 I \\<and> sat \\<sigma> v 0 \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v 0 (Since \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> v 0 \\<psi>)", "by auto"], ["", "lemma sat_Since_point: \"sat \\<sigma> v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) \\<psi>) \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> v i (Since \\<phi> I \\<psi>);\n     \\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         sat \\<sigma> v i\n          (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j))\n            \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto intro: diff_le_self)"], ["", "lemma sat_Since_pointD: \"sat \\<sigma> v i (Since \\<phi> (point t) \\<psi>) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> v i (Since \\<phi> (point t) \\<psi>);\n     mem t I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi> I \\<psi>)", "by auto"], ["", "lemma eval_trm_fvi_cong: \"\\<forall>x\\<in>fv_trm t. v!x = v'!x \\<Longrightarrow> eval_trm v t = eval_trm v' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow>\n    eval_trm v t = eval_trm v' t", "by (cases t) simp_all"], ["", "lemma sat_fvi_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x \\<Longrightarrow>\n    sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>", "proof (induct \\<phi> arbitrary: v v' i)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Pred x1 x2) = sat \\<sigma> v' i (Pred x1 x2)\n 2. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n 3. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 6. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "case (Pred n ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Pred n ts). v ! x = v' ! x\n\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Pred x1 x2) = sat \\<sigma> v' i (Pred x1 x2)\n 2. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n 3. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 6. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Pred n ts) = sat \\<sigma> v' i (Pred n ts)", "by (simp cong: map_cong eval_trm_fvi_cong[OF Pred[simplified, THEN bspec]])"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Pred n ts) = sat \\<sigma> v' i (Pred n ts)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n 2. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n 2. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "case (Eq x1 x2)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v' i.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n 2. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)", "unfolding fvi.simps sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv_trm x1 \\<union> fv_trm x2. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (eval_trm v x1 = eval_trm v x2) = (eval_trm v' x1 = eval_trm v' x2)", "by (metis UnCI eval_trm_fvi_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Eq x1 x2) = sat \\<sigma> v' i (Eq x1 x2)\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?v ?i \\<phi> = sat \\<sigma> ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat \\<sigma> v' i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?v ?i \\<phi> = sat \\<sigma> ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?v ?i \\<phi> = sat \\<sigma> ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Exists \\<phi>) = sat \\<sigma> v' i (Exists \\<phi>)", "unfolding sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?v ?i \\<phi> = sat \\<sigma> ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (\\<exists>z. sat \\<sigma> (z # v) i \\<phi>) =\n    (\\<exists>z. sat \\<sigma> (z # v') i \\<phi>)", "by (intro iff_exI) (simp add: fvi_Suc nth_Cons')"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Exists \\<phi>) = sat \\<sigma> v' i (Exists \\<phi>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat \\<sigma> v' i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma> v' i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat \\<sigma> v' i (Prev x1 \\<phi>)\n 4. \\<And>x1 \\<phi> v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi> = sat \\<sigma> v' i \\<phi>;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat \\<sigma> v' i (Next x1 \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v v' i.\n       \\<lbrakk>\\<And>v v' i.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> v i \\<phi>1 = sat \\<sigma> v' i \\<phi>1;\n        \\<And>v v' i.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> v i \\<phi>2 = sat \\<sigma> v' i \\<phi>2;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat \\<sigma> v' i (Until \\<phi>1 x2 \\<phi>2)", "qed (auto 8 0 simp add: nth_Cons' split: nat.splits intro!: iff_exI)"], ["", "subsection \\<open>Defined connectives\\<close>"], ["", "qualified"], ["", "definition \"And \\<phi> \\<psi> = Neg (Or (Neg \\<phi>) (Neg \\<psi>))\""], ["", "lemma fvi_And: \"fvi b (And \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (And \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>", "unfolding And_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (Neg (Or (Neg \\<phi>) (Neg \\<psi>))) =\n    fvi b \\<phi> \\<union> fvi b \\<psi>", "by simp"], ["", "lemma nfv_And[simp]: \"nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert 0 (Suc ` fv (And \\<phi> \\<psi>))) =\n    max (Max (insert 0 (Suc ` fv \\<phi>)))\n     (Max (insert 0 (Suc ` fv \\<psi>)))", "by (simp add: fvi_And image_Un Max_Un[symmetric])"], ["", "lemma future_reach_And: \"future_reach (And \\<phi> \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_reach (And \\<phi> \\<psi>) =\n    max (future_reach \\<phi>) (future_reach \\<psi>)", "unfolding And_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. future_reach (Neg (Or (Neg \\<phi>) (Neg \\<psi>))) =\n    max (future_reach \\<phi>) (future_reach \\<psi>)", "by simp"], ["", "lemma sat_And: \"sat \\<sigma> v i (And \\<phi> \\<psi>) = (sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v i \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (And \\<phi> \\<psi>) =\n    (sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v i \\<psi>)", "unfolding And_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Neg (Or (Neg \\<phi>) (Neg \\<psi>))) =\n    (sat \\<sigma> v i \\<phi> \\<and> sat \\<sigma> v i \\<psi>)", "by simp"], ["", "qualified"], ["", "definition \"And_Not \\<phi> \\<psi> = Neg (Or (Neg \\<phi>) \\<psi>)\""], ["", "lemma fvi_And_Not: \"fvi b (And_Not \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (And_Not \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>", "unfolding And_Not_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (Neg (Or (Neg \\<phi>) \\<psi>)) =\n    fvi b \\<phi> \\<union> fvi b \\<psi>", "by simp"], ["", "lemma nfv_And_Not[simp]: \"nfv (And_Not \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nfv (And_Not \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert 0 (Suc ` fv (And_Not \\<phi> \\<psi>))) =\n    max (Max (insert 0 (Suc ` fv \\<phi>)))\n     (Max (insert 0 (Suc ` fv \\<psi>)))", "by (simp add: fvi_And_Not image_Un Max_Un[symmetric])"], ["", "lemma future_reach_And_Not: \"future_reach (And_Not \\<phi> \\<psi>) = max (future_reach \\<phi>) (future_reach \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_reach (And_Not \\<phi> \\<psi>) =\n    max (future_reach \\<phi>) (future_reach \\<psi>)", "unfolding And_Not_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. future_reach (Neg (Or (Neg \\<phi>) \\<psi>)) =\n    max (future_reach \\<phi>) (future_reach \\<psi>)", "by simp"], ["", "lemma sat_And_Not: \"sat \\<sigma> v i (And_Not \\<phi> \\<psi>) = (sat \\<sigma> v i \\<phi> \\<and> \\<not> sat \\<sigma> v i \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (And_Not \\<phi> \\<psi>) =\n    (sat \\<sigma> v i \\<phi> \\<and> \\<not> sat \\<sigma> v i \\<psi>)", "unfolding And_Not_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Neg (Or (Neg \\<phi>) \\<psi>)) =\n    (sat \\<sigma> v i \\<phi> \\<and> \\<not> sat \\<sigma> v i \\<psi>)", "by simp"], ["", "subsection \\<open>Safe formulas\\<close>"], ["", "fun safe_formula :: \"'a MFOTL.formula \\<Rightarrow> bool\" where\n  \"safe_formula (MFOTL.Eq t1 t2) = (MFOTL.is_Const t1 \\<or> MFOTL.is_Const t2)\"\n| \"safe_formula (MFOTL.Neg (MFOTL.Eq (MFOTL.Const x) (MFOTL.Const y))) = True\"\n| \"safe_formula (MFOTL.Neg (MFOTL.Eq (MFOTL.Var x) (MFOTL.Var y))) = (x = y)\"\n| \"safe_formula (MFOTL.Pred e ts) = True\"\n| \"safe_formula (MFOTL.Neg (MFOTL.Or (MFOTL.Neg \\<phi>) \\<psi>)) = (safe_formula \\<phi> \\<and>\n    (safe_formula \\<psi> \\<and> MFOTL.fv \\<psi> \\<subseteq> MFOTL.fv \\<phi> \\<or> (case \\<psi> of MFOTL.Neg \\<psi>' \\<Rightarrow> safe_formula \\<psi>' | _ \\<Rightarrow> False)))\"\n| \"safe_formula (MFOTL.Or \\<phi> \\<psi>) = (MFOTL.fv \\<psi> = MFOTL.fv \\<phi> \\<and> safe_formula \\<phi> \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (MFOTL.Exists \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (MFOTL.Prev I \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (MFOTL.Next I \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (MFOTL.Since \\<phi> I \\<psi>) = (MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<and>\n    (safe_formula \\<phi> \\<or> (case \\<phi> of MFOTL.Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False)) \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (MFOTL.Until \\<phi> I \\<psi>) = (MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<and>\n    (safe_formula \\<phi> \\<or> (case \\<phi> of MFOTL.Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False)) \\<and> safe_formula \\<psi>)\"\n| \"safe_formula _ = False\""], ["", "lemma disjE_Not2: \"P \\<or> Q \\<Longrightarrow> (P \\<Longrightarrow> R) \\<Longrightarrow> (\\<not>P \\<Longrightarrow> Q \\<Longrightarrow> R) \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<or> Q; P \\<Longrightarrow> R;\n     \\<lbrakk>\\<not> P; Q\\<rbrakk> \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by blast"], ["", "lemma safe_formula_induct[consumes 1]:\n  assumes \"safe_formula \\<phi>\"\n    and \"\\<And>t1 t2. MFOTL.is_Const t1 \\<Longrightarrow> P (MFOTL.Eq t1 t2)\"\n    and \"\\<And>t1 t2. MFOTL.is_Const t2 \\<Longrightarrow> P (MFOTL.Eq t1 t2)\"\n    and \"\\<And>x y. P (MFOTL.Neg (MFOTL.Eq (MFOTL.Const x) (MFOTL.Const y)))\"\n    and \"\\<And>x y. x = y \\<Longrightarrow> P (MFOTL.Neg (MFOTL.Eq (MFOTL.Var x) (MFOTL.Var y)))\"\n    and \"\\<And>e ts. P (MFOTL.Pred e ts)\"\n    and \"\\<And>\\<phi> \\<psi>. \\<not> (safe_formula (MFOTL.Neg \\<psi>) \\<and> MFOTL.fv \\<psi> \\<subseteq> MFOTL.fv \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.And \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi> \\<psi>. safe_formula \\<psi> \\<Longrightarrow> MFOTL.fv \\<psi> \\<subseteq> MFOTL.fv \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.And_Not \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi> \\<psi>. MFOTL.fv \\<psi> = MFOTL.fv \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Or \\<phi> \\<psi>)\"\n    and \"\\<And>\\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Exists \\<phi>)\"\n    and \"\\<And>I \\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Prev I \\<phi>)\"\n    and \"\\<And>I \\<phi>. P \\<phi> \\<Longrightarrow> P (MFOTL.Next I \\<phi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Since \\<phi> I \\<psi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv (MFOTL.Neg \\<phi>) \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow>\n      \\<not> safe_formula (MFOTL.Neg \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Since (MFOTL.Neg \\<phi>) I \\<psi> )\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv \\<phi> \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Until \\<phi> I \\<psi>)\"\n    and \"\\<And>\\<phi> I \\<psi>. MFOTL.fv (MFOTL.Neg \\<phi>) \\<subseteq> MFOTL.fv \\<psi> \\<Longrightarrow>\n      \\<not> safe_formula (MFOTL.Neg \\<phi>) \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (MFOTL.Until (MFOTL.Neg \\<phi>) I \\<psi>)\"\n  shows \"P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<phi>", "using assms(1)"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P \\<phi>", "proof (induction rule: safe_formula.induct)"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        \\<And>x3.\n           \\<lbrakk>\\<psi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula (Neg (Or (Neg \\<phi>) \\<psi>))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Or (Neg \\<phi>) \\<psi>))\n 6. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 7. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 9. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 10. \\<And>\\<phi> I \\<psi>.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x3.\n            \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n            \\<Longrightarrow> P x3;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Since \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\nA total of 28 subgoals...", "case (5 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula (Neg (Or (Neg \\<phi>) \\<psi>))\n\ngoal (28 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        \\<And>x3.\n           \\<lbrakk>\\<psi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula (Neg (Or (Neg \\<phi>) \\<psi>))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Or (Neg \\<phi>) \\<psi>))\n 6. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 7. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 9. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 10. \\<And>\\<phi> I \\<psi>.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x3.\n            \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n            \\<Longrightarrow> P x3;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Since \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\nA total of 28 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula (Neg (Or (Neg \\<phi>) \\<psi>))", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula (Neg (Or (Neg \\<phi>) \\<psi>))\n\ngoal (1 subgoal):\n 1. P (Neg (Or (Neg \\<phi>) \\<psi>))", "by (cases \\<psi>)\n      (auto 0 3 elim!: disjE_Not2 intro: assms[unfolded MFOTL.And_def MFOTL.And_Not_def])"], ["proof (state)\nthis:\n  P (Neg (Or (Neg \\<phi>) \\<psi>))\n\ngoal (27 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>\\<phi> I \\<psi>.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x3.\n            \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n            \\<Longrightarrow> P x3;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 27 subgoals...", "next"], ["proof (state)\ngoal (27 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>\\<phi> I \\<psi>.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x3.\n            \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n            \\<Longrightarrow> P x3;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 27 subgoals...", "case (10 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n\ngoal (27 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>\\<phi> I \\<psi>.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x3.\n            \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n            \\<Longrightarrow> P x3;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 27 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. P (Since \\<phi> I \\<psi>)", "by (cases \\<phi>) (auto 0 3 elim!: disjE_Not2 intro: assms)"], ["proof (state)\nthis:\n  P (Since \\<phi> I \\<psi>)\n\ngoal (26 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>va vb.\n        safe_formula (Neg (Pred va vb)) \\<Longrightarrow>\n        P (Neg (Pred va vb))\nA total of 26 subgoals...", "next"], ["proof (state)\ngoal (26 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>va vb.\n        safe_formula (Neg (Pred va vb)) \\<Longrightarrow>\n        P (Neg (Pred va vb))\nA total of 26 subgoals...", "case (11 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n\ngoal (26 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>\\<phi> I \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x3.\n           \\<lbrakk>\\<phi> = Neg x3; safe_formula x3\\<rbrakk>\n           \\<Longrightarrow> P x3;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>va vb.\n        safe_formula (Neg (Pred va vb)) \\<Longrightarrow>\n        P (Neg (Pred va vb))\nA total of 26 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x3.0; safe_formula ?x3.0\\<rbrakk>\n  \\<Longrightarrow> P ?x3.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. P (Until \\<phi> I \\<psi>)", "by (cases \\<phi>) (auto 0 3 elim!: disjE_Not2 intro: assms)"], ["proof (state)\nthis:\n  P (Until \\<phi> I \\<psi>)\n\ngoal (25 subgoals):\n 1. \\<And>t1 t2. safe_formula (Eq t1 t2) \\<Longrightarrow> P (Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (Eq (Const x) (Const y))) \\<Longrightarrow>\n       P (Neg (Eq (Const x) (Const y)))\n 3. \\<And>x y.\n       safe_formula (Neg (Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (Eq (Var x) (Var y)))\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Or \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (Or \\<phi> \\<psi>)\n 6. \\<And>\\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Exists \\<phi>)\n 7. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Prev I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Prev I \\<phi>)\n 8. \\<And>I \\<phi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula (Next I \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> P (Next I \\<phi>)\n 9. \\<And>va vb.\n       safe_formula (Neg (Pred va vb)) \\<Longrightarrow>\n       P (Neg (Pred va vb))\n 10. \\<And>vc v.\n        safe_formula (Neg (Eq (Var vc) (Const v))) \\<Longrightarrow>\n        P (Neg (Eq (Var vc) (Const v)))\nA total of 25 subgoals...", "qed (auto intro: assms)"], ["", "subsection \\<open>Slicing traces\\<close>"], ["", "qualified"], ["", "primrec matches :: \"'a env \\<Rightarrow> 'a formula \\<Rightarrow> name \\<times> 'a list \\<Rightarrow> bool\" where\n  \"matches v (Pred r ts) e = (r = fst e \\<and> map (eval_trm v) ts = snd e)\"\n| \"matches v (Eq _ _) e = False\"\n| \"matches v (Neg \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Or \\<phi> \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (Exists \\<phi>) e = (\\<exists>z. matches (z # v) \\<phi> e)\"\n| \"matches v (Prev I \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Next I \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Since \\<phi> I \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (Until \\<phi> I \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\""], ["", "lemma matches_fvi_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> matches v \\<phi> e = matches v' \\<phi> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x \\<Longrightarrow>\n    matches v \\<phi> e = matches v' \\<phi> e", "proof (induct \\<phi> arbitrary: v v')"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Pred x1 x2) e = matches v' (Pred x1 x2) e\n 2. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 3. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 4. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 5. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 6. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 7. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "case (Pred n ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Pred n ts). v ! x = v' ! x\n\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Pred x1 x2) e = matches v' (Pred x1 x2) e\n 2. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 3. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 4. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 5. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 6. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 7. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches v (Pred n ts) e = matches v' (Pred n ts) e", "by (simp cong: map_cong eval_trm_fvi_cong[OF Pred[simplified, THEN bspec]])"], ["proof (state)\nthis:\n  matches v (Pred n ts) e = matches v' (Pred n ts) e\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 2. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 3. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 4. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 5. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 6. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 2. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 3. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 4. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 5. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 6. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> e = matches ?v' \\<phi> e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 2. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 3. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 4. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 5. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 6. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> e = matches ?v' \\<phi> e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> e = matches ?v' \\<phi> e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. matches v (Exists \\<phi>) e = matches v' (Exists \\<phi>) e", "unfolding matches.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> e = matches ?v' \\<phi> e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (\\<exists>z. matches (z # v) \\<phi> e) =\n    (\\<exists>z. matches (z # v') \\<phi> e)", "by (intro iff_exI) (simp add: fvi_Suc nth_Cons')"], ["proof (state)\nthis:\n  matches v (Exists \\<phi>) e = matches v' (Exists \\<phi>) e\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 v v'.\n       \\<forall>x\\<in>fv (Eq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Eq x1 x2) e = matches v' (Eq x1 x2) e\n 2. \\<And>\\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 3. \\<And>\\<phi>1 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 4. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 5. \\<And>x1 \\<phi> v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v v'.\n       \\<lbrakk>\\<And>v v'.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v'.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Until \\<phi>1 x2 \\<phi>2) e", "qed (auto 5 0 simp add: nth_Cons')"], ["", "abbreviation relevant_events where \"relevant_events \\<phi> S \\<equiv> {e. S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}}\""], ["", "lemma sat_slice_strong: \"relevant_events \\<phi> S \\<subseteq> E \\<Longrightarrow> v \\<in> S \\<Longrightarrow>\n  sat \\<sigma> v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E; v \\<in> S\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                      sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                       v i \\<phi>", "proof (induction \\<phi> arbitrary: v S i)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Pred x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Pred x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Pred x1 x2)\n 2. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Eq x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Eq x1 x2)\n 3. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 6. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Pred r ts)"], ["proof (state)\nthis:\n  relevant_events (Pred r ts) S \\<subseteq> E\n  v \\<in> S\n\ngoal (9 subgoals):\n 1. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Pred x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Pred x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Pred x1 x2)\n 2. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Eq x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Eq x1 x2)\n 3. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 6. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  relevant_events (Pred r ts) S \\<subseteq> E\n  v \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  relevant_events (Pred r ts) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Pred r ts)", "by (auto simp: subset_eq)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Pred r ts) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Pred r ts)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Eq x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Eq x1 x2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Eq x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Eq x1 x2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Eq t1 t2)"], ["proof (state)\nthis:\n  relevant_events (Eq t1 t2) S \\<subseteq> E\n  v \\<in> S\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 v S i.\n       \\<lbrakk>relevant_events (Eq x1 x2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Eq x1 x2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Eq t1 t2) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Eq t1 t2)", "unfolding sat.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_trm v t1 = eval_trm v t2) = (eval_trm v t1 = eval_trm v t2)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Eq t1 t2) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Eq t1 t2)\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Neg \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Neg \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (7 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Neg \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Neg \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 5. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Neg \\<phi>) S \\<subseteq> E\n  v \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Neg \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Neg \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Neg \\<phi>)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Neg \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Neg \\<phi>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Or \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Or \\<phi> \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (6 subgoals):\n 1. \\<And>\\<phi>1 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Or \\<phi>1 \\<phi>2)\n 2. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 4. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Or \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Or \\<phi> \\<psi>)", "using Or.IH[of S] Or.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Or \\<phi> \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Or \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Or \\<phi> \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Or \\<phi> \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n   (Or \\<phi> \\<psi>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Exists \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "have \"sat \\<sigma> (z # v) i \\<phi> = sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (z # v) i \\<phi>\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> (z # v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (z # v) i \\<phi>", "using Exists.prems"], ["proof (prove)\nusing this:\n  relevant_events (Exists \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> (z # v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (z # v) i \\<phi>", "by (auto intro!: Exists.IH[of \"{z # v | v. v \\<in> S}\"])"], ["proof (state)\nthis:\n  sat \\<sigma> (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (?z # v) i \\<phi>\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Exists \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Exists \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 3. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (?z # v) i \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  sat \\<sigma> (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) (?z # v) i \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Exists \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Exists \\<phi>)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Exists \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Exists \\<phi>)\n\ngoal (4 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Prev I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Prev x1 \\<phi>)\n 2. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 4. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S \\<subseteq> E\n  v \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Prev I \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Prev I \\<phi>)", "by (auto cong: nat.case_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Prev I \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Prev I \\<phi>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Next I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (3 subgoals):\n 1. \\<And>x1 \\<phi> v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S \\<subseteq> E; v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Next x1 \\<phi>)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 3. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S \\<subseteq> E\n  v \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Next I \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Next I \\<phi>)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Next I \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i (Next I \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Since \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Since \\<phi> I \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Since \\<phi>1 x2 \\<phi>2)\n 2. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Since \\<phi> I \\<psi>)", "using Since.IH[of S] Since.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Since \\<phi> I \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Since \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Since \\<phi> I \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Since \\<phi> I \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n   (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "case (Until \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S \\<subseteq> E; ?v \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Until \\<phi> I \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>1 x2 \\<phi>2 v S i.\n       \\<lbrakk>\\<And>v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S \\<subseteq> E;\n                    v \\<in> S\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i \\<phi>1;\n        \\<And>v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S \\<subseteq> E;\n            v \\<in> S\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S \\<subseteq> E;\n        v \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          v i (Until \\<phi>1 x2 \\<phi>2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Until \\<phi> I \\<psi>)", "using Until.IH[of S] Until.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S \\<subseteq> E; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?v ?i \\<psi>\n  relevant_events (Until \\<phi> I \\<psi>) S \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. sat \\<sigma> v i (Until \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n     (Until \\<phi> I \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> v i (Until \\<phi> I \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) v i\n   (Until \\<phi> I \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(*context*)"], ["", "interpretation MFOTL_slicer: abstract_slicer \"relevant_events \\<phi>\" for \\<phi>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma sat_slice_iff:\n  assumes \"v \\<in> S\"\n  shows \"MFOTL.sat \\<sigma> v i \\<phi> \\<longleftrightarrow> MFOTL.sat (MFOTL_slicer.slice \\<phi> S \\<sigma>) v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MFOTL.sat \\<sigma> v i \\<phi> =\n    MFOTL.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     v i \\<phi>", "by (rule sat_slice_strong[of S, OF subset_refl assms])"], ["", "lemma slice_replace_prefix:\n  \"prefix_of (MFOTL_slicer.pslice \\<phi> R \\<pi>) \\<sigma> \\<Longrightarrow>\n    MFOTL_slicer.slice \\<phi> R (replace_prefix \\<pi> \\<sigma>) = MFOTL_slicer.slice \\<phi> R \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix_of\n     (pmap_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> R) \\<pi>)\n     \\<sigma> \\<Longrightarrow>\n    map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> R)\n     (replace_prefix \\<pi> \\<sigma>) =\n    map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> R) \\<sigma>", "by (rule map_\\<Gamma>_replace_prefix) auto"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}