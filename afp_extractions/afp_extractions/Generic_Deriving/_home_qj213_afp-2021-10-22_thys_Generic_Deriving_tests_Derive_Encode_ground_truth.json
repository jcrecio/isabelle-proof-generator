{"file_name": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving/tests/Derive_Encode.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving", "problem_names": ["lemma \"encode (B 3 4) = [True, False, True, True, True, True, True, True, True]\"", "lemma \"encode C = [True, True]\"", "lemma \"encode (R (3::nat)) = [True, True, True, True]\"", "lemma \"encode [1,2,3,4::nat] \n  = [True, True, True, True, True, True, True, True, True, True, True, True, True, True, False]\"", "lemma \"encode (Node (3::nat) (Node 1 Leaf Leaf) (Node 2 Leaf Leaf)) \n  = [True, True, True, True, True, True, False, False, True, True, True, False, False]\"", "lemma \"encode (Odd_Succ (Even_Succ (Odd_Succ Even_Zero))) \n  = [True, False, True, True, False, False]\"", "lemma \"encode (Term (Prod (Const (1::nat)) (Factor (Const (2::nat)))))\n  = [False, False, True, False, True, True, True, False, True, True, False, False, True, True, False, True, True]\""], "translations": [["", "lemma \"encode (B 3 4) = [True, False, True, True, True, True, True, True, True]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode (B 3 4) = [True, False, True, True, True, True, True, True, True]", "by eval"], ["", "lemma \"encode C = [True, True]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode C = [True, True]", "by eval"], ["", "lemma \"encode (R (3::nat)) = [True, True, True, True]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode (R 3) = [True, True, True, True]", "by code_simp"], ["", "(* recursive types *)"], ["", "derive_generic encodeable list"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic encodeable tree"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"encode [1,2,3,4::nat] \n  = [True, True, True, True, True, True, True, True, True, True, True, True, True, True, False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode [1, 2, 3, 4] =\n    [True, True, True, True, True, True, True, True, True, True, True, True,\n     True, True, False]", "by eval"], ["", "lemma \"encode (Node (3::nat) (Node 1 Leaf Leaf) (Node 2 Leaf Leaf)) \n  = [True, True, True, True, True, True, False, False, True, True, True, False, False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode (Node 3 (Node 1 Leaf Leaf) (Node 2 Leaf Leaf)) =\n    [True, True, True, True, True, True, False, False, True, True, True,\n     False, False]", "by eval"], ["", "(* mutually recursive types *)"], ["", "derive_generic encodeable even_nat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic encodeable exp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"encode (Odd_Succ (Even_Succ (Odd_Succ Even_Zero))) \n  = [True, False, True, True, False, False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode (Odd_Succ (Even_Succ (Odd_Succ Even_Zero))) =\n    [True, False, True, True, False, False]", "by eval"], ["", "lemma \"encode (Term (Prod (Const (1::nat)) (Factor (Const (2::nat)))))\n  = [False, False, True, False, True, True, True, False, True, True, False, False, True, True, False, True, True]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode (Term (trm.Prod (Const 1) (Factor (Const 2)))) =\n    [False, False, True, False, True, True, True, False, True, True, False,\n     False, True, True, False, True, True]", "by code_simp"], ["", "end"]]}