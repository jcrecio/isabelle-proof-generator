{"file_name": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving/tests/Derive_Eq_Laws.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving", "problem_names": ["lemma eq_law_eq: \"eq_class_law eq\"", "lemma \"eq (A 4) (A 4)\"", "lemma \"eq (A 6) (A 4) \\<longleftrightarrow> False\"", "lemma \"eq C C\"", "lemma \"eq (B 4 5) (B 4 5)\"", "lemma \"eq (B 4 4) (A 3) \\<longleftrightarrow> False\"", "lemma \"eq C (A 4) \\<longleftrightarrow> False\"", "lemma \"eq (L (3::nat)) (R 3) \\<longleftrightarrow> False\"", "lemma \"eq (L (3::nat)) (L 3)\"", "lemma \"eq (L (3::nat)) (L 4) \\<longleftrightarrow> False\"", "lemma \"eq ([]::(nat list)) []\"", "lemma \"eq ([1,2,3]:: (nat list)) [1,2,3]\"", "lemma \"eq [(1::nat)] [1,2] \\<longleftrightarrow> False\"", "lemma \"eq Leaf Leaf\"", "lemma \"eq (Node (1::nat) Leaf Leaf) Leaf \\<longleftrightarrow> False\"", "lemma \"eq (Node (1::nat) Leaf Leaf) (Node (1::nat) Leaf Leaf)\"", "lemma \"eq (Node (1::nat) (Node 2 Leaf Leaf) (Node 3 Leaf Leaf)) (Node (1::nat) (Node 2 Leaf Leaf) (Node 4 Leaf Leaf)) \n    \\<longleftrightarrow> False\""], "translations": [["", "lemma eq_law_eq: \"eq_class_law eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_class_law eq", "unfolding eq_class_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. eq x x) \\<and>\n    (\\<forall>x y. eq x y \\<longrightarrow> eq y x) \\<and>\n    (\\<forall>x y z.\n        eq x y \\<longrightarrow> eq y z \\<longrightarrow> eq x z)", "using eq_class.axioms"], ["proof (prove)\nusing this:\n  class.eq eq\n\ngoal (1 subgoal):\n 1. (\\<forall>x. eq x x) \\<and>\n    (\\<forall>x y. eq x y \\<longrightarrow> eq y x) \\<and>\n    (\\<forall>x y z.\n        eq x y \\<longrightarrow> eq y z \\<longrightarrow> eq x z)", "unfolding class.eq_def"], ["proof (prove)\nusing this:\n  (\\<forall>x. eq x x) \\<and>\n  (\\<forall>x y. eq x y \\<longrightarrow> eq y x) \\<and>\n  (\\<forall>x y z. eq x y \\<longrightarrow> eq y z \\<longrightarrow> eq x z)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. eq x x) \\<and>\n    (\\<forall>x y. eq x y \\<longrightarrow> eq y x) \\<and>\n    (\\<forall>x y z.\n        eq x y \\<longrightarrow> eq y z \\<longrightarrow> eq x z)", "."], ["", "(* Manual instances for nat, unit, prod, and sum *)"], ["", "instantiation nat and unit :: eq\nbegin"], ["", "definition eq_nat_def : \"eq (x::nat) y \\<longleftrightarrow> x = y\""], ["", "definition eq_unit_def: \"eq (x::unit) y \\<longleftrightarrow> True\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, eq_class) &&& OFCLASS(unit, eq_class)", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 4. \\<And>x. eq x x\n 5. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 6. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "fix x y z :: nat"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 4. \\<And>x. eq x x\n 5. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 6. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "unfolding eq_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = x", "by simp"], ["proof (state)\nthis:\n  eq x x\n\ngoal (5 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 3. \\<And>x. eq x x\n 4. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 5. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x y \\<Longrightarrow> eq y x", "unfolding eq_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> y = x", "by simp"], ["proof (state)\nthis:\n  eq x y \\<Longrightarrow> eq y x\n\ngoal (4 subgoals):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 2. \\<And>x. eq x x\n 3. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 4. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y z \\<Longrightarrow> eq x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "unfolding eq_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; y = z\\<rbrakk> \\<Longrightarrow> x = z", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "fix x y z :: unit"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "unfolding eq_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. True", "by simp"], ["proof (state)\nthis:\n  eq x x\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x y \\<Longrightarrow> eq y x", "unfolding eq_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. True \\<Longrightarrow> True", "by simp"], ["proof (state)\nthis:\n  eq x y \\<Longrightarrow> eq y x\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y z \\<Longrightarrow> eq x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "unfolding eq_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>True; True\\<rbrakk> \\<Longrightarrow> True", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation prod and sum :: (eq, eq) eq\nbegin"], ["", "definition eq_prod_def: \"eq x y \\<longleftrightarrow> (eq (fst x) (fst y)) \\<and> (eq (snd x) (snd y))\""], ["", "definition eq_sum_def: \"eq x y = (case x of Inl a \\<Rightarrow> (case y of Inl b \\<Rightarrow> eq a b | Inr b \\<Rightarrow> False)\n                                            | Inr a \\<Rightarrow> (case y of Inl b \\<Rightarrow> False | Inr b \\<Rightarrow> eq a b))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<times> 'b, eq_class) &&& OFCLASS('a + 'b, eq_class)", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 4. \\<And>x. eq x x\n 5. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 6. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "fix x y z :: \"('a::eq) \\<times> ('b::eq)\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 4. \\<And>x. eq x x\n 5. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 6. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "unfolding eq_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (fst x) (fst x) \\<and> eq (snd x) (snd x)", "by (simp add: eq_class.refl)"], ["proof (state)\nthis:\n  eq x x\n\ngoal (5 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 3. \\<And>x. eq x x\n 4. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 5. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x y \\<Longrightarrow> eq y x", "unfolding eq_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (fst x) (fst y) \\<and> eq (snd x) (snd y) \\<Longrightarrow>\n    eq (fst y) (fst x) \\<and> eq (snd y) (snd x)", "by (simp add: eq_class.sym)"], ["proof (state)\nthis:\n  eq x y \\<Longrightarrow> eq y x\n\ngoal (4 subgoals):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n 2. \\<And>x. eq x x\n 3. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 4. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y z \\<Longrightarrow> eq x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "unfolding eq_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq (fst x) (fst y) \\<and> eq (snd x) (snd y);\n     eq (fst y) (fst z) \\<and> eq (snd y) (snd z)\\<rbrakk>\n    \\<Longrightarrow> eq (fst x) (fst z) \\<and> eq (snd x) (snd z)", "by (meson eq_class.trans)"], ["proof (state)\nthis:\n  \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "fix x y z :: \"('a::eq) + ('b::eq)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "unfolding eq_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case x of\n    Inl a \\<Rightarrow>\n      case x of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n    | Inr a \\<Rightarrow>\n        case x of Inl b \\<Rightarrow> False | Inr x \\<Rightarrow> eq a x", "by (simp add: sum.case_eq_if eq_class.refl)"], ["proof (state)\nthis:\n  eq x x\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x y \\<Longrightarrow> eq y x", "unfolding eq_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case x of\n    Inl a \\<Rightarrow>\n      case y of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n    | Inr a \\<Rightarrow>\n        case y of Inl b \\<Rightarrow> False\n        | Inr x \\<Rightarrow> eq a x \\<Longrightarrow>\n    case y of\n    Inl a \\<Rightarrow>\n      case x of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n    | Inr a \\<Rightarrow>\n        case x of Inl b \\<Rightarrow> False | Inr x \\<Rightarrow> eq a x", "by (metis eq_class.sym sum.case_eq_if)"], ["proof (state)\nthis:\n  eq x y \\<Longrightarrow> eq y x\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "show \"eq x y \\<Longrightarrow> eq y z \\<Longrightarrow> eq x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "unfolding eq_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case x of\n             Inl a \\<Rightarrow>\n               case y of Inl x \\<Rightarrow> eq a x\n               | Inr b \\<Rightarrow> False\n             | Inr a \\<Rightarrow>\n                 case y of Inl b \\<Rightarrow> False\n                 | Inr x \\<Rightarrow> eq a x;\n     case y of\n     Inl a \\<Rightarrow>\n       case z of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n     | Inr a \\<Rightarrow>\n         case z of Inl b \\<Rightarrow> False\n         | Inr x \\<Rightarrow> eq a x\\<rbrakk>\n    \\<Longrightarrow> case x of\n                      Inl a \\<Rightarrow>\n                        case z of Inl x \\<Rightarrow> eq a x\n                        | Inr b \\<Rightarrow> False\n                      | Inr a \\<Rightarrow>\n                          case z of Inl b \\<Rightarrow> False\n                          | Inr x \\<Rightarrow> eq a x", "apply (simp only: sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z)\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)", "apply (cases \"isl x\"; cases \"isl y\"; cases \"isl z\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     isl x; isl y; isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 2. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     isl x; isl y; \\<not> isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 3. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     isl x; \\<not> isl y; isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 4. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     isl x; \\<not> isl y; \\<not> isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 5. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     \\<not> isl x; isl y; isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 6. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     \\<not> isl x; isl y; \\<not> isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 7. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     \\<not> isl x; \\<not> isl y; isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)\n 8. \\<lbrakk>if isl x then if isl y then eq (projl x) (projl y) else False\n             else if isl y then False else eq (projr x) (projr y);\n     if isl y then if isl z then eq (projl y) (projl z) else False\n     else if isl z then False else eq (projr y) (projr z);\n     \\<not> isl x; \\<not> isl y; \\<not> isl z\\<rbrakk>\n    \\<Longrightarrow> if isl x\n                      then if isl z then eq (projl x) (projl z) else False\n                      else if isl z then False else eq (projr x) (projr z)", "by (auto simp add: eq_class.trans)"], ["proof (state)\nthis:\n  \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* nonrecursive test *)"], ["", "derive_generic eq simple"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* some tests *)"], ["", "lemma \"eq (A 4) (A 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (A 4) (A 4)", "by eval"], ["", "lemma \"eq (A 6) (A 4) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (A 6) (A 4) = False", "by eval"], ["", "lemma \"eq C C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq C C", "by eval"], ["", "lemma \"eq (B 4 5) (B 4 5)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (B 4 5) (B 4 5)", "by eval"], ["", "lemma \"eq (B 4 4) (A 3) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (B 4 4) (A 3) = False", "by eval"], ["", "lemma \"eq C (A 4) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq C (A 4) = False", "by eval"], ["", "(* type with parameter *)"], ["", "derive_generic eq either"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"eq (L (3::nat)) (R 3) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (L 3) (R (3::'a)) = False", "by code_simp"], ["", "lemma \"eq (L (3::nat)) (L 3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (L 3) (L 3)", "by code_simp"], ["", "lemma \"eq (L (3::nat)) (L 4) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (L 3) (L 4) = False", "by code_simp"], ["", "(* recursive types *)"], ["", "derive_generic eq list"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. eq x x) &&&\n    (\\<And>x y. eq x y \\<Longrightarrow> eq y x) &&&\n    (\\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z)", "proof goal_cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "proof (induction x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (\\<And>xaa xaaa.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa xaaa) \\<Longrightarrow>\n       eq (In xa) (In xa)", "case (In y)"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y;\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?xaaa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (\\<And>xaa xaaa.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa xaaa) \\<Longrightarrow>\n       eq (In xa) (In xa)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y;\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?xaaa", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y;\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?xaaa\n\ngoal (1 subgoal):\n 1. eq (In y) (In y)", "apply(cases y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa xaaa;\n        y = Inl a\\<rbrakk>\n       \\<Longrightarrow> eq (In y) (In y)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa xaaa;\n        y = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (In y) (In y)", "by (auto simp add: Derive_Eq_Laws.eq_mulistF.simps eq_unit_def eq_class.refl)"], ["proof (state)\nthis:\n  eq (In y) (In y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq x x\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (2 x y)"], ["proof (state)\nthis:\n  eq x y\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:\n  eq x y", "show ?case"], ["proof (prove)\nusing this:\n  eq x y\n\ngoal (1 subgoal):\n 1. eq y x", "proof (induction y arbitrary: x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa x.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq x (In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (In xa) x", "case (In y)"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?x ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?x\n  eq x (In y)\n\ngoal (1 subgoal):\n 1. \\<And>xa x.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq x (In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (In xa) x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?x ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?x\n  eq x (In y)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?x ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?x\n  eq x (In y)\n\ngoal (1 subgoal):\n 1. eq (In y) x", "apply(cases x; cases y; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inl a));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inl a));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inl a))\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inl a)) (In x)\n 2. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In x)", "apply (simp add: Derive_Eq_Laws.eq_mulistF.simps sum.case_eq_if eq_unit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>if isl x\n                then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inl () of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (snd (projr x)) (snd y);\n        if isl x\n        then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inl () of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y);\n        if isl x\n        then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inl () of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y)\\<rbrakk>\n       \\<Longrightarrow> isl x\n 2. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In x)", "apply(metis old.sum.simps(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In x)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa x.\n                   \\<lbrakk>xaa\n                            \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                                   | Inr z \\<Rightarrow> {z});\n                    xaaa \\<in> {snd xaa}; eq x xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b));\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; eq x xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa x;\n        eq (In x) (In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In x)", "apply (simp add: Derive_Eq_Laws.eq_mulistF.simps sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>if isl x\n                then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inr b of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (snd (projr x)) (snd y);\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y);\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa = b; xaaa = snd b; eq x (snd b)\\<rbrakk>\n           \\<Longrightarrow> eq (snd b) x;\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isl x \\<and>\n                         (\\<not> isl x \\<longrightarrow>\n                          eq (fst b) (fst (projr x)) \\<and>\n                          eq (snd b) (snd (projr x)))", "using eq_class.sym"], ["proof (prove)\nusing this:\n  eq ?x ?y \\<Longrightarrow> eq ?y ?x\n\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>if isl x\n                then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inr b of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (snd (projr x)) (snd y);\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y);\n        \\<And>xaa xaaa x.\n           \\<lbrakk>xaa = b; xaaa = snd b; eq x (snd b)\\<rbrakk>\n           \\<Longrightarrow> eq (snd b) x;\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isl x \\<and>\n                         (\\<not> isl x \\<longrightarrow>\n                          eq (fst b) (fst (projr x)) \\<and>\n                          eq (snd b) (snd (projr x)))", "by fastforce"], ["proof (state)\nthis:\n  eq (In y) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq y x\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (3 x y z)"], ["proof (state)\nthis:\n  eq x y\n  eq y z\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:\n  eq x y\n  eq y z", "show ?case"], ["proof (prove)\nusing this:\n  eq x y\n  eq y z\n\ngoal (1 subgoal):\n 1. eq x z", "proof (induction x arbitrary: y z)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In xa) y; eq y z\\<rbrakk>\n       \\<Longrightarrow> eq (In xa) z", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?xaaa ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?z\n  eq (In x') y\n  eq y z\n\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In xa) y; eq y z\\<rbrakk>\n       \\<Longrightarrow> eq (In xa) z", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?xaaa ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?z\n  eq (In x') y\n  eq y z", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   eq ?xaaa ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa ?z\n  eq (In x') y\n  eq y z\n\ngoal (1 subgoal):\n 1. eq (In x') z", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In x') y; eq y z; x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> eq (In x') z\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (In x') z", "apply (cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x xa.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In (Inl a)) (In x); eq (In x) (In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inl a)) (In xa)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (In x') z", "apply (simp add: Derive_Eq_Laws.eq_mulistF.simps sum.case_eq_if eq_unit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>if isl x then eq (projl (Inl ())) (projl x) else False;\n        if isl x\n        then case xa of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case xa of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (snd (projr x)) (snd y)\\<rbrakk>\n       \\<Longrightarrow> isl xa\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (In x') z", "apply (metis sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (In x') z", "apply(cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa; eq xaaa y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In (Inr b)) (In x); eq (In x) (In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In xa)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa\n                            \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                                   | Inr z \\<Rightarrow> {z});\n                    xaaa \\<in> {snd xaa}; eq xaaa y; eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa z;\n        eq (In (Inr b)) (In x); eq (In x) (In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (In (Inr b)) (In xa)", "apply (simp add: Derive_Eq_Laws.eq_mulistF.simps eq_unit_def snds.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa = b; xaaa = snd b; eq (snd b) y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq (snd b) z;\n        case x of Inl b \\<Rightarrow> False\n        | Inr y \\<Rightarrow> eq (fst b) (fst y) \\<and> eq (snd b) (snd y);\n        case x of\n        Inl a \\<Rightarrow>\n          case xa of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n        | Inr a \\<Rightarrow>\n            case xa of Inl b \\<Rightarrow> False\n            | Inr y \\<Rightarrow>\n                eq (fst a) (fst y) \\<and> eq (snd a) (snd y)\\<rbrakk>\n       \\<Longrightarrow> case xa of Inl b \\<Rightarrow> False\n                         | Inr y \\<Rightarrow>\n                             eq (fst b) (fst y) \\<and> eq (snd b) (snd y)", "apply (simp only: sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa = b; xaaa = snd b; eq (snd b) y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq (snd b) z;\n        if isl x then False\n        else eq (fst b) (fst (projr x)) \\<and> eq (snd b) (snd (projr x));\n        if isl x then if isl xa then eq (projl x) (projl xa) else False\n        else if isl xa then False\n             else eq (fst (projr x)) (fst (projr xa)) \\<and>\n                  eq (snd (projr x)) (snd (projr xa))\\<rbrakk>\n       \\<Longrightarrow> if isl xa then False\n                         else eq (fst b) (fst (projr xa)) \\<and>\n                              eq (snd b) (snd (projr xa))", "by (meson eq_class.trans)"], ["proof (state)\nthis:\n  eq (In x') z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq x z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"eq ([]::(nat list)) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq [] []", "by eval"], ["", "lemma \"eq ([1,2,3]:: (nat list)) [1,2,3]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq [1, 2, 3] [1, 2, 3]", "by eval"], ["", "lemma \"eq [(1::nat)] [1,2] \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq [1] [1, 2] = False", "by eval"], ["", "derive_generic eq tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. eq x x) &&&\n    (\\<And>x y. eq x y \\<Longrightarrow> eq y x) &&&\n    (\\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z)", "proof goal_cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x. eq x x\n 2. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 3. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x x", "proof (induction x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 xaaa2\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) (mutreeF.In xa)", "case (In y)"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?xaaa2.0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 xaaa2\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) (mutreeF.In xa)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?xaaa2.0", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?xaaa2.0\n\ngoal (1 subgoal):\n 1. eq (mutreeF.In y) (mutreeF.In y)", "apply(cases y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 xaaa2;\n        y = Inl a\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In y) (mutreeF.In y)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr y;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 xaaa2;\n        y = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In y) (mutreeF.In y)", "by (auto simp add: Derive_Eq_Laws.eq_mutreeF.simps eq_unit_def eq_class.refl)"], ["proof (state)\nthis:\n  eq (mutreeF.In y) (mutreeF.In y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq x x\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (2 x y)"], ["proof (state)\nthis:\n  eq x y\n\ngoal (2 subgoals):\n 1. \\<And>x y. eq x y \\<Longrightarrow> eq y x\n 2. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:\n  eq x y", "show ?case"], ["proof (prove)\nusing this:\n  eq x y\n\ngoal (1 subgoal):\n 1. eq y x", "proof (induction y arbitrary: x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa x.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq x (mutreeF.In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) x", "case (In y)"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?x ?xaaa1.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?x\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?x ?xaaa2.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?x\n  eq x (mutreeF.In y)\n\ngoal (1 subgoal):\n 1. \\<And>xa x.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq x (mutreeF.In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?x ?xaaa1.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?x\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?x ?xaaa2.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?x\n  eq x (mutreeF.In y)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?x ?xaaa1.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?x\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr y; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?x ?xaaa2.0\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?x\n  eq x (mutreeF.In y)\n\ngoal (1 subgoal):\n 1. eq (mutreeF.In y) x", "apply(cases x; cases y; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inl a));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inl a));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inl a))\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inl a)) (mutreeF.In x)\n 2. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In x)", "apply (simp add: Derive_Eq_Laws.eq_mutreeF.simps sum.case_eq_if eq_unit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>if isl x\n                then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inl () of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                         eq (snd (snd (projr x))) (snd (snd y));\n        if isl x\n        then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inl () of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y));\n        if isl x\n        then case Inl () of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inl () of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y))\\<rbrakk>\n       \\<Longrightarrow> isl x\n 2. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In x)", "apply(metis old.sum.simps(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In x)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 x.\n                   \\<lbrakk>xaa\n                            \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                                   | Inr z \\<Rightarrow> {z});\n                    xaaa \\<in> {snd xaa}; xaaa1 \\<in> {fst xaaa};\n                    eq x xaaa1\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa2 \\<in> {snd xaaa};\n            eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa1 \\<in> {fst xaaa};\n            eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa2 \\<in> {snd xaaa};\n            eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa1 \\<in> {fst xaaa};\n            eq x xaaa1\\<rbrakk>\n           \\<Longrightarrow> eq xaaa1 x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa2 \\<in> {snd xaaa};\n            eq x xaaa2\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 x;\n        eq (mutreeF.In x) (mutreeF.In (Inr b))\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In x)", "apply (simp add: Derive_Eq_Laws.eq_mutreeF.simps sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>if isl x\n                then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inr b of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                         eq (snd (snd (projr x))) (snd (snd y));\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa1 = fst (snd b);\n            eq x (fst (snd b))\\<rbrakk>\n           \\<Longrightarrow> eq (fst (snd b)) x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa2 = snd (snd b);\n            eq x (snd (snd b))\\<rbrakk>\n           \\<Longrightarrow> eq (snd (snd b)) x;\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y))\\<rbrakk>\n       \\<Longrightarrow> \\<not> isl x \\<and>\n                         (\\<not> isl x \\<longrightarrow>\n                          eq (fst b) (fst (projr x)) \\<and>\n                          eq (fst (snd b)) (fst (snd (projr x))) \\<and>\n                          eq (snd (snd b)) (snd (snd (projr x))))", "using eq_class.sym"], ["proof (prove)\nusing this:\n  eq ?x ?y \\<Longrightarrow> eq ?y ?x\n\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>if isl x\n                then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n                     | Inr b \\<Rightarrow> False\n                else case Inr b of Inl b \\<Rightarrow> False\n                     | Inr y \\<Rightarrow>\n                         eq (fst (projr x)) (fst y) \\<and>\n                         eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                         eq (snd (snd (projr x))) (snd (snd y));\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y));\n        \\<And>xaa xaaa xaaa1 x.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa1 = fst (snd b);\n            eq x (fst (snd b))\\<rbrakk>\n           \\<Longrightarrow> eq (fst (snd b)) x;\n        \\<And>xaa xaaa xaaa2 x.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa2 = snd (snd b);\n            eq x (snd (snd b))\\<rbrakk>\n           \\<Longrightarrow> eq (snd (snd b)) x;\n        if isl x\n        then case Inr b of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case Inr b of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y))\\<rbrakk>\n       \\<Longrightarrow> \\<not> isl x \\<and>\n                         (\\<not> isl x \\<longrightarrow>\n                          eq (fst b) (fst (projr x)) \\<and>\n                          eq (fst (snd b)) (fst (snd (projr x))) \\<and>\n                          eq (snd (snd b)) (snd (snd (projr x))))", "by fastforce"], ["proof (state)\nthis:\n  eq (mutreeF.In y) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq y x\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "case (3 x y z)"], ["proof (state)\nthis:\n  eq x y\n  eq y z\n\ngoal (1 subgoal):\n 1. \\<And>x y z. \\<lbrakk>eq x y; eq y z\\<rbrakk> \\<Longrightarrow> eq x z", "then"], ["proof (chain)\npicking this:\n  eq x y\n  eq y z", "show ?case"], ["proof (prove)\nusing this:\n  eq x y\n  eq y z\n\ngoal (1 subgoal):\n 1. eq x z", "proof (induction x arbitrary: y z)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In xa) y; eq y z\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) z", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?xaaa1.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?z\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?xaaa2.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?z\n  eq (mutreeF.In x') y\n  eq y z\n\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In xa) y; eq y z\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In xa) z", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?xaaa1.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?z\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?xaaa2.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?z\n  eq (mutreeF.In x') y\n  eq y z", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa; eq ?xaaa1.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa1.0 ?z\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa; eq ?xaaa2.0 ?y; eq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> eq ?xaaa2.0 ?z\n  eq (mutreeF.In x') y\n  eq y z\n\ngoal (1 subgoal):\n 1. eq (mutreeF.In x') z", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In x') y; eq y z; x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In x') z\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In x') z", "apply (cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In (Inl a)) (mutreeF.In x);\n        eq (mutreeF.In x) (mutreeF.In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inl a)) (mutreeF.In xa)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In x') z", "apply (simp add: Derive_Eq_Laws.eq_mutreeF.simps sum.case_eq_if eq_unit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>if isl x then eq (projl (Inl ())) (projl x) else False;\n        if isl x\n        then case xa of Inl xa \\<Rightarrow> eq (projl x) xa\n             | Inr b \\<Rightarrow> False\n        else case xa of Inl b \\<Rightarrow> False\n             | Inr y \\<Rightarrow>\n                 eq (fst (projr x)) (fst y) \\<and>\n                 eq (fst (snd (projr x))) (fst (snd y)) \\<and>\n                 eq (snd (snd (projr x))) (snd (snd y))\\<rbrakk>\n       \\<Longrightarrow> isl xa\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In x') z", "apply (metis sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In x') y; eq y z; x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In x') z", "apply(cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa; eq xaaa1 y;\n                    eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa; eq xaaa2 y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In (Inr b)) (mutreeF.In x);\n        eq (mutreeF.In x) (mutreeF.In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In xa)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa\n                            \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                                   | Inr z \\<Rightarrow> {z});\n                    xaaa \\<in> {snd xaa}; xaaa1 \\<in> {fst xaaa};\n                    eq xaaa1 y; eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq xaaa1 z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa2 \\<in> {snd xaaa}; eq xaaa2 y;\n            eq y z\\<rbrakk>\n           \\<Longrightarrow> eq xaaa2 z;\n        eq (mutreeF.In (Inr b)) (mutreeF.In x);\n        eq (mutreeF.In x) (mutreeF.In xa)\\<rbrakk>\n       \\<Longrightarrow> eq (mutreeF.In (Inr b)) (mutreeF.In xa)", "apply (simp add: Derive_Eq_Laws.eq_mutreeF.simps eq_unit_def snds.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa = b; xaaa = snd b; xaaa1 = fst (snd b);\n                    eq (fst (snd b)) y; eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq (fst (snd b)) z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa2 = snd (snd b);\n            eq (snd (snd b)) y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq (snd (snd b)) z;\n        case x of Inl b \\<Rightarrow> False\n        | Inr y \\<Rightarrow>\n            eq (fst b) (fst y) \\<and>\n            eq (fst (snd b)) (fst (snd y)) \\<and>\n            eq (snd (snd b)) (snd (snd y));\n        case x of\n        Inl a \\<Rightarrow>\n          case xa of Inl x \\<Rightarrow> eq a x | Inr b \\<Rightarrow> False\n        | Inr a \\<Rightarrow>\n            case xa of Inl b \\<Rightarrow> False\n            | Inr y \\<Rightarrow>\n                eq (fst a) (fst y) \\<and>\n                eq (fst (snd a)) (fst (snd y)) \\<and>\n                eq (snd (snd a)) (snd (snd y))\\<rbrakk>\n       \\<Longrightarrow> case xa of Inl b \\<Rightarrow> False\n                         | Inr y \\<Rightarrow>\n                             eq (fst b) (fst y) \\<and>\n                             eq (fst (snd b)) (fst (snd y)) \\<and>\n                             eq (snd (snd b)) (snd (snd y))", "apply (simp only: sum.case_eq_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa = b; xaaa = snd b; xaaa1 = fst (snd b);\n                    eq (fst (snd b)) y; eq y z\\<rbrakk>\n                   \\<Longrightarrow> eq (fst (snd b)) z;\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa2 = snd (snd b);\n            eq (snd (snd b)) y; eq y z\\<rbrakk>\n           \\<Longrightarrow> eq (snd (snd b)) z;\n        if isl x then False\n        else eq (fst b) (fst (projr x)) \\<and>\n             eq (fst (snd b)) (fst (snd (projr x))) \\<and>\n             eq (snd (snd b)) (snd (snd (projr x)));\n        if isl x then if isl xa then eq (projl x) (projl xa) else False\n        else if isl xa then False\n             else eq (fst (projr x)) (fst (projr xa)) \\<and>\n                  eq (fst (snd (projr x))) (fst (snd (projr xa))) \\<and>\n                  eq (snd (snd (projr x))) (snd (snd (projr xa)))\\<rbrakk>\n       \\<Longrightarrow> if isl xa then False\n                         else eq (fst b) (fst (projr xa)) \\<and>\n                              eq (fst (snd b)) (fst (snd (projr xa))) \\<and>\n                              eq (snd (snd b)) (snd (snd (projr xa)))", "by (meson eq_class.trans)"], ["proof (state)\nthis:\n  eq (mutreeF.In x') z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq x z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"eq Leaf Leaf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq Leaf Leaf", "by code_simp"], ["", "lemma \"eq (Node (1::nat) Leaf Leaf) Leaf \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (Node 1 Leaf Leaf) Leaf = False", "by eval"], ["", "lemma \"eq (Node (1::nat) Leaf Leaf) (Node (1::nat) Leaf Leaf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (Node 1 Leaf Leaf) (Node 1 Leaf Leaf)", "by eval"], ["", "lemma \"eq (Node (1::nat) (Node 2 Leaf Leaf) (Node 3 Leaf Leaf)) (Node (1::nat) (Node 2 Leaf Leaf) (Node 4 Leaf Leaf)) \n    \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (Node 1 (Node 2 Leaf Leaf) (Node 3 Leaf Leaf))\n     (Node 1 (Node 2 Leaf Leaf) (Node 4 Leaf Leaf)) =\n    False", "by eval"], ["", "end"]]}