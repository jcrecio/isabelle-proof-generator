{"file_name": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving/tests/Derive_Algebra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving", "problem_names": ["lemma \"(B \\<one> 6) \\<otimes> (B 4 5) = B 4 11\"", "lemma \"(A 2) \\<otimes> (A 3) = A 5\"", "lemma \"(B \\<one> 6) \\<otimes> \\<one> = B 0 6\"", "lemma \"(L 3) \\<otimes> ((L 4)::(nat,nat) either) = L 7\"", "lemma \"(R (2::nat)) \\<otimes> (L (3::nat)) = R 2\"", "lemma \"[1,2,3,4::nat] \\<otimes> [1,2,3] = [2,4,6,4]\"", "lemma \"inverse [1,2,3::nat] = [0,0,0]\"", "lemma \"(Odd_Succ (Even_Succ (Odd_Succ Even_Zero))) \\<otimes> (Odd_Succ Even_Zero) \n       = Odd_Succ (Even_Succ (Odd_Succ Even_Zero))\"", "lemma \"inverse (Odd_Succ Even_Zero) = Odd_Succ Even_Zero\"", "lemma \"(Term (Prod ((Const 1)::(nat, nat) fct) (Factor (Const (2::nat))))) \n    \\<otimes> (Term (Prod (Const (2::nat)) (Factor ((Const 2)::(nat, nat) fct))))\n    = Term (Prod (Const 3) (Factor (Const 4)))\""], "translations": [["", "lemma \"(B \\<one> 6) \\<otimes> (B 4 5) = B 4 11\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<one> 6 \\<otimes> B 4 5 = B 4 11", "by eval"], ["", "lemma \"(A 2) \\<otimes> (A 3) = A 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A 2 \\<otimes> A 3 = A 5", "by eval"], ["", "lemma \"(B \\<one> 6) \\<otimes> \\<one> = B 0 6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<one> 6 \\<otimes> \\<one> = B 0 6", "by eval"], ["", "(* type with parameter *)"], ["", "derive_generic group either"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"(L 3) \\<otimes> ((L 4)::(nat,nat) either) = L 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L 3 \\<otimes> L 4 = L 7", "by eval"], ["", "lemma \"(R (2::nat)) \\<otimes> (L (3::nat)) = R 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R 2 \\<otimes> L 3 = R 2", "by eval"], ["", "(* recursive types *)"], ["", "derive_generic semigroup list"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic monoidl list"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic group list"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic semigroup tree"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic monoidl tree"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic group tree"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"[1,2,3,4::nat] \\<otimes> [1,2,3] = [2,4,6,4]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [1, 2, 3, 4] \\<otimes> [1, 2, 3] = [2, 4, 6, 4]", "by eval"], ["", "lemma \"inverse [1,2,3::nat] = [0,0,0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_class.inverse [1, 2, 3] = [0, 0, 0]", "by eval"], ["", "(* mutually recursive types *)"], ["", "derive_generic semigroup even_nat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic monoidl even_nat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic group even_nat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic semigroup exp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "(* instantiate monoidl manually *)"], ["", "instantiation exp and trm and fct  :: (monoidl,monoidl) monoidl \nbegin"], ["", "definition neutral_fct where \"neutral_fct = Const neutral\""], ["", "definition neutral_trm where \"neutral_trm = Factor neutral\""], ["", "definition neutral_exp where \"neutral_exp = Term neutral\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) exp, monoidl_class) &&&\n    OFCLASS(('a, 'b) trm, monoidl_class) &&&\n    OFCLASS(('a, 'b) fct, monoidl_class)", ".."], ["", "end"], ["", "(* Manually defined instances need to be added to the theory context *)"], ["", "setup \\<open>\n(Derive.add_inst_info \\<^class>\\<open>monoidl\\<close> \\<^type_name>\\<open>fct\\<close> [@{thm neutral_fct_def}]) #>\n(Derive.add_inst_info \\<^class>\\<open>monoidl\\<close> \\<^type_name>\\<open>trm\\<close> [@{thm neutral_trm_def}]) #>\n(Derive.add_inst_info \\<^class>\\<open>monoidl\\<close> \\<^type_name>\\<open>exp\\<close> [@{thm neutral_exp_def}])\n\\<close>"], ["", "derive_generic group exp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"(Odd_Succ (Even_Succ (Odd_Succ Even_Zero))) \\<otimes> (Odd_Succ Even_Zero) \n       = Odd_Succ (Even_Succ (Odd_Succ Even_Zero))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Odd_Succ (Even_Succ (Odd_Succ Even_Zero)) \\<otimes> Odd_Succ Even_Zero =\n    Odd_Succ (Even_Succ (Odd_Succ Even_Zero))", "by eval"], ["", "lemma \"inverse (Odd_Succ Even_Zero) = Odd_Succ Even_Zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_class.inverse (Odd_Succ Even_Zero) = Odd_Succ Even_Zero", "by eval"], ["", "lemma \"(Term (Prod ((Const 1)::(nat, nat) fct) (Factor (Const (2::nat))))) \n    \\<otimes> (Term (Prod (Const (2::nat)) (Factor ((Const 2)::(nat, nat) fct))))\n    = Term (Prod (Const 3) (Factor (Const 4)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Term (trm.Prod (Const 1) (Factor (Const 2))) \\<otimes>\n    Term (trm.Prod (Const 2) (Factor (Const 2))) =\n    Term (trm.Prod (Const 3) (Factor (Const 4)))", "by eval"], ["", "end"]]}