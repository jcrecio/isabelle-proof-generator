{"file_name": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving/tests/Derive_Algebra_Laws.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Generic_Deriving", "problem_names": ["lemma transfer_semigroup:\n  assumes \"Derive.iso f g\"\n  shows \"semigroup_law MULT \\<Longrightarrow> semigroup_law (\\<lambda>x y. g (MULT (f x) (f y)))\"", "lemma transfer_monoidl:\n  assumes \"Derive.iso f g\"\n  shows \"monoidl_law NEUTRAL MULT \\<Longrightarrow> monoidl_law (g NEUTRAL) (\\<lambda>x y. g (MULT (f x) (f y)))\"", "lemma transfer_group:\n  assumes \"Derive.iso f g\"\n  shows \"group_law INVERSE NEUTRAL MULT \\<Longrightarrow> group_law (\\<lambda> x. g (INVERSE (f x))) (g NEUTRAL) (\\<lambda>x y. g (MULT (f x) (f y)))\"", "lemma semigroup_law_semigroup: \"semigroup_law mult\"", "lemma monoidl_law_monoidl: \"monoidl_law neutral mult\"", "lemma group_law_group: \"group_law inverse neutral mult\"", "lemma \"(B \\<one> 6) \\<otimes> (B 4 5) = B 4 11\"", "lemma \"(A 2) \\<otimes> (A 3) = A 5\"", "lemma \"(B \\<one> 6) \\<otimes> \\<one> = B 0 6\"", "lemma \"(L 3) \\<otimes> ((L 4)::(int,int) either) = L 7\"", "lemma \"(R (2::int)) \\<otimes> (L (3::int)) = R 2\"", "lemma \"[1,2,3,4::int] \\<otimes> [1,2,3] = [2,4,6,4]\"", "lemma \"(Node (3::int) Leaf Leaf) \\<otimes> (Node (1::int) Leaf Leaf) = (Node 4 Leaf Leaf)\""], "translations": [["", "lemma transfer_semigroup:\n  assumes \"Derive.iso f g\"\n  shows \"semigroup_law MULT \\<Longrightarrow> semigroup_law (\\<lambda>x y. g (MULT (f x) (f y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup_law MULT \\<Longrightarrow>\n    semigroup_law (\\<lambda>x y. g (MULT (f x) (f y)))", "unfolding semigroup_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z. MULT (MULT x y) z = MULT x (MULT y z) \\<Longrightarrow>\n    \\<forall>x y z.\n       g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n       g (MULT (f x) (f (g (MULT (f y) (f z)))))", "using assms"], ["proof (prove)\nusing this:\n  Derive.iso f g\n\ngoal (1 subgoal):\n 1. \\<forall>x y z. MULT (MULT x y) z = MULT x (MULT y z) \\<Longrightarrow>\n    \\<forall>x y z.\n       g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n       g (MULT (f x) (f (g (MULT (f y) (f z)))))", "unfolding Derive.iso_def"], ["proof (prove)\nusing this:\n  (\\<forall>a. g (f a) = a) \\<and> (\\<forall>b. f (g b) = b)\n\ngoal (1 subgoal):\n 1. \\<forall>x y z. MULT (MULT x y) z = MULT x (MULT y z) \\<Longrightarrow>\n    \\<forall>x y z.\n       g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n       g (MULT (f x) (f (g (MULT (f y) (f z)))))", "by simp"], ["", "lemma transfer_monoidl:\n  assumes \"Derive.iso f g\"\n  shows \"monoidl_law NEUTRAL MULT \\<Longrightarrow> monoidl_law (g NEUTRAL) (\\<lambda>x y. g (MULT (f x) (f y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoidl_law NEUTRAL MULT \\<Longrightarrow>\n    monoidl_law (g NEUTRAL) (\\<lambda>x y. g (MULT (f x) (f y)))", "unfolding monoidl_law_def semigroup_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "using assms"], ["proof (prove)\nusing this:\n  Derive.iso f g\n\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "unfolding Derive.iso_def"], ["proof (prove)\nusing this:\n  (\\<forall>a. g (f a) = a) \\<and> (\\<forall>b. f (g b) = b)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "by simp"], ["", "lemma transfer_group:\n  assumes \"Derive.iso f g\"\n  shows \"group_law INVERSE NEUTRAL MULT \\<Longrightarrow> group_law (\\<lambda> x. g (INVERSE (f x))) (g NEUTRAL) (\\<lambda>x y. g (MULT (f x) (f y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_law INVERSE NEUTRAL MULT \\<Longrightarrow>\n    group_law (\\<lambda>x. g (INVERSE (f x))) (g NEUTRAL)\n     (\\<lambda>x y. g (MULT (f x) (f y)))", "unfolding group_law_def monoidl_law_def semigroup_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT (INVERSE x) x = NEUTRAL) \\<and>\n    (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g (INVERSE (f x)))) (f x)) = g NEUTRAL) \\<and>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "using assms"], ["proof (prove)\nusing this:\n  Derive.iso f g\n\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT (INVERSE x) x = NEUTRAL) \\<and>\n    (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g (INVERSE (f x)))) (f x)) = g NEUTRAL) \\<and>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "unfolding Derive.iso_def"], ["proof (prove)\nusing this:\n  (\\<forall>a. g (f a) = a) \\<and> (\\<forall>b. f (g b) = b)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. MULT (INVERSE x) x = NEUTRAL) \\<and>\n    (\\<forall>x. MULT NEUTRAL x = x) \\<and>\n    (\\<forall>x y z.\n        MULT (MULT x y) z = MULT x (MULT y z)) \\<Longrightarrow>\n    (\\<forall>x. g (MULT (f (g (INVERSE (f x)))) (f x)) = g NEUTRAL) \\<and>\n    (\\<forall>x. g (MULT (f (g NEUTRAL)) (f x)) = x) \\<and>\n    (\\<forall>x y z.\n        g (MULT (f (g (MULT (f x) (f y)))) (f z)) =\n        g (MULT (f x) (f (g (MULT (f y) (f z))))))", "by simp"], ["", "lemma semigroup_law_semigroup: \"semigroup_law mult\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup_law (\\<otimes>)", "unfolding semigroup_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "using semigroup_class.axioms"], ["proof (prove)\nusing this:\n  class.semigroup (\\<otimes>)\n\ngoal (1 subgoal):\n 1. \\<forall>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "unfolding class.semigroup_def"], ["proof (prove)\nusing this:\n  \\<forall>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal (1 subgoal):\n 1. \\<forall>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "."], ["", "lemma monoidl_law_monoidl: \"monoidl_law neutral mult\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monoidl_law \\<one> (\\<otimes>)", "unfolding monoidl_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. \\<one> \\<otimes> x = x) \\<and> semigroup_law (\\<otimes>)", "using monoidl_class.axioms semigroup_law_semigroup"], ["proof (prove)\nusing this:\n  class.monoidl_axioms (\\<otimes>) \\<one>\n  semigroup_law (\\<otimes>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. \\<one> \\<otimes> x = x) \\<and> semigroup_law (\\<otimes>)", "unfolding class.monoidl_axioms_def"], ["proof (prove)\nusing this:\n  \\<forall>x. \\<one> \\<otimes> x = x\n  semigroup_law (\\<otimes>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. \\<one> \\<otimes> x = x) \\<and> semigroup_law (\\<otimes>)", "by simp"], ["", "lemma group_law_group: \"group_law inverse neutral mult\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_law group_class.inverse \\<one> (\\<otimes>)", "unfolding group_law_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. group_class.inverse x \\<otimes> x = \\<one>) \\<and>\n    monoidl_law \\<one> (\\<otimes>)", "using group_class.axioms monoidl_law_monoidl"], ["proof (prove)\nusing this:\n  class.group_axioms (\\<otimes>) \\<one> group_class.inverse\n  monoidl_law \\<one> (\\<otimes>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. group_class.inverse x \\<otimes> x = \\<one>) \\<and>\n    monoidl_law \\<one> (\\<otimes>)", "unfolding class.group_axioms_def"], ["proof (prove)\nusing this:\n  \\<forall>x. group_class.inverse x \\<otimes> x = \\<one>\n  monoidl_law \\<one> (\\<otimes>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. group_class.inverse x \\<otimes> x = \\<one>) \\<and>\n    monoidl_law \\<one> (\\<otimes>)", "by simp"], ["", "derive_generic_setup semigroup"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derive.iso from to; semigroup_class_law mult\\<rbrakk>\n    \\<Longrightarrow> semigroup_class_law\n                       (\\<lambda>x y. to (mult (from x) (from y)))", "unfolding semigroup_class_law_def\n  Derive.iso_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>a. to (from a) = a) \\<and>\n             (\\<forall>b. from (to b) = b);\n     \\<forall>x y z. mult (mult x y) z = mult x (mult y z)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y z.\n                         to (mult (from (to (mult (from x) (from y))))\n                              (from z)) =\n                         to (mult (from x)\n                              (from (to (mult (from y) (from z)))))", "by simp"], ["", "derive_generic_setup monoidl"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derive.iso from to; monoidl_class_law mult neutral\\<rbrakk>\n    \\<Longrightarrow> monoidl_class_law\n                       (\\<lambda>x y. to (mult (from x) (from y)))\n                       (to neutral)", "unfolding monoidl_class_law_def semigroup_class_law_def Derive.iso_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>a. to (from a) = a) \\<and>\n             (\\<forall>b. from (to b) = b);\n     (\\<forall>x y z. mult (mult x y) z = mult x (mult y z)) \\<and>\n     (\\<forall>x. mult neutral x = x)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x y z.\n                          to (mult (from (to (mult (from x) (from y))))\n                               (from z)) =\n                          to (mult (from x)\n                               (from (to (mult (from y) (from z)))))) \\<and>\n                      (\\<forall>x.\n                          to (mult (from (to neutral)) (from x)) = x)", "by simp"], ["", "derive_generic_setup group"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derive.iso from to;\n     group_class_law mult neutral inverse\\<rbrakk>\n    \\<Longrightarrow> group_class_law\n                       (\\<lambda>x y. to (mult (from x) (from y)))\n                       (to neutral) (\\<lambda>x. to (inverse (from x)))", "unfolding group_class_law_def monoidl_class_law_def semigroup_class_law_def Derive.iso_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>a. to (from a) = a) \\<and>\n             (\\<forall>b. from (to b) = b);\n     ((\\<forall>x y z. mult (mult x y) z = mult x (mult y z)) \\<and>\n      (\\<forall>x. mult neutral x = x)) \\<and>\n     (\\<forall>x. mult (inverse x) x = neutral)\\<rbrakk>\n    \\<Longrightarrow> ((\\<forall>x y z.\n                           to (mult (from (to (mult (from x) (from y))))\n                                (from z)) =\n                           to (mult (from x)\n                                (from\n                                  (to (mult (from y) (from z)))))) \\<and>\n                       (\\<forall>x.\n                           to (mult (from (to neutral)) (from x)) =\n                           x)) \\<and>\n                      (\\<forall>x.\n                          to (mult (from (to (inverse (from x))))\n                               (from x)) =\n                          to neutral)", "by simp"], ["", "(* Manual instances for int, unit, prod, and sum *)"], ["", "instantiation int and unit:: semigroup\nbegin"], ["", "definition mult_int_def : \"mult (x::int) y = x + y\""], ["", "definition mult_unit_def: \"mult (x::unit) y = x\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, semigroup_class) &&& OFCLASS(unit, semigroup_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n 2. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "fix x y z :: int"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n 2. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "show \"x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "unfolding mult_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y + z = x + (y + z)", "by simp"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "fix x y z :: unit"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "show \"x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "unfolding mult_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = x", "by simp"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation int and unit:: monoidl\nbegin"], ["", "definition neutral_int_def : \"neutral = (0::int)\""], ["", "definition neutral_unit_def: \"neutral = ()\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, monoidl_class) &&& OFCLASS(unit, monoidl_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. \\<one> \\<otimes> x = x\n 2. \\<And>x. \\<one> \\<otimes> x = x", "fix x :: int"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. \\<one> \\<otimes> x = x\n 2. \\<And>x. \\<one> \\<otimes> x = x", "show \"\\<one> \\<otimes> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "unfolding neutral_int_def mult_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + x = x", "by simp"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "fix x :: unit"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "show \"\\<one> \\<otimes> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "unfolding neutral_unit_def mult_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. () = x", "by simp"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation int and unit:: group\nbegin"], ["", "definition inverse_int_def : \"inverse (i::int) = \\<one> - i\""], ["", "definition inverse_unit_def: \"inverse u = ()\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, group_class) &&& OFCLASS(unit, group_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>\n 2. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "fix x :: int"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>\n 2. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "show \"inverse x \\<otimes> x = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_class.inverse x \\<otimes> x = \\<one>", "unfolding inverse_int_def mult_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> - x + x = \\<one>", "by simp"], ["proof (state)\nthis:\n  group_class.inverse x \\<otimes> x = \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "fix x :: unit"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "show \"inverse x \\<otimes> x = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_class.inverse x \\<otimes> x = \\<one>", "unfolding inverse_unit_def mult_unit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. () = \\<one>", "by simp"], ["proof (state)\nthis:\n  group_class.inverse x \\<otimes> x = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation prod and sum :: (semigroup, semigroup) semigroup\nbegin"], ["", "definition mult_prod_def: \"x \\<otimes> y = (fst x \\<otimes> fst y, snd x \\<otimes> snd y)\""], ["", "definition mult_sum_def: \"x \\<otimes> y = (case x of Inl a \\<Rightarrow> (case y of Inl b \\<Rightarrow> Inl (a \\<otimes> b) | Inr b \\<Rightarrow> Inr b)\n                                             | Inr a \\<Rightarrow> (case y of Inl b \\<Rightarrow> Inr a | Inr b \\<Rightarrow> Inr (a \\<otimes> b)))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<times> 'b, semigroup_class) &&&\n    OFCLASS('a + 'b, semigroup_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n 2. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "fix x y z :: \"('a::semigroup) \\<times> ('b::semigroup)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n 2. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "show \"x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "unfolding mult_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (fst x \\<otimes> fst y, snd x \\<otimes> snd y) \\<otimes> fst z,\n     snd (fst x \\<otimes> fst y, snd x \\<otimes> snd y) \\<otimes> snd z) =\n    (fst x \\<otimes> fst (fst y \\<otimes> fst z, snd y \\<otimes> snd z),\n     snd x \\<otimes> snd (fst y \\<otimes> fst z, snd y \\<otimes> snd z))", "by (simp add: assoc)"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "fix x y z :: \"('a::semigroup) + ('b::semigroup)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "show \"x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "unfolding mult_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case x of\n          Inl a \\<Rightarrow>\n            case y of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n            | Inr x \\<Rightarrow> Inr x\n          | Inr a \\<Rightarrow>\n              case y of Inl b \\<Rightarrow> Inr a\n              | Inr b \\<Rightarrow> Inr (a \\<otimes> b) of\n     Inl a \\<Rightarrow>\n       case z of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n       | Inr x \\<Rightarrow> Inr x\n     | Inr a \\<Rightarrow>\n         case z of Inl b \\<Rightarrow> Inr a\n         | Inr b \\<Rightarrow> Inr (a \\<otimes> b)) =\n    (case x of\n     Inl a \\<Rightarrow>\n       case case y of\n            Inl a \\<Rightarrow>\n              case z of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n              | Inr x \\<Rightarrow> Inr x\n            | Inr a \\<Rightarrow>\n                case z of Inl b \\<Rightarrow> Inr a\n                | Inr b \\<Rightarrow> Inr (a \\<otimes> b) of\n       Inl b \\<Rightarrow> Inl (a \\<otimes> b) | Inr x \\<Rightarrow> Inr x\n     | Inr a \\<Rightarrow>\n         case case y of\n              Inl a \\<Rightarrow>\n                case z of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n                | Inr x \\<Rightarrow> Inr x\n              | Inr a \\<Rightarrow>\n                  case z of Inl b \\<Rightarrow> Inr a\n                  | Inr b \\<Rightarrow> Inr (a \\<otimes> b) of\n         Inl b \\<Rightarrow> Inr a\n         | Inr b \\<Rightarrow> Inr (a \\<otimes> b))", "by (simp add: assoc sum.case_eq_if)"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation prod and sum :: (monoidl, monoidl) monoidl\nbegin"], ["", "definition neutral_prod_def: \"neutral = (neutral,neutral)\""], ["", "definition neutral_sum_def: \"neutral = Inl neutral\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<times> 'b, monoidl_class) &&&\n    OFCLASS('a + 'b, monoidl_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. \\<one> \\<otimes> x = x\n 2. \\<And>x. \\<one> \\<otimes> x = x", "fix x :: \"('a::monoidl) \\<times> ('b::monoidl)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. \\<one> \\<otimes> x = x\n 2. \\<And>x. \\<one> \\<otimes> x = x", "show \"\\<one> \\<otimes> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "unfolding neutral_prod_def mult_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (\\<one>, \\<one>) \\<otimes> fst x,\n     snd (\\<one>, \\<one>) \\<otimes> snd x) =\n    x", "by (simp add: neutl)"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "fix x :: \"('a::monoidl) + ('b::monoidl)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "show \"\\<one> \\<otimes> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "unfolding neutral_sum_def mult_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case Inl \\<one> of\n     Inl a \\<Rightarrow>\n       case x of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n       | Inr x \\<Rightarrow> Inr x\n     | Inr a \\<Rightarrow>\n         case x of Inl b \\<Rightarrow> Inr a\n         | Inr b \\<Rightarrow> Inr (a \\<otimes> b)) =\n    x", "by (simp add: neutl sum.case_eq_if sum.exhaust_sel)"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation prod :: (group, group) group\nbegin"], ["", "definition inverse_prod_def: \"inverse p = (inverse (fst p), inverse (snd p))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<times> 'b, group_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "fix x :: \"('a::group) \\<times> ('b::group)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. group_class.inverse x \\<otimes> x = \\<one>", "show \"inverse x \\<otimes> x = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_class.inverse x \\<otimes> x = \\<one>", "unfolding inverse_prod_def mult_prod_def neutral_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (group_class.inverse (fst x),\n          group_class.inverse (snd x)) \\<otimes>\n     fst x,\n     snd (group_class.inverse (fst x),\n          group_class.inverse (snd x)) \\<otimes>\n     snd x) =\n    (\\<one>, \\<one>)", "by (simp add: invl)"], ["proof (state)\nthis:\n  group_class.inverse x \\<otimes> x = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "derive_generic semigroup simple_int"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic monoidl simple_int"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic semigroup either"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "derive_generic monoidl either"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma \"(B \\<one> 6) \\<otimes> (B 4 5) = B 4 11\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_int.B \\<one> 6 \\<otimes> simple_int.B 4 5 = simple_int.B 4 11", "by eval"], ["", "lemma \"(A 2) \\<otimes> (A 3) = A 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_int.A 2 \\<otimes> simple_int.A 3 = simple_int.A 5", "by eval"], ["", "lemma \"(B \\<one> 6) \\<otimes> \\<one> = B 0 6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_int.B \\<one> 6 \\<otimes> \\<one> = simple_int.B 0 6", "by eval"], ["", "lemma \"(L 3) \\<otimes> ((L 4)::(int,int) either) = L 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L 3 \\<otimes> L 4 = L 7", "by eval"], ["", "lemma \"(R (2::int)) \\<otimes> (L (3::int)) = R 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R 2 \\<otimes> L 3 = R 2", "by eval"], ["", "derive_generic semigroup list"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "case (1 x y z)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "proof (induction x arbitrary: y z)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                             xaaa \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       In xa \\<otimes> y \\<otimes> z = In xa \\<otimes> (y \\<otimes> z)", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa \\<otimes> (?y \\<otimes> ?z)\n\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                             xaaa \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       In xa \\<otimes> y \\<otimes> z = In xa \\<otimes> (y \\<otimes> z)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa \\<otimes> (?y \\<otimes> ?z)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa \\<otimes> (?y \\<otimes> ?z)\n\ngoal (1 subgoal):\n 1. In x' \\<otimes> y \\<otimes> z = In x' \\<otimes> (y \\<otimes> z)", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                                     xaaa \\<otimes> (y \\<otimes> z);\n        x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> In x' \\<otimes> y \\<otimes> z =\n                         In x' \\<otimes> (y \\<otimes> z)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                                     xaaa \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> In x' \\<otimes> y \\<otimes> z =\n                         In x' \\<otimes> (y \\<otimes> z)", "apply (cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x xa.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                             xaaa \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       In (Inl a) \\<otimes> In x \\<otimes> In xa =\n       In (Inl a) \\<otimes> (In x \\<otimes> In xa)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                                     xaaa \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> In x' \\<otimes> y \\<otimes> z =\n                         In x' \\<otimes> (y \\<otimes> z)", "apply (simp add: Derive_Algebra_Laws.mult_mulistF.simps sum.case_eq_if mult_unit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                                     xaaa \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> In x' \\<otimes> y \\<otimes> z =\n                         In x' \\<otimes> (y \\<otimes> z)", "apply(cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                             xaaa \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       In (Inr b) \\<otimes> In x \\<otimes> In xa =\n       In (Inr b) \\<otimes> (In x \\<otimes> In xa)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}\\<rbrakk>\n           \\<Longrightarrow> xaaa \\<otimes> y \\<otimes> z =\n                             xaaa \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       In (Inr b) \\<otimes> In x \\<otimes> In xa =\n       In (Inr b) \\<otimes> (In x \\<otimes> In xa)", "apply (simp add: Derive_Algebra_Laws.mult_mulistF.simps mult_unit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       (\\<And>xaa xaaa y z.\n           \\<lbrakk>xaa = b; xaaa = snd b\\<rbrakk>\n           \\<Longrightarrow> snd b \\<otimes> y \\<otimes> z =\n                             snd b \\<otimes>\n                             (y \\<otimes> z)) \\<Longrightarrow>\n       (case case x of Inl ba \\<Rightarrow> Inr b\n             | Inr ba \\<Rightarrow>\n                 Inr (fst b \\<otimes> fst ba, snd b \\<otimes> snd ba) of\n        Inl a \\<Rightarrow>\n          case xa of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n          | Inr x \\<Rightarrow> Inr x\n        | Inr a \\<Rightarrow>\n            case xa of Inl b \\<Rightarrow> Inr a\n            | Inr b \\<Rightarrow>\n                Inr (fst a \\<otimes> fst b, snd a \\<otimes> snd b)) =\n       (case case x of\n             Inl a \\<Rightarrow>\n               case xa of Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n               | Inr x \\<Rightarrow> Inr x\n             | Inr a \\<Rightarrow>\n                 case xa of Inl b \\<Rightarrow> Inr a\n                 | Inr b \\<Rightarrow>\n                     Inr (fst a \\<otimes> fst b, snd a \\<otimes> snd b) of\n        Inl ba \\<Rightarrow> Inr b\n        | Inr ba \\<Rightarrow>\n            Inr (fst b \\<otimes> fst ba, snd b \\<otimes> snd ba))", "by (simp add: sum.case_eq_if assoc)"], ["proof (state)\nthis:\n  In x' \\<otimes> y \\<otimes> z = In x' \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "derive_generic semigroup tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "case (1 x y z)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x y z. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)", "proof (induction x arbitrary: y z)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In xa \\<otimes> y \\<otimes> z =\n                         mutreeF.In xa \\<otimes> (y \\<otimes> z)", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa1.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa1.0 \\<otimes> (?y \\<otimes> ?z)\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa2.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa2.0 \\<otimes> (?y \\<otimes> ?z)\n\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In xa \\<otimes> y \\<otimes> z =\n                         mutreeF.In xa \\<otimes> (y \\<otimes> z)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa1.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa1.0 \\<otimes> (?y \\<otimes> ?z)\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa2.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa2.0 \\<otimes> (?y \\<otimes> ?z)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa1.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa1.0 \\<otimes> (?y \\<otimes> ?z)\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> ?xaaa2.0 \\<otimes> ?y \\<otimes> ?z =\n                    ?xaaa2.0 \\<otimes> (?y \\<otimes> ?z)\n\ngoal (1 subgoal):\n 1. mutreeF.In x' \\<otimes> y \\<otimes> z =\n    mutreeF.In x' \\<otimes> (y \\<otimes> z)", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z);\n        x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In x' \\<otimes> y \\<otimes> z =\n                         mutreeF.In x' \\<otimes> (y \\<otimes> z)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In x' \\<otimes> y \\<otimes> z =\n                         mutreeF.In x' \\<otimes> (y \\<otimes> z)", "apply (cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inl a);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In (Inl a) \\<otimes> mutreeF.In x \\<otimes>\n                         mutreeF.In xa =\n                         mutreeF.In (Inl a) \\<otimes>\n                         (mutreeF.In x \\<otimes> mutreeF.In xa)\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In x' \\<otimes> y \\<otimes> z =\n                         mutreeF.In x' \\<otimes> (y \\<otimes> z)", "apply (simp add: Derive_Algebra_Laws.mult_mutreeF.simps sum.case_eq_if mult_unit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z);\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In x' \\<otimes> y \\<otimes> z =\n                         mutreeF.In x' \\<otimes> (y \\<otimes> z)", "apply(cases y; cases z; hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr (Inr b);\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In (Inr b) \\<otimes> mutreeF.In x \\<otimes>\n                         mutreeF.In xa =\n                         mutreeF.In (Inr b) \\<otimes>\n                         (mutreeF.In x \\<otimes> mutreeF.In xa)", "unfolding sum_set_defs prod_set_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa\n                            \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                                   | Inr z \\<Rightarrow> {z});\n                    xaaa \\<in> {snd xaa}; xaaa1 \\<in> {fst xaaa}\\<rbrakk>\n                   \\<Longrightarrow> xaaa1 \\<otimes> y \\<otimes> z =\n                                     xaaa1 \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa\n                    \\<in> (case Inr b of Inl a \\<Rightarrow> {}\n                           | Inr z \\<Rightarrow> {z});\n            xaaa \\<in> {snd xaa}; xaaa2 \\<in> {snd xaaa}\\<rbrakk>\n           \\<Longrightarrow> xaaa2 \\<otimes> y \\<otimes> z =\n                             xaaa2 \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> mutreeF.In (Inr b) \\<otimes> mutreeF.In x \\<otimes>\n                         mutreeF.In xa =\n                         mutreeF.In (Inr b) \\<otimes>\n                         (mutreeF.In x \\<otimes> mutreeF.In xa)", "apply (simp add: Derive_Algebra_Laws.mult_mutreeF.simps mult_unit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1 y z.\n                   \\<lbrakk>xaa = b; xaaa = snd b;\n                    xaaa1 = fst (snd b)\\<rbrakk>\n                   \\<Longrightarrow> fst (snd b) \\<otimes> y \\<otimes> z =\n                                     fst (snd b) \\<otimes> (y \\<otimes> z);\n        \\<And>xaa xaaa xaaa2 y z.\n           \\<lbrakk>xaa = b; xaaa = snd b; xaaa2 = snd (snd b)\\<rbrakk>\n           \\<Longrightarrow> snd (snd b) \\<otimes> y \\<otimes> z =\n                             snd (snd b) \\<otimes> (y \\<otimes> z)\\<rbrakk>\n       \\<Longrightarrow> (case case x of Inl ba \\<Rightarrow> Inr b\n                               | Inr ba \\<Rightarrow>\n                                   Inr (fst b \\<otimes> fst ba,\n  fst (snd b) \\<otimes> fst (snd ba), snd (snd b) \\<otimes> snd (snd ba)) of\n                          Inl a \\<Rightarrow>\n                            case xa of\n                            Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n                            | Inr x \\<Rightarrow> Inr x\n                          | Inr a \\<Rightarrow>\n                              case xa of Inl b \\<Rightarrow> Inr a\n                              | Inr b \\<Rightarrow>\n                                  Inr (fst a \\<otimes> fst b,\n fst (snd a) \\<otimes> fst (snd b), snd (snd a) \\<otimes> snd (snd b))) =\n                         (case case x of\n                               Inl a \\<Rightarrow>\n                                 case xa of\n                                 Inl b \\<Rightarrow> Inl (a \\<otimes> b)\n                                 | Inr x \\<Rightarrow> Inr x\n                               | Inr a \\<Rightarrow>\n                                   case xa of Inl b \\<Rightarrow> Inr a\n                                   | Inr b \\<Rightarrow>\n Inr (fst a \\<otimes> fst b, fst (snd a) \\<otimes> fst (snd b),\n      snd (snd a) \\<otimes> snd (snd b)) of\n                          Inl ba \\<Rightarrow> Inr b\n                          | Inr ba \\<Rightarrow>\n                              Inr (fst b \\<otimes> fst ba,\n                                   fst (snd b) \\<otimes> fst (snd ba),\n                                   snd (snd b) \\<otimes> snd (snd ba)))", "by (simp add: semigroup_class.assoc sum.case_eq_if)"], ["proof (state)\nthis:\n  mutreeF.In x' \\<otimes> y \\<otimes> z =\n  mutreeF.In x' \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> z = x \\<otimes> (y \\<otimes> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "derive_generic monoidl list"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "proof (induction x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (\\<And>xaa xaaa.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa = xaaa) \\<Longrightarrow>\n       \\<one> \\<otimes> mulistF.In xa = mulistF.In xa", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa = ?xaaa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (\\<And>xaa xaaa.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa = xaaa) \\<Longrightarrow>\n       \\<one> \\<otimes> mulistF.In xa = mulistF.In xa", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa = ?xaaa", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x';\n   ?xaaa \\<in> Basic_BNFs.snds ?xaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa = ?xaaa\n\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> mulistF.In x' = mulistF.In x'", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa = xaaa;\n        x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mulistF.In x' = mulistF.In x'\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa = xaaa;\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mulistF.In x' = mulistF.In x'", "by (auto simp add: Derive_Algebra_Laws.neutral_mulistF_def sum.case_eq_if neutral_unit_def)"], ["proof (state)\nthis:\n  \\<one> \\<otimes> mulistF.In x' = mulistF.In x'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "derive_generic monoidl tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. \\<one> \\<otimes> x = x", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> x = x", "proof (induction x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa1 = xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa2 = xaaa2\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mutreeF.In xa = mutreeF.In xa", "case (In x')"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa1.0 = ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa2.0 = ?xaaa2.0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa1 = xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr xa;\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa2 = xaaa2\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mutreeF.In xa = mutreeF.In xa", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa1.0 = ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa2.0 = ?xaaa2.0", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa1.0 \\<in> Basic_BNFs.fsts ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa1.0 = ?xaaa1.0\n  \\<lbrakk>?xaa \\<in> Basic_BNFs.setr x'; ?xaaa \\<in> Basic_BNFs.snds ?xaa;\n   ?xaaa2.0 \\<in> Basic_BNFs.snds ?xaaa\\<rbrakk>\n  \\<Longrightarrow> \\<one> \\<otimes> ?xaaa2.0 = ?xaaa2.0\n\ngoal (1 subgoal):\n 1. \\<one> \\<otimes> mutreeF.In x' = mutreeF.In x'", "apply(cases x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa1 = xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa2 = xaaa2;\n        x' = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mutreeF.In x' = mutreeF.In x'\n 2. \\<And>b.\n       \\<lbrakk>\\<And>xaa xaaa xaaa1.\n                   \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n                    xaaa \\<in> Basic_BNFs.snds xaa;\n                    xaaa1 \\<in> Basic_BNFs.fsts xaaa\\<rbrakk>\n                   \\<Longrightarrow> \\<one> \\<otimes> xaaa1 = xaaa1;\n        \\<And>xaa xaaa xaaa2.\n           \\<lbrakk>xaa \\<in> Basic_BNFs.setr x';\n            xaaa \\<in> Basic_BNFs.snds xaa;\n            xaaa2 \\<in> Basic_BNFs.snds xaaa\\<rbrakk>\n           \\<Longrightarrow> \\<one> \\<otimes> xaaa2 = xaaa2;\n        x' = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<otimes> mutreeF.In x' = mutreeF.In x'", "by (auto simp add: Derive_Algebra_Laws.neutral_mutreeF_def sum.case_eq_if neutral_unit_def)"], ["proof (state)\nthis:\n  \\<one> \\<otimes> mutreeF.In x' = mutreeF.In x'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<one> \\<otimes> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"[1,2,3,4::int] \\<otimes> [1,2,3] = [2,4,6,4]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [1, 2, 3, 4] \\<otimes> [1, 2, 3] = [2, 4, 6, 4]", "by eval"], ["", "lemma \"(Node (3::int) Leaf Leaf) \\<otimes> (Node (1::int) Leaf Leaf) = (Node 4 Leaf Leaf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Node 3 Leaf Leaf \\<otimes> Node 1 Leaf Leaf = Node 4 Leaf Leaf", "by eval"], ["", "end"]]}