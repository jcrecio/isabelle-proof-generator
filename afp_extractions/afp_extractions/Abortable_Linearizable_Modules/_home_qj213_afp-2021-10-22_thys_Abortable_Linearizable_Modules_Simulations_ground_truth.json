{"file_name": "/home/qj213/afp-2021-10-22/thys/Abortable_Linearizable_Modules/Simulations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abortable_Linearizable_Modules", "problem_names": ["lemma step_eq_traces:\n  fixes e_B' A e e_A' a t\n  defines \"e_A \\<equiv> append_exec e_A' e\" and \"e_B \\<equiv> cons_exec e_B' (a,t)\"\n  and \"tr \\<equiv> trace (ioa.asig A) e\"\n  assumes 1:\"trace (ioa.asig A) e_A' = trace (ioa.asig A) e_B'\"\n  and 2:\"if a \\<in> ext A then tr = [a] else tr = []\"\n  shows \"trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"", "lemma exec_inc_imp_trace_inc:\n  fixes A B\n  assumes \"ext B = ext A\"\n  and \"\\<And> e_B . is_exec_of B e_B \n    \\<Longrightarrow> \\<exists> e_A . is_exec_of A e_A \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"\n  shows \"traces B \\<subseteq> traces A\"", "lemma ref_map_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA\" and e_B\n  assumes \"is_ref_map f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"", "theorem ref_map_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA\"\n  assumes \"is_ref_map f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\"", "lemma forward_sim_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\" and e_B\n  assumes \"is_forward_sim f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"", "theorem forward_sim_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\"\n  assumes \"is_forward_sim f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\"", "lemma backward_sim_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\" and e_B\n  assumes \"is_backward_sim f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"", "theorem backward_sim_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\"\n  assumes \"is_backward_sim f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\""], "translations": [["", "lemma step_eq_traces:\n  fixes e_B' A e e_A' a t\n  defines \"e_A \\<equiv> append_exec e_A' e\" and \"e_B \\<equiv> cons_exec e_B' (a,t)\"\n  and \"tr \\<equiv> trace (ioa.asig A) e\"\n  assumes 1:\"trace (ioa.asig A) e_A' = trace (ioa.asig A) e_B'\"\n  and 2:\"if a \\<in> ext A then tr = [a] else tr = []\"\n  shows \"trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "have 3:\"trace (ioa.asig A) e_B = \n         (if a \\<in> ext A then (trace (ioa.asig A) e_B') # a else trace (ioa.asig A) e_B')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_B =\n    (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_B')\n     else trace (ioa.asig A) e_B')", "using e_B_def"], ["proof (prove)\nusing this:\n  e_B \\<equiv> cons_exec e_B' (a, t)\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_B =\n    (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_B')\n     else trace (ioa.asig A) e_B')", "by (simp add:trace_def schedule_def filter_act_def cons_exec_def)"], ["proof (state)\nthis:\n  trace (ioa.asig A) e_B =\n  (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_B')\n   else trace (ioa.asig A) e_B')\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "have 4:\"trace (ioa.asig A) e_A = \n         (if a \\<in> ext A then trace (ioa.asig A) e_A' # a else trace (ioa.asig A) e_A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A =\n    (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_A')\n     else trace (ioa.asig A) e_A')", "using 2 trace_append_is_append_trace[of \"ioa.asig A\" e_A' e]"], ["proof (prove)\nusing this:\n  if a \\<in> externals (ioa.asig A) then tr = [a] else tr = []\n  trace (ioa.asig A) (append_exec e_A' e) =\n  append (trace (ioa.asig A) e) (trace (ioa.asig A) e_A')\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A =\n    (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_A')\n     else trace (ioa.asig A) e_A')", "by(auto simp add:e_A_def tr_def split: if_split_asm)"], ["proof (state)\nthis:\n  trace (ioa.asig A) e_A =\n  (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_A')\n   else trace (ioa.asig A) e_A')\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "using 1 3 4"], ["proof (prove)\nusing this:\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) e_B'\n  trace (ioa.asig A) e_B =\n  (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_B')\n   else trace (ioa.asig A) e_B')\n  trace (ioa.asig A) e_A =\n  (if a \\<in> externals (ioa.asig A) then Cons a (trace (ioa.asig A) e_A')\n   else trace (ioa.asig A) e_A')\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "by simp"], ["proof (state)\nthis:\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_inc_imp_trace_inc:\n  fixes A B\n  assumes \"ext B = ext A\"\n  and \"\\<And> e_B . is_exec_of B e_B \n    \\<Longrightarrow> \\<exists> e_A . is_exec_of A e_A \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\"\n  shows \"traces B \\<subseteq> traces A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "assume \"t \\<in> traces B\""], ["proof (state)\nthis:\n  t \\<in> local.traces B\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "with this"], ["proof (chain)\npicking this:\n  t \\<in> local.traces B\n  t \\<in> local.traces B", "obtain e where 1:\"t = trace (ioa.asig B) e\" and 2:\"is_exec_of B e\""], ["proof (prove)\nusing this:\n  t \\<in> local.traces B\n  t \\<in> local.traces B\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>t = trace (ioa.asig B) e; is_exec_of B e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using traces_alt assms(1)"], ["proof (prove)\nusing this:\n  t \\<in> local.traces B\n  t \\<in> local.traces B\n  local.traces ?A =\n  {tr. \\<exists>e. is_exec_of ?A e \\<and> tr = trace (ioa.asig ?A) e}\n  externals (ioa.asig B) = externals (ioa.asig A)\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>t = trace (ioa.asig B) e; is_exec_of B e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t = trace (ioa.asig B) e\n  is_exec_of B e\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "from 1 and assms(1)"], ["proof (chain)\npicking this:\n  t = trace (ioa.asig B) e\n  externals (ioa.asig B) = externals (ioa.asig A)", "have 3:\"t = trace (ioa.asig A) e\""], ["proof (prove)\nusing this:\n  t = trace (ioa.asig B) e\n  externals (ioa.asig B) = externals (ioa.asig A)\n\ngoal (1 subgoal):\n 1. t = trace (ioa.asig A) e", "by (simp add:trace_def)"], ["proof (state)\nthis:\n  t = trace (ioa.asig A) e\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "from 2 3 and assms(2)"], ["proof (chain)\npicking this:\n  is_exec_of B e\n  t = trace (ioa.asig A) e\n  is_exec_of B ?e_B \\<Longrightarrow>\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) ?e_B", "obtain e' where \n      \"is_exec_of A e' \\<and> trace (ioa.asig A) e' = trace (ioa.asig A) e\""], ["proof (prove)\nusing this:\n  is_exec_of B e\n  t = trace (ioa.asig A) e\n  is_exec_of B ?e_B \\<Longrightarrow>\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) ?e_B\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        is_exec_of A e' \\<and>\n        trace (ioa.asig A) e' = trace (ioa.asig A) e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_exec_of A e' \\<and> trace (ioa.asig A) e' = trace (ioa.asig A) e\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "hence \"t \\<in> traces A\""], ["proof (prove)\nusing this:\n  is_exec_of A e' \\<and> trace (ioa.asig A) e' = trace (ioa.asig A) e\n\ngoal (1 subgoal):\n 1. t \\<in> local.traces A", "using 3 traces_alt"], ["proof (prove)\nusing this:\n  is_exec_of A e' \\<and> trace (ioa.asig A) e' = trace (ioa.asig A) e\n  t = trace (ioa.asig A) e\n  local.traces ?A =\n  {tr. \\<exists>e. is_exec_of ?A e \\<and> tr = trace (ioa.asig ?A) e}\n\ngoal (1 subgoal):\n 1. t \\<in> local.traces A", "by fastforce"], ["proof (state)\nthis:\n  t \\<in> local.traces A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "}"], ["proof (state)\nthis:\n  ?t2 \\<in> local.traces B \\<Longrightarrow> ?t2 \\<in> local.traces A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?t2 \\<in> local.traces B \\<Longrightarrow> ?t2 \\<in> local.traces A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "by fast"], ["proof (state)\nthis:\n  local.traces B \\<subseteq> local.traces A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Soundness of Refinement Mappings\\<close>"], ["", "lemma ref_map_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA\" and e_B\n  assumes \"is_ref_map f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "note assms(2)"], ["proof (state)\nthis:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "hence \"\\<exists> e_A .  is_exec_of A e_A \n                  \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \n                  \\<and> last_state e_A = f (last_state e_B)\""], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A = f (last_state e_B)", "proof (induction \"snd e_B\" arbitrary:e_B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "case Nil"], ["proof (state)\nthis:\n  [] = snd e_B\n  is_exec_of B e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?e_A = \"(f (fst e_B), [])\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"\\<And> s . s \\<in> start B \\<Longrightarrow> f s \\<in> start A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> start B \\<Longrightarrow> f s \\<in> start A", "using assms(1)"], ["proof (prove)\nusing this:\n  is_ref_map f B A\n\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> start B \\<Longrightarrow> f s \\<in> start A", "by (simp add:is_ref_map_def)"], ["proof (state)\nthis:\n  ?s1 \\<in> start B \\<Longrightarrow> f ?s1 \\<in> start A\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "hence \"is_exec_of A ?e_A\""], ["proof (prove)\nusing this:\n  ?s1 \\<in> start B \\<Longrightarrow> f ?s1 \\<in> start A\n\ngoal (1 subgoal):\n 1. is_exec_of A (f (fst e_B), [])", "using Nil.prems(1)"], ["proof (prove)\nusing this:\n  ?s1 \\<in> start B \\<Longrightarrow> f ?s1 \\<in> start A\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. is_exec_of A (f (fst e_B), [])", "by (simp add:is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (f (fst e_B), [])\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  is_exec_of A (f (fst e_B), [])\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B", "using Nil.hyps"], ["proof (prove)\nusing this:\n  [] = snd e_B\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B", "by (simp add:trace_simps)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"last_state ?e_A = f (last_state e_B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (f (fst e_B), []) = f (last_state e_B)", "using Nil.hyps"], ["proof (prove)\nusing this:\n  [] = snd e_B\n\ngoal (1 subgoal):\n 1. last_state (f (fst e_B), []) = f (last_state e_B)", "by (metis last_state.simps(1) prod.collapse)"], ["proof (state)\nthis:\n  last_state (f (fst e_B), []) = f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "ultimately"], ["proof (chain)\npicking this:\n  is_exec_of A (f (fst e_B), [])\n  trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B\n  last_state (f (fst e_B), []) = f (last_state e_B)", "show ?case"], ["proof (prove)\nusing this:\n  is_exec_of A (f (fst e_B), [])\n  trace (ioa.asig A) (f (fst e_B), []) = trace (ioa.asig A) e_B\n  last_state (f (fst e_B), []) = f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A = f (last_state e_B)", "by fast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "case (Cons p ps e_B)"], ["proof (state)\nthis:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A = f (last_state ?e_B)\n  Cons p ps = snd e_B\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?e_B' = \"(fst e_B, ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?s = \"last_state ?e_B'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?t = \"snd p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?a = \"fst p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have 1:\"is_exec_of B ?e_B'\" and 2:\"?s\\<midarrow>?a\\<midarrow>B\\<longrightarrow>?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "using Cons.prems and Cons.hyps(2)"], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "by (simp_all add:is_exec_of_def,\n            cases \"(B,fst e_B,ps#p)\" rule:is_exec_frag_of.cases, auto,\n            cases \"(B,fst e_B,ps#p)\" rule:is_exec_frag_of.cases, auto)"], ["proof (state)\nthis:\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "with Cons.hyps(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A = f (last_state ?e_B)\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "obtain e_A' where ih1:\"is_exec_of A e_A'\"\n      and ih2:\"trace (ioa.asig A) e_A' = trace (ioa.asig A) ?e_B'\"\n      and ih3:\"last_state e_A' = f ?s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A = f (last_state ?e_B)\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n\ngoal (1 subgoal):\n 1. (\\<And>e_A'.\n        \\<lbrakk>is_exec_of A e_A';\n         trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n         last_state e_A' = f (last_state (fst e_B, ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  is_exec_of A e_A'\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  last_state e_A' = f (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "from 1"], ["proof (chain)\npicking this:\n  is_exec_of B (fst e_B, ps)", "have 3:\"reachable B ?s\""], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "using last_state_reachable"], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n  is_exec_of ?A ?e \\<Longrightarrow> reachable ?A (last_state ?e)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "by fast"], ["proof (state)\nthis:\n  reachable B (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "obtain e where 4:\"fst e = f ?s\" and 5:\"last_state e = f ?t\" \n    and 6:\"is_exec_frag_of A e\"\n    and 7:\"let tr = trace (ioa.asig A) e in if ?a \\<in> ext A \n      then tr = [?a] else tr = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e = f (last_state (fst e_B, ps));\n         last_state e = f (snd p); is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2 and 3 and assms(1)"], ["proof (prove)\nusing this:\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n  reachable B (last_state (fst e_B, ps))\n  is_ref_map f B A\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e = f (last_state (fst e_B, ps));\n         last_state e = f (snd p); is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force simp add:is_ref_map_def refines_def)"], ["proof (state)\nthis:\n  fst e = f (last_state (fst e_B, ps))\n  last_state e = f (snd p)\n  is_exec_frag_of A e\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "let ?e_A = \"append_exec e_A' e\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"is_exec_of A ?e_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "using ih1 ih3 4 6 append_exec_frags_is_exec_frag[of A e e_A']"], ["proof (prove)\nusing this:\n  is_exec_of A e_A'\n  last_state e_A' = f (last_state (fst e_B, ps))\n  fst e = f (last_state (fst e_B, ps))\n  is_exec_frag_of A e\n  \\<lbrakk>is_exec_frag_of A e; last_state e = fst e_A';\n   is_exec_frag_of A e_A'\\<rbrakk>\n  \\<Longrightarrow> is_exec_frag_of A (append_exec e e_A')\n\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "by (metis append_exec_def append_exec_frags_is_exec_frag \n          fst_conv is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "using ih2 Cons.hyps(2) 7 step_eq_traces[of A e_A' ?e_B' ?a e]"], ["proof (prove)\nusing this:\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  Cons p ps = snd e_B\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n  \\<lbrakk>trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n   if fst p \\<in> externals (ioa.asig A) then trace (ioa.asig A) e = [fst p]\n   else trace (ioa.asig A) e = []\\<rbrakk>\n  \\<Longrightarrow> trace (ioa.asig A) (append_exec e_A' e) =\n                    trace (ioa.asig A) (cons_exec (fst e_B, ps) (fst p, ?t))\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "by (auto simp add:cons_exec_def) (metis prod.collapse)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "have \"last_state ?e_A = f ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) = f (snd p)", "using ih3 4 5 last_state_of_append"], ["proof (prove)\nusing this:\n  last_state e_A' = f (last_state (fst e_B, ps))\n  fst e = f (last_state (fst e_B, ps))\n  last_state e = f (snd p)\n  fst ?e' = last_state ?e \\<Longrightarrow>\n  last_state (append_exec ?e ?e') = last_state ?e'\n\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) = f (snd p)", "by metis"], ["proof (state)\nthis:\n  last_state (append_exec e_A' e) = f (snd p)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A = f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A = f (last_state e_B)", "ultimately"], ["proof (chain)\npicking this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) = f (snd p)", "show ?case"], ["proof (prove)\nusing this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) = f (snd p)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A = f (last_state e_B)", "using Cons.hyps(2)"], ["proof (prove)\nusing this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) = f (snd p)\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A = f (last_state e_B)", "by (metis last_state.simps(2) surjective_pairing)"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = f (last_state e_B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "by blast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem ref_map_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA\"\n  assumes \"is_ref_map f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "using assms ref_map_execs exec_inc_imp_trace_inc"], ["proof (prove)\nusing this:\n  is_ref_map f B A\n  externals (ioa.asig A) = externals (ioa.asig B)\n  \\<lbrakk>is_ref_map ?f ?B ?A; is_exec_of ?B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of ?A e_A \\<and>\n                       trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) ?e_B\n  \\<lbrakk>externals (ioa.asig ?B) = externals (ioa.asig ?A);\n   \\<And>e_B.\n      is_exec_of ?B e_B \\<Longrightarrow>\n      \\<exists>e_A.\n         is_exec_of ?A e_A \\<and>\n         trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) e_B\\<rbrakk>\n  \\<Longrightarrow> local.traces ?B \\<subseteq> local.traces ?A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "by metis"], ["", "subsection \\<open>Soundness of Forward Simulations\\<close>"], ["", "lemma forward_sim_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\" and e_B\n  assumes \"is_forward_sim f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "note assms(2)"], ["proof (state)\nthis:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "hence \"\\<exists> e_A .  is_exec_of A e_A \n                  \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \n                  \\<and> last_state e_A \\<in> f (last_state e_B)\""], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A \\<in> f (last_state e_B)", "proof (induction \"snd e_B\" arbitrary:e_B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "case Nil"], ["proof (state)\nthis:\n  [] = snd e_B\n  is_exec_of B e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"\\<And> s . s \\<in> start B \\<Longrightarrow> f s \\<inter> start A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> start B \\<Longrightarrow> f s \\<inter> start A \\<noteq> {}", "using assms(1)"], ["proof (prove)\nusing this:\n  is_forward_sim f B A\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> start B \\<Longrightarrow> f s \\<inter> start A \\<noteq> {}", "by (simp add:is_forward_sim_def)"], ["proof (state)\nthis:\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<inter> start A \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "with this"], ["proof (chain)\npicking this:\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<inter> start A \\<noteq> {}\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<inter> start A \\<noteq> {}", "obtain s' where 1:\"s' \\<in> f (fst e_B)\" and 2:\"s' \\<in> start A\""], ["proof (prove)\nusing this:\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<inter> start A \\<noteq> {}\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<inter> start A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> f (fst e_B); s' \\<in> start A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Int_iff Nil.prems all_not_in_conv is_exec_of_def)"], ["proof (state)\nthis:\n  s' \\<in> f (fst e_B)\n  s' \\<in> start A\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?e_A = \"(s', [])\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"is_exec_of A ?e_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of A (s', [])", "using 2"], ["proof (prove)\nusing this:\n  s' \\<in> start A\n\ngoal (1 subgoal):\n 1. is_exec_of A (s', [])", "by (simp add:is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (s', [])\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  is_exec_of A (s', [])\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B", "using Nil.hyps"], ["proof (prove)\nusing this:\n  [] = snd e_B\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B", "by (simp add:trace_def schedule_def filter_act_def)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"last_state ?e_A \\<in> f (last_state e_B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (s', []) \\<in> f (last_state e_B)", "using Nil.hyps 1"], ["proof (prove)\nusing this:\n  [] = snd e_B\n  s' \\<in> f (fst e_B)\n\ngoal (1 subgoal):\n 1. last_state (s', []) \\<in> f (last_state e_B)", "by (metis last_state.simps(1) surjective_pairing)"], ["proof (state)\nthis:\n  last_state (s', []) \\<in> f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "ultimately"], ["proof (chain)\npicking this:\n  is_exec_of A (s', [])\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n  last_state (s', []) \\<in> f (last_state e_B)", "show ?case"], ["proof (prove)\nusing this:\n  is_exec_of A (s', [])\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n  last_state (s', []) \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A \\<in> f (last_state e_B)", "by fast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "case (Cons p ps e_B)"], ["proof (state)\nthis:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A \\<in> f (last_state ?e_B)\n  Cons p ps = snd e_B\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?e_B' = \"(fst e_B, ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?s = \"last_state ?e_B'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?t = \"snd p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?a = \"fst p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have 1:\"is_exec_of B ?e_B'\" and 2:\"?s\\<midarrow>?a\\<midarrow>B\\<longrightarrow>?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "using Cons.prems and Cons.hyps(2)"], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "by (simp_all add:is_exec_of_def,\n            cases \"(B,fst e_B,ps#p)\" rule:is_exec_frag_of.cases, auto,\n            cases \"(B,fst e_B,ps#p)\" rule:is_exec_frag_of.cases, auto)"], ["proof (state)\nthis:\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "with Cons.hyps(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A \\<in> f (last_state ?e_B)\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "obtain e_A' where ih1:\"is_exec_of A e_A'\"\n      and ih2:\"trace (ioa.asig A) e_A' = trace (ioa.asig A) ?e_B'\"\n      and ih3:\"last_state e_A' \\<in> f ?s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of A e_A \\<and>\n                       trace (ioa.asig A) e_A =\n                       trace (ioa.asig A) ?e_B \\<and>\n                       last_state e_A \\<in> f (last_state ?e_B)\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n\ngoal (1 subgoal):\n 1. (\\<And>e_A'.\n        \\<lbrakk>is_exec_of A e_A';\n         trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n         last_state e_A' \\<in> f (last_state (fst e_B, ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  is_exec_of A e_A'\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  last_state e_A' \\<in> f (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "from 1"], ["proof (chain)\npicking this:\n  is_exec_of B (fst e_B, ps)", "have 3:\"reachable B ?s\""], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "using last_state_reachable"], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n  is_exec_of ?A ?e \\<Longrightarrow> reachable ?A (last_state ?e)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "by fast"], ["proof (state)\nthis:\n  reachable B (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "obtain e where 4:\"fst e = last_state e_A'\" and 5:\"last_state e \\<in> f ?t\" \n    and 6:\"is_exec_frag_of A e\"\n    and 7:\"let tr = trace (ioa.asig A) e in if ?a \\<in> ext A then tr = [?a] else tr = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e = last_state e_A'; last_state e \\<in> f (snd p);\n         is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2 3 assms(1) ih3"], ["proof (prove)\nusing this:\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n  reachable B (last_state (fst e_B, ps))\n  is_forward_sim f B A\n  last_state e_A' \\<in> f (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e = last_state e_A'; last_state e \\<in> f (snd p);\n         is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add:is_forward_sim_def) \n        (metis prod.collapse prod.inject)"], ["proof (state)\nthis:\n  fst e = last_state e_A'\n  last_state e \\<in> f (snd p)\n  is_exec_frag_of A e\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "let ?e_A = \"append_exec e_A' e\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"is_exec_of A ?e_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "using ih1 ih3 4 6 append_exec_frags_is_exec_frag[of A e e_A']"], ["proof (prove)\nusing this:\n  is_exec_of A e_A'\n  last_state e_A' \\<in> f (last_state (fst e_B, ps))\n  fst e = last_state e_A'\n  is_exec_frag_of A e\n  \\<lbrakk>is_exec_frag_of A e; last_state e = fst e_A';\n   is_exec_frag_of A e_A'\\<rbrakk>\n  \\<Longrightarrow> is_exec_frag_of A (append_exec e e_A')\n\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "by (metis append_exec_def append_exec_frags_is_exec_frag \n            fst_conv is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "using ih2 Cons.hyps(2) 7 step_eq_traces[of A e_A' ?e_B' ?a e]"], ["proof (prove)\nusing this:\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  Cons p ps = snd e_B\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n  \\<lbrakk>trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n   if fst p \\<in> externals (ioa.asig A) then trace (ioa.asig A) e = [fst p]\n   else trace (ioa.asig A) e = []\\<rbrakk>\n  \\<Longrightarrow> trace (ioa.asig A) (append_exec e_A' e) =\n                    trace (ioa.asig A) (cons_exec (fst e_B, ps) (fst p, ?t))\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "by (auto simp add:cons_exec_def Let_def) (metis prod.collapse)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "moreover"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "have \"last_state ?e_A \\<in> f ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) \\<in> f (snd p)", "using ih3 4 5 last_state_of_append"], ["proof (prove)\nusing this:\n  last_state e_A' \\<in> f (last_state (fst e_B, ps))\n  fst e = last_state e_A'\n  last_state e \\<in> f (snd p)\n  fst ?e' = last_state ?e \\<Longrightarrow>\n  last_state (append_exec ?e ?e') = last_state ?e'\n\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) \\<in> f (snd p)", "by metis"], ["proof (state)\nthis:\n  last_state (append_exec e_A' e) \\<in> f (snd p)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>e_A.\n  is_exec_of A e_A \\<and>\n  trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n  last_state e_A \\<in> f (last_state e_B);\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e_A.\n                            is_exec_of A e_A \\<and>\n                            trace (ioa.asig A) e_A =\n                            trace (ioa.asig A) e_B \\<and>\n                            last_state e_A \\<in> f (last_state e_B)", "ultimately"], ["proof (chain)\npicking this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) \\<in> f (snd p)", "show ?case"], ["proof (prove)\nusing this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) \\<in> f (snd p)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A \\<in> f (last_state e_B)", "using Cons.hyps(2)"], ["proof (prove)\nusing this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) \\<in> f (snd p)\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A \\<in> f (last_state e_B)", "by (metis last_state.simps(2) surjective_pairing)"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A \\<in> f (last_state e_B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "by blast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem forward_sim_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\"\n  assumes \"is_forward_sim f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "using assms forward_sim_execs exec_inc_imp_trace_inc"], ["proof (prove)\nusing this:\n  is_forward_sim f B A\n  externals (ioa.asig A) = externals (ioa.asig B)\n  \\<lbrakk>is_forward_sim ?f ?B ?A; is_exec_of ?B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of ?A e_A \\<and>\n                       trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) ?e_B\n  \\<lbrakk>externals (ioa.asig ?B) = externals (ioa.asig ?A);\n   \\<And>e_B.\n      is_exec_of ?B e_B \\<Longrightarrow>\n      \\<exists>e_A.\n         is_exec_of ?A e_A \\<and>\n         trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) e_B\\<rbrakk>\n  \\<Longrightarrow> local.traces ?B \\<subseteq> local.traces ?A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "by metis"], ["", "subsection \\<open>Soundness of Backward Simulations\\<close>"], ["", "lemma backward_sim_execs:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\" and e_B\n  assumes \"is_backward_sim f B A\" and \"is_exec_of B e_B\"\n  shows \"\\<exists> e_A .  is_exec_of A e_A \n    \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "note assms(2)"], ["proof (state)\nthis:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "hence \"\\<forall> s \\<in> f (last_state e_B). \\<exists> e_A .\n          is_exec_of A e_A \n          \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \n          \\<and> last_state e_A = s\""], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>f (last_state e_B).\n       \\<exists>e_A.\n          is_exec_of A e_A \\<and>\n          trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n          last_state e_A = s", "proof (induction \"snd e_B\" arbitrary:e_B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "case Nil"], ["proof (state)\nthis:\n  [] = snd e_B\n  is_exec_of B e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "{"], ["proof (state)\nthis:\n  [] = snd e_B\n  is_exec_of B e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "fix s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "assume 1:\"s' \\<in> f(last_state e_B)\""], ["proof (state)\nthis:\n  s' \\<in> f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 2:\"\\<And> s . s \\<in> start B \\<Longrightarrow> f s \\<subseteq> start A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> start B \\<Longrightarrow> f s \\<subseteq> start A", "using assms(1)"], ["proof (prove)\nusing this:\n  is_backward_sim f B A\n\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> start B \\<Longrightarrow> f s \\<subseteq> start A", "by (simp add:is_backward_sim_def)"], ["proof (state)\nthis:\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<subseteq> start A\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "from Nil 1 2"], ["proof (chain)\npicking this:\n  [] = snd e_B\n  is_exec_of B e_B\n  s' \\<in> f (last_state e_B)\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<subseteq> start A", "have 3:\"s' \\<in> start A\""], ["proof (prove)\nusing this:\n  [] = snd e_B\n  is_exec_of B e_B\n  s' \\<in> f (last_state e_B)\n  ?s \\<in> start B \\<Longrightarrow> f ?s \\<subseteq> start A\n\ngoal (1 subgoal):\n 1. s' \\<in> start A", "by (metis (full_types) is_exec_of_def last_state.simps(1) subsetD surjective_pairing)"], ["proof (state)\nthis:\n  s' \\<in> start A\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?e_A = \"(s', [])\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 4:\"is_exec_of A ?e_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of A (s', [])", "using 3"], ["proof (prove)\nusing this:\n  s' \\<in> start A\n\ngoal (1 subgoal):\n 1. is_exec_of A (s', [])", "by (simp add:is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (s', [])\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 5:\"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B", "using Nil.hyps"], ["proof (prove)\nusing this:\n  [] = snd e_B\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B", "by (simp add:trace_def schedule_def filter_act_def)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 6:\"last_state ?e_A \\<in> f (last_state e_B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (s', []) \\<in> f (last_state e_B)", "using Nil.hyps 1"], ["proof (prove)\nusing this:\n  [] = snd e_B\n  s' \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. last_state (s', []) \\<in> f (last_state e_B)", "by (metis last_state.simps(1))"], ["proof (state)\nthis:\n  last_state (s', []) \\<in> f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "note 4 5 6"], ["proof (state)\nthis:\n  is_exec_of A (s', [])\n  trace (ioa.asig A) (s', []) = trace (ioa.asig A) e_B\n  last_state (s', []) \\<in> f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "}"], ["proof (state)\nthis:\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow> is_exec_of A (?s'6, [])\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow>\n  trace (ioa.asig A) (?s'6, []) = trace (ioa.asig A) e_B\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow>\n  last_state (?s'6, []) \\<in> f (last_state e_B)\n\ngoal (2 subgoals):\n 1. \\<And>e_B.\n       \\<lbrakk>[] = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s\n 2. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "thus ?case"], ["proof (prove)\nusing this:\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow> is_exec_of A (?s'6, [])\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow>\n  trace (ioa.asig A) (?s'6, []) = trace (ioa.asig A) e_B\n  ?s'6 \\<in> f (last_state e_B) \\<Longrightarrow>\n  last_state (?s'6, []) \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>f (last_state e_B).\n       \\<exists>e_A.\n          is_exec_of A e_A \\<and>\n          trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n          last_state e_A = s", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "case (Cons p ps e_B)"], ["proof (state)\nthis:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<forall>s\\<in>f (last_state ?e_B).\n                       \\<exists>e_A.\n                          is_exec_of A e_A \\<and>\n                          trace (ioa.asig A) e_A =\n                          trace (ioa.asig A) ?e_B \\<and>\n                          last_state e_A = s\n  Cons p ps = snd e_B\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "{"], ["proof (state)\nthis:\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<forall>s\\<in>f (last_state ?e_B).\n                       \\<exists>e_A.\n                          is_exec_of A e_A \\<and>\n                          trace (ioa.asig A) e_A =\n                          trace (ioa.asig A) ?e_B \\<and>\n                          last_state e_A = s\n  Cons p ps = snd e_B\n  is_exec_of B e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "fix t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "assume 8:\"t' \\<in> f (last_state e_B)\""], ["proof (state)\nthis:\n  t' \\<in> f (last_state e_B)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?e_B' = \"(fst e_B, ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?s = \"last_state ?e_B'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?t = \"snd p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?a = \"fst p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 5:\"?t = last_state e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd p = last_state e_B", "using Cons.hyps(2)"], ["proof (prove)\nusing this:\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. snd p = last_state e_B", "by (metis last_state.simps(2) prod.collapse)"], ["proof (state)\nthis:\n  snd p = last_state e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have 1:\"is_exec_of B ?e_B'\" and 2:\"?s\\<midarrow>?a\\<midarrow>B\\<longrightarrow>?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "using Cons.prems and Cons.hyps(2)"], ["proof (prove)\nusing this:\n  is_exec_of B e_B\n  Cons p ps = snd e_B\n\ngoal (1 subgoal):\n 1. is_exec_of B (fst e_B, ps) &&&\n    last_state\n     (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p", "by (simp_all add:is_exec_of_def,\n              cases \"(B,fst e_B, ps#p)\" rule:is_exec_frag_of.cases, auto,\n              cases \"(B,fst e_B, ps#p)\" rule:is_exec_frag_of.cases, auto)"], ["proof (state)\nthis:\n  is_exec_of B (fst e_B, ps)\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "from 1"], ["proof (chain)\npicking this:\n  is_exec_of B (fst e_B, ps)", "have 3:\"reachable B ?s\""], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "using last_state_reachable"], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n  is_exec_of ?A ?e \\<Longrightarrow> reachable ?A (last_state ?e)\n\ngoal (1 subgoal):\n 1. reachable B (last_state (fst e_B, ps))", "by fast"], ["proof (state)\nthis:\n  reachable B (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "obtain e where 4:\"fst e \\<in> f ?s\" and 5:\"last_state e = t'\" \n      and 6:\"is_exec_frag_of A e\"\n      and 7:\"let tr = trace (ioa.asig A) e in \n        if ?a \\<in> ext A then tr = [?a] else tr = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e \\<in> f (last_state (fst e_B, ps));\n         last_state e = t'; is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2 assms(1) 8 5 3"], ["proof (prove)\nusing this:\n  last_state\n   (fst e_B, ps) \\<midarrow>fst p\\<midarrow>B\\<longrightarrow> snd p\n  is_backward_sim f B A\n  t' \\<in> f (last_state e_B)\n  snd p = last_state e_B\n  reachable B (last_state (fst e_B, ps))\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>fst e \\<in> f (last_state (fst e_B, ps));\n         last_state e = t'; is_exec_frag_of A e;\n         let tr = trace (ioa.asig A) e\n         in if fst p \\<in> externals (ioa.asig A) then tr = [fst p]\n            else tr = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: is_backward_sim_def, metis)"], ["proof (state)\nthis:\n  fst e \\<in> f (last_state (fst e_B, ps))\n  last_state e = t'\n  is_exec_frag_of A e\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "obtain e_A' where ih1:\"is_exec_of A e_A'\" \n        and ih2:\"trace (ioa.asig A) e_A' = trace (ioa.asig A) ?e_B'\" \n        and ih3:\"last_state e_A' = fst e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e_A'.\n        \\<lbrakk>is_exec_of A e_A';\n         trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n         last_state e_A' = fst e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1 4 Cons.hyps(1)"], ["proof (prove)\nusing this:\n  is_exec_of B (fst e_B, ps)\n  fst e \\<in> f (last_state (fst e_B, ps))\n  \\<lbrakk>ps = snd ?e_B; is_exec_of B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<forall>s\\<in>f (last_state ?e_B).\n                       \\<exists>e_A.\n                          is_exec_of A e_A \\<and>\n                          trace (ioa.asig A) e_A =\n                          trace (ioa.asig A) ?e_B \\<and>\n                          last_state e_A = s\n\ngoal (1 subgoal):\n 1. (\\<And>e_A'.\n        \\<lbrakk>is_exec_of A e_A';\n         trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n         last_state e_A' = fst e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis snd_conv)"], ["proof (state)\nthis:\n  is_exec_of A e_A'\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  last_state e_A' = fst e\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "let ?e_A = \"append_exec e_A' e\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have \"is_exec_of A ?e_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "using ih1 ih3 4 6 append_exec_frags_is_exec_frag[of A e e_A']"], ["proof (prove)\nusing this:\n  is_exec_of A e_A'\n  last_state e_A' = fst e\n  fst e \\<in> f (last_state (fst e_B, ps))\n  is_exec_frag_of A e\n  \\<lbrakk>is_exec_frag_of A e; last_state e = fst e_A';\n   is_exec_frag_of A e_A'\\<rbrakk>\n  \\<Longrightarrow> is_exec_frag_of A (append_exec e e_A')\n\ngoal (1 subgoal):\n 1. is_exec_of A (append_exec e_A' e)", "by (metis append_exec_def append_exec_frags_is_exec_frag \n            fst_conv is_exec_of_def)"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "moreover"], ["proof (state)\nthis:\n  is_exec_of A (append_exec e_A' e)\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have \"trace (ioa.asig A) ?e_A = trace (ioa.asig A) e_B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "using ih2 Cons.hyps(2) 7 step_eq_traces[of A e_A' ?e_B' ?a e]"], ["proof (prove)\nusing this:\n  trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps)\n  Cons p ps = snd e_B\n  let tr = trace (ioa.asig A) e\n  in if fst p \\<in> externals (ioa.asig A) then tr = [fst p] else tr = []\n  \\<lbrakk>trace (ioa.asig A) e_A' = trace (ioa.asig A) (fst e_B, ps);\n   if fst p \\<in> externals (ioa.asig A) then trace (ioa.asig A) e = [fst p]\n   else trace (ioa.asig A) e = []\\<rbrakk>\n  \\<Longrightarrow> trace (ioa.asig A) (append_exec e_A' e) =\n                    trace (ioa.asig A) (cons_exec (fst e_B, ps) (fst p, ?t))\n\ngoal (1 subgoal):\n 1. trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B", "by (auto simp add:cons_exec_def Let_def) (metis prod.collapse)"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "moreover"], ["proof (state)\nthis:\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "have \"last_state ?e_A = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) = t'", "using ih3 5 last_state_of_append"], ["proof (prove)\nusing this:\n  last_state e_A' = fst e\n  last_state e = t'\n  fst ?e' = last_state ?e \\<Longrightarrow>\n  last_state (append_exec ?e ?e') = last_state ?e'\n\ngoal (1 subgoal):\n 1. last_state (append_exec e_A' e) = t'", "by metis"], ["proof (state)\nthis:\n  last_state (append_exec e_A' e) = t'\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "ultimately"], ["proof (chain)\npicking this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) = t'", "have \"\\<exists> e_A . is_exec_of A e_A \n        \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\n        \\<and> last_state e_A = t'\""], ["proof (prove)\nusing this:\n  is_exec_of A (append_exec e_A' e)\n  trace (ioa.asig A) (append_exec e_A' e) = trace (ioa.asig A) e_B\n  last_state (append_exec e_A' e) = t'\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n       last_state e_A = t'", "by blast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = t'\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "}"], ["proof (state)\nthis:\n  ?t'2 \\<in> f (last_state e_B) \\<Longrightarrow>\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = ?t'2\n\ngoal (1 subgoal):\n 1. \\<And>a x e_B.\n       \\<lbrakk>\\<And>e_B.\n                   \\<lbrakk>x = snd e_B; is_exec_of B e_B\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = s;\n        Cons a x = snd e_B; is_exec_of B e_B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>f (last_state e_B).\n                            \\<exists>e_A.\n                               is_exec_of A e_A \\<and>\n                               trace (ioa.asig A) e_A =\n                               trace (ioa.asig A) e_B \\<and>\n                               last_state e_A = s", "thus ?case"], ["proof (prove)\nusing this:\n  ?t'2 \\<in> f (last_state e_B) \\<Longrightarrow>\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and>\n     trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n     last_state e_A = ?t'2\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>f (last_state e_B).\n       \\<exists>e_A.\n          is_exec_of A e_A \\<and>\n          trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n          last_state e_A = s", "by blast"], ["proof (state)\nthis:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "moreover"], ["proof (state)\nthis:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "from assms(1)"], ["proof (chain)\npicking this:\n  is_backward_sim f B A", "have total:\"\\<And> s . f s \\<noteq> {}\""], ["proof (prove)\nusing this:\n  is_backward_sim f B A\n\ngoal (1 subgoal):\n 1. \\<And>s. f s \\<noteq> {}", "by (simp add:is_backward_sim_def)"], ["proof (state)\nthis:\n  f ?s \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n  f ?s \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>f (last_state e_B).\n     \\<exists>e_A.\n        is_exec_of A e_A \\<and>\n        trace (ioa.asig A) e_A = trace (ioa.asig A) e_B \\<and>\n        last_state e_A = s\n  f ?s \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>e_A.\n       is_exec_of A e_A \\<and>\n       trace (ioa.asig A) e_A = trace (ioa.asig A) e_B", "by fast"], ["proof (state)\nthis:\n  \\<exists>e_A.\n     is_exec_of A e_A \\<and> trace (ioa.asig A) e_A = trace (ioa.asig A) e_B\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem backward_sim_soundness:\n  fixes A::\"('sA,'a)ioa\" and B::\"('sB,'a)ioa\" and f::\"'sB \\<Rightarrow> 'sA set\"\n  assumes \"is_backward_sim f B A\" and \"ext A = ext B\"\n  shows \"traces B \\<subseteq> traces A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "using assms backward_sim_execs exec_inc_imp_trace_inc"], ["proof (prove)\nusing this:\n  is_backward_sim f B A\n  externals (ioa.asig A) = externals (ioa.asig B)\n  \\<lbrakk>is_backward_sim ?f ?B ?A; is_exec_of ?B ?e_B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e_A.\n                       is_exec_of ?A e_A \\<and>\n                       trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) ?e_B\n  \\<lbrakk>externals (ioa.asig ?B) = externals (ioa.asig ?A);\n   \\<And>e_B.\n      is_exec_of ?B e_B \\<Longrightarrow>\n      \\<exists>e_A.\n         is_exec_of ?A e_A \\<and>\n         trace (ioa.asig ?A) e_A = trace (ioa.asig ?A) e_B\\<rbrakk>\n  \\<Longrightarrow> local.traces ?B \\<subseteq> local.traces ?A\n\ngoal (1 subgoal):\n 1. local.traces B \\<subseteq> local.traces A", "by metis"], ["", "end"], ["", "end"]]}