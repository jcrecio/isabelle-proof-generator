{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/SPRViewNonDetIndInit.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma tObsC_ii_abs_jview_eq[dest, intro]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_ii_abs t = tObsC_ii_abs t'\"", "lemma tObsC_ii_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> tObsC_ii_abs t\"", "lemma tObsC_ii_abs_conv:\n  \" v \\<in> tObsC_ii_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> v = tLast t')\"", "lemma agent_ii_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> agent_ii_abs a t\"", "lemma agent_ii_abs_tLastD[simp]:\n  \"v \\<in> agent_ii_abs a t \\<Longrightarrow> envObs a v = envObs a (tLast t)\"", "lemma agent_ii_abs_inv[dest]:\n  \"v \\<in> agent_ii_abs a t\n    \\<Longrightarrow> \\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t\n           \\<and> v = tLast t'\"", "lemma spr_ii_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_ii_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> snd s \\<in> fst s\"", "lemma spr_ii_simVal_def2[iff]:\n  \"spr_ii_simVal (spr_ii_sim t) = envVal (tLast t)\"", "lemma tSplice_jkbpC:\n  assumes tt': \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\"", "lemma spr_ii_sim_r:\n  \"sim_r SPR.MC spr_ii_simMC spr_ii_sim\"", "lemma spr_ii_sim: \"sim SPR.MC spr_ii_simMC spr_ii_sim\""], "translations": [["", "lemma tObsC_ii_abs_jview_eq[dest, intro]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_ii_abs t = tObsC_ii_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    tObsC_ii_abs t = tObsC_ii_abs t'", "unfolding tObsC_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    {tLast t' |t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t} =\n    {tLast t'a |t'a. t'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t'}", "by (fastforce dest: spr_jview_tObsC)"], ["", "lemma tObsC_ii_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> tObsC_ii_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> tObsC_ii_abs t", "unfolding tObsC_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> {tLast t' |t'.\n                               t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t}", "by blast"], ["", "lemma tObsC_ii_abs_conv:\n  \" v \\<in> tObsC_ii_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> v = tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> tObsC_ii_abs t) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> v = tLast t')", "unfolding tObsC_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> {tLast t' |t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t}) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> v = tLast t')", "by blast"], ["", "lemma agent_ii_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> agent_ii_abs a t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> agent_ii_abs a t", "unfolding agent_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> {tLast t' |t'.\n                               t' \\<in> SPR.jkbpC \\<and>\n                               spr_jview a t' = spr_jview a t}", "by blast"], ["", "lemma agent_ii_abs_tLastD[simp]:\n  \"v \\<in> agent_ii_abs a t \\<Longrightarrow> envObs a v = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> agent_ii_abs a t \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "unfolding agent_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {tLast t' |t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview a t' = spr_jview a t} \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "by auto"], ["", "lemma agent_ii_abs_inv[dest]:\n  \"v \\<in> agent_ii_abs a t\n    \\<Longrightarrow> \\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t\n           \\<and> v = tLast t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> agent_ii_abs a t \\<Longrightarrow>\n    \\<exists>t'.\n       t' \\<in> SPR.jkbpC \\<and>\n       spr_jview a t' = spr_jview a t \\<and> v = tLast t'", "unfolding agent_ii_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {tLast t' |t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview a t' = spr_jview a t} \\<Longrightarrow>\n    \\<exists>t'.\n       t' \\<in> SPR.jkbpC \\<and>\n       spr_jview a t' = spr_jview a t \\<and> v = tLast t'", "by blast"], ["", "(*>*)"], ["", "text\\<open>\n\nThe simulation is similar to the single-agent case\n(\\S\\ref{sec:kbps-spr-single-agent}); for a given canonical trace\n@{term \"t\"} it pairs the set of worlds that any agent considers\npossible with the final state of @{term \"t\"}:\n\n\\<close>"], ["", "type_synonym (in -) ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate =\n  \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState set\n \\<times> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\""], ["", "definition\n  spr_ii_sim :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n           \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate\"\nwhere \"spr_ii_sim \\<equiv> \\<lambda>t. (tObsC_ii_abs t, tLast t)\""], ["", "(*<*)"], ["", "lemma spr_ii_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_ii_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> snd s \\<in> fst s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_ii_sim t = s; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> snd s \\<in> fst s", "unfolding spr_ii_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(tObsC_ii_abs t, tLast t) = s; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> snd s \\<in> fst s", "by auto"], ["", "(*>*)"], ["", "text\\<open>\n\nThe Kripke structure over simulated traces is also quite similar:\n\n\\<close>"], ["", "definition\n  spr_ii_simRels :: \"'a \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate Relation\"\nwhere \"spr_ii_simRels \\<equiv> \\<lambda>a.\n  { (s, s') |s s'. envObs a (snd s) = envObs a (snd s') \\<and> fst s = fst s' }\""], ["", "definition\n  spr_ii_simVal :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate \\<Rightarrow> 'p \\<Rightarrow> bool\"\nwhere \"spr_ii_simVal \\<equiv> envVal \\<circ> snd\""], ["", "abbreviation\n  \"spr_ii_simMC \\<equiv> mkKripke (spr_ii_sim ` SPR.jkbpC) spr_ii_simRels spr_ii_simVal\""], ["", "(*<*)"], ["", "lemma spr_ii_simVal_def2[iff]:\n  \"spr_ii_simVal (spr_ii_sim t) = envVal (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_ii_simVal (spr_ii_sim t) = envVal (tLast t)", "unfolding spr_ii_sim_def spr_ii_simVal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envVal \\<circ> snd) (tObsC_ii_abs t, tLast t) = envVal (tLast t)", "by simp"], ["", "(* Same as for SPRViewNonDet but different base case. *)"], ["", "lemma tSplice_jkbpC:\n  assumes tt': \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC", "using tObsC_tLength[OF tObsC] tt' tObsC"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  {t, t'} \\<subseteq> SPR.jkbpC\n  tObsC t = tObsC t'\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC", "proof(induct rule: trace_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>{tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tInit\n                          s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit\n                                  s'\n                         \\<in> SPR.jkbpC\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "case (tInit s s')"], ["proof (state)\nthis:\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>{tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tInit\n                          s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit\n                                  s'\n                         \\<in> SPR.jkbpC\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "thus ?case"], ["proof (prove)\nusing this:\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (1 subgoal):\n 1. tInit s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit s'\n    \\<in> SPR.jkbpC", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> set envInit; s' \\<in> set envInit;\n     envObsC (es s) = envObsC (es s'); pubActs s = pubActs s'\\<rbrakk>\n    \\<Longrightarrow> sSplice a s s' \\<in> set envInit", "unfolding envInit_def sSplice_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> set (concat\n                           (map (\\<lambda>psf.\n                                    map (\\<lambda>esf.\n      \\<lparr>es = esf, ps = psf,\n         pubActs = (default, \\<lambda>_. default)\\<rparr>)\n                                     (fst envInitBits))\n                             (listToFuns (snd envInitBits) agents)));\n     s' \\<in> set (concat\n                    (map (\\<lambda>psf.\n                             map (\\<lambda>esf.\n                                     \\<lparr>es = esf, ps = psf,\n  pubActs = (default, \\<lambda>_. default)\\<rparr>)\n                              (fst envInitBits))\n                      (listToFuns (snd envInitBits) agents)));\n     envObsC (es s) = envObsC (es s'); pubActs s = pubActs s'\\<rbrakk>\n    \\<Longrightarrow> s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>\n                      \\<in> set (concat\n                                  (map (\\<lambda>psf.\n     map (\\<lambda>esf.\n             \\<lparr>es = esf, ps = psf,\n                pubActs = (default, \\<lambda>_. default)\\<rparr>)\n      (fst envInitBits))\n                                    (listToFuns (snd envInitBits) agents)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x esf xa esfa.\n       \\<lbrakk>envObsC esf = envObsC esfa;\n        x \\<in> set (listToFuns (snd envInitBits) agents);\n        esf \\<in> set (fst envInitBits);\n        s =\n        \\<lparr>es = esf, ps = x,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>;\n        xa \\<in> set (listToFuns (snd envInitBits) agents);\n        esfa \\<in> set (fst envInitBits);\n        s' =\n        \\<lparr>es = esfa, ps = xa,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xb\\<in>set\n    (listToFuns (snd envInitBits) agents).\n                            \\<lparr>es = esf, ps = x(a := xa a),\n                               pubActs =\n                                 (default, \\<lambda>_. default)\\<rparr>\n                            \\<in> (\\<lambda>esf.\n\\<lparr>es = esf, ps = xb,\n   pubActs = (default, \\<lambda>_. default)\\<rparr>) `\n                                  set (fst envInitBits)", "apply (rule_tac x=\"x(a := xa a)\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x esf xa esfa.\n       \\<lbrakk>envObsC esf = envObsC esfa;\n        x \\<in> set (listToFuns (snd envInitBits) agents);\n        esf \\<in> set (fst envInitBits);\n        s =\n        \\<lparr>es = esf, ps = x,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>;\n        xa \\<in> set (listToFuns (snd envInitBits) agents);\n        esfa \\<in> set (fst envInitBits);\n        s' =\n        \\<lparr>es = esfa, ps = xa,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>es = esf, ps = x(a := xa a),\n                            pubActs = (default, \\<lambda>_. default)\\<rparr>\n                         \\<in> (\\<lambda>esf.\n                                   \\<lparr>es = esf, ps = x(a := xa a),\npubActs = (default, \\<lambda>_. default)\\<rparr>) `\n                               set (fst envInitBits)\n 2. \\<And>x esf xa esfa.\n       \\<lbrakk>envObsC esf = envObsC esfa;\n        x \\<in> set (listToFuns (snd envInitBits) agents);\n        esf \\<in> set (fst envInitBits);\n        s =\n        \\<lparr>es = esf, ps = x,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>;\n        xa \\<in> set (listToFuns (snd envInitBits) agents);\n        esfa \\<in> set (fst envInitBits);\n        s' =\n        \\<lparr>es = esfa, ps = xa,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x(a := xa a)\n                         \\<in> set (listToFuns (snd envInitBits) agents)", "using listToFun_splice[OF agents]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?g \\<in> set (listToFuns ?f agents);\n   ?h \\<in> set (listToFuns ?f agents)\\<rbrakk>\n  \\<Longrightarrow> ?g(?x := ?h ?x) \\<in> set (listToFuns ?f agents)\n\ngoal (2 subgoals):\n 1. \\<And>x esf xa esfa.\n       \\<lbrakk>envObsC esf = envObsC esfa;\n        x \\<in> set (listToFuns (snd envInitBits) agents);\n        esf \\<in> set (fst envInitBits);\n        s =\n        \\<lparr>es = esf, ps = x,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>;\n        xa \\<in> set (listToFuns (snd envInitBits) agents);\n        esfa \\<in> set (fst envInitBits);\n        s' =\n        \\<lparr>es = esfa, ps = xa,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>es = esf, ps = x(a := xa a),\n                            pubActs = (default, \\<lambda>_. default)\\<rparr>\n                         \\<in> (\\<lambda>esf.\n                                   \\<lparr>es = esf, ps = x(a := xa a),\npubActs = (default, \\<lambda>_. default)\\<rparr>) `\n                               set (fst envInitBits)\n 2. \\<And>x esf xa esfa.\n       \\<lbrakk>envObsC esf = envObsC esfa;\n        x \\<in> set (listToFuns (snd envInitBits) agents);\n        esf \\<in> set (fst envInitBits);\n        s =\n        \\<lparr>es = esf, ps = x,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>;\n        xa \\<in> set (listToFuns (snd envInitBits) agents);\n        esfa \\<in> set (fst envInitBits);\n        s' =\n        \\<lparr>es = esfa, ps = xa,\n           pubActs = (default, \\<lambda>_. default)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x(a := xa a)\n                         \\<in> set (listToFuns (snd envInitBits) agents)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  tInit s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit s'\n  \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "case (tStep s s' t t')"], ["proof (state)\nthis:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "hence tt': \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\"\n    and tLen: \"tLength t' = tLength t\"\n    and tObsC: \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC &&&\n    tLength t' = tLength t &&&\n    tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "by auto"], ["proof (state)\nthis:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n  tLength t' = tLength t\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "hence tt'n: \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpCn (tLength t)\""], ["proof (prove)\nusing this:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n  tLength t' = tLength t\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n    \\<in> SPR.jkbpCn (tLength t)", "by auto"], ["proof (state)\nthis:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have ts: \"t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\"\n   and t's': \"t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t)) &&&\n    t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n    \\<Longrightarrow> t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n    \\<Longrightarrow> t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply ((rule SPR.jkbpC_tLength_inv, simp_all)[1])+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from ts"], ["proof (chain)\npicking this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))", "obtain eact aact\n    where eact: \"eact \\<in> set (envAction (tLast t))\"\n      and aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t a)\"\n      and trans: \"envTrans eact aact (tLast t) = s\""], ["proof (prove)\nusing this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a);\n         envTrans eact aact (tLast t) = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto iff: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  envTrans eact aact (tLast t) = s\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from t's'"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "obtain eact' aact'\n    where eact': \"eact' \\<in> set (envAction (tLast t'))\"\n      and aact': \"\\<forall>a. aact' a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t'))) t' a)\"\n      and trans': \"envTrans eact' aact' (tLast t') = s'\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. (\\<And>eact' aact'.\n        \\<lbrakk>eact' \\<in> set (envAction (tLast t'));\n         \\<forall>a.\n            aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         envTrans eact' aact' (tLast t') = s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto iff: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eact' \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "define aact'' where \"aact'' = aact (a := aact' a)\""], ["proof (state)\nthis:\n  aact'' = aact(a := aact' a)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tObsC trans trans'"], ["proof (chain)\npicking this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'", "have aact''_fst: \"fst \\<circ> aact'' = fst \\<circ> aact\""], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. fst \\<circ> aact'' = fst \\<circ> aact", "unfolding envTrans_def aact''_def"], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n     ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n  s\n  \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n     ps = snd \\<circ> aact',\n     pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n  s'\n\ngoal (1 subgoal):\n 1. fst \\<circ> aact(a := aact' a) = fst \\<circ> aact", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n        ps = snd \\<circ> aact,\n        pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n     s;\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n     s'\\<rbrakk>\n    \\<Longrightarrow> fst \\<circ> aact(a := aact' a) = fst \\<circ> aact", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n        \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n           ps = snd \\<circ> aact,\n           pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n        s;\n        \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n           ps = snd \\<circ> aact',\n           pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n        s'\\<rbrakk>\n       \\<Longrightarrow> (fst \\<circ> aact(a := aact' a)) x =\n                         (fst \\<circ> aact) x", "apply (auto iff: tObsC_tStep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s =\n             \\<lparr>es = envTransES eact (fst \\<circ> aact')\n                           (es (tLast t)),\n                ps = snd \\<circ> aact,\n                pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     s' =\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     tObsC t = tObsC t';\n     envObsC (envTransES eact (fst \\<circ> aact') (es (tLast t))) =\n     envObsC (envTransES eact' (fst \\<circ> aact') (es (tLast t')));\n     fst eact = fst eact'; fst \\<circ> aact = fst \\<circ> aact'\\<rbrakk>\n    \\<Longrightarrow> fst (aact' a) = fst (aact a)", "apply (erule o_eq_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s =\n             \\<lparr>es = envTransES eact (fst \\<circ> aact')\n                           (es (tLast t)),\n                ps = snd \\<circ> aact,\n                pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     s' =\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     tObsC t = tObsC t';\n     envObsC (envTransES eact (fst \\<circ> aact') (es (tLast t))) =\n     envObsC (envTransES eact' (fst \\<circ> aact') (es (tLast t')));\n     fst eact = fst eact'; \\<And>v. fst (aact v) = fst (aact' v)\\<rbrakk>\n    \\<Longrightarrow> fst (aact' a) = fst (aact a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst \\<circ> aact'' = fst \\<circ> aact\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tObsC trans trans'"], ["proof (chain)\npicking this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'", "have aact''_snd: \"snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\""], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)", "unfolding envTrans_def aact''_def"], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n     ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n  s\n  \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n     ps = snd \\<circ> aact',\n     pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n  s'\n\ngoal (1 subgoal):\n 1. snd \\<circ> aact(a := aact' a) = (snd \\<circ> aact)(a := ps s' a)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n        ps = snd \\<circ> aact,\n        pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n     s;\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n     s'\\<rbrakk>\n    \\<Longrightarrow> snd \\<circ> aact(a := aact' a) = (snd \\<circ> aact)\n                      (a := ps s' a)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n        \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n           ps = snd \\<circ> aact,\n           pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n        s;\n        \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n           ps = snd \\<circ> aact',\n           pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n        s'\\<rbrakk>\n       \\<Longrightarrow> (snd \\<circ> aact(a := aact' a)) x =\n                         ((snd \\<circ> aact)(a := ps s' a)) x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "have \"envTrans eact aact'' (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))\n      = sSplice a (envTrans eact aact (tLast t)) s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envTrans eact aact''\n     (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    sSplice a (envTrans eact aact (tLast t)) s'", "apply (simp only: envTrans_def sSplice_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>es = envTransES eact (fst \\<circ> aact'')\n                  (es (tLast\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))),\n       ps = snd \\<circ> aact'',\n       pubActs = (fst eact, fst \\<circ> aact'')\\<rparr> =\n    \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n       ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr>\n    \\<lparr>ps :=\n              (ps \\<lparr>es = envTransES eact (fst \\<circ> aact)\n                                (es (tLast t)),\n                     ps = snd \\<circ> aact,\n                     pubActs = (fst eact, fst \\<circ> aact)\\<rparr>)\n              (a := ps s' a)\\<rparr>", "using tSplice_es[OF tLen[symmetric]] aact''_fst aact''_snd"], ["proof (prove)\nusing this:\n  es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> t')) =\n  es (tLast t)\n  fst \\<circ> aact'' = fst \\<circ> aact\n  snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\n\ngoal (1 subgoal):\n 1. \\<lparr>es = envTransES eact (fst \\<circ> aact'')\n                  (es (tLast\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))),\n       ps = snd \\<circ> aact'',\n       pubActs = (fst eact, fst \\<circ> aact'')\\<rparr> =\n    \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n       ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr>\n    \\<lparr>ps :=\n              (ps \\<lparr>es = envTransES eact (fst \\<circ> aact)\n                                (es (tLast t)),\n                     ps = snd \\<circ> aact,\n                     pubActs = (fst eact, fst \\<circ> aact)\\<rparr>)\n              (a := ps s' a)\\<rparr>", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "{"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "have \"aact'' a' \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "proof(cases \"a' = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "case False"], ["proof (state)\nthis:\n  a' \\<noteq> a\n\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' \\<noteq> a", "have \"jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a'\n                     = jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t a'\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t))\n     (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n    jAction (SPR.MCn (tLength t)) t a'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t))\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')\n                       a' =\n                      jAction (SPR.MCn (tLength t)) t a'", "apply (rule S5n_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations (SPR.MCn (tLength t)) a'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations (SPR.MCn (tLength t)) a'", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a'", "using tSplice_spr_jview_not_a tt'"], ["proof (prove)\nusing this:\n  \\<lbrakk>tObsC ?t = tObsC ?t'; ?a \\<noteq> ?a'\\<rbrakk>\n  \\<Longrightarrow> spr_jview ?a'\n                     (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t') =\n                    spr_jview ?a' ?t\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a'", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with False aact"], ["proof (chain)\npicking this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'", "show ?thesis"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "unfolding aact''_def"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (1 subgoal):\n 1. (aact(a := aact' a)) a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "by simp"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "case True"], ["proof (state)\nthis:\n  a' = a\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' = a", "have \"jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a\n                     = jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t' a\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' = a\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t))\n     (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n    jAction (SPR.MCn (tLength t)) t' a", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t))\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n                      jAction (SPR.MCn (tLength t)) t' a", "apply (rule S5n_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations (SPR.MCn (tLength t)) a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations (SPR.MCn (tLength t)) a", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a", "using tSplice_spr_jview_a tt'"], ["proof (prove)\nusing this:\n  tObsC ?t = tObsC ?t' \\<Longrightarrow>\n  spr_jview ?a (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t') =\n  spr_jview ?a ?t'\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with True aact' tLen"], ["proof (chain)\npicking this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a", "show ?thesis"], ["proof (prove)\nusing this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "unfolding aact''_def"], ["proof (prove)\nusing this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. (aact(a := aact' a)) a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "by simp"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "}"], ["proof (state)\nthis:\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have \"envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = envAction (tLast t)\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    envAction (tLast t)", "using tSplice_envAction"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  tLength ?t = tLength ?t' \\<Longrightarrow>\n  envAction (tLast (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t')) =\n  envAction (tLast ?t)\n\ngoal (1 subgoal):\n 1. envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    envAction (tLast t)", "by blast"], ["proof (state)\nthis:\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "note eact trans tt'n"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "ultimately"], ["proof (chain)\npicking this:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)", "have \"(t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto> sSplice a s s' \\<in> SPR.jkbpCn (Suc (tLength t))\""], ["proof (prove)\nusing this:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpCn (Suc (tLength t))", "apply (simp add: Let_def del: split_paired_Ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>eact aact.\n                         sSplice a s s' =\n                         envTrans eact aact\n                          (tLast\n                            (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                         eact \\<in> set (envAction (tLast t)) \\<and>\n                         (\\<forall>aa.\n                             aact aa\n                             \\<in> set (jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply (rule exI[where x=\"eact\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aact.\n                         sSplice a s s' =\n                         envTrans eact aact\n                          (tLast\n                            (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                         eact \\<in> set (envAction (tLast t)) \\<and>\n                         (\\<forall>aa.\n                             aact aa\n                             \\<in> set (jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply (rule exI[where x=\"aact''\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> sSplice a s s' =\n                      envTrans eact aact''\n                       (tLast\n                         (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                      eact \\<in> set (envAction (tLast t)) \\<and>\n                      (\\<forall>aa.\n                          aact'' aa\n                          \\<in> set (jAction (SPR.MCn (tLength t))\n(t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n  sSplice a s s'\n  \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "thus ?case"], ["proof (prove)\nusing this:\n  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n  sSplice a s s'\n  \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. t \\<leadsto>\n    s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto> s'\n    \\<in> SPR.jkbpC", "apply (simp only: tZip.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpCn (Suc (tLength t)) \\<Longrightarrow>\n    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpC", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t \\<leadsto> s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto> s'\n  \\<in> SPR.jkbpC\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_ii_sim_r:\n  \"sim_r SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "proof(rule sim_rI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "fix a p q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "assume pT: \"p \\<in> worlds SPR.MC\"\n     and fpq': \"(spr_ii_sim p, q') \\<in> relations spr_ii_simMC a\""], ["proof (state)\nthis:\n  p \\<in> worlds SPR.MC\n  (spr_ii_sim p, q') \\<in> relations spr_ii_simMC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_ii_sim p, q') \\<in> relations spr_ii_simMC a", "obtain vq\n    where q': \"q' = (tObsC_ii_abs p, vq)\"\n      and vq: \"envObs a (tLast p) = envObs a vq\""], ["proof (prove)\nusing this:\n  (spr_ii_sim p, q') \\<in> relations spr_ii_simMC a\n\ngoal (1 subgoal):\n 1. (\\<And>vq.\n        \\<lbrakk>q' = (tObsC_ii_abs p, vq);\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mkKripke_def spr_ii_sim_def spr_ii_simRels_def"], ["proof (prove)\nusing this:\n  ((tObsC_ii_abs p, tLast p), q')\n  \\<in> relations\n         \\<lparr>worlds =\n                   (\\<lambda>t. (tObsC_ii_abs t, tLast t)) ` SPR.jkbpC,\n            relations =\n              \\<lambda>a.\n                 Restr\n                  {(s, s') |s s'.\n                   envObs a (snd s) = envObs a (snd s') \\<and>\n                   fst s = fst s'}\n                  ((\\<lambda>t. (tObsC_ii_abs t, tLast t)) ` SPR.jkbpC),\n            valuation = spr_ii_simVal\\<rparr>\n         a\n\ngoal (1 subgoal):\n 1. (\\<And>vq.\n        \\<lbrakk>q' = (tObsC_ii_abs p, vq);\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  q' = (tObsC_ii_abs p, vq)\n  envObs a (tLast p) = envObs a vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_ii_sim p, q') \\<in> relations spr_ii_simMC a", "have \"q' \\<in> worlds spr_ii_simMC\""], ["proof (prove)\nusing this:\n  (spr_ii_sim p, q') \\<in> relations spr_ii_simMC a\n\ngoal (1 subgoal):\n 1. q' \\<in> worlds spr_ii_simMC", "by simp"], ["proof (state)\nthis:\n  q' \\<in> worlds spr_ii_simMC\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "with q'"], ["proof (chain)\npicking this:\n  q' = (tObsC_ii_abs p, vq)\n  q' \\<in> worlds spr_ii_simMC", "have \"vq \\<in> tObsC_ii_abs p\""], ["proof (prove)\nusing this:\n  q' = (tObsC_ii_abs p, vq)\n  q' \\<in> worlds spr_ii_simMC\n\ngoal (1 subgoal):\n 1. vq \\<in> tObsC_ii_abs p", "using spr_ii_sim_tFirst_tLast[where s=q']"], ["proof (prove)\nusing this:\n  q' = (tObsC_ii_abs p, vq)\n  q' \\<in> worlds spr_ii_simMC\n  \\<lbrakk>spr_ii_sim ?t = q'; ?t \\<in> SPR.jkbpC\\<rbrakk>\n  \\<Longrightarrow> snd q' \\<in> fst q'\n\ngoal (1 subgoal):\n 1. vq \\<in> tObsC_ii_abs p", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vq \\<in> tObsC_ii_abs p\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "then"], ["proof (chain)\npicking this:\n  vq \\<in> tObsC_ii_abs p", "obtain t\n    where tT: \"t \\<in> SPR.jkbpC\"\n      and tp: \"tObsC t = tObsC p\"\n      and tvq: \"tLast t = vq\""], ["proof (prove)\nusing this:\n  vq \\<in> tObsC_ii_abs p\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> SPR.jkbpC; tObsC t = tObsC p; tLast t = vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: tObsC_ii_abs_conv)"], ["proof (state)\nthis:\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "define q where \"q = t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p\""], ["proof (state)\nthis:\n  q = t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "from tp"], ["proof (chain)\npicking this:\n  tObsC t = tObsC p", "have \"spr_jview a p = spr_jview a q\""], ["proof (prove)\nusing this:\n  tObsC t = tObsC p\n\ngoal (1 subgoal):\n 1. spr_jview a p = spr_jview a q", "unfolding q_def"], ["proof (prove)\nusing this:\n  tObsC t = tObsC p\n\ngoal (1 subgoal):\n 1. spr_jview a p =\n    spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)", "by (simp add: tSplice_spr_jview_a)"], ["proof (state)\nthis:\n  spr_jview a p = spr_jview a q\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "with pT tT tp"], ["proof (chain)\npicking this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  spr_jview a p = spr_jview a q", "have pt: \"(p, q) \\<in> relations SPR.MC a\""], ["proof (prove)\nusing this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  spr_jview a p = spr_jview a q\n\ngoal (1 subgoal):\n 1. (p, q) \\<in> relations SPR.MC a", "unfolding SPR.mkM_def q_def"], ["proof (prove)\nusing this:\n  p \\<in> worlds\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   {(t, t').\n                    {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                    spr_jview a t = spr_jview a t'},\n              valuation = envVal \\<circ> tLast\\<rparr>\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  spr_jview a p =\n  spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\n\ngoal (1 subgoal):\n 1. (p, t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\n    \\<in> relations\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   {(t, t').\n                    {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                    spr_jview a t = spr_jview a t'},\n              valuation = envVal \\<circ> tLast\\<rparr>\n           a", "by (simp add: tSplice_jkbpC)"], ["proof (state)\nthis:\n  (p, q) \\<in> relations SPR.MC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "from q' vq tp tvq"], ["proof (chain)\npicking this:\n  q' = (tObsC_ii_abs p, vq)\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tLast t = vq", "have ftq': \"spr_ii_sim q = q'\""], ["proof (prove)\nusing this:\n  q' = (tObsC_ii_abs p, vq)\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. spr_ii_sim q = q'", "unfolding spr_ii_sim_def q_def"], ["proof (prove)\nusing this:\n  q' = (tObsC_ii_abs p, vq)\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. (tObsC_ii_abs (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n     tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)) =\n    q'", "using tSplice_tObsC[where a=a and t=t and t'=p]"], ["proof (prove)\nusing this:\n  q' = (tObsC_ii_abs p, vq)\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tLast t = vq\n  tObsC t = tObsC p \\<Longrightarrow>\n  tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC t\n\ngoal (1 subgoal):\n 1. (tObsC_ii_abs (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n     tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)) =\n    q'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q' = (tObsC_ii_abs p, tLast t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tObsC_ii_abs\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tObsC_ii_abs p \\<and>\n                      tLast\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tLast t", "apply (intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>q' = (tObsC_ii_abs p, tLast t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tObsC_ii_abs\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tObsC_ii_abs p\n 2. \\<lbrakk>q' = (tObsC_ii_abs p, tLast t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tLast\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tLast t", "apply (auto dest: tObsC_tLength)[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>q' = (tObsC_ii_abs p, tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t;\n        x \\<in> tObsC_ii_abs\n                 (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> tObsC_ii_abs p\n 2. \\<And>x.\n       \\<lbrakk>q' = (tObsC_ii_abs p, tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t; x \\<in> tObsC_ii_abs p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> tObsC_ii_abs\n                                  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)", "unfolding tObsC_ii_abs_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>q' =\n                ({tLast t' |t'.\n                  t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p},\n                 tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t;\n        x \\<in> {tLast t' |t'.\n                 t' \\<in> SPR.jkbpC \\<and>\n                 tObsC t' =\n                 tObsC\n                  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {tLast t' |t'.\n                                  t' \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC p}\n 2. \\<And>x.\n       \\<lbrakk>q' =\n                ({tLast t' |t'.\n                  t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p},\n                 tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t;\n        x \\<in> {tLast t' |t'.\n                 t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {tLast t' |t'.\n                                  t' \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' =\n                                  tObsC\n                                   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)}", "(* FIXME abstract *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>q' =\n                ({tLast t' |t'.\n                  t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p},\n                 tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t;\n        x \\<in> {tLast t' |t'.\n                 t' \\<in> SPR.jkbpC \\<and>\n                 tObsC t' =\n                 tObsC\n                  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {tLast t' |t'.\n                                  t' \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC p}\n 2. \\<And>x.\n       \\<lbrakk>q' =\n                ({tLast t' |t'.\n                  t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p},\n                 tLast t);\n        envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n        tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n        vq = tLast t;\n        x \\<in> {tLast t' |t'.\n                 t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {tLast t' |t'.\n                                  t' \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' =\n                                  tObsC\n                                   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_ii_sim q = q'\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_ii_sim u, v') \\<in> relations spr_ii_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_ii_sim v = v'", "from pt ftq'"], ["proof (chain)\npicking this:\n  (p, q) \\<in> relations SPR.MC a\n  spr_ii_sim q = q'", "show \"\\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_ii_sim q = q'\""], ["proof (prove)\nusing this:\n  (p, q) \\<in> relations SPR.MC a\n  spr_ii_sim q = q'\n\ngoal (1 subgoal):\n 1. \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_ii_sim q = q'", "by blast"], ["proof (state)\nthis:\n  \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_ii_sim q = q'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe proofs that this simulation is adequate are similar to those in\nthe previous section. We elide the details.\n\n\\<close>"], ["", "lemma spr_ii_sim: \"sim SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_ii_simMC spr_ii_sim", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_ii_simMC spr_ii_sim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. sim_range SPR.MC spr_ii_simMC spr_ii_sim\n 2. sim_val SPR.MC spr_ii_simMC spr_ii_sim\n 3. sim_f SPR.MC spr_ii_simMC spr_ii_sim\n 4. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "show \"sim_range SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_range SPR.MC spr_ii_simMC spr_ii_sim", "by (rule sim_rangeI) (simp_all add: spr_ii_sim_def)"], ["proof (state)\nthis:\n  sim_range SPR.MC spr_ii_simMC spr_ii_sim\n\ngoal (3 subgoals):\n 1. sim_val SPR.MC spr_ii_simMC spr_ii_sim\n 2. sim_f SPR.MC spr_ii_simMC spr_ii_sim\n 3. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sim_val SPR.MC spr_ii_simMC spr_ii_sim\n 2. sim_f SPR.MC spr_ii_simMC spr_ii_sim\n 3. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "show \"sim_val SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val SPR.MC spr_ii_simMC spr_ii_sim", "by (rule sim_valI) simp"], ["proof (state)\nthis:\n  sim_val SPR.MC spr_ii_simMC spr_ii_sim\n\ngoal (2 subgoals):\n 1. sim_f SPR.MC spr_ii_simMC spr_ii_sim\n 2. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sim_f SPR.MC spr_ii_simMC spr_ii_sim\n 2. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "show \"sim_f SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f SPR.MC spr_ii_simMC spr_ii_sim", "unfolding spr_ii_simRels_def spr_ii_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f\n     \\<lparr>worlds = SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             {(t, t').\n              {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n              spr_jview a t = spr_jview a t'},\n        valuation = envVal \\<circ> tLast\\<rparr>\n     \\<lparr>worlds = (\\<lambda>t. (tObsC_ii_abs t, tLast t)) ` SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             Restr\n              {(s, s') |s s'.\n               envObs a (snd s) = envObs a (snd s') \\<and> fst s = fst s'}\n              ((\\<lambda>t. (tObsC_ii_abs t, tLast t)) ` SPR.jkbpC),\n        valuation = spr_ii_simVal\\<rparr>\n     (\\<lambda>t. (tObsC_ii_abs t, tLast t))", "by (rule sim_fI, auto simp del: split_paired_Ex)"], ["proof (state)\nthis:\n  sim_f SPR.MC spr_ii_simMC spr_ii_sim\n\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "show \"sim_r SPR.MC spr_ii_simMC spr_ii_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_ii_simMC spr_ii_sim", "by (rule spr_ii_sim_r)"], ["proof (state)\nthis:\n  sim_r SPR.MC spr_ii_simMC spr_ii_sim\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "end"], ["", "(* context FiniteBroadcastEnvironment *)"], ["", "sublocale FiniteBroadcastEnvironmentIndependentInit\n        < SPRii: SimIncrEnvironment jkbp envInit envAction envTrans envVal\n                                       spr_jview envObs spr_jviewInit spr_jviewIncr\n                                       spr_ii_sim spr_ii_simRels spr_ii_simVal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_ii_sim spr_ii_simRels\n     spr_ii_simVal", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_ii_sim spr_ii_simRels\n     spr_ii_simVal", "by standard (simp add: spr_ii_sim)"], ["", "end"], ["", "(*>*)"]]}