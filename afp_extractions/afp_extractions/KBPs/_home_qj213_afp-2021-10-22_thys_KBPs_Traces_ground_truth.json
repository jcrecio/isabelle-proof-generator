{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/Traces.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma tLast_tInit_comp[simp]: \"tLast \\<circ> tInit = id\"", "lemma tLength_0_conv:\n  \"(tLength t = 0) \\<longleftrightarrow> (\\<exists>s. t = tInit s)\"", "lemma tLength_g0_conv:\n  \"(tLength t > 0) \\<longleftrightarrow> (\\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t = Suc (tLength t'))\"", "lemma tLength_Suc:\n  \"tLength t = Suc n \\<Longrightarrow> (\\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t' = n)\"", "lemma trace_induct2[consumes 1, case_names tInit tStep]:\n  assumes tLen: \"tLength t = tLength t'\"\n      and tI: \"\\<And>s s'. P (tInit s) (tInit s')\"\n      and tS: \"\\<And>s s' t t'. \\<lbrakk> tLength t = tLength t'; P t t' \\<rbrakk>\n               \\<Longrightarrow> P (t \\<leadsto> s) (t' \\<leadsto> s')\"\n  shows \"P t t'\"", "lemma tLength_tMap[iff]: \"tLength (tMap f t) = tLength t\"", "lemma tMap_is_tInit[iff]: \"(tMap f t = tInit s) \\<longleftrightarrow> (\\<exists>s'. t = tInit s' \\<and> f s' = s)\"", "lemma tInit_is_tMap[iff]: \"(tInit s = tMap f t) \\<longleftrightarrow> (\\<exists>s'. t = tInit s' \\<and> f s' = s)\"", "lemma tStep_is_tMap_conv[iff]:\n \"(tp \\<leadsto> s = tMap f t) \\<longleftrightarrow> (\\<exists>tp' s'. t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tp = tMap f tp')\"", "lemma tMap_is_tStep_conv[iff]:\n \"(tMap f t = tp \\<leadsto> s) \\<longleftrightarrow> (\\<exists>tp' s'. t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tMap f tp' = tp)\"", "lemma tMap_eq_imp_tLength_eq:\n  assumes \"tMap f t = tMap f' t'\"\n  shows \"tLength t = tLength t'\"", "lemma tMap_tFirst[iff]:\n  \"tFirst (tMap f t) = f (tFirst t)\"", "lemma tMap_tLast[iff]:\n  \"tLast (tMap f t) = f (tLast t)\"", "lemma tMap_tFirst_inv:\n  assumes M: \"tMap f t = tMap f' t'\"\n  shows \"f (tFirst t) = f' (tFirst t')\"", "lemma tMap_tLast_inv:\n  assumes M: \"tMap f t = tMap f' t'\"\n  shows \"f (tLast t) = f' (tLast t')\"", "lemma tLength_tZip[iff]: \"tLength xs = tLength ys \\<Longrightarrow> tLength (tZip f xs ys) = tLength xs\""], "translations": [["", "lemma tLast_tInit_comp[simp]: \"tLast \\<circ> tInit = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast \\<circ> tInit = id", "by (rule ext) simp"], ["", "(*>*)"], ["", "text\\<open>\n\nWe provide a few of the standard list operations: @{term \"tLength\"},\n@{term \"tMap\"} and @{term \"tZip\"}. Our later ease hinges on taking the\nlength of a trace to be zero-based.\n\n\\<close>"], ["", "fun tLength :: \"'s Trace \\<Rightarrow> nat\" where\n    \"tLength (tInit s) = 0\"\n  | \"tLength (t \\<leadsto> s) = 1 + tLength t\""], ["", "(*<*)"], ["", "lemma tLength_0_conv:\n  \"(tLength t = 0) \\<longleftrightarrow> (\\<exists>s. t = tInit s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tLength t = 0) = (\\<exists>s. t = tInit s)", "by (cases t) simp_all"], ["", "lemma tLength_g0_conv:\n  \"(tLength t > 0) \\<longleftrightarrow> (\\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t = Suc (tLength t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < tLength t) =\n    (\\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t = Suc (tLength t'))", "by (cases t) simp_all"], ["", "lemma tLength_Suc:\n  \"tLength t = Suc n \\<Longrightarrow> (\\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t' = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLength t = Suc n \\<Longrightarrow>\n    \\<exists>s t'. t = t' \\<leadsto> s \\<and> tLength t' = n", "by (cases t) simp_all"], ["", "lemma trace_induct2[consumes 1, case_names tInit tStep]:\n  assumes tLen: \"tLength t = tLength t'\"\n      and tI: \"\\<And>s s'. P (tInit s) (tInit s')\"\n      and tS: \"\\<And>s s' t t'. \\<lbrakk> tLength t = tLength t'; P t t' \\<rbrakk>\n               \\<Longrightarrow> P (t \\<leadsto> s) (t' \\<leadsto> s')\"\n  shows \"P t t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P t t'", "using tLen"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n\ngoal (1 subgoal):\n 1. P t t'", "proof (induct t arbitrary: t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tLength (tInit x) = tLength t' \\<Longrightarrow> P (tInit x) t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'. tLength t = tLength t' \\<Longrightarrow> P t t';\n        tLength (t \\<leadsto> x2) = tLength t'\\<rbrakk>\n       \\<Longrightarrow> P (t \\<leadsto> x2) t'", "case (tInit s t')"], ["proof (state)\nthis:\n  tLength (tInit s) = tLength t'\n\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tLength (tInit x) = tLength t' \\<Longrightarrow> P (tInit x) t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'. tLength t = tLength t' \\<Longrightarrow> P t t';\n        tLength (t \\<leadsto> x2) = tLength t'\\<rbrakk>\n       \\<Longrightarrow> P (t \\<leadsto> x2) t'", "with tI"], ["proof (chain)\npicking this:\n  P (tInit ?s) (tInit ?s')\n  tLength (tInit s) = tLength t'", "show ?case"], ["proof (prove)\nusing this:\n  P (tInit ?s) (tInit ?s')\n  tLength (tInit s) = tLength t'\n\ngoal (1 subgoal):\n 1. P (tInit s) t'", "by (auto iff: tLength_0_conv)"], ["proof (state)\nthis:\n  P (tInit s) t'\n\ngoal (1 subgoal):\n 1. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'. tLength t = tLength t' \\<Longrightarrow> P t t';\n        tLength (t \\<leadsto> x2) = tLength t'\\<rbrakk>\n       \\<Longrightarrow> P (t \\<leadsto> x2) t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'. tLength t = tLength t' \\<Longrightarrow> P t t';\n        tLength (t \\<leadsto> x2) = tLength t'\\<rbrakk>\n       \\<Longrightarrow> P (t \\<leadsto> x2) t'", "case (tStep t s t')"], ["proof (state)\nthis:\n  tLength t = tLength ?t' \\<Longrightarrow> P t ?t'\n  tLength (t \\<leadsto> s) = tLength t'\n\ngoal (1 subgoal):\n 1. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'. tLength t = tLength t' \\<Longrightarrow> P t t';\n        tLength (t \\<leadsto> x2) = tLength t'\\<rbrakk>\n       \\<Longrightarrow> P (t \\<leadsto> x2) t'", "with tS"], ["proof (chain)\npicking this:\n  \\<lbrakk>tLength ?t = tLength ?t'; P ?t ?t'\\<rbrakk>\n  \\<Longrightarrow> P (?t \\<leadsto> ?s) (?t' \\<leadsto> ?s')\n  tLength t = tLength ?t' \\<Longrightarrow> P t ?t'\n  tLength (t \\<leadsto> s) = tLength t'", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>tLength ?t = tLength ?t'; P ?t ?t'\\<rbrakk>\n  \\<Longrightarrow> P (?t \\<leadsto> ?s) (?t' \\<leadsto> ?s')\n  tLength t = tLength ?t' \\<Longrightarrow> P t ?t'\n  tLength (t \\<leadsto> s) = tLength t'\n\ngoal (1 subgoal):\n 1. P (t \\<leadsto> s) t'", "by (cases t') simp_all"], ["proof (state)\nthis:\n  P (t \\<leadsto> s) t'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "fun tMap where\n  \"tMap f (tInit x) = tInit (f x)\"\n| \"tMap f (xs \\<leadsto> x) = tMap f xs \\<leadsto> f x\""], ["", "(*<*)"], ["", "lemma tLength_tMap[iff]: \"tLength (tMap f t) = tLength t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLength (tMap f t) = tLength t", "by (induct t) simp_all"], ["", "lemma tMap_is_tInit[iff]: \"(tMap f t = tInit s) \\<longleftrightarrow> (\\<exists>s'. t = tInit s' \\<and> f s' = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tMap f t = tInit s) = (\\<exists>s'. t = tInit s' \\<and> f s' = s)", "by (cases t) simp_all"], ["", "lemma tInit_is_tMap[iff]: \"(tInit s = tMap f t) \\<longleftrightarrow> (\\<exists>s'. t = tInit s' \\<and> f s' = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tInit s = tMap f t) = (\\<exists>s'. t = tInit s' \\<and> f s' = s)", "by (cases t) auto"], ["", "lemma tStep_is_tMap_conv[iff]:\n \"(tp \\<leadsto> s = tMap f t) \\<longleftrightarrow> (\\<exists>tp' s'. t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tp = tMap f tp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp \\<leadsto> s = tMap f t) =\n    (\\<exists>tp' s'.\n        t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tp = tMap f tp')", "by (cases t) auto"], ["", "lemma tMap_is_tStep_conv[iff]:\n \"(tMap f t = tp \\<leadsto> s) \\<longleftrightarrow> (\\<exists>tp' s'. t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tMap f tp' = tp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tMap f t = tp \\<leadsto> s) =\n    (\\<exists>tp' s'.\n        t = tp' \\<leadsto> s' \\<and> s = f s' \\<and> tMap f tp' = tp)", "by (cases t) auto"], ["", "lemma tMap_eq_imp_tLength_eq:\n  assumes \"tMap f t = tMap f' t'\"\n  shows \"tLength t = tLength t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "using assms"], ["proof (prove)\nusing this:\n  tMap f t = tMap f' t'\n\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "proof (induct t arbitrary: t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'.\n                   tMap f t = tMap f' t' \\<Longrightarrow>\n                   tLength t = tLength t';\n        tMap f (t \\<leadsto> x2) = tMap f' t'\\<rbrakk>\n       \\<Longrightarrow> tLength (t \\<leadsto> x2) = tLength t'", "case (tStep tp s t')"], ["proof (state)\nthis:\n  tMap f tp = tMap f' ?t' \\<Longrightarrow> tLength tp = tLength ?t'\n  tMap f (tp \\<leadsto> s) = tMap f' t'\n\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'.\n                   tMap f t = tMap f' t' \\<Longrightarrow>\n                   tLength t = tLength t';\n        tMap f (t \\<leadsto> x2) = tMap f' t'\\<rbrakk>\n       \\<Longrightarrow> tLength (t \\<leadsto> x2) = tLength t'", "then"], ["proof (chain)\npicking this:\n  tMap f tp = tMap f' ?t' \\<Longrightarrow> tLength tp = tLength ?t'\n  tMap f (tp \\<leadsto> s) = tMap f' t'", "obtain tp' s' where t': \"t' = tp' \\<leadsto> s'\""], ["proof (prove)\nusing this:\n  tMap f tp = tMap f' ?t' \\<Longrightarrow> tLength tp = tLength ?t'\n  tMap f (tp \\<leadsto> s) = tMap f' t'\n\ngoal (1 subgoal):\n 1. (\\<And>tp' s'.\n        t' = tp' \\<leadsto> s' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t' = tp' \\<leadsto> s'\n\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'.\n                   tMap f t = tMap f' t' \\<Longrightarrow>\n                   tLength t = tLength t';\n        tMap f (t \\<leadsto> x2) = tMap f' t'\\<rbrakk>\n       \\<Longrightarrow> tLength (t \\<leadsto> x2) = tLength t'", "moreover"], ["proof (state)\nthis:\n  t' = tp' \\<leadsto> s'\n\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'.\n                   tMap f t = tMap f' t' \\<Longrightarrow>\n                   tLength t = tLength t';\n        tMap f (t \\<leadsto> x2) = tMap f' t'\\<rbrakk>\n       \\<Longrightarrow> tLength (t \\<leadsto> x2) = tLength t'", "with tStep"], ["proof (chain)\npicking this:\n  tMap f tp = tMap f' ?t' \\<Longrightarrow> tLength tp = tLength ?t'\n  tMap f (tp \\<leadsto> s) = tMap f' t'\n  t' = tp' \\<leadsto> s'", "have \"tLength tp' = tLength tp\""], ["proof (prove)\nusing this:\n  tMap f tp = tMap f' ?t' \\<Longrightarrow> tLength tp = tLength ?t'\n  tMap f (tp \\<leadsto> s) = tMap f' t'\n  t' = tp' \\<leadsto> s'\n\ngoal (1 subgoal):\n 1. tLength tp' = tLength tp", "by simp"], ["proof (state)\nthis:\n  tLength tp' = tLength tp\n\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'\n 2. \\<And>t x2 t'.\n       \\<lbrakk>\\<And>t'.\n                   tMap f t = tMap f' t' \\<Longrightarrow>\n                   tLength t = tLength t';\n        tMap f (t \\<leadsto> x2) = tMap f' t'\\<rbrakk>\n       \\<Longrightarrow> tLength (t \\<leadsto> x2) = tLength t'", "with t'"], ["proof (chain)\npicking this:\n  t' = tp' \\<leadsto> s'\n  tLength tp' = tLength tp", "show ?case"], ["proof (prove)\nusing this:\n  t' = tp' \\<leadsto> s'\n  tLength tp' = tLength tp\n\ngoal (1 subgoal):\n 1. tLength (tp \\<leadsto> s) = tLength t'", "by simp"], ["proof (state)\nthis:\n  tLength (tp \\<leadsto> s) = tLength t'\n\ngoal (1 subgoal):\n 1. \\<And>x t'.\n       tMap f (tInit x) = tMap f' t' \\<Longrightarrow>\n       tLength (tInit x) = tLength t'", "qed auto"], ["", "lemma tMap_tFirst[iff]:\n  \"tFirst (tMap f t) = f (tFirst t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (tMap f t) = f (tFirst t)", "by (induct t) simp_all"], ["", "lemma tMap_tLast[iff]:\n  \"tLast (tMap f t) = f (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (tMap f t) = f (tLast t)", "by (induct t) simp_all"], ["", "lemma tMap_tFirst_inv:\n  assumes M: \"tMap f t = tMap f' t'\"\n  shows \"f (tFirst t) = f' (tFirst t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (tFirst t) = f' (tFirst t')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (tFirst t) = f' (tFirst t')", "from M"], ["proof (chain)\npicking this:\n  tMap f t = tMap f' t'", "have L: \"tLength t = tLength t'\""], ["proof (prove)\nusing this:\n  tMap f t = tMap f' t'\n\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "by (rule tMap_eq_imp_tLength_eq)"], ["proof (state)\nthis:\n  tLength t = tLength t'\n\ngoal (1 subgoal):\n 1. f (tFirst t) = f' (tFirst t')", "from L M"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  tMap f t = tMap f' t'", "show ?thesis"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tMap f t = tMap f' t'\n\ngoal (1 subgoal):\n 1. f (tFirst t) = f' (tFirst t')", "by (induct rule: trace_induct2, simp_all)"], ["proof (state)\nthis:\n  f (tFirst t) = f' (tFirst t')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tMap_tLast_inv:\n  assumes M: \"tMap f t = tMap f' t'\"\n  shows \"f (tLast t) = f' (tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (tLast t) = f' (tLast t')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (tLast t) = f' (tLast t')", "from M"], ["proof (chain)\npicking this:\n  tMap f t = tMap f' t'", "have L: \"tLength t = tLength t'\""], ["proof (prove)\nusing this:\n  tMap f t = tMap f' t'\n\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "by (rule tMap_eq_imp_tLength_eq)"], ["proof (state)\nthis:\n  tLength t = tLength t'\n\ngoal (1 subgoal):\n 1. f (tLast t) = f' (tLast t')", "from L M"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  tMap f t = tMap f' t'", "show ?thesis"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tMap f t = tMap f' t'\n\ngoal (1 subgoal):\n 1. f (tLast t) = f' (tLast t')", "by (induct rule: trace_induct2, simp_all)"], ["proof (state)\nthis:\n  f (tLast t) = f' (tLast t')\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "fun tZip where\n  \"tZip f (tInit x) (tInit y) = tInit (f x y)\"\n| \"tZip f (xs \\<leadsto> x) (ys \\<leadsto> y) = tZip f xs ys \\<leadsto> f x y\""], ["", "(*<*)"], ["", "lemma tLength_tZip[iff]: \"tLength xs = tLength ys \\<Longrightarrow> tLength (tZip f xs ys) = tLength xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLength xs = tLength ys \\<Longrightarrow>\n    tLength (tZip f xs ys) = tLength xs", "by (induct rule: trace_induct2) simp_all"], ["", "(*>*)\n(*<*)"], ["", "end"], ["", "(*>*)"]]}