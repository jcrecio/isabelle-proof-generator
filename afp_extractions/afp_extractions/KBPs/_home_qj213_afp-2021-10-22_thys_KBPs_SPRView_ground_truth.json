{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/SPRView.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma spr_jview_length_eq:\n  \"tLength (spr_jview a t) = tLength t\"", "lemma spr_jview_tInit_inv[simp]:\n  \"spr_jview a t = tInit obs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObs a s = obs)\"", "lemma spr_jview_tStep_eq_inv:\n  \"spr_jview a t' = spr_jview a (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\"", "lemma spr_jview_prefix_closed[dest]:\n  \"spr_jview a (t \\<leadsto> s) = spr_jview a (t' \\<leadsto> s') \\<Longrightarrow> spr_jview a t = spr_jview a t'\"", "lemma (in Environment) spr_tFirst[dest]:\n  assumes v: \"spr_jview a t = spr_jview a t'\"\n  shows \"envObs a (tFirst t) = envObs a (tFirst t')\"", "lemma (in Environment) spr_tLast[dest]:\n  assumes v: \"spr_jview a t = spr_jview a t'\"\n  shows \"envObs a (tLast t) = envObs a (tLast t')\""], "translations": [["", "lemma spr_jview_length_eq:\n  \"tLength (spr_jview a t) = tLength t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLength (spr_jview a t) = tLength t", "by (simp add: spr_jview_def)"], ["", "lemma spr_jview_tInit_inv[simp]:\n  \"spr_jview a t = tInit obs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObs a s = obs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (spr_jview a t = tInit obs) =\n    (\\<exists>s. t = tInit s \\<and> envObs a s = obs)", "by (cases t) (simp_all add: spr_jview_def)"], ["", "lemma spr_jview_tStep_eq_inv:\n  \"spr_jview a t' = spr_jview a (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a (t \\<leadsto> s) \\<Longrightarrow>\n    \\<exists>t'' s'. t' = t'' \\<leadsto> s'", "by (cases t') (simp_all add: spr_jview_def)"], ["", "lemma spr_jview_prefix_closed[dest]:\n  \"spr_jview a (t \\<leadsto> s) = spr_jview a (t' \\<leadsto> s') \\<Longrightarrow> spr_jview a t = spr_jview a t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a (t \\<leadsto> s) =\n    spr_jview a (t' \\<leadsto> s') \\<Longrightarrow>\n    spr_jview a t = spr_jview a t'", "by (simp add: spr_jview_def)"], ["", "end"], ["", "(*>*)"], ["", "text\\<open>\n\nThe corresponding incremental view appends a new observation to the\nexisting ones:\n\n\\<close>"], ["", "definition (in Environment) spr_jviewInit :: \"'a \\<Rightarrow> 'obs \\<Rightarrow> 'obs Trace\" where\n  \"spr_jviewInit \\<equiv> \\<lambda>a obs. tInit obs\""], ["", "definition (in Environment)\n  spr_jviewIncr :: \"'a \\<Rightarrow> 'obs \\<Rightarrow> 'obs Trace \\<Rightarrow> 'obs Trace\"\nwhere\n  \"spr_jviewIncr \\<equiv> \\<lambda>a obs' tobs. tobs \\<leadsto> obs'\""], ["", "sublocale Environment\n        < SPR: IncrEnvironment jkbp envInit envAction envTrans envVal\n                spr_jview envObs spr_jviewInit spr_jviewIncr"], ["proof (prove)\ngoal (1 subgoal):\n 1. IncrEnvironment jkbp spr_jview envObs spr_jviewInit spr_jviewIncr", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. IncrEnvironment jkbp spr_jview envObs spr_jviewInit spr_jviewIncr", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "fix a t t'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "assume \"spr_jview a t = spr_jview a t'\""], ["proof (state)\nthis:\n  spr_jview a t = spr_jview a t'\n\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "hence \"tLength t = tLength t'\""], ["proof (prove)\nusing this:\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "using spr_jview_length_eq[where a=a, symmetric]"], ["proof (prove)\nusing this:\n  spr_jview a t = spr_jview a t'\n  tLength ?t = tLength (spr_jview a ?t)\n\ngoal (1 subgoal):\n 1. tLength t = tLength t'", "by simp"], ["proof (state)\nthis:\n  tLength t = tLength t'\n\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "}"], ["proof (state)\nthis:\n  spr_jview ?a3 ?t3 = spr_jview ?a3 ?t'3 \\<Longrightarrow>\n  tLength ?t3 = tLength ?t'3\n\ngoal (3 subgoals):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'\n 2. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 3. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "thus \"\\<forall>a t t'. spr_jview a t = spr_jview a t' \\<longrightarrow> tLength t = tLength t'\""], ["proof (prove)\nusing this:\n  spr_jview ?a3 ?t3 = spr_jview ?a3 ?t'3 \\<Longrightarrow>\n  tLength ?t3 = tLength ?t'3\n\ngoal (1 subgoal):\n 1. \\<forall>a t t'.\n       spr_jview a t = spr_jview a t' \\<longrightarrow>\n       tLength t = tLength t'", "by blast"], ["proof (state)\nthis:\n  \\<forall>a t t'.\n     spr_jview a t = spr_jview a t' \\<longrightarrow> tLength t = tLength t'\n\ngoal (2 subgoals):\n 1. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 2. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n 2. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "show \"\\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)", "unfolding spr_jviewInit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a s. tInit (envObs a s) = spr_jview a (tInit s)", "by (simp add: spr_jview_def)"], ["proof (state)\nthis:\n  \\<forall>a s. spr_jviewInit a (envObs a s) = spr_jview a (tInit s)\n\ngoal (1 subgoal):\n 1. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "show \"\\<forall>a t s. spr_jview a (t \\<leadsto> s) = spr_jviewIncr a (envObs a s) (spr_jview a t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) =\n       spr_jviewIncr a (envObs a s) (spr_jview a t)", "unfolding spr_jviewIncr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a t s.\n       spr_jview a (t \\<leadsto> s) = spr_jview a t \\<leadsto> envObs a s", "by (simp add: spr_jview_def)"], ["proof (state)\nthis:\n  \\<forall>a t s.\n     spr_jview a (t \\<leadsto> s) =\n     spr_jviewIncr a (envObs a s) (spr_jview a t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* These need to follow the locale instantiation as we appeal to\nsync. *)"], ["", "lemma (in Environment) spr_tFirst[dest]:\n  assumes v: \"spr_jview a t = spr_jview a t'\"\n  shows \"envObs a (tFirst t) = envObs a (tFirst t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envObs a (tFirst t) = envObs a (tFirst t')", "using SPR.sync[rule_format, OF v] v"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. envObs a (tFirst t) = envObs a (tFirst t')", "apply (induct rule: trace_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       spr_jview a (tInit s) = spr_jview a (tInit s') \\<Longrightarrow>\n       envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'))\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        spr_jview a t = spr_jview a t' \\<Longrightarrow>\n        envObs a (tFirst t) = envObs a (tFirst t');\n        spr_jview a (t \\<leadsto> s) =\n        spr_jview a (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst (t \\<leadsto> s)) =\n                         envObs a (tFirst (t' \\<leadsto> s'))", "apply (simp_all add: spr_jview_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Environment) spr_tLast[dest]:\n  assumes v: \"spr_jview a t = spr_jview a t'\"\n  shows \"envObs a (tLast t) = envObs a (tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envObs a (tLast t) = envObs a (tLast t')", "using SPR.sync[rule_format, OF v] v"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. envObs a (tLast t) = envObs a (tLast t')", "apply (induct rule: trace_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       spr_jview a (tInit s) = spr_jview a (tInit s') \\<Longrightarrow>\n       envObs a (tLast (tInit s)) = envObs a (tLast (tInit s'))\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        spr_jview a t = spr_jview a t' \\<Longrightarrow>\n        envObs a (tLast t) = envObs a (tLast t');\n        spr_jview a (t \\<leadsto> s) =\n        spr_jview a (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast (t \\<leadsto> s)) =\n                         envObs a (tLast (t' \\<leadsto> s'))", "apply (simp_all add: spr_jview_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\n\\citet[Theorem~5]{Ron:1996} showed that it is not the case that\nfinite-state implementations always exist with respect to the SPR\nview, and so we consider three special cases:\n\\begin{itemize}\n\n\\item[\\S\\ref{sec:kbps-spr-single-agent}] where there is a single\nagent;\n\n\\item[\\S\\ref{sec:kbps-theory-spr-deterministic-protocols}] when the\nprotocols of the agents are deterministic and communication is by\nbroadcast; and\n\n\\item[\\S\\ref{sec:kbps-theory-spr-non-deterministic-protocols}] when\nthe agents use non-deterministic protocols and again use broadcast to\ncommunicate.\n\n\\end{itemize}\nNote that these cases do overlap but none is wholly\ncontained in another.\n\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}