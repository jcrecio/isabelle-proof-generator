{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/SPRViewDet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma envObs_def_raw:\n  \"envObs a = (\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a))\"", "lemma spr_jview_tObsC:\n  assumes \"spr_jview a t = spr_jview a t'\"\n  shows \"tObsC t = tObsC t'\"", "lemma tObsC_tLength:\n  \"tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'\"", "lemma tObsC_tStep_eq_inv:\n  \"tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\"", "lemma tObsC_prefix_closed[dest]:\n  \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow> tObsC t = tObsC t'\"", "lemma tObsC_tLast[iff]:\n  \"tLast (tObsC t) = envObsC (es (tLast t))\"", "lemma tObsC_initial[iff]:\n  \"tFirst (tObsC t) = envObsC (es (tFirst t))\"\n  \"tObsC (tInit s) = tInit (envObsC (es s))\"\n  \"tObsC t = tInit cobs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObsC (es s) = cobs)\"", "lemma spr_tObsC_trc_aux:\n  assumes \"(t, t') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\"\n  shows \"tObsC t = tObsC t'\"", "lemma spr_jview_tObsC_trans:\n  \"\\<lbrakk>spr_jview a t = spr_jview a t'; spr_jview a' t' = spr_jview a' t''\\<rbrakk>\n     \\<Longrightarrow> tObsC t = tObsC t''\"", "lemma tObsC_abs_jview_eq[dest]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\"", "lemma tObsC_abs_tObsC_eq[dest]:\n  \"tObsC t' = tObsC t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\"", "lemma spr_jview_tObsCI:\n  assumes tt': \"tObsC t = tObsC t'\"\n      and first: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n      and \"tMap (\\<lambda>s. ODList.lookup (ps s) a) t = tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\"\n  shows \"spr_jview a t = spr_jview a t'\"", "lemma tObsC_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t\"", "lemma tObsC_abs_conv:\n  \"(u, v) \\<in> tObsC_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')\"", "lemma tObsC_abs_tLast[simp]:\n  \"(u, v) \\<in> tObsC_abs t \\<Longrightarrow> envObsC (es v) = envObsC (es (tLast t))\"", "lemma tObsC_abs_tInit[iff]:\n  \"tObsC_abs (tInit s)\n = { (s', s') |s'. s' \\<in> set envInit \\<and> envObsC (es s') = envObsC (es s) }\"", "lemma spr_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s\"", "lemma spr_sim_tObsC_abs:\n  shows \"tObsC_abs t = sprCRel (spr_sim t)\"", "lemma spr_simVal_eq[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\"", "lemma spr_sim_range:\n  \"sim_range SPR.MC spr_simMC spr_sim\"", "lemma spr_simVal:\n  \"sim_val SPR.MC spr_simMC spr_sim\"", "lemma spr_sim_f:\n  \"sim_f SPR.MC spr_simMC spr_sim\"", "lemma envDetJKBP':\n  assumes tCn: \"t \\<in> SPR.jkbpCn n\"\n      and aact: \"act \\<in> set (jAction (SPR.MCn n) t a)\"\n  shows \"jAction (SPR.MCn n) t a = [act]\"", "lemma spr_jview_det_ps:\n  assumes tt'C: \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes obsCtt': \"tObsC t = tObsC t'\"\n  assumes first: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  shows \"tMap (\\<lambda>s. ODList.lookup (ps s) a) t\n       = tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\"", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\"", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\"", "lemma agent_absI[intro]:\n  \"\\<lbrakk> spr_jview a t' = spr_jview a t; t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC \\<rbrakk>\n      \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t\"", "lemma spr_simAbs_refl:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_sim t \\<in> spr_simAbs ec\"", "lemma spr_simAbs_tObsC_abs[simp]:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (fst ec) = tObsC_abs t\"", "lemma spr_simAbs_agent_abs[simp]:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (snd ec) = agent_abs a t\"", "lemma spr_simAbs_inj_on:\n  \"inj_on spr_simAbs { x . spr_simAbs x \\<in> SPRdet.jkbpSEC }\"", "lemma spr_repMC_kripke[intro, simp]: \"kripke (spr_repMC X)\"", "lemma spr_repMC_S5n[intro, simp]: \"S5n (spr_repMC X)\"", "lemma spr_repSim_simps[simp]:\n  \"spr_repSim ` spr_sim ` T = (\\<lambda>t. (tFirst t, tLast t)) ` T\"\n  \"spr_repSim (spr_sim t) = (tFirst t, tLast t)\"", "lemma jkbpCSt_jkbpCS_subset:\n  \"spr_jkbpCSt t \\<subseteq> spr_sim ` SPR.jkbpC\"", "lemma spr_repSim:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  shows \"sim (spr_simMCt t)\n             ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n             spr_repSim\"\n(*<*) (is \"sim ?M ?M' ?f\")", "lemma spr_simInit:\n  assumes \"iobs \\<in> envObs a ` set envInit\"\n  shows \"spr_simAbs (spr_simInit a iobs)\n       = spr_sim ` { t' \\<in> SPR.jkbpC. spr_jview a t' = spr_jviewInit a iobs }\"", "lemma spr_simObs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_simObs a ec = envObs a (tLast t)\"", "lemma (in -) [code]:\n  \"spr_knowledge envObs cec = (\\<lambda>a s.\n     ODList.fromList [ s' . s' \\<leftarrow> toList cec,\n                               envObs a (fst s) = envObs a (fst s') \\<and> envObs a (snd s) = envObs a (snd s') ])\"", "lemma (in -) [code]:\n  \"spr_commonKnowledge envObs cec = (\\<lambda>as s.\n    let r = \\<lambda>a. ODList.fromList\n               [ (s', s'') . s' \\<leftarrow> toList cec, s'' \\<leftarrow> toList cec,\n                             envObs a (fst s') = envObs a (fst s'') \\<and> envObs a (snd s') = envObs a (snd s'') ];\n        R = toList (ODList.big_union r as)\n     in ODList.fromList (memo_list_trancl R s))\"", "lemma spr_knowledge:\n  \"s \\<in> toSet cec\n    \\<Longrightarrow> toSet (spr_knowledge envObs cec a s) = relations (spr_repMC (toSet cec)) a `` {s}\"", "lemma spr_commonKnowledge_relation_image:\n  \"s \\<in> toSet cec\n    \\<Longrightarrow> toSet (spr_commonKnowledge envObs cec as s) = (\\<Union>a \\<in> set as. relations (spr_repMC (toSet cec)) a)\\<^sup>+ `` {s}\"", "lemma eval_rec_models:\n  assumes XY: \"toSet X \\<subseteq> toSet Y\"\n      and s: \"s \\<in> toSet X\"\n  shows \"s \\<in> toSet (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y) (spr_commonKnowledge envObs Y) X \\<phi>)\n     \\<longleftrightarrow> spr_repMC (toSet Y), s \\<Turnstile> \\<phi>\"", "lemma agent_abs_tObsC_abs_subset:\n  \"tObsC t' = tObsC t \\<Longrightarrow> agent_abs a t \\<subseteq> tObsC_abs t'\"", "lemma spr_simAbs_fst_snd:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (snd ec) \\<subseteq> toSet (fst ec)\"", "lemma tObsC_abs_rel:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and r: \"(x, y) \\<in> (\\<Union> (relations (spr_repMC (tObsC_abs t)) ` set as))\\<^sup>+\"\n  shows \"x \\<in> tObsC_abs t \\<longleftrightarrow>y \\<in> tObsC_abs t\"", "lemma spr_simAbs_fst_snd_trc:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec))) \\<subseteq> toSet (fst ec)\"", "lemma agent_abs_rel_inv:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and x: \"x \\<in> agent_abs a t\"\n      and xy: \"(x, y) \\<in> relations (spr_repMC (toSet (fst ec))) a\"\n  shows \"y \\<in> agent_abs a t\"", "lemma agent_abs_tObsC_abs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and x: \"x \\<in> agent_abs a t\"\n      and y: \"y \\<in> agent_abs a t\"\n  shows \"(x, y) \\<in> relations (spr_repMC (tObsC_abs t)) a\"", "lemma agent_abs_spr_repRels:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and x: \"x \\<in> agent_abs a t\"\n      and y: \"y \\<in> agent_abs a t\"\n  shows \"(x, y) \\<in> spr_repRels a\"", "lemma evalS_models:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and subj_phi: \"subjective a \\<phi>\"\n      and s: \"s \\<in> toSet (snd ec)\"\n  shows \"evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec)) (spr_commonKnowledge envObs (fst ec)) (snd ec) \\<phi>\n     \\<longleftrightarrow> spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>\" (is \"?lhs \\<phi> = ?rhs \\<phi>\")", "lemma eval_models:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  assumes subj_phi: \"subjective a \\<phi>\"\n  assumes s: \"s \\<in> toSet (snd ec)\"\n  shows \"eval envVal envObs ec \\<phi> \\<longleftrightarrow> spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>\"", "lemma spr_action_jaction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec)\n       = set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)\"", "lemma spr_submodel_aux:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and s: \"s \\<in> worlds (spr_simMCt t)\"\n  shows \"gen_model SPRdet.MCS s = gen_model (spr_simMCt t) s\"", "lemma spr_simAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec) = set (jAction SPR.MC t a)\"\n(*<*) (is \"?lhs = ?rhs\")", "lemma spr_trans_aec:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_trans (fst ec) (snd ec))\n       = { (tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t }\" (is \"?lhs = ?rhs\")", "lemma spr_trans_cec:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_trans (fst ec) (fst ec))\n       = { (tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t }\" (is \"?lhs = ?rhs\")", "lemma spr_simObsC:\n    assumes t'sC: \"t \\<leadsto> s \\<in> SPR.jkbpC\"\n        and aec': \"toSet aec = (rel_ext (envObs_rel (envObs a)) \\<inter> X \\<times> X) `` {(tFirst t, s)}\"\n        and X: \"X = {(tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n    shows \"spr_simObsC envObsC aec = envObsC (es s)\"", "lemma envObs_rel_equiv:\n  \"equiv UNIV (rel_ext (envObs_rel (envObs a)))\"", "lemma spr_simTrans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_simAbs ` set (spr_simTrans a ec)\n      = { SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n          |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n(*<*)(is \"?lhs = ?rhs\")", "lemma (in FiniteDetBroadcastEnvironment) trans_MapOps[intro, simp]:\n  \"MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k)) (SPRdet.jkbpSEC \\<times> UNIV) trans_MapOps\"", "lemma (in FiniteDetBroadcastEnvironment) acts_MapOps[intro, simp]:\n  \"MapOps spr_simAbs SPRdet.jkbpSEC acts_MapOps\"", "lemma (in FiniteDetBroadcastEnvironment) mkSPRDetAuto_implements:\n  \"SPR.implements (mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC envObs)\"", "lemma (in FiniteDetBroadcastEnvironment)\n  \"mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC envObs\n = (\\<lambda>a. alg_mk_auto acts_MapOps trans_MapOps\n           (spr_simInit a)\n           (SPRDetAutoDFS agents jkbp envInit envAction envTrans envVal envObsC envObs a))\"", "lemma (in PreEnvironmentJView) jkbpDetI:\n  assumes tC: \"t \\<in> jkbpC\"\n  assumes jkbpSynDet: \"\\<forall>a. distinct (map guard (jkbp a))\"\n  assumes jkbpSemDet: \"\\<forall>a gc gc'.\n        gc \\<in> set (jkbp a) \\<and> gc' \\<in> set (jkbp a) \\<and> t \\<in> jkbpC\n    \\<longrightarrow> guard gc = guard gc' \\<or> \\<not>(MC, t \\<Turnstile> guard gc \\<and> MC, t \\<Turnstile> guard gc')\"\n  shows \"length (jAction MC t a) \\<le> 1\""], "translations": [["", "lemma envObs_def_raw:\n  \"envObs a = (\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envObs a = (\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a))", "apply (rule ext)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. envObs a s = (envObsC (es s), ODList.lookup (ps s) a)", "apply (simp add: envObs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nWe seek a suitable simulation space by considering what determines an\nagent's knowledge. Intuitively any set of traces that is relevant to\nthe agents' states of knowledge with respect to @{term \"t \\<in> jkbpC\"}\nneed include only those with the same common observation as @{term\n\"t\"}:\n\n\\<close>"], ["", "definition tObsC :: \"('a, 'es, 'as) BEState Trace \\<Rightarrow> 'cobs Trace\" where\n  \"tObsC \\<equiv> tMap (envObsC \\<circ> es)\""], ["", "text\\<open>\n\nClearly this is an abstraction of the SPR jview of the given trace.\n\n\\<close>"], ["", "lemma spr_jview_tObsC:\n  assumes \"spr_jview a t = spr_jview a t'\"\n  shows \"tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "using SPR.sync[rule_format, OF assms] assms"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "by (induct rule: trace_induct2) (auto simp: envObs_def tObsC_def)"], ["", "lemma tObsC_tLength:\n  \"tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (envObsC \\<circ> es) t =\n    tMap (envObsC \\<circ> es) t' \\<Longrightarrow>\n    tLength t = tLength t'", "by (rule tMap_eq_imp_tLength_eq)"], ["", "lemma tObsC_tStep_eq_inv:\n  \"tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow>\n    \\<exists>t'' s'. t' = t'' \\<leadsto> s'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (envObsC \\<circ> es) t' =\n    tMap (envObsC \\<circ> es) (t \\<leadsto> s) \\<Longrightarrow>\n    \\<exists>t'' s'. t' = t'' \\<leadsto> s'", "by auto"], ["", "lemma tObsC_prefix_closed[dest]:\n  \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow> tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow>\n    tObsC t = tObsC t'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (envObsC \\<circ> es) (t \\<leadsto> s) =\n    tMap (envObsC \\<circ> es) (t' \\<leadsto> s') \\<Longrightarrow>\n    tMap (envObsC \\<circ> es) t = tMap (envObsC \\<circ> es) t'", "by simp"], ["", "lemma tObsC_tLast[iff]:\n  \"tLast (tObsC t) = envObsC (es (tLast t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (tObsC t) = envObsC (es (tLast t))", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (tMap (envObsC \\<circ> es) t) = envObsC (es (tLast t))", "by simp"], ["", "lemma tObsC_initial[iff]:\n  \"tFirst (tObsC t) = envObsC (es (tFirst t))\"\n  \"tObsC (tInit s) = tInit (envObsC (es s))\"\n  \"tObsC t = tInit cobs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObsC (es s) = cobs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (tObsC t) = envObsC (es (tFirst t)) &&&\n    tObsC (tInit s) = tInit (envObsC (es s)) &&&\n    (tObsC t = tInit cobs) =\n    (\\<exists>s. t = tInit s \\<and> envObsC (es s) = cobs)", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (tMap (envObsC \\<circ> es) t) = envObsC (es (tFirst t)) &&&\n    tMap (envObsC \\<circ> es) (tInit s) = tInit (envObsC (es s)) &&&\n    (tMap (envObsC \\<circ> es) t = tInit cobs) =\n    (\\<exists>s. t = tInit s \\<and> envObsC (es s) = cobs)", "by simp_all"], ["", "lemma spr_tObsC_trc_aux:\n  assumes \"(t, t') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\"\n  shows \"tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "using assms"], ["proof (prove)\nusing this:\n  (t, t') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "apply (induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tObsC t = tObsC t\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        (y, z) \\<in> \\<Union> (range (relations SPR.MC));\n        tObsC t = tObsC y\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC z", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        (y, z) \\<in> \\<Union> (range (relations SPR.MC));\n        tObsC t = tObsC y\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC z", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        tObsC t = tObsC y; (y, z) \\<in> relations SPR.MC x\\<rbrakk>\n       \\<Longrightarrow> tObsC y = tObsC z", "apply (rule_tac a=x in spr_jview_tObsC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        tObsC t = tObsC y; (y, z) \\<in> relations SPR.MC x\\<rbrakk>\n       \\<Longrightarrow> spr_jview x y = spr_jview x z", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma spr_jview_tObsC_trans:\n  \"\\<lbrakk>spr_jview a t = spr_jview a t'; spr_jview a' t' = spr_jview a' t''\\<rbrakk>\n     \\<Longrightarrow> tObsC t = tObsC t''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_jview a t = spr_jview a t';\n     spr_jview a' t' = spr_jview a' t''\\<rbrakk>\n    \\<Longrightarrow> tObsC t = tObsC t''", "by (fastforce dest: spr_jview_tObsC)"], ["", "(*>*)"], ["", "text\\<open>\n\nUnlike the single-agent case of \\S\\ref{sec:kbps-spr-single-agent}, it\nis not sufficient for a simulation to record only the final states; we\nneed to relate the initial private states of the agents with the final\nstates they consider possible, as the initial states may contain\ninformation that is not common knowledge. This motivates the following\nabstraction:\n\n\\<close>"], ["", "definition\n  tObsC_abs :: \"('a, 'es, 'as) BEState Trace \\<Rightarrow> ('a, 'es, 'as) BEState Relation\"\nwhere\n  \"tObsC_abs t \\<equiv> { (tFirst t', tLast t')\n                    |t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t}\""], ["", "(*<*)"], ["", "lemma tObsC_abs_jview_eq[dest]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    tObsC_abs t = tObsC_abs t'", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'a.\n            uu_ = (tFirst t'a, tLast t'a) \\<and>\n            t'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t')", "by (fastforce dest: spr_jview_tObsC)"], ["", "lemma tObsC_abs_tObsC_eq[dest]:\n  \"tObsC t' = tObsC t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC t \\<Longrightarrow> tObsC_abs t = tObsC_abs t'", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'a.\n            uu_ = (tFirst t'a, tLast t'a) \\<and>\n            t'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t')", "by (fastforce dest: spr_jview_tObsC)"], ["", "lemma spr_jview_tObsCI:\n  assumes tt': \"tObsC t = tObsC t'\"\n      and first: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n      and \"tMap (\\<lambda>s. ODList.lookup (ps s) a) t = tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\"\n  shows \"spr_jview a t = spr_jview a t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t'", "using tObsC_tLength[OF tt'] assms"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tObsC t = tObsC t'\n  envObs a (tFirst t) = envObs a (tFirst t')\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t'", "by (induct rule: trace_induct2, auto iff: tObsC_def envObs_def spr_jview_def)"], ["", "lemma tObsC_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t';\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t';\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v)\n                      \\<in> rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    uu_ = (tFirst t', tLast t') \\<and>\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC t' = tObsC t)", "by blast"], ["", "lemma tObsC_abs_conv:\n  \"(u, v) \\<in> tObsC_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v) \\<in> tObsC_abs t) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v)\n     \\<in> rel_ext\n            (\\<lambda>uu_.\n                \\<exists>t'.\n                   uu_ = (tFirst t', tLast t') \\<and>\n                   t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')", "by blast"], ["", "lemma tObsC_abs_tLast[simp]:\n  \"(u, v) \\<in> tObsC_abs t \\<Longrightarrow> envObsC (es v) = envObsC (es (tLast t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> tObsC_abs t \\<Longrightarrow>\n    envObsC (es v) = envObsC (es (tLast t))", "unfolding tObsC_abs_def tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and>\n                  tMap (envObsC \\<circ> es) t' =\n                  tMap (envObsC \\<circ> es) t) \\<Longrightarrow>\n    envObsC (es v) = envObsC (es (tLast t))", "by (auto iff: o_def elim: tMap_tLast_inv)"], ["", "lemma tObsC_abs_tInit[iff]:\n  \"tObsC_abs (tInit s)\n = { (s', s') |s'. s' \\<in> set envInit \\<and> envObsC (es s') = envObsC (es s) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC_abs (tInit s) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>s'.\n            uu_ = (s', s') \\<and>\n            s' \\<in> set envInit \\<and> envObsC (es s') = envObsC (es s))", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC (tInit s)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>s'.\n            uu_ = (s', s') \\<and>\n            s' \\<in> set envInit \\<and> envObsC (es s') = envObsC (es s))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>s' \\<in> set envInit;\n        envObsC (es s') = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            s' = tFirst t' \\<and>\n                            s' = tLast t' \\<and>\n                            t' \\<in> SPR.jkbpC \\<and>\n                            (\\<exists>sa.\n                                t' = tInit sa \\<and>\n                                envObsC (es sa) = envObsC (es s))", "apply (rule_tac x=\"tInit s'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<lbrakk>s' \\<in> set envInit;\n        envObsC (es s') = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> s' = tFirst (tInit s') \\<and>\n                         s' = tLast (tInit s') \\<and>\n                         tInit s' \\<in> SPR.jkbpC \\<and>\n                         (\\<exists>sa.\n                             tInit s' = tInit sa \\<and>\n                             envObsC (es sa) = envObsC (es s))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "end"], ["", "(* context FiniteDetBroadcastEnvironment *)"], ["", "text\\<open>\n\nWe use the following record to represent the worlds of the simulated\nKripke structure:\n\n\\<close>"], ["", "record (overloaded) ('a, 'es, 'as) spr_simWorld =\n  sprFst :: \"('a, 'es, 'as) BEState\"\n  sprLst :: \"('a, 'es, 'as) BEState\"\n  sprCRel :: \"('a, 'es, 'as) BEState Relation\""], ["", "(*<*)"], ["", "instance spr_simWorld_ext :: (\"{finite, linorder}\", finite, \"{finite, linorder}\", finite) finite"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c, 'd) spr_simWorld_scheme, finite_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV", "let ?U = \"UNIV :: ('a, 'b, 'c, 'd) spr_simWorld_ext set\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV", "fix x :: \"('a, 'b, 'c, 'd) spr_simWorld_scheme\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV", "have \"\\<exists>a b c d. x = spr_simWorld_ext a b c d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b c d.\n       x = \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>", "by (cases x) simp"], ["proof (state)\nthis:\n  \\<exists>a b c d.\n     x = \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>\n\ngoal (1 subgoal):\n 1. finite UNIV", "}"], ["proof (state)\nthis:\n  \\<exists>a b c d.\n     ?x2 = \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>\n\ngoal (1 subgoal):\n 1. finite UNIV", "then"], ["proof (chain)\npicking this:\n  \\<exists>a b c d.\n     ?x2 = \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>", "have U:\n   \"?U = (\\<lambda>(a, (b, (c, d))). spr_simWorld_ext a b c d) ` (UNIV \\<times> (UNIV \\<times> (UNIV \\<times> UNIV)))\""], ["proof (prove)\nusing this:\n  \\<exists>a b c d.\n     ?x2 = \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>\n\ngoal (1 subgoal):\n 1. UNIV =\n    (\\<lambda>(a, b, c, d).\n        \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>) `\n    (UNIV \\<times> UNIV \\<times> UNIV \\<times> UNIV)", "by (auto simp add: Set.image_def)"], ["proof (state)\nthis:\n  UNIV =\n  (\\<lambda>(a, b, c, d).\n      \\<lparr>sprFst = a, sprLst = b, sprCRel = c, \\<dots> = d\\<rparr>) `\n  (UNIV \\<times> UNIV \\<times> UNIV \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. finite UNIV", "show \"finite ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV", "by (simp add: U)"], ["proof (state)\nthis:\n  finite UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "context FiniteDetBroadcastEnvironment\nbegin"], ["", "text\\<open>\n\nThe simulation of a trace @{term \"t \\<in> jkbpC\"} records its initial and\nfinal states, and the relation between initial and final states of all\ncommonly-plausible traces:\n\n\\<close>"], ["", "definition\n  spr_sim :: \"('a, 'es, 'as) BEState Trace \\<Rightarrow> ('a, 'es, 'as) spr_simWorld\"\nwhere\n  \"spr_sim \\<equiv> \\<lambda>t. \\<lparr> sprFst = tFirst t, sprLst = tLast t, sprCRel = tObsC_abs t \\<rparr>\""], ["", "text\\<open>\n\nThe associated Kripke structure relates two worlds for an agent if the\nagent's observation on the the first and last states corresponds, and\nthe worlds have the same common observation relation. As always, we\nevaluate propositions on the final state of the trace.\n\n\\<close>"], ["", "definition\n  spr_simRels :: \"'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorld Relation\"\nwhere\n  \"spr_simRels \\<equiv> \\<lambda>a. { (s, s') |s s'.\n                         envObs a (sprFst s) = envObs a (sprFst s')\n                       \\<and> envObs a (sprLst s) = envObs a (sprLst s')\n                       \\<and> sprCRel s = sprCRel s' }\""], ["", "definition spr_simVal :: \"('a, 'es, 'as) spr_simWorld \\<Rightarrow> 'p \\<Rightarrow> bool\" where\n  \"spr_simVal \\<equiv> envVal \\<circ> sprLst\""], ["", "abbreviation\n  \"spr_simMC \\<equiv> mkKripke (spr_sim ` SPR.jkbpC) spr_simRels spr_simVal\""], ["", "(*<*)"], ["", "lemma spr_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_sim t = s; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s", "unfolding spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs t\\<rparr> =\n             s;\n     t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s", "by auto"], ["", "lemma spr_sim_tObsC_abs:\n  shows \"tObsC_abs t = sprCRel (spr_sim t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC_abs t = sprCRel (spr_sim t)", "unfolding tObsC_abs_def spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) =\n    sprCRel\n     \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n        sprCRel =\n          rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\\<rparr>", "by simp"], ["", "lemma spr_simVal_eq[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simVal (spr_sim t) = envVal (tLast t)", "unfolding spr_sim_def spr_simVal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envVal \\<circ> sprLst)\n     \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n        sprCRel = tObsC_abs t\\<rparr> =\n    envVal (tLast t)", "by simp"], ["", "lemma spr_sim_range:\n  \"sim_range SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_range SPR.MC spr_simMC spr_sim", "by (rule sim_rangeI) (simp_all add: spr_sim_def)"], ["", "lemma spr_simVal:\n  \"sim_val SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val SPR.MC spr_simMC spr_sim", "by (rule sim_valI) simp"], ["", "lemma spr_sim_f:\n  \"sim_f SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f SPR.MC spr_simMC spr_sim", "unfolding spr_simRels_def spr_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f\n     \\<lparr>worlds = SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             rel_ext\n              (\\<lambda>(t, t').\n                  {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                  spr_jview a t = spr_jview a t'),\n        valuation = envVal \\<circ> tLast\\<rparr>\n     \\<lparr>worlds =\n               (\\<lambda>t.\n                   \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                      sprCRel = tObsC_abs t\\<rparr>) `\n               SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             Restr\n              (rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>s s'.\n                       uu_ = (s, s') \\<and>\n                       envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n                       envObs a (sprLst s) = envObs a (sprLst s') \\<and>\n                       sprCRel s = sprCRel s'))\n              ((\\<lambda>t.\n                   \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                      sprCRel = tObsC_abs t\\<rparr>) `\n               SPR.jkbpC),\n        valuation = spr_simVal\\<rparr>\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>)", "by (rule sim_fI, auto)"], ["", "lemma envDetJKBP':\n  assumes tCn: \"t \\<in> SPR.jkbpCn n\"\n      and aact: \"act \\<in> set (jAction (SPR.MCn n) t a)\"\n  shows \"jAction (SPR.MCn n) t a = [act]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jAction (SPR.MCn n) t a = [act]", "using jkbpDet[rule_format, where t=t and a=a] assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC \\<Longrightarrow> length (jAction SPR.MC t a) \\<le> 1\n  t \\<in> SPR.jkbpCn n\n  act \\<in> set (jAction (SPR.MCn n) t a)\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn n) t a = [act]", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC \\<Longrightarrow>\n             length (jAction SPR.MC t a) \\<le> 1;\n     t \\<in> SPR.jkbpCn n; act \\<in> set (jAction (SPR.MCn n) t a)\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn n) t a = [act]", "apply (cases \"jAction SPR.MC t a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC \\<Longrightarrow>\n             length (jAction SPR.MC t a) \\<le> 1;\n     t \\<in> SPR.jkbpCn n; act \\<in> set (jAction (SPR.MCn n) t a);\n     jAction SPR.MC t a = []\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn n) t a = [act]\n 2. \\<And>aa list.\n       \\<lbrakk>t \\<in> SPR.jkbpC \\<Longrightarrow>\n                length (jAction SPR.MC t a) \\<le> 1;\n        t \\<in> SPR.jkbpCn n; act \\<in> set (jAction (SPR.MCn n) t a);\n        jAction SPR.MC t a = aa # list\\<rbrakk>\n       \\<Longrightarrow> jAction (SPR.MCn n) t a = [act]", "apply (auto iff: SPR.jkbpC_jkbpCn_jAction_eq[OF tCn] dest: SPR.jkbpCn_jkbpC_inc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nAll the properties of a simulation are easy to show for @{term\n\"spr_sim\"} except for reverse simulation.\n\nThe critical lemma states that if we have two traces that yield the\nsame common observations, and an agent makes the same observation on\ntheir initial states, then that agent's private states at each point\non the two traces are identical.\n\n\\<close>"], ["", "lemma spr_jview_det_ps:\n  assumes tt'C: \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes obsCtt': \"tObsC t = tObsC t'\"\n  assumes first: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  shows \"tMap (\\<lambda>s. ODList.lookup (ps s) a) t\n       = tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'", "using tObsC_tLength[OF obsCtt'] first tt'C obsCtt'"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  envObs a (tFirst t) = envObs a (tFirst t')\n  {t, t'} \\<subseteq> SPR.jkbpC\n  tObsC t = tObsC t'\n\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'", "proof(induct rule: trace_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'));\n        {tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (tInit s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (tInit s')\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "case (tInit s s')"], ["proof (state)\nthis:\n  envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'))\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'));\n        {tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (tInit s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (tInit s')\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "thus ?case"], ["proof (prove)\nusing this:\n  envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'))\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) (tInit s) =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) (tInit s')", "by (simp add: envObs_def)"], ["proof (state)\nthis:\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) (tInit s) =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) (tInit s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "case (tStep s s' t t')"], ["proof (state)\nthis:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have ts: \"t \\<leadsto> s \\<in> SPR.jkbpCn (tLength (t \\<leadsto> s))\"\n   and t's': \"t' \\<leadsto> s' \\<in> SPR.jkbpCn (tLength (t' \\<leadsto> s'))\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<leadsto> s \\<in> SPR.jkbpCn (tLength (t \\<leadsto> s)) &&&\n    t' \\<leadsto> s' \\<in> SPR.jkbpCn (tLength (t' \\<leadsto> s'))", "by blast+"], ["proof (state)\nthis:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (tLength (t \\<leadsto> s))\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (tLength (t' \\<leadsto> s'))\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have jvtt': \"spr_jview a t = spr_jview a t'\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t'", "by - (rule spr_jview_tObsCI, auto)"], ["proof (state)\nthis:\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "with tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  spr_jview a t = spr_jview a t'", "have jatt':\n    \"jAction (SPR.MCn (tLength t)) t a\n   = jAction (SPR.MCn (tLength t')) t' a\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t)) t a = jAction (SPR.MCn (tLength t')) t' a", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n      {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t)) t a =\n                      jAction (SPR.MCn (tLength t')) t' a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>t \\<in> SPR.jkbpC \\<and> t' \\<in> SPR.jkbpC;\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst t) = envObs a (tFirst t');\n     t \\<leadsto> s \\<in> SPR.jkbpC \\<and> t' \\<leadsto> s' \\<in> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t')) t a =\n                      jAction (SPR.MCn (tLength t')) t' a", "apply (rule S5n_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>t \\<in> SPR.jkbpC \\<and> t' \\<in> SPR.jkbpC;\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst t) = envObs a (tFirst t');\n     t \\<leadsto> s \\<in> SPR.jkbpC \\<and> t' \\<leadsto> s' \\<in> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t'))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>t \\<in> SPR.jkbpC \\<and> t' \\<in> SPR.jkbpC;\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst t) = envObs a (tFirst t');\n     t \\<leadsto> s \\<in> SPR.jkbpC \\<and> t' \\<leadsto> s' \\<in> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> (t, t') \\<in> relations (SPR.MCn (tLength t')) a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>t \\<in> SPR.jkbpC \\<and> t' \\<in> SPR.jkbpC;\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst t) = envObs a (tFirst t');\n     t \\<leadsto> s \\<in> SPR.jkbpC \\<and> t' \\<leadsto> s' \\<in> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> (t, t') \\<in> relations (SPR.MCn (tLength t')) a", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>t \\<in> SPR.jkbpC \\<and> t' \\<in> SPR.jkbpC;\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                       tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n     envObs a (tFirst t) = envObs a (tFirst t');\n     t \\<leadsto> s \\<in> SPR.jkbpC \\<and> t' \\<leadsto> s' \\<in> SPR.jkbpC;\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     spr_jview a t = spr_jview a t'\\<rbrakk>\n    \\<Longrightarrow> (t, t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t'),\n                                relations =\n                                  \\<lambda>a.\n                                     rel_ext\n(\\<lambda>(t, t').\n    {t, t'} \\<subseteq> SPR.jkbpCn (tLength t') \\<and>\n    spr_jview a t = spr_jview a t'),\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t)) t a = jAction (SPR.MCn (tLength t')) t' a\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from jvtt'"], ["proof (chain)\npicking this:\n  spr_jview a t = spr_jview a t'", "have tt'Last: \"ODList.lookup (ps (tLast t)) a\n               = ODList.lookup (ps (tLast t')) a\""], ["proof (prove)\nusing this:\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. ODList.lookup (ps (tLast t)) a = ODList.lookup (ps (tLast t')) a", "by (auto simp: envObs_def)"], ["proof (state)\nthis:\n  ODList.lookup (ps (tLast t)) a = ODList.lookup (ps (tLast t')) a\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from ts"], ["proof (chain)\npicking this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (tLength (t \\<leadsto> s))", "obtain eact aact\n    where aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\"\n      and s: \"s = envTrans eact aact (tLast t)\""], ["proof (prove)\nusing this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (tLength (t \\<leadsto> s))\n\ngoal (1 subgoal):\n 1. (\\<And>aact eact.\n        \\<lbrakk>\\<forall>a.\n                    aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a);\n         s = envTrans eact aact (tLast t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: Let_def)"], ["proof (state)\nthis:\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  s = envTrans eact aact (tLast t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from t's'"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (tLength (t' \\<leadsto> s'))", "obtain eact' aact'\n    where aact': \"\\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\"\n      and s': \"s' = envTrans eact' aact' (tLast t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (tLength (t' \\<leadsto> s'))\n\ngoal (1 subgoal):\n 1. (\\<And>aact' eact'.\n        \\<lbrakk>\\<forall>a.\n                    aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s' = envTrans eact' aact' (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: Let_def)"], ["proof (state)\nthis:\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  s' = envTrans eact' aact' (tLast t')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have tCn: \"t \\<in> SPR.jkbpCn (tLength t)\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<in> SPR.jkbpCn (tLength t)", "by auto"], ["proof (state)\nthis:\n  t \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from aact"], ["proof (chain)\npicking this:\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)", "obtain act\n    where act: \"jAction (SPR.MCn (tLength t)) t a = [act]\""], ["proof (prove)\nusing this:\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n\ngoal (1 subgoal):\n 1. (\\<And>act.\n        jAction (SPR.MCn (tLength t)) t a = [act] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using envDetJKBP'[OF tCn, where a=a and act=\"aact a\"]"], ["proof (prove)\nusing this:\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a) \\<Longrightarrow>\n  jAction (SPR.MCn (tLength t)) t a = [aact a]\n\ngoal (1 subgoal):\n 1. (\\<And>act.\n        jAction (SPR.MCn (tLength t)) t a = [act] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t)) t a = [act]\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "hence \"jAction (SPR.MCn (tLength t')) t' a = [act]\""], ["proof (prove)\nusing this:\n  jAction (SPR.MCn (tLength t)) t a = [act]\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t')) t' a = [act]", "by (simp only: jatt')"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t')) t' a = [act]\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "with act aact aact'"], ["proof (chain)\npicking this:\n  jAction (SPR.MCn (tLength t)) t a = [act]\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  jAction (SPR.MCn (tLength t')) t' a = [act]", "have \"aact a = aact' a\""], ["proof (prove)\nusing this:\n  jAction (SPR.MCn (tLength t)) t a = [act]\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  jAction (SPR.MCn (tLength t')) t' a = [act]\n\ngoal (1 subgoal):\n 1. aact a = aact' a", "by (auto elim!: allE[where x=a])"], ["proof (state)\nthis:\n  aact a = aact' a\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "with agents tt'Last s s'"], ["proof (chain)\npicking this:\n  toSet agents = UNIV\n  ODList.lookup (ps (tLast t)) a = ODList.lookup (ps (tLast t')) a\n  s = envTrans eact aact (tLast t)\n  s' = envTrans eact' aact' (tLast t')\n  aact a = aact' a", "have \"ODList.lookup (ps s) a = ODList.lookup (ps s') a\""], ["proof (prove)\nusing this:\n  toSet agents = UNIV\n  ODList.lookup (ps (tLast t)) a = ODList.lookup (ps (tLast t')) a\n  s = envTrans eact aact (tLast t)\n  s' = envTrans eact' aact' (tLast t')\n  aact a = aact' a\n\ngoal (1 subgoal):\n 1. ODList.lookup (ps s) a = ODList.lookup (ps s') a", "by (simp add: envTrans)"], ["proof (state)\nthis:\n  ODList.lookup (ps s) a = ODList.lookup (ps s') a\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "moreover"], ["proof (state)\nthis:\n  ODList.lookup (ps s) a = ODList.lookup (ps s') a\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have \"tMap (\\<lambda>s. ODList.lookup (ps s) a) t = tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'", "by auto"], ["proof (state)\nthis:\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "moreover"], ["proof (state)\nthis:\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have \"envObsC (es s) = envObsC (es s')\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. envObsC (es s) = envObsC (es s')", "unfolding tObsC_def"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n   {t, t'} \\<subseteq> SPR.jkbpC;\n   tMap (envObsC \\<circ> es) t = tMap (envObsC \\<circ> es) t'\\<rbrakk>\n  \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                    tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  tMap (envObsC \\<circ> es) (t \\<leadsto> s) =\n  tMap (envObsC \\<circ> es) (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. envObsC (es s) = envObsC (es s')", "by simp"], ["proof (state)\nthis:\n  envObsC (es s) = envObsC (es s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>envObs a (tFirst t) = envObs a (tFirst t');\n         {t, t'} \\<subseteq> SPR.jkbpC; tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n                          tMap (\\<lambda>s. ODList.lookup (ps s) a) t';\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t \\<leadsto> s) =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a)\n                          (t' \\<leadsto> s')", "ultimately"], ["proof (chain)\npicking this:\n  ODList.lookup (ps s) a = ODList.lookup (ps s') a\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObsC (es s) = envObsC (es s')", "show ?case"], ["proof (prove)\nusing this:\n  ODList.lookup (ps s) a = ODList.lookup (ps s') a\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t'\n  envObsC (es s) = envObsC (es s')\n\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) (t \\<leadsto> s) =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) (t' \\<leadsto> s')", "by simp"], ["proof (state)\nthis:\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) (t \\<leadsto> s) =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) (t' \\<leadsto> s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "proof(rule sim_rI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "fix a p q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "assume pT: \"p \\<in> worlds SPR.MC\"\n     and fpq': \"(spr_sim p, q') \\<in> relations spr_simMC a\""], ["proof (state)\nthis:\n  p \\<in> worlds SPR.MC\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_sim p, q') \\<in> relations spr_simMC a", "obtain uq fq vq\n    where q': \"q' = \\<lparr> sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p \\<rparr>\"\n      and uq: \"envObs a (tFirst p) = envObs a uq\"\n      and vq: \"envObs a (tLast p) = envObs a vq\""], ["proof (prove)\nusing this:\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. (\\<And>uq vq.\n        \\<lbrakk>q' =\n                 \\<lparr>sprFst = uq, sprLst = vq,\n                    sprCRel = tObsC_abs p\\<rparr>;\n         envObs a (tFirst p) = envObs a uq;\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mkKripke_def spr_sim_def spr_simRels_def"], ["proof (prove)\nusing this:\n  (\\<lparr>sprFst = tFirst p, sprLst = tLast p,\n      sprCRel = tObsC_abs p\\<rparr>,\n   q')\n  \\<in> relations\n         \\<lparr>worlds =\n                   (\\<lambda>t.\n                       \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                          sprCRel = tObsC_abs t\\<rparr>) `\n                   SPR.jkbpC,\n            relations =\n              \\<lambda>a.\n                 Restr\n                  (rel_ext\n                    (\\<lambda>uu_.\n                        \\<exists>s s'.\n                           uu_ = (s, s') \\<and>\n                           envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n                           envObs a (sprLst s) = envObs a (sprLst s') \\<and>\n                           sprCRel s = sprCRel s'))\n                  ((\\<lambda>t.\n                       \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                          sprCRel = tObsC_abs t\\<rparr>) `\n                   SPR.jkbpC),\n            valuation = spr_simVal\\<rparr>\n         a\n\ngoal (1 subgoal):\n 1. (\\<And>uq vq.\n        \\<lbrakk>q' =\n                 \\<lparr>sprFst = uq, sprLst = vq,\n                    sprCRel = tObsC_abs p\\<rparr>;\n         envObs a (tFirst p) = envObs a uq;\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_sim p, q') \\<in> relations spr_simMC a", "have \"q' \\<in> worlds spr_simMC\""], ["proof (prove)\nusing this:\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. q' \\<in> worlds spr_simMC", "by simp"], ["proof (state)\nthis:\n  q' \\<in> worlds spr_simMC\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with q'"], ["proof (chain)\npicking this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC", "have \"(uq, vq) \\<in> tObsC_abs p\""], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC\n\ngoal (1 subgoal):\n 1. (uq, vq) \\<in> tObsC_abs p", "using spr_sim_tFirst_tLast[where s=q']"], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC\n  \\<lbrakk>spr_sim ?t = q'; ?t \\<in> SPR.jkbpC\\<rbrakk>\n  \\<Longrightarrow> (sprFst q', sprLst q') \\<in> sprCRel q'\n\ngoal (1 subgoal):\n 1. (uq, vq) \\<in> tObsC_abs p", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (uq, vq) \\<in> tObsC_abs p\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "then"], ["proof (chain)\npicking this:\n  (uq, vq) \\<in> tObsC_abs p", "obtain t\n    where tT: \"t \\<in> SPR.jkbpC\"\n      and tp: \"tObsC t = tObsC p\"\n      and tuq: \"tFirst t = uq\"\n      and tvq: \"tLast t = vq\""], ["proof (prove)\nusing this:\n  (uq, vq) \\<in> tObsC_abs p\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> SPR.jkbpC; tObsC t = tObsC p; tFirst t = uq;\n         tLast t = vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: tObsC_abs_conv)"], ["proof (state)\nthis:\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from pT tT tp tuq uq"], ["proof (chain)\npicking this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq", "have \"tMap (\\<lambda>s. ODList.lookup (ps s) a) p = tMap (\\<lambda>s. ODList.lookup (ps s) a) t\""], ["proof (prove)\nusing this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. ODList.lookup (ps s) a) p =\n    tMap (\\<lambda>s. ODList.lookup (ps s) a) t", "by (auto intro: spr_jview_det_ps)"], ["proof (state)\nthis:\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) p =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with tp tuq uq"], ["proof (chain)\npicking this:\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) p =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t", "have \"spr_jview a p = spr_jview a t\""], ["proof (prove)\nusing this:\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) p =\n  tMap (\\<lambda>s. ODList.lookup (ps s) a) t\n\ngoal (1 subgoal):\n 1. spr_jview a p = spr_jview a t", "by (auto intro: spr_jview_tObsCI)"], ["proof (state)\nthis:\n  spr_jview a p = spr_jview a t\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with pT tT"], ["proof (chain)\npicking this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  spr_jview a p = spr_jview a t", "have pt: \"(p, t) \\<in> relations SPR.MC a\""], ["proof (prove)\nusing this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  spr_jview a p = spr_jview a t\n\ngoal (1 subgoal):\n 1. (p, t) \\<in> relations SPR.MC a", "unfolding SPR.mkM_def"], ["proof (prove)\nusing this:\n  p \\<in> worlds\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   rel_ext\n                    (\\<lambda>(t, t').\n                        {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                        spr_jview a t = spr_jview a t'),\n              valuation = envVal \\<circ> tLast\\<rparr>\n  t \\<in> SPR.jkbpC\n  spr_jview a p = spr_jview a t\n\ngoal (1 subgoal):\n 1. (p, t)\n    \\<in> relations\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   rel_ext\n                    (\\<lambda>(t, t').\n                        {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                        spr_jview a t = spr_jview a t'),\n              valuation = envVal \\<circ> tLast\\<rparr>\n           a", "by simp"], ["proof (state)\nthis:\n  (p, t) \\<in> relations SPR.MC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from q' uq vq tp tuq tvq"], ["proof (chain)\npicking this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq", "have ftq': \"spr_sim t = q'\""], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. spr_sim t = q'", "unfolding spr_sim_def"], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n       sprCRel = tObsC_abs t\\<rparr> =\n    q'", "by auto"], ["proof (state)\nthis:\n  spr_sim t = q'\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from pt ftq'"], ["proof (chain)\npicking this:\n  (p, t) \\<in> relations SPR.MC a\n  spr_sim t = q'", "show \"\\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'\""], ["proof (prove)\nusing this:\n  (p, t) \\<in> relations SPR.MC a\n  spr_sim t = q'\n\ngoal (1 subgoal):\n 1. \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'", "by blast"], ["proof (state)\nthis:\n  \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe proof proceeds by lock-step induction over @{term \"t\"} and @{term\n\"t'\"}, appealing to the @{term \"jkbpDet\"} assumption, the definition\nof @{term \"envObs\"} and the constraint @{term \"envTrans\"}.\n\nIt is then a short step to showing reverse simulation, and hence\nsimulation:\n\n\\<close>"], ["", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "using spr_sim_range spr_simVal spr_sim_f spr_sim_r"], ["proof (prove)\nusing this:\n  sim_range SPR.MC spr_simMC spr_sim\n  sim_val SPR.MC spr_simMC spr_sim\n  sim_f SPR.MC spr_simMC spr_sim\n  sim_r SPR.MC spr_simMC spr_sim\n\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "unfolding sim_def"], ["proof (prove)\nusing this:\n  sim_range SPR.MC spr_simMC spr_sim\n  sim_val SPR.MC spr_simMC spr_sim\n  sim_f SPR.MC spr_simMC spr_sim\n  sim_r SPR.MC spr_simMC spr_sim\n\ngoal (1 subgoal):\n 1. sim_range SPR.MC spr_simMC spr_sim \\<and>\n    sim_val SPR.MC spr_simMC spr_sim \\<and>\n    sim_f SPR.MC spr_simMC spr_sim \\<and> sim_r SPR.MC spr_simMC spr_sim", "by blast"], ["", "(*>*)"], ["", "end"], ["", "(* context FiniteDetBroadcastEnvironment *)"], ["", "sublocale FiniteDetBroadcastEnvironment\n        < SPRdet: SimIncrEnvironment jkbp envInit envAction envTrans envVal\n                                     spr_jview envObs spr_jviewInit spr_jviewIncr\n                                     spr_sim spr_simRels spr_simVal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "by standard (rule spr_sim)"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Representations\\<close>"], ["", "text\\<open>\n\nAs before we canonically represent the quotient of the simulated\nworlds @{typ \"('a, 'es, 'as) spr_simWorld\"} under @{term\n\"spr_simRels\"} using ordered, distinct lists. In particular, we use\nthe type @{typ \"('a \\<times> 'a) odlist\"} (abbreviated @{typ \"'a\nodrelation\"}) to canonically represent relations.\n\n\\<close>"], ["", "context FiniteDetBroadcastEnvironment\nbegin"], ["", "type_synonym (in -) ('a, 'es, 'as) spr_simWorldsECRep\n  = \"('a, 'es, 'as) BEState odrelation\""], ["", "type_synonym (in -) ('a, 'es, 'as) spr_simWorldsRep\n  = \"('a, 'es, 'as) spr_simWorldsECRep \\<times> ('a, 'es, 'as) spr_simWorldsECRep\""], ["", "text\\<open>\n\nWe can abstract such a representation into a set of simulated\nequivalence classes:\n\n\\<close>"], ["", "definition\n  spr_simAbs :: \"('a, 'es, 'as) spr_simWorldsRep\n              \\<Rightarrow> ('a, 'es, 'as) spr_simWorld set\"\nwhere\n  \"spr_simAbs \\<equiv> \\<lambda>(cec, aec). { \\<lparr> sprFst = s, sprLst = s', sprCRel = toSet cec \\<rparr>\n                                |s s'. (s, s') \\<in> toSet aec }\""], ["", "text\\<open>\n\nAssuming @{term \"X\"} represents a simulated equivalence class for\n@{term \"t \\<in> jkbpC\"}, we can decompose @{term \"spr_simAbs X\"} in terms\nof @{term \"tObsC_abs t\"} and @{term \"agent_abs t\"}:\n\n\\<close>"], ["", "definition\n  agent_abs :: \"'a \\<Rightarrow> ('a, 'es, 'as) BEState Trace\n             \\<Rightarrow> ('a, 'es, 'as) BEState Relation\"\nwhere\n  \"agent_abs a t \\<equiv> { (tFirst t', tLast t')\n                     |t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t }\""], ["", "(*<*)"], ["", "lemma agent_absI[intro]:\n  \"\\<lbrakk> spr_jview a t' = spr_jview a t; t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC \\<rbrakk>\n      \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_jview a t' = spr_jview a t; t' \\<in> SPR.jkbpC;\n     t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "unfolding agent_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_jview a t' = spr_jview a t; t' \\<in> SPR.jkbpC;\n     t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t')\n                      \\<in> rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    uu_ = (tFirst t', tLast t') \\<and>\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t' = spr_jview a t)", "by auto"], ["", "lemma spr_simAbs_refl:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_sim t \\<in> spr_simAbs ec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_sim t \\<in> spr_simAbs ec", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. spr_sim t \\<in> spr_simAbs ec", "by simp"], ["", "lemma spr_simAbs_tObsC_abs[simp]:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (fst ec) = tObsC_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (fst ec) = tObsC_abs t", "using tC spr_simAbs_refl[OF tC ec]"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_sim t \\<in> spr_simAbs ec\n\ngoal (1 subgoal):\n 1. toSet (fst ec) = tObsC_abs t", "unfolding spr_sim_def spr_simAbs_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>\n  \\<in> (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec))\n\ngoal (1 subgoal):\n 1. toSet (fst ec) = tObsC_abs t", "by auto"], ["", "lemma spr_simAbs_agent_abs[simp]:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (snd ec) = agent_abs a t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (snd ec) = agent_abs a t", "using tC ec"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. toSet (snd ec) = agent_abs a t", "unfolding spr_sim_def spr_simAbs_def agent_abs_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  (case ec of\n   (cec, aec) \\<Rightarrow>\n     rel_ext\n      (\\<lambda>uu_.\n          \\<exists>s s'.\n             uu_ =\n             \\<lparr>sprFst = s, sprLst = s',\n                sprCRel = toSet cec\\<rparr> \\<and>\n             (s, s') \\<in> toSet aec)) =\n  (\\<lambda>t.\n      \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n         sprCRel = tObsC_abs t\\<rparr>) `\n  rel_ext\n   (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. toSet (snd ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)", "apply (cases ec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        ec = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> toSet (snd ec) =\n                         rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>t'.\n                                 uu_ = (tFirst t', tLast t') \\<and>\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 spr_jview a t' = spr_jview a t)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet aa\\<rparr> \\<and>\n                (s, s') \\<in> toSet b) =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        ec = (aa, b); (aaa, ba) \\<in> toSet b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            aaa = tFirst t' \\<and>\n                            ba = tLast t' \\<and>\n                            t' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (subgoal_tac \"\\<lparr>sprFst = aaa, sprLst = ba, sprCRel = toSet aa\\<rparr> \\<in> {\\<lparr>sprFst = s, sprLst = s', sprCRel = toSet aa\\<rparr> |s s'. (s, s') \\<in> toSet b}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet aa\\<rparr> \\<and>\n                (s, s') \\<in> toSet b) =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        ec = (aa, b); (aaa, ba) \\<in> toSet b;\n        \\<lparr>sprFst = aaa, sprLst = ba, sprCRel = toSet aa\\<rparr>\n        \\<in> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>s s'.\n                      uu_ =\n                      \\<lparr>sprFst = s, sprLst = s',\n                         sprCRel = toSet aa\\<rparr> \\<and>\n                      (s, s') \\<in> toSet b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            aaa = tFirst t' \\<and>\n                            ba = tLast t' \\<and>\n                            t' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t\n 2. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet aa\\<rparr> \\<and>\n                (s, s') \\<in> toSet b) =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        ec = (aa, b); (aaa, ba) \\<in> toSet b\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = aaa, sprLst = ba,\n                            sprCRel = toSet aa\\<rparr>\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>s s'.\n uu_ = \\<lparr>sprFst = s, sprLst = s', sprCRel = toSet aa\\<rparr> \\<and>\n (s, s') \\<in> toSet b)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nThis representation is canonical on the domain of interest (though not\nin general):\n\n\\<close>"], ["", "lemma spr_simAbs_inj_on:\n  \"inj_on spr_simAbs { x . spr_simAbs x \\<in> SPRdet.jkbpSEC }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on spr_simAbs\n     (rel_ext\n       (\\<lambda>x.\n           spr_simAbs x\n           \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on spr_simAbs\n     (rel_ext\n       (\\<lambda>x.\n           spr_simAbs x\n           \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)))", "proof(rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x: \"x \\<in> { x . spr_simAbs x \\<in> SPRdet.jkbpSEC }\"\n     and y: \"y \\<in> { x . spr_simAbs x \\<in> SPRdet.jkbpSEC }\"\n     and xy: \"spr_simAbs x = spr_simAbs y\""], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>x.\n               spr_simAbs x\n               \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC))\n  y \\<in> rel_ext\n           (\\<lambda>x.\n               spr_simAbs x\n               \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC))\n  spr_simAbs x = spr_simAbs y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from x"], ["proof (chain)\npicking this:\n  x \\<in> rel_ext\n           (\\<lambda>x.\n               spr_simAbs x\n               \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC))", "obtain a t\n    where tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs x = SPRdet.sim_equiv_class a t\""], ["proof (prove)\nusing this:\n  x \\<in> rel_ext\n           (\\<lambda>x.\n               spr_simAbs x\n               \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC))\n\ngoal (1 subgoal):\n 1. (\\<And>t a.\n        \\<lbrakk>t \\<in> SPR.jkbpC;\n         spr_simAbs x = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t \\<in> SPR.jkbpC\n  spr_simAbs x = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from spr_simAbs_tObsC_abs[OF tC ec] spr_simAbs_tObsC_abs[OF tC trans[OF xy[symmetric] ec], symmetric]"], ["proof (chain)\npicking this:\n  toSet (fst x) = tObsC_abs t\n  tObsC_abs t = toSet (fst y)", "have \"fst x = fst y\""], ["proof (prove)\nusing this:\n  toSet (fst x) = tObsC_abs t\n  tObsC_abs t = toSet (fst y)\n\ngoal (1 subgoal):\n 1. fst x = fst y", "by (blast intro: injD[OF toSet_inj])"], ["proof (state)\nthis:\n  fst x = fst y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  fst x = fst y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from spr_simAbs_agent_abs[OF tC ec] spr_simAbs_agent_abs[OF tC trans[OF xy[symmetric] ec], symmetric]"], ["proof (chain)\npicking this:\n  toSet (snd x) = agent_abs a t\n  agent_abs a t = toSet (snd y)", "have \"snd x = snd y\""], ["proof (prove)\nusing this:\n  toSet (snd x) = agent_abs a t\n  agent_abs a t = toSet (snd y)\n\ngoal (1 subgoal):\n 1. snd x = snd y", "by (blast intro: injD[OF toSet_inj])"], ["proof (state)\nthis:\n  snd x = snd y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> rel_ext\n                         (\\<lambda>x.\n                             spr_simAbs x\n                             \\<in> (\\<Union>a.\n SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        y \\<in> rel_ext\n                 (\\<lambda>x.\n                     spr_simAbs x\n                     \\<in> (\\<Union>a.\n                               SPRdet.sim_equiv_class a ` SPR.jkbpC));\n        spr_simAbs x = spr_simAbs y\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  fst x = fst y\n  snd x = snd y", "show \"x = y\""], ["proof (prove)\nusing this:\n  fst x = fst y\n  snd x = snd y\n\ngoal (1 subgoal):\n 1. x = y", "by (simp add: prod_eqI)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe following sections make use of a Kripke structure constructed over\n@{term \"tObsC_abs t\"} for some canonical trace @{term \"t\"}. Note that\nwe use the relation in the generated code.\n\n\\<close>"], ["", "type_synonym (in -) ('a, 'es, 'as) spr_simWorlds\n  = \"('a, 'es, 'as) BEState \\<times> ('a, 'es, 'as) BEState\""], ["", "definition (in -)\n  spr_repRels :: \"('a \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'as option)\n                 \\<Rightarrow> 'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds Relation\"\nwhere\n  \"spr_repRels envObs \\<equiv> \\<lambda>a. { ((u, v), (u', v')).\n        envObs a u = envObs a u' \\<and> envObs a v = envObs a v' }\""], ["", "definition\n  spr_repVal :: \"('a, 'es, 'as) spr_simWorlds \\<Rightarrow> 'p \\<Rightarrow> bool\"\nwhere\n  \"spr_repVal \\<equiv> envVal \\<circ> snd\""], ["", "abbreviation\n  spr_repMC :: \"('a, 'es, 'as) BEState Relation\n               \\<Rightarrow> ('a, 'p, ('a, 'es, 'as) spr_simWorlds) KripkeStructure\"\nwhere\n  \"spr_repMC \\<equiv> \\<lambda>tcobsR. mkKripke tcobsR (spr_repRels envObs) spr_repVal\""], ["", "(*<*)"], ["", "abbreviation\n  spr_repRels :: \"'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds Relation\"\nwhere\n  \"spr_repRels \\<equiv> SPRViewDet.spr_repRels envObs\""], ["", "lemma spr_repMC_kripke[intro, simp]: \"kripke (spr_repMC X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kripke (spr_repMC X)", "by (rule kripkeI) simp"], ["", "lemma spr_repMC_S5n[intro, simp]: \"S5n (spr_repMC X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S5n (spr_repMC X)", "unfolding spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. S5n (mkKripke X\n          (\\<lambda>a.\n              rel_ext\n               (\\<lambda>((u, v), u', v').\n                   envObs a u = envObs a u' \\<and>\n                   envObs a v = envObs a v'))\n          spr_repVal)", "by (intro S5nI equivI refl_onI symI transI) auto"], ["", "(*>*)"], ["", "text\\<open>\n\nAs before we can show that this Kripke structure is adequate for a\nparticular canonical trace @{term \"t\"} by showing that it simulates\n@{term \"spr_repMC\"} We introduce an intermediate structure:\n\n\\<close>"], ["", "abbreviation\n  spr_jkbpCSt :: \"('a, 'es, 'as) BEState Trace \\<Rightarrow> ('a, 'es, 'as) spr_simWorld set\"\nwhere\n  \"spr_jkbpCSt t \\<equiv> spr_sim ` { t' . t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t' }\""], ["", "abbreviation\n  spr_simMCt :: \"('a, 'es, 'as) BEState Trace\n                \\<Rightarrow> ('a, 'p, ('a, 'es, 'as) spr_simWorld) KripkeStructure\"\nwhere\n  \"spr_simMCt t \\<equiv> mkKripke (spr_jkbpCSt t) spr_simRels spr_simVal\""], ["", "definition\n  spr_repSim :: \"('a, 'es, 'as) spr_simWorld \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds\"\nwhere\n  \"spr_repSim \\<equiv> \\<lambda>s. (sprFst s, sprLst s)\""], ["", "(*<*)"], ["", "lemma spr_repSim_simps[simp]:\n  \"spr_repSim ` spr_sim ` T = (\\<lambda>t. (tFirst t, tLast t)) ` T\"\n  \"spr_repSim (spr_sim t) = (tFirst t, tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_repSim ` spr_sim ` T = (\\<lambda>t. (tFirst t, tLast t)) ` T &&&\n    spr_repSim (spr_sim t) = (tFirst t, tLast t)", "unfolding spr_repSim_def spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. (sprFst s, sprLst s)) `\n    (\\<lambda>t.\n        \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n           sprCRel = tObsC_abs t\\<rparr>) `\n    T =\n    (\\<lambda>t. (tFirst t, tLast t)) ` T &&&\n    (sprFst\n      \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n         sprCRel = tObsC_abs t\\<rparr>,\n     sprLst\n      \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n         sprCRel = tObsC_abs t\\<rparr>) =\n    (tFirst t, tLast t)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> T \\<Longrightarrow>\n       (tFirst t, tLast t)\n       \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n             (\\<lambda>t.\n                 \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                    sprCRel = tObsC_abs t\\<rparr>) `\n             T", "apply (rule_tac x=\"\\<lparr> sprFst = tFirst t, sprLst = tLast t, sprCRel = tObsC_abs t \\<rparr>\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> T \\<Longrightarrow>\n       (tFirst t, tLast t) =\n       (sprFst\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>,\n        sprLst\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>)\n 2. \\<And>t.\n       t \\<in> T \\<Longrightarrow>\n       \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n          sprCRel = tObsC_abs t\\<rparr>\n       \\<in> (\\<lambda>t.\n                 \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                    sprCRel = tObsC_abs t\\<rparr>) `\n             T", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jkbpCSt_jkbpCS_subset:\n  \"spr_jkbpCSt t \\<subseteq> spr_sim ` SPR.jkbpC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jkbpCSt t \\<subseteq> SPRdet.jkbpCS", "by auto"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_repSim:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  shows \"sim (spr_simMCt t)\n             ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n             spr_repSim\"\n(*<*) (is \"sim ?M ?M' ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t)) spr_repSim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. sim_range (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 2. sim_val (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 3. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 4. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "show \"sim_range ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_range (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) =\n    spr_repSim ` worlds (spr_simMCt t)\n 2. \\<And>a.\n       relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))", "show \"worlds ?M' = ?f ` worlds ?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) =\n    spr_repSim ` worlds (spr_simMCt t)", "apply (simp add: spr_sim_def spr_repSim_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC_abs t =\n    (\\<lambda>x. (sprFst x, sprLst x)) `\n    (\\<lambda>x.\n        \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n           sprCRel = tObsC_abs x\\<rparr>) `\n    rel_ext (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')", "apply (auto iff: tObsC_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t')\n                         \\<in> (\\<lambda>x. (sprFst x, sprLst x)) `\n                               (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x,\nsprCRel =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t'.\n          uu_ = (tFirst t', tLast t') \\<and>\n          t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC x)\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC t = tObsC t')", "apply (rule_tac x=\"\\<lparr> sprFst = tFirst t', sprLst = tLast t', sprCRel = tObsC_abs t \\<rparr>\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') =\n                         (sprFst\n                           \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                              sprCRel = tObsC_abs t\\<rparr>,\n                          sprLst\n                           \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                              sprCRel = tObsC_abs t\\<rparr>)\n 2. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x,\nsprCRel =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t'.\n          uu_ = (tFirst t', tLast t') \\<and>\n          t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC x)\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC t = tObsC t')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x,\nsprCRel =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t'.\n          uu_ = (tFirst t', tLast t') \\<and>\n          t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC x)\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC t = tObsC t')", "apply (rule_tac x=t' in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                            sprCRel = tObsC_abs t\\<rparr> =\n                         \\<lparr>sprFst = tFirst t', sprLst = tLast t',\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t'a.\nuu_ = (tFirst t'a, tLast t'a) \\<and>\nt'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t')\\<rparr>\n 2. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')", "apply (simp add: tObsC_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')", "apply auto[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) =\n  spr_repSim ` worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))", "show \"relations ?M' a \\<subseteq> worlds ?M' \\<times> worlds ?M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n    \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n                worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))", "by (simp add: spr_sim_def spr_repSim_def)"], ["proof (state)\nthis:\n  relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\n  \\<subseteq> worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t)) \\<times>\n              worlds ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sim_range (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n   spr_repSim\n\ngoal (3 subgoals):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 2. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 3. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 2. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 3. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "show \"sim_val ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "by rule (simp add: spr_sim_def spr_simVal_def spr_repSim_def spr_repVal_def split: prod.split)"], ["proof (state)\nthis:\n  sim_val (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n   spr_repSim\n\ngoal (2 subgoals):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 2. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim\n 2. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "show \"sim_f ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "by rule (auto iff: spr_sim_def simp: spr_simRels_def spr_repRels_def spr_repSim_def)"], ["proof (state)\nthis:\n  sim_f (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t)) spr_repSim\n\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "show \"sim_r ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t))\n     spr_repSim", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds (spr_simMCt t);\n        (spr_repSim u, v')\n        \\<in> relations ((spr_repMC \\<circ> sprCRel) (spr_sim t)) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations (spr_simMCt t) a \\<and>\n                            spr_repSim v = v'", "unfolding spr_repRels_def spr_repSim_def spr_simRels_def spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds\n                         (mkKripke\n                           ((\\<lambda>t.\n                                \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                                   sprCRel = tObsC_abs t\\<rparr>) `\n                            rel_ext\n                             (\\<lambda>t'.\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 tObsC t = tObsC t'))\n                           (\\<lambda>a.\n                               rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>s s'.\n uu_ = (s, s') \\<and>\n envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n envObs a (sprLst s) = envObs a (sprLst s') \\<and> sprCRel s = sprCRel s'))\n                           spr_simVal);\n        ((sprFst u, sprLst u), v')\n        \\<in> relations\n               (((\\<lambda>tcobsR.\n                     mkKripke tcobsR\n                      (\\<lambda>a.\n                          rel_ext\n                           (\\<lambda>((u, v), u', v').\n                               envObs a u = envObs a u' \\<and>\n                               envObs a v = envObs a v'))\n                      spr_repVal) \\<circ>\n                 sprCRel)\n                 \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                    sprCRel = tObsC_abs t\\<rparr>)\n               a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v)\n                            \\<in> relations\n                                   (mkKripke\n                                     ((\\<lambda>t.\n    \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n       sprCRel = tObsC_abs t\\<rparr>) `\nrel_ext (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t'))\n                                     (\\<lambda>a.\n   rel_ext\n    (\\<lambda>uu_.\n        \\<exists>s s'.\n           uu_ = (s, s') \\<and>\n           envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n           envObs a (sprLst s) = envObs a (sprLst s') \\<and>\n           sprCRel s = sprCRel s'))\n                                     spr_simVal)\n                                   a \\<and>\n                            (sprFst v, sprLst v) = v'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b ta.\n       \\<lbrakk>ta \\<in> SPR.jkbpC; tObsC t = tObsC ta;\n        envObs a (tFirst ta) = envObs a aa;\n        envObs a (tLast ta) = envObs a b;\n        (tFirst ta, tLast ta) \\<in> tObsC_abs t;\n        (aa, b) \\<in> tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            envObs a aa = envObs a (sprFst v) \\<and>\n                            envObs a b = envObs a (sprLst v) \\<and>\n                            tObsC_abs ta = sprCRel v \\<and>\n                            v \\<in> (\\<lambda>x.\n  \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n     sprCRel = tObsC_abs x\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'.\n   t' \\<in> SPR.jkbpC \\<and> tObsC ta = tObsC t') \\<and>\n                            sprFst v = aa \\<and> sprLst v = b", "apply (rule_tac x=\"\\<lparr> sprFst = aa, sprLst = b, sprCRel = tObsC_abs ta \\<rparr>\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b ta.\n       \\<lbrakk>ta \\<in> SPR.jkbpC; tObsC t = tObsC ta;\n        envObs a (tFirst ta) = envObs a aa;\n        envObs a (tLast ta) = envObs a b;\n        (tFirst ta, tLast ta) \\<in> tObsC_abs t;\n        (aa, b) \\<in> tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> envObs a aa =\n                         envObs a\n                          (sprFst\n                            \\<lparr>sprFst = aa, sprLst = b,\n                               sprCRel = tObsC_abs ta\\<rparr>) \\<and>\n                         envObs a b =\n                         envObs a\n                          (sprLst\n                            \\<lparr>sprFst = aa, sprLst = b,\n                               sprCRel = tObsC_abs ta\\<rparr>) \\<and>\n                         tObsC_abs ta =\n                         sprCRel\n                          \\<lparr>sprFst = aa, sprLst = b,\n                             sprCRel = tObsC_abs ta\\<rparr> \\<and>\n                         \\<lparr>sprFst = aa, sprLst = b,\n                            sprCRel = tObsC_abs ta\\<rparr>\n                         \\<in> (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x, sprCRel = tObsC_abs x\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC ta = tObsC t') \\<and>\n                         sprFst\n                          \\<lparr>sprFst = aa, sprLst = b,\n                             sprCRel = tObsC_abs ta\\<rparr> =\n                         aa \\<and>\n                         sprLst\n                          \\<lparr>sprFst = aa, sprLst = b,\n                             sprCRel = tObsC_abs ta\\<rparr> =\n                         b", "apply (auto iff: tObsC_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ta t' t'a.\n       \\<lbrakk>ta \\<in> SPR.jkbpC; tObsC t = tObsC ta;\n        envObs a (tFirst t') = envObs a (tFirst t'a);\n        envObs a (tLast t') = envObs a (tLast t'a); tFirst ta = tFirst t';\n        tLast ta = tLast t'; t' \\<in> SPR.jkbpC; tObsC t' = tObsC ta;\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'a, sprLst = tLast t'a,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t'.\nuu_ = (tFirst t', tLast t') \\<and>\nt' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC ta)\\<rparr>\n                         \\<in> (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x,\nsprCRel =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t'.\n          uu_ = (tFirst t', tLast t') \\<and>\n          t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC x)\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC ta = tObsC t')", "apply (rule_tac x=t'a in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a ta t' t'a.\n       \\<lbrakk>ta \\<in> SPR.jkbpC; tObsC t = tObsC ta;\n        envObs a (tFirst t') = envObs a (tFirst t'a);\n        envObs a (tLast t') = envObs a (tLast t'a); tFirst ta = tFirst t';\n        tLast ta = tLast t'; t' \\<in> SPR.jkbpC; tObsC t' = tObsC ta;\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'a, sprLst = tLast t'a,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t'.\nuu_ = (tFirst t', tLast t') \\<and>\nt' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC ta)\\<rparr> =\n                         \\<lparr>sprFst = tFirst t'a, sprLst = tLast t'a,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t'.\nuu_ = (tFirst t', tLast t') \\<and>\nt' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t'a)\\<rparr>\n 2. \\<And>a ta t' t'a.\n       \\<lbrakk>ta \\<in> SPR.jkbpC; tObsC t = tObsC ta;\n        envObs a (tFirst t') = envObs a (tFirst t'a);\n        envObs a (tLast t') = envObs a (tLast t'a); tFirst ta = tFirst t';\n        tLast ta = tLast t'; t' \\<in> SPR.jkbpC; tObsC t' = tObsC ta;\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> t'a\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    tObsC ta = tObsC t')", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sim_r (spr_simMCt t) ((spr_repMC \\<circ> sprCRel) (spr_sim t)) spr_repSim\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nAs before we define a set of constants that satisfy the \\<open>Algorithm\\<close> locale given the assumptions of the @{term\n\"FiniteDetBroadcastEnvironment\"} locale.\n\n\\<close>"], ["", "(* **************************************** *)"], ["", "subsubsection\\<open>Initial states\\<close>"], ["", "text\\<open>\n\nThe initial states for agent @{term \"a\"} given an initial observation\n@{term \"iobs\"} consist of the set of states that yield a common\nobservation consonant with @{term \"iobs\"} paired with the set of\nstates where @{term \"a\"} observes @{term \"iobs\"}:\n\n\\<close>"], ["", "definition (in -)\n  spr_simInit ::\n        \"('a, 'es, 'as) BEState list \\<Rightarrow> ('es \\<Rightarrow> 'cobs)\n      \\<Rightarrow> ('a \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'obs)\n       \\<Rightarrow> 'a \\<Rightarrow> ('cobs \\<times> 'obs)\n       \\<Rightarrow> ('a :: linorder, 'es :: linorder, 'as :: linorder) spr_simWorldsRep\"\nwhere\n  \"spr_simInit envInit envObsC envObs \\<equiv> \\<lambda>a iobs.\n    (ODList.fromList [ (s, s). s \\<leftarrow> envInit, envObsC (es s) = fst iobs ],\n     ODList.fromList [ (s, s). s \\<leftarrow> envInit, envObs a s = iobs ])\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simInit :: \"'a \\<Rightarrow> ('cobs \\<times> 'as option) \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep\"\nwhere\n  \"spr_simInit \\<equiv> SPRViewDet.spr_simInit envInit envObsC envObs\""], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_simInit:\n  assumes \"iobs \\<in> envObs a ` set envInit\"\n  shows \"spr_simAbs (spr_simInit a iobs)\n       = spr_sim ` { t' \\<in> SPR.jkbpC. spr_jview a t' = spr_jviewInit a iobs }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "using assms"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "unfolding spr_simInit_def spr_simAbs_def spr_sim_def [abs_def]"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n\ngoal (1 subgoal):\n 1. (case (fromList\n            (concat\n              (map (\\<lambda>s.\n                       if envObsC (es s) = fst iobs then [(s, s)] else [])\n                envInit)),\n           fromList\n            (concat\n              (map (\\<lambda>s. if envObs a s = iobs then [(s, s)] else [])\n                envInit))) of\n     (cec, aec) \\<Rightarrow>\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s s'.\n               uu_ =\n               \\<lparr>sprFst = s, sprLst = s',\n                  sprCRel = toSet cec\\<rparr> \\<and>\n               (s, s') \\<in> toSet aec)) =\n    (\\<lambda>t.\n        \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n           sprCRel = tObsC_abs t\\<rparr>) `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "apply (clarsimp simp: Let_def SPR.jviewInit split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s,\n                                    sprCRel =\n\\<Union>x\\<in>set envInit \\<inter>\n              rel_ext (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n   {(x, x)}\\<rparr> \\<and>\n                                 s \\<in> set envInit \\<and>\n                                 envObs a s = envObs a x) =\n                         (\\<lambda>x.\n                             \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n                                sprCRel = tObsC_abs x\\<rparr>) `\n                         rel_ext\n                          (\\<lambda>t'.\n                              t' \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a (tInit x))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s,\n                                    sprCRel =\n\\<Union>x\\<in>set envInit \\<inter>\n              rel_ext (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n   {(x, x)}\\<rparr> \\<and>\n                                 s \\<in> set envInit \\<and>\n                                 envObs a s = envObs a x)\n                         \\<subseteq> (\\<lambda>x.\n   \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n      sprCRel = tObsC_abs x\\<rparr>) `\n                                     rel_ext\n(\\<lambda>t'.\n    t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a (tInit x))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x.\n                             \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n                                sprCRel = tObsC_abs x\\<rparr>) `\n                         rel_ext\n                          (\\<lambda>t'.\n                              t' \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a (tInit x))\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s,\n          sprCRel =\n            \\<Union>x\\<in>set envInit \\<inter>\n                          rel_ext\n                           (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n               {(x, x)}\\<rparr> \\<and>\n       s \\<in> set envInit \\<and> envObs a s = envObs a x)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x; s \\<in> set envInit;\n        envObs a s = envObs a x\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s,\n                            sprCRel =\n                              \\<Union>x\\<in>set envInit \\<inter>\n      rel_ext (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n                                 {(x, x)}\\<rparr>\n                         \\<in> (\\<lambda>x.\n                                   \\<lparr>sprFst = tFirst x,\nsprLst = tLast x, sprCRel = tObsC_abs x\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t' = spr_jview a (tInit x))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x.\n                             \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n                                sprCRel = tObsC_abs x\\<rparr>) `\n                         rel_ext\n                          (\\<lambda>t'.\n                              t' \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a (tInit x))\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s,\n          sprCRel =\n            \\<Union>x\\<in>set envInit \\<inter>\n                          rel_ext\n                           (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n               {(x, x)}\\<rparr> \\<and>\n       s \\<in> set envInit \\<and> envObs a s = envObs a x)", "apply (rule_tac x=\"tInit s\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x; s \\<in> set envInit;\n        envObs a s = envObs a x\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s,\n                            sprCRel =\n                              \\<Union>x\\<in>set envInit \\<inter>\n      rel_ext (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n                                 {(x, x)}\\<rparr> =\n                         \\<lparr>sprFst = tFirst (tInit s),\n                            sprLst = tLast (tInit s),\n                            sprCRel = tObsC_abs (tInit s)\\<rparr>\n 2. \\<And>x s.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x; s \\<in> set envInit;\n        envObs a s = envObs a x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t' = spr_jview a (tInit x))\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> set envInit; iobs = envObs a x\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x.\n                             \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n                                sprCRel = tObsC_abs x\\<rparr>) `\n                         rel_ext\n                          (\\<lambda>t'.\n                              t' \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a (tInit x))\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s,\n          sprCRel =\n            \\<Union>x\\<in>set envInit \\<inter>\n                          rel_ext\n                           (\\<lambda>s. envObsC (es s) = fst (envObs a x)).\n               {(x, x)}\\<rparr> \\<and>\n       s \\<in> set envInit \\<and> envObs a s = envObs a x)", "apply (auto iff: spr_jview_def envObs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated observations\\<close>"], ["", "text\\<open>\n\nAn observation can be made at any element of the representation of a\nsimulated equivalence class of a canonical trace:\n\n\\<close>"], ["", "definition (in -)\n  spr_simObs ::\n        \"('es \\<Rightarrow> 'cobs)\n      \\<Rightarrow> 'a \\<Rightarrow> ('a :: linorder, 'es :: linorder, 'as :: linorder) spr_simWorldsRep\n      \\<Rightarrow> 'cobs \\<times> 'as option\"\nwhere\n  \"spr_simObs envObsC \\<equiv> \\<lambda>a. (\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a))\n                           \\<circ> snd \\<circ> ODList.hd \\<circ> snd\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simObs :: \"'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep \\<Rightarrow> 'cobs \\<times> 'as option\"\nwhere\n  \"spr_simObs \\<equiv> SPRViewDet.spr_simObs envObsC\""], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_simObs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_simObs a ec = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "have A: \"\\<forall>s \\<in> set (toList (snd ec)). envObs a (snd s) = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (toList (snd ec)).\n       envObs a (snd s) = envObs a (tLast t)", "using spr_simAbs_agent_abs[OF tC ec]"], ["proof (prove)\nusing this:\n  toSet (snd ec) = agent_abs a t\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (toList (snd ec)).\n       envObs a (snd s) = envObs a (tLast t)", "apply (clarsimp simp: toSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>set (toList (snd ec)) = agent_abs a t;\n        (aa, b) \\<in> agent_abs a t\\<rbrakk>\n       \\<Longrightarrow> envObs a b = envObs a (tLast t)", "apply (auto simp: agent_abs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (toList (snd ec)).\n     envObs a (snd s) = envObs a (tLast t)\n\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "from tC ec"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t", "have B: \"(tFirst t, tLast t) \\<in> set (toList (snd ec))\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. (tFirst t, tLast t) \\<in> set (toList (snd ec))", "by (auto iff: spr_simAbs_def spr_sim_def toSet_def split_def)"], ["proof (state)\nthis:\n  (tFirst t, tLast t) \\<in> set (toList (snd ec))\n\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "unfolding spr_simObs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a)) \\<circ>\n     snd \\<circ>\n     ODList.hd \\<circ>\n     snd)\n     ec =\n    envObs a (tLast t)", "using list_choose_hd[OF A B]"], ["proof (prove)\nusing this:\n  envObs a (snd (list.hd (toList (snd ec)))) = envObs a (tLast t)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>s. (envObsC (es s), ODList.lookup (ps s) a)) \\<circ>\n     snd \\<circ>\n     ODList.hd \\<circ>\n     snd)\n     ec =\n    envObs a (tLast t)", "by (simp add: ODList.hd_def envObs_def)"], ["proof (state)\nthis:\n  local.spr_simObs a ec = envObs a (tLast t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Evaluation\\<close>"], ["", "text\\<open>\n\nAs for the clock semantics (\\S\\ref{sec:kbps-theory-clock-view-eval}),\nwe use the general evalation function @{term \"evalS\"}.\n\nOnce again we propositions are used to filter the set of possible\nworlds @{term \"X\"}:\n\n\\<close>"], ["", "abbreviation (in -)\n  spr_evalProp ::\n        \"(('a::linorder, 'es::linorder, 'as::linorder) BEState \\<Rightarrow> 'p \\<Rightarrow> bool)\n      \\<Rightarrow> ('a, 'es, 'as) BEState odrelation\n      \\<Rightarrow> 'p \\<Rightarrow> ('a, 'es, 'as) BEState odrelation\"\nwhere\n  \"spr_evalProp envVal \\<equiv> \\<lambda>X p. ODList.filter (\\<lambda>s. envVal (snd s) p) X\""], ["", "text\\<open>\n\nThe knowledge operation computes the subset of possible worlds @{term\n\"cec\"} that yield the same observation as @{term \"s\"} for agent @{term\n\"a\"}:\n\n\\<close>"], ["", "definition (in -)\n  spr_knowledge ::\n     \"('a \\<Rightarrow> ('a::linorder, 'es::linorder, 'as::linorder) BEState\n          \\<Rightarrow> 'cobs \\<times> 'as option)\n       \\<Rightarrow> ('a, 'es, 'as) BEState odrelation\n       \\<Rightarrow> 'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds\n       \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsECRep\"\nwhere\n  \"spr_knowledge envObs cec \\<equiv> \\<lambda>a s.\n    ODList.fromList [ s' . s' \\<leftarrow> toList cec, (s, s') \\<in> spr_repRels envObs a ]\""], ["", "(*<*)\n\n(* We need to avoid the explicit enumeration of the set in spr_repRels. *)"], ["", "declare (in -) spr_knowledge_def[code del]"], ["", "lemma (in -) [code]:\n  \"spr_knowledge envObs cec = (\\<lambda>a s.\n     ODList.fromList [ s' . s' \\<leftarrow> toList cec,\n                               envObs a (fst s) = envObs a (fst s') \\<and> envObs a (snd s) = envObs a (snd s') ])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_knowledge envObs cec =\n    (\\<lambda>a s.\n        fromList\n         (concat\n           (map (\\<lambda>s'.\n                    if envObs a (fst s) = envObs a (fst s') \\<and>\n                       envObs a (snd s) = envObs a (snd s')\n                    then [s'] else [])\n             (toList cec))))", "unfolding spr_knowledge_def spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a s.\n        fromList\n         (concat\n           (map (\\<lambda>s'.\n                    if (s, s')\n                       \\<in> rel_ext\n                              (\\<lambda>((u, v), u', v').\n                                  envObs a u = envObs a u' \\<and>\n                                  envObs a v = envObs a v')\n                    then [s'] else [])\n             (toList cec)))) =\n    (\\<lambda>a s.\n        fromList\n         (concat\n           (map (\\<lambda>s'.\n                    if envObs a (fst s) = envObs a (fst s') \\<and>\n                       envObs a (snd s) = envObs a (snd s')\n                    then [s'] else [])\n             (toList cec))))", "by (simp add: split_def)"], ["", "(*>*)"], ["", "text\\<open>\n\nSimilarly the common knowledge operation computes the transitive\nclosure \\citep{AFP:TRANCL} of the union of the knowledge relations for\nthe agents \\<open>as\\<close>:\n\n\\<close>"], ["", "definition (in -)\n  spr_commonKnowledge ::\n     \"('a \\<Rightarrow> ('a::linorder, 'es::linorder, 'as::linorder) BEState\n          \\<Rightarrow> 'cobs \\<times> 'as option)\n        \\<Rightarrow> ('a, 'es, 'as) BEState odrelation\n        \\<Rightarrow> 'a list\n        \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds\n        \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsECRep\"\nwhere\n  \"spr_commonKnowledge envObs cec \\<equiv> \\<lambda>as s.\n    let r = \\<lambda>a. ODList.fromList\n               [ (s', s'') . s' \\<leftarrow> toList cec, s'' \\<leftarrow> toList cec,\n                             (s', s'') \\<in> spr_repRels envObs a ];\n        R = toList (ODList.big_union r as)\n     in ODList.fromList (memo_list_trancl R s)\""], ["", "(*<*)\n\n(* We need to avoid the explicit enumeration of the set in spr_repRels. *)"], ["", "declare (in -) spr_commonKnowledge_def[code del]"], ["", "lemma (in -) [code]:\n  \"spr_commonKnowledge envObs cec = (\\<lambda>as s.\n    let r = \\<lambda>a. ODList.fromList\n               [ (s', s'') . s' \\<leftarrow> toList cec, s'' \\<leftarrow> toList cec,\n                             envObs a (fst s') = envObs a (fst s'') \\<and> envObs a (snd s') = envObs a (snd s'') ];\n        R = toList (ODList.big_union r as)\n     in ODList.fromList (memo_list_trancl R s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_commonKnowledge envObs cec =\n    (\\<lambda>as s.\n        let r = \\<lambda>a.\n                   fromList\n                    (concat\n                      (map (\\<lambda>s'.\n                               concat\n                                (map (\\<lambda>s''.\n   if envObs a (fst s') = envObs a (fst s'') \\<and>\n      envObs a (snd s') = envObs a (snd s'')\n   then [(s', s'')] else [])\n                                  (toList cec)))\n                        (toList cec)));\n            R = toList (big_union r as)\n        in fromList (memo_list_trancl R s))", "unfolding spr_commonKnowledge_def spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>as s.\n        let r = \\<lambda>a.\n                   fromList\n                    (concat\n                      (map (\\<lambda>s'.\n                               concat\n                                (map (\\<lambda>s''.\n   if (s', s'')\n      \\<in> rel_ext\n             (\\<lambda>((u, v), u', v').\n                 envObs a u = envObs a u' \\<and> envObs a v = envObs a v')\n   then [(s', s'')] else [])\n                                  (toList cec)))\n                        (toList cec)));\n            R = toList (big_union r as)\n        in fromList (memo_list_trancl R s)) =\n    (\\<lambda>as s.\n        let r = \\<lambda>a.\n                   fromList\n                    (concat\n                      (map (\\<lambda>s'.\n                               concat\n                                (map (\\<lambda>s''.\n   if envObs a (fst s') = envObs a (fst s'') \\<and>\n      envObs a (snd s') = envObs a (snd s'')\n   then [(s', s'')] else [])\n                                  (toList cec)))\n                        (toList cec)));\n            R = toList (big_union r as)\n        in fromList (memo_list_trancl R s))", "by (simp add: split_def)"], ["", "(*>*)"], ["", "text\\<open>\n\nThe evaluation function evaluates a subjective knowledge formula on\nthe representation of an equivalence class:\n\n\\<close>"], ["", "definition (in -)\n  \"eval envVal envObs \\<equiv> \\<lambda>(cec, X).\n     evalS (spr_evalProp envVal)\n           (spr_knowledge envObs cec)\n           (spr_commonKnowledge envObs cec)\n           X\""], ["", "(*<*)"], ["", "lemma spr_knowledge:\n  \"s \\<in> toSet cec\n    \\<Longrightarrow> toSet (spr_knowledge envObs cec a s) = relations (spr_repMC (toSet cec)) a `` {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> toSet cec \\<Longrightarrow>\n    toSet (spr_knowledge envObs cec a s) =\n    relations (spr_repMC (toSet cec)) a `` {s}", "unfolding spr_knowledge_def spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> toSet cec \\<Longrightarrow>\n    toSet\n     (fromList\n       (concat\n         (map (\\<lambda>s'.\n                  if (s, s')\n                     \\<in> rel_ext\n                            (\\<lambda>((u, v), u', v').\n                                envObs a u = envObs a u' \\<and>\n                                envObs a v = envObs a v')\n                  then [s'] else [])\n           (toList cec)))) =\n    relations\n     (mkKripke (toSet cec)\n       (\\<lambda>a.\n           rel_ext\n            (\\<lambda>((u, v), u', v').\n                envObs a u = envObs a u' \\<and> envObs a v = envObs a v'))\n       spr_repVal)\n     a ``\n    {s}", "by (auto simp: toSet_def[symmetric])"], ["", "lemma spr_commonKnowledge_relation_image:\n  \"s \\<in> toSet cec\n    \\<Longrightarrow> toSet (spr_commonKnowledge envObs cec as s) = (\\<Union>a \\<in> set as. relations (spr_repMC (toSet cec)) a)\\<^sup>+ `` {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> toSet cec \\<Longrightarrow>\n    toSet (spr_commonKnowledge envObs cec as s) =\n    (\\<Union> (relations (spr_repMC (toSet cec)) ` set as))\\<^sup>+ `` {s}", "unfolding spr_commonKnowledge_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> toSet cec \\<Longrightarrow>\n    toSet\n     (fromList\n       (memo_list_trancl\n         (toList\n           (big_union\n             (\\<lambda>a.\n                 fromList\n                  (concat\n                    (map (\\<lambda>s'.\n                             concat\n                              (map (\\<lambda>s''.\n if (s', s'') \\<in> local.spr_repRels a then [(s', s'')] else [])\n                                (toList cec)))\n                      (toList cec))))\n             as))\n         s)) =\n    (\\<Union> (relations (spr_repMC (toSet cec)) ` set as))\\<^sup>+ `` {s}", "apply (simp add: memo_list_trancl toSet_def[symmetric] Image_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> toSet cec \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>b.\n         (s, b)\n         \\<in> (\\<Union>x\\<in>set as.\n                   \\<Union>xa\\<in>toSet cec.\n                      \\<Union>x\\<in>toSet cec \\<inter>\n                                    rel_ext\n                                     (\\<lambda>xb.\n   (xa, xb) \\<in> local.spr_repRels x).\n                         {(xa, x)})\\<^sup>+) =\n    rel_ext\n     (\\<lambda>y.\n         (s, y)\n         \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                 (toSet cec))\\<^sup>+)", "apply (rule Collect_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       s \\<in> toSet cec \\<Longrightarrow>\n       ((s, b)\n        \\<in> (\\<Union>x\\<in>set as.\n                  \\<Union>xa\\<in>toSet cec.\n                     \\<Union>x\\<in>toSet cec \\<inter>\n                                   rel_ext\n                                    (\\<lambda>xb.\n  (xa, xb) \\<in> local.spr_repRels x).\n                        {(xa, x)})\\<^sup>+) =\n       ((s, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet cec))\\<^sup>+)", "apply (rule_tac f=\"\\<lambda>x. (s, b) \\<in> x\" in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       s \\<in> toSet cec \\<Longrightarrow>\n       (\\<Union>x\\<in>set as.\n           \\<Union>xa\\<in>toSet cec.\n              \\<Union>x\\<in>toSet cec \\<inter>\n                            rel_ext\n                             (\\<lambda>xb.\n                                 (xa, xb) \\<in> local.spr_repRels x).\n                 {(xa, x)})\\<^sup>+ =\n       (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet cec))\\<^sup>+", "apply (rule arg_cong[where f=trancl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       s \\<in> toSet cec \\<Longrightarrow>\n       (\\<Union>x\\<in>set as.\n           \\<Union>xa\\<in>toSet cec.\n              \\<Union>x\\<in>toSet cec \\<inter>\n                            rel_ext\n                             (\\<lambda>xb.\n                                 (xa, xb) \\<in> local.spr_repRels x).\n                 {(xa, x)}) =\n       Restr (\\<Union> (local.spr_repRels ` set as)) (toSet cec)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eval_rec_models:\n  assumes XY: \"toSet X \\<subseteq> toSet Y\"\n      and s: \"s \\<in> toSet X\"\n  shows \"s \\<in> toSet (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y) (spr_commonKnowledge envObs Y) X \\<phi>)\n     \\<longleftrightarrow> spr_repMC (toSet Y), s \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<phi>", "using XY s"], ["proof (prove)\nusing this:\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<phi>", "proof(induct \\<phi> arbitrary: X s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>K\\<^sub>x1a \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>K\\<^sub>x1a \\<phi>\n 5. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "case (Kknows a' \\<phi> X s)"], ["proof (state)\nthis:\n  \\<lbrakk>toSet ?X1 \\<subseteq> toSet Y; ?s1 \\<in> toSet ?X1\\<rbrakk>\n  \\<Longrightarrow> (?s1\n                     \\<in> toSet\n                            (eval_rec (spr_evalProp envVal)\n                              (spr_knowledge envObs Y)\n                              (spr_commonKnowledge envObs Y) ?X1 \\<phi>)) =\n                    spr_repMC (toSet Y), ?s1 \\<Turnstile> \\<phi>\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (5 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>K\\<^sub>x1a \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>K\\<^sub>x1a \\<phi>\n 5. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "from \\<open>s \\<in> toSet X\\<close> spr_knowledge[OF subsetD[OF Kknows(2) Kknows(3)], where a=a']"], ["proof (chain)\npicking this:\n  s \\<in> toSet X\n  toSet (spr_knowledge envObs Y a' s) =\n  relations (spr_repMC (toSet Y)) a' `` {s}", "show ?case"], ["proof (prove)\nusing this:\n  s \\<in> toSet X\n  toSet (spr_knowledge envObs Y a' s) =\n  relations (spr_repMC (toSet Y)) a' `` {s}\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>K\\<^sub>a' \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>K\\<^sub>a' \\<phi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s}\\<rbrakk>\n    \\<Longrightarrow> (ODList.difference (spr_knowledge envObs Y a' s)\n                        (eval_rec (spr_evalProp envVal)\n                          (spr_knowledge envObs Y)\n                          (spr_commonKnowledge envObs Y)\n                          (spr_knowledge envObs Y a' s) \\<phi>) =\n                       ODList.empty) =\n                      (\\<forall>w'\\<in>Restr (local.spr_repRels a')\n  (toSet Y) ``\n {s}.\n                          spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     ODList.difference (spr_knowledge envObs Y a' s)\n      (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n        (spr_commonKnowledge envObs Y) (spr_knowledge envObs Y a' s)\n        \\<phi>) =\n     ODList.empty\\<rbrakk>\n    \\<Longrightarrow> \\<forall>w'\\<in>Restr (local.spr_repRels a')\n (toSet Y) ``\n{s}.\n                         spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "apply (drule arg_cong[where f=\"toSet\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     toSet\n      (ODList.difference (spr_knowledge envObs Y a' s)\n        (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n          (spr_commonKnowledge envObs Y) (spr_knowledge envObs Y a' s)\n          \\<phi>)) =\n     toSet ODList.empty\\<rbrakk>\n    \\<Longrightarrow> \\<forall>w'\\<in>Restr (local.spr_repRels a')\n (toSet Y) ``\n{s}.\n                         spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "apply (clarsimp simp: odlist_all_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "apply (cut_tac s1=\"(a, b)\" and X1=\"spr_knowledge envObs Y a' (aa, ba)\" in Kknows.hyps)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_knowledge envObs Y a' (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet (spr_knowledge envObs Y a' (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y;\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_knowledge envObs Y a' (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 4. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "using Kknows(2) Kknows(3)"], ["proof (prove)\nusing this:\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (4 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_knowledge envObs Y a' (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet (spr_knowledge envObs Y a' (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_knowledge envObs Y a' (aa, ba)) \\<phi>);\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y;\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_knowledge envObs Y a' (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 4. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "apply (auto simp add: S5n_rels_closed[OF spr_repMC_S5n])[3]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_knowledge envObs Y a' s) =\n     Restr (local.spr_repRels a') (toSet Y) `` {s};\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) `` {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_knowledge envObs Y a' s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_knowledge envObs Y a' s) \\<phi>) =\n                      ODList.empty", "apply (clarsimp simp: toSet_eq_iff odlist_all_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (eval_rec (spr_evalProp envVal)\n                                  (spr_knowledge envObs Y)\n                                  (spr_commonKnowledge envObs Y)\n                                  (spr_knowledge envObs Y a' (aa, ba))\n                                  \\<phi>)", "apply (subst Kknows.hyps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_knowledge envObs Y a' (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet (spr_knowledge envObs Y a' (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>", "using Kknows(2) Kknows(3)"], ["proof (prove)\nusing this:\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (3 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_knowledge envObs Y a' (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet (spr_knowledge envObs Y a' (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_knowledge envObs Y a' (aa, ba)) =\n        Restr (local.spr_repRels a') (toSet Y) `` {(aa, ba)};\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet Y) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        s = (aa, ba); ((aa, ba), a, b) \\<in> local.spr_repRels a';\n        (aa, ba) \\<in> toSet Y; (a, b) \\<in> toSet Y\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>", "apply (auto simp add: S5n_rels_closed[OF spr_repMC_S5n] o_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (s \\<in> toSet\n            (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n              (spr_commonKnowledge envObs Y) X \\<^bold>K\\<^sub>a' \\<phi>)) =\n  spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>K\\<^sub>a' \\<phi>\n\ngoal (4 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "case (Kcknows as \\<phi> X s)"], ["proof (state)\nthis:\n  \\<lbrakk>toSet ?X1 \\<subseteq> toSet Y; ?s1 \\<in> toSet ?X1\\<rbrakk>\n  \\<Longrightarrow> (?s1\n                     \\<in> toSet\n                            (eval_rec (spr_evalProp envVal)\n                              (spr_knowledge envObs Y)\n                              (spr_commonKnowledge envObs Y) ?X1 \\<phi>)) =\n                    spr_repMC (toSet Y), ?s1 \\<Turnstile> \\<phi>\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (4 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            Y), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "proof(cases \"as = Nil\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n 2. as \\<noteq> [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n 2. as \\<noteq> [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "with \\<open>s \\<in> toSet X\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> toSet X\n  as = []", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> toSet X\n  as = []\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "by clarsimp"], ["proof (state)\nthis:\n  (s \\<in> toSet\n            (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n              (spr_commonKnowledge envObs Y) X\n              \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow>\n    (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "with \\<open>s \\<in> toSet X\\<close> spr_commonKnowledge_relation_image[OF subsetD[OF Kcknows(2) Kcknows(3)], where as=as]"], ["proof (chain)\npicking this:\n  s \\<in> toSet X\n  toSet (spr_commonKnowledge envObs Y as s) =\n  (\\<Union> (relations (spr_repMC (toSet Y)) ` set as))\\<^sup>+ `` {s}\n  as \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> toSet X\n  toSet (spr_commonKnowledge envObs Y as s) =\n  (\\<Union> (relations (spr_repMC (toSet Y)) ` set as))\\<^sup>+ `` {s}\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet\n              (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                (spr_commonKnowledge envObs Y) X\n                \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (ODList.difference (spr_commonKnowledge envObs Y as s)\n                        (eval_rec (spr_evalProp envVal)\n                          (spr_knowledge envObs Y)\n                          (spr_commonKnowledge envObs Y)\n                          (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                       ODList.empty) =\n                      (\\<forall>w'\\<in>(Restr\n   (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n {s}.\n                          spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     ODList.difference (spr_commonKnowledge envObs Y as s)\n      (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n        (spr_commonKnowledge envObs Y) (spr_commonKnowledge envObs Y as s)\n        \\<phi>) =\n     ODList.empty\\<rbrakk>\n    \\<Longrightarrow> \\<forall>w'\\<in>(Restr\n  (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n{s}.\n                         spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (drule arg_cong[where f=\"toSet\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     toSet\n      (ODList.difference (spr_commonKnowledge envObs Y as s)\n        (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n          (spr_commonKnowledge envObs Y) (spr_commonKnowledge envObs Y as s)\n          \\<phi>)) =\n     toSet ODList.empty\\<rbrakk>\n    \\<Longrightarrow> \\<forall>w'\\<in>(Restr\n  (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n{s}.\n                         spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (clarsimp simp: odlist_all_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 2. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (cut_tac s1=\"(a, b)\" and X1=\"spr_commonKnowledge envObs Y as (aa, ba)\" in Kcknows.hyps)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_commonKnowledge envObs Y as (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (spr_commonKnowledge envObs Y as (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 4. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "using Kcknows(2) Kcknows(3)"], ["proof (prove)\nusing this:\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (4 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_commonKnowledge envObs Y as (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (spr_commonKnowledge envObs Y as (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 4. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (auto simp add: S5n_rels_closed[OF spr_repMC_S5n])[2]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (subst (asm) trancl_unfold)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y) \\<union>\n         (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ O\n         Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y)) ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y) \\<union>\n         (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ O\n         Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y)) ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), ab, bb)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "(* FIXME clunky, why did this break? *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), ab, bb)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)}\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs Y)\n                       (spr_commonKnowledge envObs Y)\n                       (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba);\n        ((a, b)\n         \\<in> toSet\n                (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n                  (spr_commonKnowledge envObs Y)\n                  (spr_commonKnowledge envObs Y as (aa, ba)) \\<phi>)) =\n        spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>\n 3. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (auto simp add: S5n_rels_closed[OF spr_repMC_S5n])[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> toSet X;\n     toSet (spr_commonKnowledge envObs Y as s) =\n     (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n     {s};\n     as \\<noteq> [];\n     \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                       (toSet Y))\\<^sup>+ ``\n                     {s}.\n        spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ODList.difference (spr_commonKnowledge envObs Y as s)\n                       (eval_rec (spr_evalProp envVal)\n                         (spr_knowledge envObs Y)\n                         (spr_commonKnowledge envObs Y)\n                         (spr_commonKnowledge envObs Y as s) \\<phi>) =\n                      ODList.empty", "apply (clarsimp simp: toSet_eq_iff odlist_all_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (eval_rec (spr_evalProp envVal)\n                                  (spr_knowledge envObs Y)\n                                  (spr_commonKnowledge envObs Y)\n                                  (spr_commonKnowledge envObs Y as (aa, ba))\n                                  \\<phi>)", "apply (subst Kcknows.hyps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_commonKnowledge envObs Y as (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (spr_commonKnowledge envObs Y as (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>", "using Kcknows(2) Kcknows(3)"], ["proof (prove)\nusing this:\n  toSet X \\<subseteq> toSet Y\n  s \\<in> toSet X\n\ngoal (3 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_commonKnowledge envObs Y as (aa, ba))\n                         \\<subseteq> toSet Y\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> toSet\n                                (spr_commonKnowledge envObs Y as (aa, ba))\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet Y), (a, b) \\<Turnstile> \\<phi>", "apply (auto simp add: S5n_rels_closed[OF spr_repMC_S5n] o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "apply (subst (asm) trancl_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y) \\<union>\n         (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ O\n         Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y)) ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y) \\<union>\n                         (Restr (\\<Union> (local.spr_repRels ` set as))\n                           (toSet Y))\\<^sup>+ O\n                         Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y)) ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), a, b)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        s = (aa, ba); toSet X \\<subseteq> toSet Y;\n        ((aa, ba), ab, bb)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), ab, bb)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "(* FIXME clunky, why did this break? *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(aa, ba) \\<in> toSet X;\n        toSet (spr_commonKnowledge envObs Y as (aa, ba)) =\n        (Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y))\\<^sup>+ ``\n        {(aa, ba)};\n        as \\<noteq> [];\n        \\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet Y))\\<^sup>+ ``\n                        {(aa, ba)}.\n           spr_repMC (toSet Y), w' \\<Turnstile> \\<phi>;\n        ((aa, ba), ab, bb)\n        \\<in> Restr (\\<Union> (local.spr_repRels ` set as))\n               (toSet Y) \\<union>\n              (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+ O\n              Restr (\\<Union> (local.spr_repRels ` set as)) (toSet Y);\n        ((aa, ba), a, b)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (toSet Y))\\<^sup>+;\n        s = (aa, ba); toSet X \\<subseteq> toSet Y\\<rbrakk>\n       \\<Longrightarrow> (ab, bb) \\<in> toSet Y", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (s \\<in> toSet\n            (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n              (spr_commonKnowledge envObs Y) X\n              \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s \\<in> toSet\n            (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n              (spr_commonKnowledge envObs Y) X\n              \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet Y), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal (3 subgoals):\n 1. \\<And>x X s.\n       \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kprop x))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Knot \\<phi>))) =\n                         spr_repMC (toSet Y), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 X s.\n       \\<lbrakk>\\<And>X s.\n                   \\<lbrakk>toSet X \\<subseteq> toSet Y;\n                    s \\<in> toSet X\\<rbrakk>\n                   \\<Longrightarrow> (s\n\\<in> toSet\n       (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n         (spr_commonKnowledge envObs Y) X \\<phi>1)) =\n                                     spr_repMC\n(toSet Y), s \\<Turnstile> \\<phi>1;\n        \\<And>X s.\n           \\<lbrakk>toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n           \\<Longrightarrow> (s \\<in> toSet\n (eval_rec (spr_evalProp envVal) (spr_knowledge envObs Y)\n   (spr_commonKnowledge envObs Y) X \\<phi>2)) =\n                             spr_repMC (toSet Y), s \\<Turnstile> \\<phi>2;\n        toSet X \\<subseteq> toSet Y; s \\<in> toSet X\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs Y)\n                                     (spr_commonKnowledge envObs Y) X\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet Y), s \\<Turnstile> Kand \\<phi>1 \\<phi>2", "qed (simp_all add: spr_repVal_def)"], ["", "lemma agent_abs_tObsC_abs_subset:\n  \"tObsC t' = tObsC t \\<Longrightarrow> agent_abs a t \\<subseteq> tObsC_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC t \\<Longrightarrow>\n    agent_abs a t \\<subseteq> tObsC_abs t'", "unfolding agent_abs_def tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            uu_ = (tFirst t', tLast t') \\<and>\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'a.\n                        uu_ = (tFirst t'a, tLast t'a) \\<and>\n                        t'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t')", "by (auto intro: spr_jview_tObsC)"], ["", "lemma spr_simAbs_fst_snd:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (snd ec) \\<subseteq> toSet (fst ec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (snd ec) \\<subseteq> toSet (fst ec)", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. toSet (snd ec) \\<subseteq> toSet (fst ec)", "by (simp add: agent_abs_tObsC_abs_subset)"], ["", "lemma tObsC_abs_rel:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and r: \"(x, y) \\<in> (\\<Union> (relations (spr_repMC (tObsC_abs t)) ` set as))\\<^sup>+\"\n  shows \"x \\<in> tObsC_abs t \\<longleftrightarrow>y \\<in> tObsC_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> tObsC_abs t) = (y \\<in> tObsC_abs t)", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  (x, y)\n  \\<in> (\\<Union> (relations (spr_repMC (tObsC_abs t)) ` set as))\\<^sup>+\n\ngoal (1 subgoal):\n 1. (x \\<in> tObsC_abs t) = (y \\<in> tObsC_abs t)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     (x, y)\n     \\<in> (\\<Union>\n             (relations (spr_repMC (tObsC_abs t)) `\n              set as))\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (x \\<in> tObsC_abs t) = (y \\<in> tObsC_abs t)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     (x, y)\n     \\<in> (\\<Union>\n             (relations (spr_repMC (tObsC_abs t)) ` set as))\\<^sup>+;\n     x \\<in> tObsC_abs t\\<rbrakk>\n    \\<Longrightarrow> y \\<in> tObsC_abs t\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     (x, y)\n     \\<in> (\\<Union>\n             (relations (spr_repMC (tObsC_abs t)) ` set as))\\<^sup>+;\n     y \\<in> tObsC_abs t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> tObsC_abs t", "apply (erule trancl_induct, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma spr_simAbs_fst_snd_trc:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"toSet (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec))) \\<subseteq> toSet (fst ec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet\n     (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n    \\<subseteq> toSet (fst ec)", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. toSet\n     (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n    \\<subseteq> toSet (fst ec)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b ab ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        (ab, ba) \\<in> set (toList (snd ec));\n        (aa, b)\n        \\<in> toSet\n               (spr_commonKnowledge envObs (fst ec) as (ab, ba))\\<rbrakk>\n       \\<Longrightarrow> (aa, b) \\<in> tObsC_abs t", "apply (simp only: toSet_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b ab ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        (ab, ba) \\<in> toSet (snd ec);\n        (aa, b)\n        \\<in> toSet\n               (spr_commonKnowledge envObs (fst ec) as (ab, ba))\\<rbrakk>\n       \\<Longrightarrow> (aa, b) \\<in> tObsC_abs t", "apply (subgoal_tac \"(ab,ba) \\<in> toSet (fst ec)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        (aaa, ba) \\<in> toSet (snd ec);\n        (aa, b)\n        \\<in> toSet (spr_commonKnowledge envObs (fst ec) as (aaa, ba));\n        (aaa, ba) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (aa, b) \\<in> tObsC_abs t\n 2. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        (aaa, ba) \\<in> toSet (snd ec);\n        (aa, b)\n        \\<in> toSet\n               (spr_commonKnowledge envObs (fst ec) as (aaa, ba))\\<rbrakk>\n       \\<Longrightarrow> (aaa, ba) \\<in> toSet (fst ec)", "apply (simp add: spr_commonKnowledge_relation_image tObsC_abs_rel[OF tC ec])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        (aaa, ba) \\<in> toSet (snd ec);\n        (aa, b)\n        \\<in> toSet\n               (spr_commonKnowledge envObs (fst ec) as (aaa, ba))\\<rbrakk>\n       \\<Longrightarrow> (aaa, ba) \\<in> toSet (fst ec)", "apply (simp add: subsetD[OF agent_abs_tObsC_abs_subset[OF refl]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma agent_abs_rel_inv:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and x: \"x \\<in> agent_abs a t\"\n      and xy: \"(x, y) \\<in> relations (spr_repMC (toSet (fst ec))) a\"\n  shows \"y \\<in> agent_abs a t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> agent_abs a t", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> agent_abs a t\n  (x, y) \\<in> relations (spr_repMC (toSet (fst ec))) a\n\ngoal (1 subgoal):\n 1. y \\<in> agent_abs a t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     x \\<in> agent_abs a t;\n     (x, y) \\<in> local.spr_repRels a \\<and>\n     x \\<in> tObsC_abs t \\<and> y \\<in> tObsC_abs t\\<rbrakk>\n    \\<Longrightarrow> y \\<in> agent_abs a t", "unfolding agent_abs_def tObsC_abs_def spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     x \\<in> rel_ext\n              (\\<lambda>uu_.\n                  \\<exists>t'.\n                     uu_ = (tFirst t', tLast t') \\<and>\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview a t' = spr_jview a t);\n     (x, y)\n     \\<in> rel_ext\n            (\\<lambda>((u, v), u', v').\n                envObs a u = envObs a u' \\<and>\n                envObs a v = envObs a v') \\<and>\n     x \\<in> rel_ext\n              (\\<lambda>uu_.\n                  \\<exists>t'.\n                     uu_ = (tFirst t', tLast t') \\<and>\n                     t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n     y \\<in> rel_ext\n              (\\<lambda>uu_.\n                  \\<exists>t'.\n                     uu_ = (tFirst t', tLast t') \\<and>\n                     t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t'.\nuu_ = (tFirst t', tLast t') \\<and>\nt' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'b = tFirst t' \\<and>\n                            tLast t'b = tLast t' \\<and>\n                            t' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (rule_tac x=t'b in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'b = tFirst t'b \\<and>\n                         tLast t'b = tLast t'b \\<and>\n                         t'b \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t'b = spr_jview a t", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a t'b = spr_jview a t", "apply (rule spr_jview_tObsCI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t\n 2. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t'b) = envObs a (tFirst t)\n 3. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t'b =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a) t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t'b) = envObs a (tFirst t)\n 2. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t'b =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a) t", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tMap (\\<lambda>s. ODList.lookup (ps s) a) t'b =\n                         tMap (\\<lambda>s. ODList.lookup (ps s) a) t", "apply (rule spr_jview_det_ps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> {t'b, t} \\<subseteq> SPR.jkbpC\n 2. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t\n 3. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t'b) = envObs a (tFirst t)", "using tC"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (3 subgoals):\n 1. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> {t'b, t} \\<subseteq> SPR.jkbpC\n 2. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t\n 3. \\<And>t' t'a t'b.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x = (tFirst t'a, tLast t'a); y = (tFirst t'b, tLast t'b);\n        envObs a (tFirst t'a) = envObs a (tFirst t'b);\n        envObs a (tLast t'a) = envObs a (tLast t'b); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tFirst t' = tFirst t'a; tLast t' = tLast t'a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t'b) = envObs a (tFirst t)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma agent_abs_tObsC_abs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and x: \"x \\<in> agent_abs a t\"\n      and y: \"y \\<in> agent_abs a t\"\n  shows \"(x, y) \\<in> relations (spr_repMC (tObsC_abs t)) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> relations (spr_repMC (tObsC_abs t)) a", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  x \\<in> agent_abs a t\n  y \\<in> agent_abs a t\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> relations (spr_repMC (tObsC_abs t)) a", "unfolding agent_abs_def spr_repRels_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n  y \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> relations\n           (mkKripke (tObsC_abs t)\n             (\\<lambda>a.\n                 rel_ext\n                  (\\<lambda>((u, v), u', v').\n                      envObs a u = envObs a u' \\<and>\n                      envObs a v = envObs a v'))\n             spr_repVal)\n           a", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a) \\<and>\n                         envObs a (tLast t') = envObs a (tLast t'a) \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t\n 3. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 5. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 6. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "back"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 5. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 6. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "apply (erule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, tLast t'a) \\<in> tObsC_abs t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'a = tFirst t\n 3. \\<And>t' t'a.\n       \\<lbrakk>x = (tFirst t', tLast t'); y = (tFirst t'a, tLast t'a);\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tLast t'a = tLast t\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 5. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'a = tFirst t'\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); spr_jview a t' = spr_jview a t;\n        t'a \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tLast t'a = tLast t'\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 5. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t'a = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'a = tFirst t'a\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tLast t'a = tLast t'a\n 4. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 5. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tObsC t'a = tObsC t\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 3. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply (erule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tFirst t') = envObs a (tFirst t'a)\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply (rule spr_tFirst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a t' = spr_jview a t'a\n 2. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> envObs a (tLast t') = envObs a (tLast t'a)", "apply (rule spr_tLast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' t'a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; x = (tFirst t', tLast t');\n        y = (tFirst t'a, tLast t'a); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t; t'a \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a t' = spr_jview a t'a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma agent_abs_spr_repRels:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and x: \"x \\<in> agent_abs a t\"\n      and y: \"y \\<in> agent_abs a t\"\n  shows \"(x, y) \\<in> spr_repRels a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.spr_repRels a", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  x \\<in> agent_abs a t\n  y \\<in> agent_abs a t\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.spr_repRels a", "unfolding agent_abs_def spr_repRels_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n  y \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  uu_ = (tFirst t', tLast t') \\<and>\n                  t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> rel_ext\n           (\\<lambda>((u, v), u', v').\n               envObs a u = envObs a u' \\<and> envObs a v = envObs a v')", "by (auto elim!: spr_tFirst spr_tLast)"], ["", "lemma evalS_models:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n      and subj_phi: \"subjective a \\<phi>\"\n      and s: \"s \\<in> toSet (snd ec)\"\n  shows \"evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec)) (spr_commonKnowledge envObs (fst ec)) (snd ec) \\<phi>\n     \\<longleftrightarrow> spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>\" (is \"?lhs \\<phi> = ?rhs \\<phi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec) \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "using subj_phi s ec"], ["proof (prove)\nusing this:\n  subjective a \\<phi>\n  s \\<in> toSet (snd ec)\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec) \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "proof(induct \\<phi> rule: subjective.induct[case_names Kprop Knot Kand Kknows Kcknows])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a a' f.\n       \\<lbrakk>subjective a \\<^bold>K\\<^sub>a' f; s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>K\\<^sub>a' f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a' f\n 5. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "case (Kknows a a' \\<psi>)"], ["proof (state)\nthis:\n  subjective a \\<^bold>K\\<^sub>a' \\<psi>\n  s \\<in> toSet (snd ec)\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (5 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a a' f.\n       \\<lbrakk>subjective a \\<^bold>K\\<^sub>a' f; s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>K\\<^sub>a' f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a' f\n 5. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "thus ?case"], ["proof (prove)\nusing this:\n  subjective a \\<^bold>K\\<^sub>a' \\<psi>\n  s \\<in> toSet (snd ec)\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec)\n     \\<^bold>K\\<^sub>a' \\<psi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a' \\<psi>", "apply (clarsimp simp: toSet_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t\\<rbrakk>\n    \\<Longrightarrow> (toSet (snd ec)\n                       \\<subseteq> toSet\n                                    (eval_rec (spr_evalProp envVal)\n(spr_knowledge envObs (fst ec)) (spr_commonKnowledge envObs (fst ec))\n(snd ec) \\<psi>)) =\n                      (\\<forall>w'\\<in>Restr (local.spr_repRels a')\n  (toSet (fst ec)) ``\n {s}.\n                          spr_repMC\n                           (toSet (fst ec)), w' \\<Turnstile> \\<psi>)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     toSet (snd ec)\n     \\<subseteq> toSet\n                  (eval_rec (spr_evalProp envVal)\n                    (spr_knowledge envObs (fst ec))\n                    (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                    \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>w'\\<in>Restr (local.spr_repRels a')\n (toSet (fst ec)) ``\n{s}.\n                         spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (a, b) \\<Turnstile> \\<psi>\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply (subgoal_tac \"(a, b) \\<in> toSet (snd ec)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec);\n        (a, b) \\<in> toSet (snd ec)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (a, b) \\<Turnstile> \\<psi>\n 2. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> toSet (snd ec)\n 3. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply (drule (1) subsetD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t; s = (aaa, ba);\n        ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec);\n        (a, b) \\<in> toSet (snd ec);\n        (aaa, ba)\n        \\<in> toSet\n               (eval_rec (spr_evalProp envVal)\n                 (spr_knowledge envObs (fst ec))\n                 (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                 \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (a, b) \\<Turnstile> \\<psi>\n 2. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> toSet (snd ec)\n 3. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t; s = (aaa, ba);\n        ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec);\n        (a, b) \\<in> toSet (snd ec);\n        (a, b)\n        \\<in> toSet\n               (eval_rec (spr_evalProp envVal)\n                 (spr_knowledge envObs (fst ec))\n                 (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                 \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (a, b) \\<Turnstile> \\<psi>\n 2. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> toSet (snd ec)\n 3. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply (simp only: eval_rec_models[OF spr_simAbs_fst_snd[OF tC ec]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> toSet (snd ec)\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "using tC Kknows"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  subjective a \\<^bold>K\\<^sub>a' \\<psi>\n  s \\<in> toSet (snd ec)\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (2 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        toSet (snd ec)\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> toSet (fst ec); (a, b) \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> toSet (snd ec)\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> agent_abs a' t;\n        agent_abs a' t\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> tObsC_abs t; (a, b) \\<in> tObsC_abs t;\n        t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> agent_abs a' t\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "using tC ec"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (2 subgoals):\n 1. \\<And>a b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> agent_abs a' t;\n        agent_abs a' t\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), a, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> tObsC_abs t; (a, b) \\<in> tObsC_abs t;\n        t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a' t\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> agent_abs a' t\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> agent_abs a' t;\n        agent_abs a' t\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), ab, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> tObsC_abs t; (ab, b) \\<in> tObsC_abs t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> (ab, b) \\<in> agent_abs a' t\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>;\n     t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply (erule (1) agent_abs_rel_inv[OF tC])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab b aaa ba.\n       \\<lbrakk>a = a'; (aaa, ba) \\<in> agent_abs a' t;\n        agent_abs a' t\n        \\<subseteq> toSet\n                     (eval_rec (spr_evalProp envVal)\n                       (spr_knowledge envObs (fst ec))\n                       (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                       \\<psi>);\n        s = (aaa, ba); ((aaa, ba), ab, b) \\<in> local.spr_repRels a';\n        (aaa, ba) \\<in> tObsC_abs t; (ab, b) \\<in> tObsC_abs t;\n        t \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> ((aaa, ba), ab, b)\n                         \\<in> relations (spr_repMC (toSet (fst ec))) a'\n 2. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>;\n     t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = a'; s \\<in> toSet (snd ec);\n     spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n     \\<forall>w'\\<in>Restr (local.spr_repRels a') (toSet (fst ec)) `` {s}.\n        spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>;\n     t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n    \\<Longrightarrow> toSet (snd ec)\n                      \\<subseteq> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (snd ec) \\<psi>)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab b.\n       \\<lbrakk>a = a'; s \\<in> agent_abs a' t;\n        SPRdet.sim_equiv_class a t = SPRdet.sim_equiv_class a' t;\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (tObsC_abs t) `` {s}.\n           spr_repMC (tObsC_abs t), w' \\<Turnstile> \\<psi>;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        (ab, b) \\<in> agent_abs a' t\\<rbrakk>\n       \\<Longrightarrow> (ab, b)\n                         \\<in> toSet\n                                (eval_rec (spr_evalProp envVal)\n                                  (spr_knowledge envObs (fst ec))\n                                  (spr_commonKnowledge envObs (fst ec))\n                                  (snd ec) \\<psi>)", "apply (subst eval_rec_models[OF spr_simAbs_fst_snd[OF tC ec]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab b.\n       \\<lbrakk>a = a'; s \\<in> agent_abs a' t;\n        SPRdet.sim_equiv_class a t = SPRdet.sim_equiv_class a' t;\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (tObsC_abs t) `` {s}.\n           spr_repMC (tObsC_abs t), w' \\<Turnstile> \\<psi>;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        (ab, b) \\<in> agent_abs a' t\\<rbrakk>\n       \\<Longrightarrow> (ab, b) \\<in> toSet (snd ec)\n 2. \\<And>ab b.\n       \\<lbrakk>a = a'; s \\<in> agent_abs a' t;\n        SPRdet.sim_equiv_class a t = SPRdet.sim_equiv_class a' t;\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (tObsC_abs t) `` {s}.\n           spr_repMC (tObsC_abs t), w' \\<Turnstile> \\<psi>;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        (ab, b) \\<in> agent_abs a' t\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (ab, b) \\<Turnstile> \\<psi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab b.\n       \\<lbrakk>a = a'; s \\<in> agent_abs a' t;\n        SPRdet.sim_equiv_class a t = SPRdet.sim_equiv_class a' t;\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (tObsC_abs t) `` {s}.\n           spr_repMC (tObsC_abs t), w' \\<Turnstile> \\<psi>;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        (ab, b) \\<in> agent_abs a' t\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (ab, b) \\<Turnstile> \\<psi>", "using agent_abs_tObsC_abs[OF tC]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> agent_abs ?a t; ?y \\<in> agent_abs ?a t\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> relations (spr_repMC (tObsC_abs t)) ?a\n\ngoal (1 subgoal):\n 1. \\<And>ab b.\n       \\<lbrakk>a = a'; s \\<in> agent_abs a' t;\n        SPRdet.sim_equiv_class a t = SPRdet.sim_equiv_class a' t;\n        \\<forall>w'\\<in>Restr (local.spr_repRels a') (tObsC_abs t) `` {s}.\n           spr_repMC (tObsC_abs t), w' \\<Turnstile> \\<psi>;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a' t;\n        (ab, b) \\<in> agent_abs a' t\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), (ab, b) \\<Turnstile> \\<psi>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>K\\<^sub>a' \\<psi> =\n  spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a' \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "case (Kcknows a as \\<psi>)"], ["proof (state)\nthis:\n  subjective a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n  s \\<in> toSet (snd ec)\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "have \"?lhs (Kcknows as \\<psi>)\n      = (\\<forall>y\\<in>agent_abs a t.\n           \\<forall>x\\<in>((\\<Union>a\\<in>set as. relations (spr_repMC (toSet (fst ec))) a)\\<^sup>+ `` {y}).\n              x \\<in> toSet (eval_rec (spr_evalProp envVal) (spr_knowledge envObs (fst ec)) (spr_commonKnowledge envObs (fst ec))\n                       (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec))) \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec)\n     \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n    (\\<forall>y\\<in>agent_abs a t.\n        \\<forall>x\\<in>(\\<Union>\n                         (relations (spr_repMC (toSet (fst ec))) `\n                          set as))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>))", "(* FIXME dreaming of a cong rule here. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec)\n     \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n    (\\<forall>y\\<in>agent_abs a t.\n        \\<forall>x\\<in>(\\<Union>\n                         (relations (spr_repMC (toSet (fst ec))) `\n                          set as))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>))", "using toSet_def[symmetric] spr_simAbs_agent_abs[OF tC Kcknows(3)] spr_simAbs_tObsC_abs[OF tC Kcknows(3)]"], ["proof (prove)\nusing this:\n  set (toList ?X) = toSet ?X\n  toSet (snd ec) = agent_abs a t\n  toSet (fst ec) = tObsC_abs t\n\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec)\n     \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n    (\\<forall>y\\<in>agent_abs a t.\n        \\<forall>x\\<in>(\\<Union>\n                         (relations (spr_repMC (toSet (fst ec))) `\n                          set as))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>))", "apply (clarsimp simp: toSet_eq_iff toSet_def[symmetric] subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>toSet (snd ec) = agent_abs a t;\n     toSet (fst ec) = tObsC_abs t\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>y\\<in>agent_abs a t.\n                          \\<forall>x\\<in>toSet\n    (spr_commonKnowledge envObs (fst ec) as y).\n                             x \\<in> toSet\n(eval_rec (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n  (spr_commonKnowledge envObs (fst ec))\n  (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n  \\<psi>)) =\n                      (\\<forall>y\\<in>agent_abs a t.\n                          \\<forall>x\\<in>(Restr\n     (\\<Union> (local.spr_repRels ` set as)) (tObsC_abs t))\\<^sup>+ ``\n   {y}.\n                             x \\<in> toSet\n(eval_rec (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n  (spr_commonKnowledge envObs (fst ec))\n  (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n  \\<psi>))", "apply (rule ball_cong[OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>toSet\n    (spr_commonKnowledge envObs (fst ec) as y).\n                             x \\<in> toSet\n(eval_rec (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n  (spr_commonKnowledge envObs (fst ec))\n  (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n  \\<psi>)) =\n                         (\\<forall>x\\<in>(Restr\n     (\\<Union> (local.spr_repRels ` set as)) (tObsC_abs t))\\<^sup>+ ``\n   {y}.\n                             x \\<in> toSet\n(eval_rec (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n  (spr_commonKnowledge envObs (fst ec))\n  (big_union (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n  \\<psi>))", "apply (rule ball_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t\\<rbrakk>\n       \\<Longrightarrow> toSet (spr_commonKnowledge envObs (fst ec) as y) =\n                         (Restr (\\<Union> (local.spr_repRels ` set as))\n                           (tObsC_abs t))\\<^sup>+ ``\n                         {y}\n 2. \\<And>y x.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (tObsC_abs t))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (subst spr_commonKnowledge_relation_image)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> toSet (fst ec)\n 2. \\<And>y.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>\n                           (relations (spr_repMC (toSet (fst ec))) `\n                            set as))\\<^sup>+ ``\n                         {y} =\n                         (Restr (\\<Union> (local.spr_repRels ` set as))\n                           (tObsC_abs t))\\<^sup>+ ``\n                         {y}\n 3. \\<And>y x.\n       \\<lbrakk>toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t; y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (tObsC_abs t))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (simp_all add: subsetD[OF agent_abs_tObsC_abs_subset[OF refl]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  (\\<forall>y\\<in>agent_abs a t.\n      \\<forall>x\\<in>(\\<Union>\n                       (relations (spr_repMC (toSet (fst ec))) `\n                        set as))\\<^sup>+ ``\n                     {y}.\n         x \\<in> toSet\n                  (eval_rec (spr_evalProp envVal)\n                    (spr_knowledge envObs (fst ec))\n                    (spr_commonKnowledge envObs (fst ec))\n                    (big_union (spr_commonKnowledge envObs (fst ec) as)\n                      (toList (snd ec)))\n                    \\<psi>))\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "also"], ["proof (state)\nthis:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  (\\<forall>y\\<in>agent_abs a t.\n      \\<forall>x\\<in>(\\<Union>\n                       (relations (spr_repMC (toSet (fst ec))) `\n                        set as))\\<^sup>+ ``\n                     {y}.\n         x \\<in> toSet\n                  (eval_rec (spr_evalProp envVal)\n                    (spr_knowledge envObs (fst ec))\n                    (spr_commonKnowledge envObs (fst ec))\n                    (big_union (spr_commonKnowledge envObs (fst ec) as)\n                      (toList (snd ec)))\n                    \\<psi>))\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "have \"... = (\\<forall>s\\<in>agent_abs a t. spr_repMC (toSet (fst ec)), s \\<Turnstile> Kcknows as \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>agent_abs a t.\n        \\<forall>x\\<in>(\\<Union>\n                         (relations (spr_repMC (toSet (fst ec))) `\n                          set as))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>)) =\n    (\\<forall>s\\<in>agent_abs a t.\n        spr_repMC\n         (toSet\n           (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>)", "apply (rule ball_cong[OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> agent_abs a t \\<Longrightarrow>\n       (\\<forall>x\\<in>(\\<Union>\n                         (relations (spr_repMC (toSet (fst ec))) `\n                          set as))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>)) =\n       spr_repMC\n        (toSet (fst ec)), y \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> agent_abs a t \\<Longrightarrow>\n       (\\<forall>x\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                         (toSet (fst ec)))\\<^sup>+ ``\n                       {y}.\n           x \\<in> toSet\n                    (eval_rec (spr_evalProp envVal)\n                      (spr_knowledge envObs (fst ec))\n                      (spr_commonKnowledge envObs (fst ec))\n                      (big_union (spr_commonKnowledge envObs (fst ec) as)\n                        (toList (snd ec)))\n                      \\<psi>)) =\n       (\\<forall>w'\\<in>(Restr (\\<Union> (local.spr_repRels ` set as))\n                          (toSet (fst ec)))\\<^sup>+ ``\n                        {y}.\n           spr_repMC (toSet (fst ec)), w' \\<Turnstile> \\<psi>)", "apply (rule ball_cong[OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         spr_repMC (toSet (fst ec)), x \\<Turnstile> \\<psi>", "apply (subst eval_rec_models[OF spr_simAbs_fst_snd_trc[OF tC Kcknows(3), where as=as], symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> toSet\n                                  (big_union\n                                    (spr_commonKnowledge envObs (fst ec) as)\n                                    (toList (snd ec)))\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "using spr_simAbs_agent_abs[OF tC Kcknows(3)] spr_simAbs_tObsC_abs[OF tC Kcknows(3)]"], ["proof (prove)\nusing this:\n  toSet (snd ec) = agent_abs a t\n  toSet (fst ec) = tObsC_abs t\n\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> toSet\n                                  (big_union\n                                    (spr_commonKnowledge envObs (fst ec) as)\n                                    (toList (snd ec)))\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (simp add: toSet_def[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>agent_abs a t.\n                            x \\<in> toSet\n                                     (spr_commonKnowledge envObs (fst ec) as\n xa)\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (rule_tac x=y in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> toSet\n                                  (spr_commonKnowledge envObs (fst ec) as y)\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> agent_abs a t\n 3. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (subst spr_commonKnowledge_relation_image)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> toSet (fst ec)\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<Union>\n                                   (relations (spr_repMC (toSet (fst ec))) `\n                                    set as))\\<^sup>+ ``\n                                 {y}\n 3. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> agent_abs a t\n 4. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (auto elim: subsetD[OF agent_abs_tObsC_abs_subset[OF refl]])[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<Union>\n                                   (relations (spr_repMC (toSet (fst ec))) `\n                                    set as))\\<^sup>+ ``\n                                 {y}\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> agent_abs a t\n 3. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        (y, x)\n        \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                (tObsC_abs t))\\<^sup>+;\n        toSet (snd ec) = agent_abs a t;\n        toSet (fst ec) = tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> y \\<in> agent_abs a t\n 2. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> agent_abs a t;\n        x \\<in> (Restr (\\<Union> (local.spr_repRels ` set as))\n                  (toSet (fst ec)))\\<^sup>+ ``\n                {y}\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>)) =\n                         (x \\<in> toSet\n                                   (eval_rec (spr_evalProp envVal)\n                                     (spr_knowledge envObs (fst ec))\n                                     (spr_commonKnowledge envObs (fst ec))\n                                     (big_union\n (spr_commonKnowledge envObs (fst ec) as) (toList (snd ec)))\n                                     \\<psi>))", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>agent_abs a t.\n      \\<forall>x\\<in>(\\<Union>\n                       (relations (spr_repMC (toSet (fst ec))) `\n                        set as))\\<^sup>+ ``\n                     {y}.\n         x \\<in> toSet\n                  (eval_rec (spr_evalProp envVal)\n                    (spr_knowledge envObs (fst ec))\n                    (spr_commonKnowledge envObs (fst ec))\n                    (big_union (spr_commonKnowledge envObs (fst ec) as)\n                      (toList (snd ec)))\n                    \\<psi>)) =\n  (\\<forall>s\\<in>agent_abs a t.\n      spr_repMC\n       (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>)\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "also"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>agent_abs a t.\n      \\<forall>x\\<in>(\\<Union>\n                       (relations (spr_repMC (toSet (fst ec))) `\n                        set as))\\<^sup>+ ``\n                     {y}.\n         x \\<in> toSet\n                  (eval_rec (spr_evalProp envVal)\n                    (spr_knowledge envObs (fst ec))\n                    (spr_commonKnowledge envObs (fst ec))\n                    (big_union (spr_commonKnowledge envObs (fst ec) as)\n                      (toList (snd ec)))\n                    \\<psi>)) =\n  (\\<forall>s\\<in>agent_abs a t.\n      spr_repMC\n       (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>)\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "have \"... = spr_repMC (toSet (fst ec)), s \\<Turnstile> Kknows a (Kcknows as \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>agent_abs a t.\n        spr_repMC\n         (toSet\n           (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>) =\n    spr_repMC\n     (toSet\n       (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "using spr_simAbs_agent_abs[OF tC Kcknows(3)] spr_simAbs_tObsC_abs[OF tC Kcknows(3)]\n          Kcknows(2) tC"], ["proof (prove)\nusing this:\n  toSet (snd ec) = agent_abs a t\n  toSet (fst ec) = tObsC_abs t\n  s \\<in> toSet (snd ec)\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>agent_abs a t.\n        spr_repMC\n         (toSet\n           (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>) =\n    spr_repMC\n     (toSet\n       (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>toSet (snd ec) = agent_abs a t; toSet (fst ec) = tObsC_abs t;\n     s \\<in> agent_abs a t; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>s\\<in>agent_abs a t.\n                          \\<forall>w'\\<in>(Restr\n      (\\<Union> (local.spr_repRels ` set as)) (tObsC_abs t))\\<^sup>+ ``\n    {s}.\n                             spr_repMC\n                              (tObsC_abs t), w' \\<Turnstile> \\<psi>) =\n                      (\\<forall>w'\\<in>Restr (local.spr_repRels a)\n  (tObsC_abs t) ``\n {s}.\n                          \\<forall>w'\\<in>(Restr\n      (\\<Union> (local.spr_repRels ` set as)) (tObsC_abs t))\\<^sup>+ ``\n    {w'}.\n                             spr_repMC\n                              (tObsC_abs t), w' \\<Turnstile> \\<psi>)", "apply (rule ball_cong[OF _ refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>toSet (snd ec) = agent_abs a t; toSet (fst ec) = tObsC_abs t;\n     s \\<in> agent_abs a t; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> agent_abs a t =\n                      Restr (local.spr_repRels a) (tObsC_abs t) `` {s}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>toSet (snd ec) = agent_abs a t; toSet (fst ec) = tObsC_abs t;\n     s \\<in> agent_abs a t; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> agent_abs a t\n                      \\<subseteq> Restr (local.spr_repRels a)\n                                   (tObsC_abs t) ``\n                                  {s}\n 2. \\<lbrakk>toSet (snd ec) = agent_abs a t; toSet (fst ec) = tObsC_abs t;\n     s \\<in> agent_abs a t; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> Restr (local.spr_repRels a) (tObsC_abs t) `` {s}\n                      \\<subseteq> agent_abs a t", "apply (clarsimp simp: subsetD[OF agent_abs_tObsC_abs_subset] agent_abs_spr_repRels[OF tC])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>toSet (snd ec) = agent_abs a t; toSet (fst ec) = tObsC_abs t;\n     s \\<in> agent_abs a t; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> Restr (local.spr_repRels a) (tObsC_abs t) `` {s}\n                      \\<subseteq> agent_abs a t", "apply (clarsimp elim!: agent_abs_rel_inv[OF tC Kcknows(3)])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<forall>s\\<in>agent_abs a t.\n      spr_repMC\n       (toSet\n         (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>) =\n  spr_repMC\n   (toSet\n     (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "also"], ["proof (state)\nthis:\n  (\\<forall>s\\<in>agent_abs a t.\n      spr_repMC\n       (toSet\n         (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>) =\n  spr_repMC\n   (toSet\n     (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "have \"... = spr_repMC (toSet (fst ec)), s \\<Turnstile> Kcknows as \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_repMC\n     (toSet\n       (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n    spr_repMC\n     (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "apply (rule S5n_common_knowledge_fixed_point_simpler[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. S5n (spr_repMC (toSet (fst ec)))\n 2. s \\<in> worlds (spr_repMC (toSet (fst ec)))\n 3. a \\<in> set as", "using spr_simAbs_agent_abs[OF tC Kcknows(3)] spr_simAbs_tObsC_abs[OF tC Kcknows(3)]\n          Kcknows(1) Kcknows(2)"], ["proof (prove)\nusing this:\n  toSet (snd ec) = agent_abs a t\n  toSet (fst ec) = tObsC_abs t\n  subjective a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n  s \\<in> toSet (snd ec)\n\ngoal (3 subgoals):\n 1. S5n (spr_repMC (toSet (fst ec)))\n 2. s \\<in> worlds (spr_repMC (toSet (fst ec)))\n 3. a \\<in> set as", "apply (auto elim: subsetD[OF agent_abs_tObsC_abs_subset[OF refl]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_repMC\n   (toSet\n     (fst ec)), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  spr_repMC\n   (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n\ngoal (4 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g\n 4. \\<And>a as f.\n       \\<lbrakk>subjective a \\<^bold>C\\<^bsub>as\\<^esub> f;\n        s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          \\<^bold>C\\<^bsub>as\\<^esub> f =\n                         spr_repMC\n                          (toSet\n                            (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> f", "finally"], ["proof (chain)\npicking this:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  spr_repMC\n   (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "show ?case"], ["proof (prove)\nusing this:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  spr_repMC\n   (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n\ngoal (1 subgoal):\n 1. evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n     (spr_commonKnowledge envObs (fst ec)) (snd ec)\n     \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n    spr_repMC\n     (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>", "."], ["proof (state)\nthis:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec)\n   \\<^bold>C\\<^bsub>as\\<^esub> \\<psi> =\n  spr_repMC\n   (toSet (fst ec)), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<psi>\n\ngoal (3 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>subjective a (Kprop p); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kprop p) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kprop p\n 2. \\<And>a f.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        subjective a (Knot f); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Knot f) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Knot f\n 3. \\<And>a f g.\n       \\<lbrakk>\\<lbrakk>subjective a f; s \\<in> toSet (snd ec);\n                 spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n                \\<Longrightarrow> evalS (spr_evalProp envVal)\n                                   (spr_knowledge envObs (fst ec))\n                                   (spr_commonKnowledge envObs (fst ec))\n                                   (snd ec) f =\n                                  spr_repMC\n                                   (toSet (fst ec)), s \\<Turnstile> f;\n        \\<lbrakk>subjective a g; s \\<in> toSet (snd ec);\n         spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n        \\<Longrightarrow> evalS (spr_evalProp envVal)\n                           (spr_knowledge envObs (fst ec))\n                           (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                           g =\n                          spr_repMC (toSet (fst ec)), s \\<Turnstile> g;\n        subjective a (Kand f g); s \\<in> toSet (snd ec);\n        spr_simAbs ec = SPRdet.sim_equiv_class a t\\<rbrakk>\n       \\<Longrightarrow> evalS (spr_evalProp envVal)\n                          (spr_knowledge envObs (fst ec))\n                          (spr_commonKnowledge envObs (fst ec)) (snd ec)\n                          (Kand f g) =\n                         spr_repMC (toSet (fst ec)), s \\<Turnstile> Kand f g", "qed simp_all"], ["", "(*>*)"], ["", "text\\<open>\n\nThis function corresponds with the standard semantics:\n\n\\<close>"], ["", "lemma eval_models:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  assumes subj_phi: \"subjective a \\<phi>\"\n  assumes s: \"s \\<in> toSet (snd ec)\"\n  shows \"eval envVal envObs ec \\<phi> \\<longleftrightarrow> spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval envVal envObs ec \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval envVal envObs ec \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "unfolding eval_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case ec of\n     (cec, X) \\<Rightarrow>\n       evalS (spr_evalProp envVal) (spr_knowledge envObs cec)\n        (spr_commonKnowledge envObs cec) X)\n     \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "using evalS_models[OF tC ec subj_phi s]"], ["proof (prove)\nusing this:\n  evalS (spr_evalProp envVal) (spr_knowledge envObs (fst ec))\n   (spr_commonKnowledge envObs (fst ec)) (snd ec) \\<phi> =\n  spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (case ec of\n     (cec, X) \\<Rightarrow>\n       evalS (spr_evalProp envVal) (spr_knowledge envObs cec)\n        (spr_commonKnowledge envObs cec) X)\n     \\<phi> =\n    spr_repMC (toSet (fst ec)), s \\<Turnstile> \\<phi>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated actions\\<close>"], ["", "text\\<open>\n\nFrom a common equivalence class and a subjective equivalence class for\nagent @{term \"a\"}, we can compute the actions enabled for @{term \"a\"}:\n\n\\<close>"], ["", "definition (in -)\n  spr_simAction ::\n       \"('a, 'p, 'aAct) JKBP \\<Rightarrow> (('a, 'es, 'as) BEState \\<Rightarrow> 'p \\<Rightarrow> bool)\n     \\<Rightarrow> ('a \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'as option)\n     \\<Rightarrow> 'a\n     \\<Rightarrow> ('a::linorder, 'es::linorder, 'as::linorder) spr_simWorldsRep\n     \\<Rightarrow> 'aAct list\"\nwhere\n  \"spr_simAction jkbp envVal envObs \\<equiv> \\<lambda>a ec.\n    [ action gc. gc \\<leftarrow> jkbp a, eval envVal envObs ec (guard gc) ]\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simAction :: \"'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep \\<Rightarrow> 'aAct list\"\nwhere\n  \"spr_simAction \\<equiv> SPRViewDet.spr_simAction jkbp envVal envObs\""], ["", "(*>*)"], ["", "text\\<open>\n\nUsing the above result about evaluation, we can relate \\<open>spr_simAction\\<close> to @{term \"jAction\"}. Firstly, \\<open>spr_simAction\\<close> behaves the same as @{term \"jAction\"} using the\n@{term \"spr_repMC\"} structure:\n\n\\<close>"], ["", "lemma spr_action_jaction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec)\n       = set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) =\n    set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) =\n    set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)", "unfolding spr_simAction_def jAction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>gc.\n                   if eval envVal envObs ec (guard gc) then [action gc]\n                   else [])\n            (jkbp a))) =\n    set (concat\n          (map (\\<lambda>gc.\n                   if spr_repMC\n                       (toSet\n                         (fst ec)), (tFirst t,\n                                     tLast t) \\<Turnstile> guard gc\n                   then [action gc] else [])\n            (jkbp a)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n        {action x}) =\n    (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    spr_repMC\n                                     (toSet\n (fst ec)), (tFirst t, tLast t) \\<Turnstile> guard gc).\n                    {action x})\n 2. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (jkbp a) \\<inter>\n  rel_ext\n   (\\<lambda>gc.\n       spr_repMC\n        (toSet (fst ec)), (tFirst t, tLast t) \\<Turnstile> guard gc).\n                            action xa = action x\n 2. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply (rule_tac x=xa in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> action xa = action xa\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set (jkbp a) \\<inter>\n                                  rel_ext\n                                   (\\<lambda>gc.\n spr_repMC (toSet (fst ec)), (tFirst t, tLast t) \\<Turnstile> guard gc)\n 3. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set (jkbp a) \\<inter>\n                                  rel_ext\n                                   (\\<lambda>gc.\n spr_repMC (toSet (fst ec)), (tFirst t, tLast t) \\<Turnstile> guard gc)\n 2. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet\n                            (fst ec)), (tFirst t,\n  tLast t) \\<Turnstile> guard xa\n 2. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply (subst eval_models[OF tC ec, symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> subjective a (guard xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t, tLast t) \\<in> toSet (snd ec)\n 3. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> eval envVal envObs ec (guard xa)\n 4. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "using tC ec subj"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  \\<forall>a gc.\n     gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc)\n\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> subjective a (guard xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t, tLast t) \\<in> toSet (snd ec)\n 3. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        eval envVal envObs ec (guard xa)\\<rbrakk>\n       \\<Longrightarrow> eval envVal envObs ec (guard xa)\n 4. (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                   rel_ext\n                    (\\<lambda>gc.\n                        spr_repMC\n                         (toSet\n                           (fst ec)), (tFirst t,\n tLast t) \\<Turnstile> guard gc).\n        {action x})\n    \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                               rel_ext\n                                (\\<lambda>gc.\n                                    eval envVal envObs ec (guard gc)).\n                    {action x})", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a); eval envVal envObs ec (guard xa);\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t, tLast t) \\<in> agent_abs a t\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     \\<forall>a gc.\n        gc \\<in> set (jkbp a) \\<longrightarrow>\n        subjective a (guard gc)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                                     rel_ext\n(\\<lambda>gc.\n    spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard gc).\n                          {action x})\n                      \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n           rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n{action x})", "apply (rule agent_absI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a); eval envVal envObs ec (guard xa);\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> spr_jview a t = spr_jview a t\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a); eval envVal envObs ec (guard xa);\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> SPR.jkbpC\n 3. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a); eval envVal envObs ec (guard xa);\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> SPR.jkbpC\n 4. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     \\<forall>a gc.\n        gc \\<in> set (jkbp a) \\<longrightarrow>\n        subjective a (guard gc)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                                     rel_ext\n(\\<lambda>gc.\n    spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard gc).\n                          {action x})\n                      \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n           rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n{action x})", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     \\<forall>a gc.\n        gc \\<in> set (jkbp a) \\<longrightarrow>\n        subjective a (guard gc)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n                                     rel_ext\n(\\<lambda>gc.\n    spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard gc).\n                          {action x})\n                      \\<subseteq> (\\<Union>x\\<in>set (jkbp a) \\<inter>\n           rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n{action x})", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set (jkbp a) \\<inter>\n  rel_ext (\\<lambda>gc. eval envVal envObs ec (guard gc)).\n                            action xa = action x", "apply (rule_tac x=xa in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> action xa = action xa\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set (jkbp a) \\<inter>\n                                  rel_ext\n                                   (\\<lambda>gc.\n eval envVal envObs ec (guard gc))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set (jkbp a) \\<inter>\n                                  rel_ext\n                                   (\\<lambda>gc.\n eval envVal envObs ec (guard gc))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> eval envVal envObs ec (guard xa)", "apply (subst eval_models[OF tC ec])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> subjective a (guard xa)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> ?s57 xa \\<in> toSet (snd ec)\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), ?s57 xa \\<Turnstile> guard xa", "using tC ec subj"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  \\<forall>a gc.\n     gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc)\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> subjective a (guard xa)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> ?s57 xa \\<in> toSet (snd ec)\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc);\n        xa \\<in> set (jkbp a);\n        spr_repMC\n         (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa\\<rbrakk>\n       \\<Longrightarrow> spr_repMC\n                          (toSet (fst ec)), ?s57 xa \\<Turnstile> guard xa", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t, tLast t) \\<in> agent_abs a t", "apply (rule agent_absI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> spr_jview a t = spr_jview a t\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> SPR.jkbpC\n 3. \\<And>xa.\n       \\<lbrakk>xa \\<in> set (jkbp a);\n        spr_repMC (tObsC_abs t), (tFirst t, tLast t) \\<Turnstile> guard xa;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        \\<forall>a gc.\n           gc \\<in> set (jkbp a) \\<longrightarrow>\n           subjective a (guard gc)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> SPR.jkbpC", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma spr_submodel_aux:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and s: \"s \\<in> worlds (spr_simMCt t)\"\n  shows \"gen_model SPRdet.MCS s = gen_model (spr_simMCt t) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_model spr_simMC s = gen_model (spr_simMCt t) s", "proof(rule gen_model_subset[where T=\"spr_jkbpCSt t\"])"], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "fix a"], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"spr_sim ` { t' . t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t' }\""], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "show \"relations SPRdet.MCS a \\<inter> ?X \\<times> ?X\n      = relations (spr_simMCt t) a \\<inter> ?X \\<times> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n    Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)", "by (simp add: Int_ac Int_absorb1\n                  relation_mono[OF jkbpCSt_jkbpCS_subset jkbpCSt_jkbpCS_subset])"], ["proof (state)\nthis:\n  Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n  Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"spr_sim ` { t' . t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t' }\""], ["proof (state)\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "from s"], ["proof (chain)\npicking this:\n  s \\<in> worlds (spr_simMCt t)", "show \"(\\<Union>a. relations (spr_simMCt t) a)\\<^sup>* `` {s} \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  s \\<in> worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "apply (clarsimp simp del: mkKripke_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>s \\<in> worlds (spr_simMCt t);\n        (s, x)\n        \\<in> (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> spr_jkbpCSt t", "apply (erule (1) kripke_rels_trc_worlds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       s \\<in> worlds (spr_simMCt t) \\<Longrightarrow> kripke (spr_simMCt t)\n 2. \\<And>x.\n       s \\<in> worlds (spr_simMCt t) \\<Longrightarrow>\n       spr_jkbpCSt t = worlds (spr_simMCt t)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "let ?Y = \"{ t' . t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t' }\""], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"spr_sim ` ?Y\""], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from s"], ["proof (chain)\npicking this:\n  s \\<in> worlds (spr_simMCt t)", "obtain t'\n    where st': \"s = spr_sim t'\"\n      and t'C: \"t' \\<in> SPR.jkbpC\"\n      and t'O: \"tObsC t = tObsC t'\""], ["proof (prove)\nusing this:\n  s \\<in> worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>s = spr_sim t'; t' \\<in> SPR.jkbpC;\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  tObsC t = tObsC t'\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "{"], ["proof (state)\nthis:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  tObsC t = tObsC t'\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "fix t''"], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "assume tt': \"(t', t'') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\""], ["proof (state)\nthis:\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from t'C tt'"], ["proof (chain)\npicking this:\n  t' \\<in> SPR.jkbpC\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*", "have t''C: \"t'' \\<in> SPR.jkbpC\""], ["proof (prove)\nusing this:\n  t' \\<in> SPR.jkbpC\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (1 subgoal):\n 1. t'' \\<in> SPR.jkbpC", "by - (erule kripke_rels_trc_worlds, simp_all)"], ["proof (state)\nthis:\n  t'' \\<in> SPR.jkbpC\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from t'O tt'"], ["proof (chain)\npicking this:\n  tObsC t = tObsC t'\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*", "have t''O: \"tObsC t = tObsC t''\""], ["proof (prove)\nusing this:\n  tObsC t = tObsC t'\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (1 subgoal):\n 1. tObsC t = tObsC t''", "by (simp add: spr_tObsC_trc_aux)"], ["proof (state)\nthis:\n  tObsC t = tObsC t''\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from t''C t''O"], ["proof (chain)\npicking this:\n  t'' \\<in> SPR.jkbpC\n  tObsC t = tObsC t''", "have \"t'' \\<in> ?Y\""], ["proof (prove)\nusing this:\n  t'' \\<in> SPR.jkbpC\n  tObsC t = tObsC t''\n\ngoal (1 subgoal):\n 1. t''\n    \\<in> rel_ext\n           (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')", "by simp"], ["proof (state)\nthis:\n  t''\n  \\<in> rel_ext (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "}"], ["proof (state)\nthis:\n  (t', ?t''3)\n  \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>* \\<Longrightarrow>\n  ?t''3\n  \\<in> rel_ext (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "hence \"(\\<Union>a. relations SPR.MC a)\\<^sup>* `` {t'} \\<subseteq> ?Y\""], ["proof (prove)\nusing this:\n  (t', ?t''3)\n  \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>* \\<Longrightarrow>\n  ?t''3\n  \\<in> rel_ext (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n    \\<subseteq> rel_ext\n                 (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')", "by clarsimp"], ["proof (state)\nthis:\n  (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> rel_ext\n               (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "hence \"spr_sim ` ((\\<Union>a. relations SPR.MC a)\\<^sup>* `` {t'}) \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> rel_ext\n               (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t = tObsC t')\n\ngoal (1 subgoal):\n 1. spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n    \\<subseteq> spr_jkbpCSt t", "by (rule image_mono)"], ["proof (state)\nthis:\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "with st' t'C"], ["proof (chain)\npicking this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t", "show \"(\\<Union>a. relations SPRdet.MCS a)\\<^sup>* `` {s} \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "using sim_trc_commute[OF SPR.mkM_kripke spr_sim, where t=t']"], ["proof (prove)\nusing this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n  t' \\<in> worlds SPR.MC \\<Longrightarrow>\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'} =\n  (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {spr_sim t'}\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "by simp"], ["proof (state)\nthis:\n  (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (5 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. s \\<in> worlds spr_simMC\n 4. s \\<in> worlds (spr_simMCt t)\n 5. valuation spr_simMC = valuation (spr_simMCt t)", "qed (insert s, auto)"], ["", "(*>*)"], ["", "text\\<open>\n\nWe can connect the agent's choice of actions on the \\<open>spr_repMC\\<close> structure to those on the \\<open>SPR.MC\\<close> structure\nusing our earlier results about actions being preserved by generated\nmodels and simulations.\n\n\\<close>"], ["", "lemma spr_simAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec) = set (jAction SPR.MC t a)\"\n(*<*) (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC ec"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t", "have \"?lhs = set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) =\n    set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)", "by (rule spr_action_jaction)"], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) =\n  set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) =\n  set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC ec"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t", "have \"... = set (jAction (spr_simMCt t) (spr_sim t) a)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a) =\n    set (jAction (spr_simMCt t) (spr_sim t) a)", "by (simp add: simulation_jAction_eq[OF _ spr_repSim] spr_sim_tObsC_abs)"], ["proof (state)\nthis:\n  set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a) =\n  set (jAction (spr_simMCt t) (spr_sim t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (jAction (spr_repMC (toSet (fst ec))) (tFirst t, tLast t) a) =\n  set (jAction (spr_simMCt t) (spr_sim t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC", "have \"... = set (jAction SPRdet.MCS (spr_sim t) a)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. set (jAction (spr_simMCt t) (spr_sim t) a) =\n    set (jAction spr_simMC (spr_sim t) a)", "using gen_model_jAction_eq[OF spr_submodel_aux[OF tC, where s=\"spr_sim t\"], where w'=\"spr_sim t\"]\n          gen_model_world_refl[where w=\"spr_sim t\" and M=\"spr_simMCt t\"]"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  \\<lbrakk>spr_sim t \\<in> worlds (spr_simMCt t);\n   spr_sim t \\<in> worlds (gen_model (spr_simMCt t) (spr_sim t));\n   kripke spr_simMC; kripke (spr_simMCt t)\\<rbrakk>\n  \\<Longrightarrow> jAction spr_simMC (spr_sim t) =\n                    jAction (spr_simMCt t) (spr_sim t)\n  spr_sim t \\<in> worlds (spr_simMCt t) \\<Longrightarrow>\n  spr_sim t \\<in> worlds (gen_model (spr_simMCt t) (spr_sim t))\n\ngoal (1 subgoal):\n 1. set (jAction (spr_simMCt t) (spr_sim t) a) =\n    set (jAction spr_simMC (spr_sim t) a)", "by simp"], ["proof (state)\nthis:\n  set (jAction (spr_simMCt t) (spr_sim t) a) =\n  set (jAction spr_simMC (spr_sim t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (jAction (spr_simMCt t) (spr_sim t) a) =\n  set (jAction spr_simMC (spr_sim t) a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC", "have \"... = set (jAction SPR.MC t a)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. set (jAction spr_simMC (spr_sim t) a) = set (jAction SPR.MC t a)", "by (simp add: simulation_jAction_eq[OF _ spr_sim])"], ["proof (state)\nthis:\n  set (jAction spr_simMC (spr_sim t) a) = set (jAction SPR.MC t a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "finally"], ["proof (chain)\npicking this:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "."], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated transitions\\<close>"], ["", "text\\<open>\n\nThe story of simulated transitions takes some doing. We begin by\ncomputing the successor relation of a given equivalence class @{term\n\"X\"} with respect to the common equivalence class @{term \"cec\"}:\n\n\\<close>"], ["", "abbreviation (in -)\n  \"spr_jAction jkbp envVal envObs cec s \\<equiv> \\<lambda>a.\n     spr_simAction jkbp envVal envObs a (cec, spr_knowledge envObs cec a s)\""], ["", "definition (in -)\n  spr_trans :: \"'a odlist\n              \\<Rightarrow> ('a, 'p, 'aAct) JKBP\n              \\<Rightarrow> (('a::linorder, 'es::linorder, 'as::linorder) BEState \\<Rightarrow> 'eAct list)\n              \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct)\n                  \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> ('a, 'es, 'as) BEState)\n              \\<Rightarrow> (('a, 'es, 'as) BEState \\<Rightarrow> 'p \\<Rightarrow> bool)\n              \\<Rightarrow> ('a \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'as option)\n                \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsECRep\n                \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsECRep\n                  \\<Rightarrow> (('a, 'es, 'as) BEState \\<times> ('a, 'es, 'as) BEState) list\"\nwhere\n  \"spr_trans agents jkbp envAction envTrans envVal envObs \\<equiv> \\<lambda>cec X.\n    [ (initialS, succS) .\n       (initialS, finalS) \\<leftarrow> toList X,\n       eact \\<leftarrow> envAction finalS,\n       succS \\<leftarrow> [ envTrans eact aact finalS .\n                   aact \\<leftarrow> listToFuns (spr_jAction jkbp envVal envObs cec\n                                                (initialS, finalS))\n                                   (toList agents) ] ]\""], ["", "text\\<open>\n\nWe will split the result of this function according to the common\nobservation and also agent @{term \"a\"}'s observation, where @{term\n\"a\"} is the agent we are constructing the automaton for.\n\n\\<close>"], ["", "definition (in -)\n  spr_simObsC :: \"('es \\<Rightarrow> 'cobs)\n               \\<Rightarrow> (('a::linorder, 'es::linorder, 'as::linorder) BEState\n                 \\<times> ('a, 'es, 'as) BEState) odlist\n               \\<Rightarrow> 'cobs\"\nwhere\n  \"spr_simObsC envObsC \\<equiv> envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd\""], ["", "abbreviation (in -)\n  envObs_rel :: \"(('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'as option)\n              \\<Rightarrow> ('a, 'es, 'as) spr_simWorlds \\<times> ('a, 'es, 'as) spr_simWorlds \\<Rightarrow> bool\"\nwhere\n  \"envObs_rel envObs \\<equiv> \\<lambda>(s, s'). envObs (snd s') = envObs (snd s)\""], ["", "text\\<open>\n\nThe above combine to yield the successor equivalence classes like so:\n\n\\<close>"], ["", "definition (in -)\n  spr_simTrans :: \"'a odlist\n              \\<Rightarrow> ('a, 'p, 'aAct) JKBP\n              \\<Rightarrow> (('a::linorder, 'es::linorder, 'as::linorder) BEState \\<Rightarrow> 'eAct list)\n              \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct)\n                  \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> ('a, 'es, 'as) BEState)\n              \\<Rightarrow> (('a, 'es, 'as) BEState \\<Rightarrow> 'p \\<Rightarrow> bool)\n              \\<Rightarrow> ('es \\<Rightarrow> 'cobs)\n              \\<Rightarrow> ('a \\<Rightarrow> ('a, 'es, 'as) BEState \\<Rightarrow> 'cobs \\<times> 'as option)\n               \\<Rightarrow> 'a\n               \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep\n               \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep list\"\nwhere\n  \"spr_simTrans agents jkbp envAction envTrans envVal envObsC envObs \\<equiv> \\<lambda>a ec.\n    let aSuccs = spr_trans agents jkbp envAction envTrans envVal envObs\n                           (fst ec) (snd ec);\n        cec' = ODList.fromList\n                 (spr_trans agents jkbp envAction envTrans envVal envObs\n                            (fst ec) (fst ec))\n     in [ (ODList.filter (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec') cec',\n           aec') .\n          aec' \\<leftarrow> map ODList.fromList (partition (envObs_rel (envObs a)) aSuccs) ]\""], ["", "(*<*)"], ["", "abbreviation\n  spr_trans :: \"('a, 'es, 'as) spr_simWorldsECRep\n              \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsECRep\n              \\<Rightarrow> (('a, 'es, 'as) spr_simWorlds) list\"\nwhere\n  \"spr_trans \\<equiv> SPRViewDet.spr_trans agents jkbp envAction envTrans envVal envObs\""], ["", "abbreviation\n  spr_simTrans :: \"'a \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep list\"\nwhere\n  \"spr_simTrans \\<equiv> SPRViewDet.spr_simTrans agents jkbp envAction envTrans envVal envObsC envObs\""], ["", "lemma spr_trans_aec:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_trans (fst ec) (snd ec))\n       = { (tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t }\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans (fst ec) (snd ec)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (local.spr_trans (fst ec) (snd ec))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = (tFirst t', s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview a t' = spr_jview a t)\n 2. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> set (local.spr_trans (fst ec) (snd ec))", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans (fst ec) (snd ec))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = (tFirst t', s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview a t' = spr_jview a t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "assume x: \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> set (local.spr_trans (fst ec) (snd ec))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "with assms"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (local.spr_trans (fst ec) (snd ec))", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (local.spr_trans (fst ec) (snd ec))\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = (tFirst t', s) \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    spr_jview a t' = spr_jview a t)", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (concat\n                (map (\\<lambda>(initialS, finalS).\n                         concat\n                          (map (\\<lambda>eact.\n                                   map (Pair initialS)\n                                    (map\n(\\<lambda>aact. envTrans eact aact finalS)\n(listToFuns (spr_jAction jkbp envVal envObs (fst ec) (initialS, finalS))\n  (toList agents))))\n                            (envAction finalS)))\n                  (toList (snd ec))))\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = (tFirst t', s) \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    spr_jview a t' = spr_jview a t)", "apply (clarsimp simp del: split_paired_Ex split_paired_All simp add: toSet_def[symmetric] agent_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> envTrans xa xaa (tLast t')\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t' \\<and>\n                         t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t' = spr_jview a t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpC", "apply (rule_tac n=\"Suc (tLength t')\" in SPR.jkbpCn_jkbpC_inc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply (auto iff: Let_def simp del: split_paired_Ex split_paired_All)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>eact aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans eact aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            eact \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: listToFuns_ext[OF agents[unfolded toSet_def]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>eact aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans eact aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            eact \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=xa in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            xa \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst (asm) spr_simAction)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> ?t46 t' xa xaa \\<in> SPR.jkbpC\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xaaa (?t46 t' xa xaa)\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC (?t46 t' xa xaa) x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t'))\n                         \\<subseteq> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xb.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xb \\<in> spr_simAbs\n                  (fst ec,\n                   spr_knowledge envObs (fst ec) xaaa\n                    (tFirst t', tLast t'))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> toSet\n               (spr_knowledge envObs (fst ec) xaaa\n                 (tFirst t', tLast t'))\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst (asm) spr_knowledge)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: ec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 4. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 5. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 6. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa \\<and>\n        (tFirst t', tLast t') \\<in> toSet (fst ec) \\<and>\n        (s, s') \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa \\<and>\n        (tFirst t', tLast t') \\<in> toSet (fst ec) \\<and>\n        (s, s') \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "using ec"], ["proof (prove)\nusing this:\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa \\<and>\n        (tFirst t', tLast t') \\<in> toSet (fst ec) \\<and>\n        (s, s') \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa;\n        (tFirst t', tLast t') \\<in> tObsC_abs t;\n        (s, s') \\<in> tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "(* FIXME *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa;\n        (tFirst t', tLast t') \\<in> tObsC_abs t;\n        (s, s') \\<in> tObsC_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'b, sprLst = tLast t'b,\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=t'b in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'b, sprLst = tLast t'b,\n                            sprCRel = tObsC_abs t\\<rparr> =\n                         spr_sim t'b\n 2. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'b\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xaaa t'a = spr_jview xaaa t')\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (auto iff: spr_sim_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'b\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xaaa t'a = spr_jview xaaa t')\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t'b = spr_jview xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_jview_tObsCI[OF _ _ spr_jview_det_ps])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t'\n 2. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t'b) = envObs xaaa (tFirst t')\n 3. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> {t'b, t'} \\<subseteq> SPR.jkbpC\n 4. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t'\n 5. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t'b) = envObs xaaa (tFirst t')\n 6. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 7. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 2. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule spr_jview_tObsC[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule spr_jview_tObsC[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_sim xc\n                         \\<in> spr_simAbs\n                                (fst ec,\n                                 spr_knowledge envObs (fst ec) xaaa\n                                  (tFirst t', tLast t'))\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            (s, s')\n                            \\<in> toSet\n                                   (spr_knowledge envObs (fst ec) xaaa\n                                     (tFirst t', tLast t'))\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst spr_knowledge)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc s' s.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            (s, s')\n                            \\<in> relations (spr_repMC (toSet (fst ec)))\n                                   xaaa ``\n                                  {(tFirst t', tLast t')}\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp_all add: ec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 3. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 4. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 5. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule spr_jview_tObsC)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        spr_jview a t' = spr_jview a t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 3. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=\"tFirst xc\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = tFirst xc, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), tFirst xc, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (tFirst xc, s') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=\"tLast xc\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_sim xc =\n                         \\<lparr>sprFst = tFirst xc, sprLst = tLast xc,\n                            sprCRel = tObsC_abs t\\<rparr> \\<and>\n                         ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: spr_sim_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t \\<and>\n                         ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (drule tObsC_abs_jview_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t';\n        tObsC_abs t = tObsC_abs t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t';\n        tObsC_abs t = tObsC_abs t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t'\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule tObsC_abs_jview_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t') =\n                         envObs xaaa (tFirst xc) \\<and>\n                         envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t') = envObs xaaa (tFirst xc)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_tFirst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t' = spr_jview xaaa xc\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') = envObs xaaa (tLast xc)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_tLast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t' = spr_jview xaaa xc\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t'a = tObsC t \\<and>\n                            tFirst t' = tFirst t'a \\<and>\n                            tLast t' = tLast t'a\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t \\<and>\n                         tFirst t' = tFirst t' \\<and> tLast t' = tLast t'\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=xc in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> SPR.jkbpC \\<and>\n                         tObsC xc = tObsC t \\<and>\n                         tFirst xc = tFirst xc \\<and> tLast xc = tLast xc\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n        t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC xc = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC xc = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t; tObsC xc = tObsC t'\\<rbrakk>\n       \\<Longrightarrow> tObsC xc = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst SPR.jkbpC_jkbpCn_jAction_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa aa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpCn (tLength t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a \\<in> set (jAction SPR.MC t' a))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (local.spr_trans (fst ec) (snd ec))\n  \\<subseteq> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ = (tFirst t', s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> set (local.spr_trans (fst ec) (snd ec))", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> set (local.spr_trans (fst ec) (snd ec))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "assume x: \"x \\<in> ?rhs\""], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "then"], ["proof (chain)\npicking this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)", "obtain t' s\n      where x': \"x = (tFirst t', s)\"\n        and t'sC: \"t' \\<leadsto> s \\<in> SPR.jkbpC\"\n        and F: \"spr_jview a t' = spr_jview a t\""], ["proof (prove)\nusing this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. (\\<And>t' s.\n        \\<lbrakk>x = (tFirst t', s); t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview a t' = spr_jview a t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = (tFirst t', s)\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "have t'Cn: \"t' \\<in> SPR.jkbpCn (tLength t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. t' \\<in> SPR.jkbpCn (tLength t')", "by blast"], ["proof (state)\nthis:\n  t' \\<in> SPR.jkbpCn (tLength t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "obtain eact aact\n      where eact: \"eact \\<in> set (envAction (tLast t'))\"\n        and aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t'))) t' a)\"\n        and s: \"s = envTrans eact aact (tLast t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using SPR.jkbpC_tLength_inv[where t=\"t' \\<leadsto> s\" and n=\"Suc (tLength t')\"]"], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n   tLength (t' \\<leadsto> s) = Suc (tLength t')\\<rbrakk>\n  \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: Let_def)"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  s = envTrans eact aact (tLast t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (snd ec))", "from tC t'sC ec F x' s eact aact"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  spr_jview a t' = spr_jview a t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)", "show \"x \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  spr_jview a t' = spr_jview a t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n\ngoal (1 subgoal):\n 1. x \\<in> set (local.spr_trans (fst ec) (snd ec))", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  spr_jview a t' = spr_jview a t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n\ngoal (1 subgoal):\n 1. x \\<in> set (concat\n                  (map (\\<lambda>(initialS, finalS).\n                           concat\n                            (map (\\<lambda>eact.\n                                     map (Pair initialS)\n(map (\\<lambda>aact. envTrans eact aact finalS)\n  (listToFuns (spr_jAction jkbp envVal envObs (fst ec) (initialS, finalS))\n    (toList agents))))\n                              (envAction finalS)))\n                    (toList (snd ec))))", "apply (clarsimp simp del: split_paired_Ex split_paired_All simp: toSet_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>agent_abs a t.\n                         \\<exists>uu_ uua_.\n                            (uua_, uu_) = x \\<and>\n                            (\\<exists>x\\<in>set (envAction uu_).\n                                (tFirst t', envTrans eact aact (tLast t'))\n                                \\<in> (\\<lambda>xa.\n    (uua_, envTrans x xa uu_)) `\nset (listToFuns (spr_jAction jkbp envVal envObs (fst ec) (uua_, uu_))\n      (toList agents)))", "apply (rule bexI[where x=\"(tFirst t', tLast t')\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>uu_ uua_.\n                         (uua_, uu_) = (tFirst t', tLast t') \\<and>\n                         (\\<exists>x\\<in>set (envAction uu_).\n                             (tFirst t', envTrans eact aact (tLast t'))\n                             \\<in> (\\<lambda>xa.\n (uua_, envTrans x xa uu_)) `\n                                   set (listToFuns\n   (spr_jAction jkbp envVal envObs (fst ec) (uua_, uu_)) (toList agents)))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>set (envAction (tLast t')).\n                         (tFirst t', envTrans eact aact (tLast t'))\n                         \\<in> (\\<lambda>xa.\n                                   (tFirst t', envTrans x xa (tLast t'))) `\n                               set (listToFuns\n                                     (spr_jAction jkbp envVal envObs\n (fst ec) (tFirst t', tLast t'))\n                                     (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "apply (rule bexI[where x=\"eact\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', envTrans eact aact (tLast t'))\n                      \\<in> (\\<lambda>x.\n                                (tFirst t', envTrans eact x (tLast t'))) `\n                            set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> eact \\<in> set (envAction (tLast t'))\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "apply (rule_tac x=\"aact\" in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', envTrans eact aact (tLast t')) =\n                      (tFirst t', envTrans eact aact (tLast t'))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> aact\n                      \\<in> set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> eact \\<in> set (envAction (tLast t'))\n 4. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> aact\n                      \\<in> set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "apply (simp add: listToFuns_ext[OF agents[unfolded toSet_def]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> agent_abs a t\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)", "apply (subst spr_simAction[where t=t'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply (auto iff: SPR.jkbpC_jkbpCn_jAction_eq[OF t'Cn])[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 (s, s')\n                                 \\<in> toSet\n  (spr_knowledge envObs (fst ec) xa (tFirst t', tLast t'))) =\n                         SPRdet.sim_equiv_class xa t'", "apply (subst spr_knowledge)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa s' sa _.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 (s, s')\n                                 \\<in> relations\n  (spr_repMC (toSet (fst ec))) xa ``\n {(tFirst t', tLast t')}) =\n                         SPRdet.sim_equiv_class xa t'", "apply (simp_all add: ec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply (rule tObsC_absI[where t=t and t'=t'])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tObsC t' = tObsC t\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tFirst t' = tFirst t'\n 4. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tLast t' = tLast t'\n 5. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tObsC t' = tObsC t\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     spr_jview a t' = spr_jview a t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply (blast intro: spr_jview_tObsC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 envObs xa (tFirst t') = envObs xa s \\<and>\n                                 envObs xa (tLast t') = envObs xa s' \\<and>\n                                 (\\<exists>t'a.\n                                     t'a \\<in> SPR.jkbpC \\<and>\n                                     tObsC t'a = tObsC t \\<and>\n                                     tFirst t' = tFirst t'a \\<and>\n                                     tLast t' = tLast t'a) \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<in> SPR.jkbpC \\<and>\n                                     tObsC t' = tObsC t \\<and>\n                                     s = tFirst t' \\<and> s' = tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 envObs xa (tFirst t') = envObs xa s \\<and>\n                                 envObs xa (tLast t') = envObs xa s' \\<and>\n                                 (\\<exists>t'a.\n                                     t'a \\<in> SPR.jkbpC \\<and>\n                                     tObsC t'a = tObsC t \\<and>\n                                     tFirst t' = tFirst t'a \\<and>\n                                     tLast t' = tLast t'a) \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<in> SPR.jkbpC \\<and>\n                                     tObsC t' = tObsC t \\<and>\n                                     s = tFirst t' \\<and> s' = tLast t'))\n                         \\<subseteq> SPRdet.sim_equiv_class xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = tLast t'aa,\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (rule_tac x=t'aa in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = tLast t'aa,\n                            sprCRel = tObsC_abs t\\<rparr> =\n                         spr_sim t'aa\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'aa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xa t'a = spr_jview xa t')\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (auto iff: spr_sim_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'aa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xa t'a = spr_jview xa t')\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> spr_jview xa t'aa = spr_jview xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (rule spr_jview_tObsCI[OF _ _ spr_jview_det_ps])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'aa = tObsC t'\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t'aa) = envObs xa (tFirst t')\n 3. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> {t'aa, t'} \\<subseteq> SPR.jkbpC\n 4. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'aa = tObsC t'\n 5. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t'aa) = envObs xa (tFirst t')\n 6. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 3. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 4. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (erule spr_jview_tObsC[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (erule spr_jview_tObsC[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (clarsimp simp: spr_sim_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t \\<and>\n                         envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (drule tObsC_abs_jview_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t';\n        tObsC_abs t = tObsC_abs t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (drule tObsC_abs_jview_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; tObsC_abs t = tObsC_abs t';\n        tObsC_abs t' = tObsC_abs xb\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') = envObs xa (tFirst xb)\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule spr_tFirst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xa t' = spr_jview xa xb\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb)\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule spr_tLast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xa t' = spr_jview xa xb\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t'a = tObsC t \\<and>\n                            tFirst t' = tFirst t'a \\<and>\n                            tLast t' = tLast t'a\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xb = tFirst t' \\<and> tLast xb = tLast t'", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t \\<and>\n                         tFirst t' = tFirst t' \\<and> tLast t' = tLast t'\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        spr_jview a t' = spr_jview a t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xb = tFirst t' \\<and> tLast xb = tLast t'", "apply (auto dest: spr_jview_tObsC intro: spr_jview_tObsC_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> set (local.spr_trans (fst ec) (snd ec))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n  \\<subseteq> set (local.spr_trans (fst ec) (snd ec))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_trans_cec:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"set (spr_trans (fst ec) (fst ec))\n       = { (tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t }\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans (fst ec) (fst ec)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (local.spr_trans (fst ec) (fst ec))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = (tFirst t', s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        tObsC t' = tObsC t)\n 2. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n    \\<subseteq> set (local.spr_trans (fst ec) (fst ec))", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans (fst ec) (fst ec))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = (tFirst t', s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        tObsC t' = tObsC t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t)", "assume x: \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> set (local.spr_trans (fst ec) (fst ec))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t)", "with assms"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (local.spr_trans (fst ec) (fst ec))", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (local.spr_trans (fst ec) (fst ec))\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = (tFirst t', s) \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    tObsC t' = tObsC t)", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x \\<in> set (concat\n                (map (\\<lambda>(initialS, finalS).\n                         concat\n                          (map (\\<lambda>eact.\n                                   map (Pair initialS)\n                                    (map\n(\\<lambda>aact. envTrans eact aact finalS)\n(listToFuns (spr_jAction jkbp envVal envObs (fst ec) (initialS, finalS))\n  (toList agents))))\n                            (envAction finalS)))\n                  (toList (fst ec))))\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = (tFirst t', s) \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    tObsC t' = tObsC t)", "apply (clarsimp simp del: split_paired_Ex split_paired_All simp add: toSet_def[symmetric] tObsC_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> envTrans xa xaa (tLast t')\n                            \\<in> SPR.jkbpC \\<and>\n                            tObsC t'a = tObsC t", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t' \\<and>\n                         t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpC", "apply (rule_tac n=\"Suc (tLength t')\" in SPR.jkbpCn_jkbpC_inc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> envTrans xa xaa (tLast t')\n                         \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply (auto iff: Let_def simp del: split_paired_Ex split_paired_All)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xaa\n        \\<in> set (listToFuns\n                    (spr_jAction jkbp envVal envObs (fst ec)\n                      (tFirst t', tLast t'))\n                    (toList agents));\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>eact aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans eact aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            eact \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: listToFuns_ext[OF agents[unfolded toSet_def]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>eact aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans eact aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            eact \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=xa in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            xa \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x.\n           xaa x\n           \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                       (tFirst t', tLast t') x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst (asm) spr_simAction)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> ?t46 t' xa xaa \\<in> SPR.jkbpC\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xaaa (?t46 t' xa xaa)\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC (?t46 t' xa xaa) x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xaaa\n                            (tFirst t', tLast t'))\n                         \\<subseteq> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xb.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        xb \\<in> spr_simAbs\n                  (fst ec,\n                   spr_knowledge envObs (fst ec) xaaa\n                    (tFirst t', tLast t'))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> toSet\n               (spr_knowledge envObs (fst ec) xaaa\n                 (tFirst t', tLast t'))\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst (asm) spr_knowledge)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: ec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 4. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        (s, s')\n        \\<in> relations (spr_repMC (toSet (fst ec))) xaaa ``\n              {(tFirst t', tLast t')}\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 5. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 6. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa s s'.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        ((tFirst t', tLast t'), s, s') \\<in> local.spr_repRels xaaa \\<and>\n        (tFirst t', tLast t') \\<in> toSet (fst ec) \\<and>\n        (s, s') \\<in> toSet (fst ec)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = s, sprLst = s',\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv ec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'b, sprLst = tLast t'b,\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=t'b in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'b, sprLst = tLast t'b,\n                            sprCRel = tObsC_abs t\\<rparr> =\n                         spr_sim t'b\n 2. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'b\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xaaa t'a = spr_jview xaaa t')\n 3. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 4. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (auto iff: spr_sim_def ec)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'b\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xaaa t'a = spr_jview xaaa t')\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t'b = spr_jview xaaa t'\n 2. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_jview_tObsCI[OF _ _ spr_jview_det_ps])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t'\n 2. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t'b) = envObs xaaa (tFirst t')\n 3. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> {t'b, t'} \\<subseteq> SPR.jkbpC\n 4. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'b = tObsC t'\n 5. \\<And>t' xa xaa xaaa t'a t'b.\n       \\<lbrakk>x = (tFirst t'a, envTrans xa xaa (tLast t'a));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'a));\n        envObs xaaa (tFirst t'a) = envObs xaaa (tFirst t'b);\n        envObs xaaa (tLast t'a) = envObs xaaa (tLast t'b);\n        t'a \\<in> SPR.jkbpC; t'b \\<in> SPR.jkbpC; tObsC t'a = tObsC t;\n        tObsC t'b = tObsC t; tFirst t' = tFirst t'a;\n        tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t'b) = envObs xaaa (tFirst t')\n 6. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 7. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'))\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xaaa t'\n                         \\<subseteq> spr_simAbs\n(fst ec, spr_knowledge envObs (fst ec) xaaa (tFirst t', tLast t'))\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            (s, s')\n                            \\<in> toSet\n                                   (spr_knowledge envObs (fst ec) xaaa\n                                     (tFirst t', tLast t'))\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst spr_knowledge)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc s' s.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            (s, s')\n                            \\<in> relations (spr_repMC (toSet (fst ec)))\n                                   xaaa ``\n                                  {(tFirst t', tLast t')}\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp_all add: ec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (erule tObsC_absI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC t' = tObsC t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tFirst t' = tFirst t'\n 3. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tLast t' = tLast t'\n 4. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 5. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = s, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), s, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (s, s') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=\"tFirst xc\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'.\n                            spr_sim xc =\n                            \\<lparr>sprFst = tFirst xc, sprLst = s',\n                               sprCRel = tObsC_abs t\\<rparr> \\<and>\n                            ((tFirst t', tLast t'), tFirst xc, s')\n                            \\<in> local.spr_repRels xaaa \\<and>\n                            (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                            (tFirst xc, s') \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=\"tLast xc\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_sim xc =\n                         \\<lparr>sprFst = tFirst xc, sprLst = tLast xc,\n                            sprCRel = tObsC_abs t\\<rparr> \\<and>\n                         ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (simp add: spr_sim_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t \\<and>\n                         ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (drule tObsC_abs_jview_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        tObsC_abs t' = tObsC_abs xc\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xc = tObsC_abs t\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> ((tFirst t', tLast t'), tFirst xc, tLast xc)\n                         \\<in> local.spr_repRels xaaa \\<and>\n                         (tFirst t', tLast t') \\<in> tObsC_abs t \\<and>\n                         (tFirst xc, tLast xc) \\<in> tObsC_abs t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t') =\n                         envObs xaaa (tFirst xc) \\<and>\n                         envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tFirst t') = envObs xaaa (tFirst xc)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_tFirst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t' = spr_jview xaaa xc\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') =\n                         envObs xaaa (tLast xc) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xaaa (tLast t') = envObs xaaa (tLast xc)\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule spr_tLast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview xaaa t' = spr_jview xaaa xc\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xc = tFirst t' \\<and>\n                             tLast xc = tLast t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t'a = tObsC t \\<and>\n                            tFirst t' = tFirst t'a \\<and>\n                            tLast t' = tLast t'a\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t \\<and>\n                         tFirst t' = tFirst t' \\<and> tLast t' = tLast t'\n 2. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 3. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xc = tFirst t' \\<and> tLast xc = tLast t'\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=xc in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> SPR.jkbpC \\<and>\n                         tObsC xc = tObsC t \\<and>\n                         tFirst xc = tFirst xc \\<and> tLast xc = tLast xc\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        spr_jview xaaa xc = spr_jview xaaa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC xc = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa xaaa xc.\n       \\<lbrakk>x = (tFirst t', envTrans xa xaa (tLast t'));\n        t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; t \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        xa \\<in> set (envAction (tLast t')); xc \\<in> SPR.jkbpC;\n        tObsC xc = tObsC t'\\<rbrakk>\n       \\<Longrightarrow> tObsC xc = tObsC t\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (subst SPR.jkbpC_jkbpCn_jAction_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' xa xaa aa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpCn (tLength t')\n 2. \\<And>t' xa xaa.\n       \\<lbrakk>t \\<in> SPR.jkbpC; xa \\<in> set (envAction (tLast t'));\n        \\<forall>x. xaa x \\<in> set (jAction SPR.MC t' x);\n        x = (tFirst t', envTrans xa xaa (tLast t')); t' \\<in> SPR.jkbpC;\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aact.\n                            envTrans xa xaa (tLast t') =\n                            envTrans xa aact (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            (\\<forall>a.\n                                aact a \\<in> set (jAction SPR.MC t' a))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (local.spr_trans (fst ec) (fst ec))\n  \\<subseteq> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ = (tFirst t', s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      tObsC t' = tObsC t)\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n    \\<subseteq> set (local.spr_trans (fst ec) (fst ec))", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = (tFirst t', s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n    \\<subseteq> set (local.spr_trans (fst ec) (fst ec))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "assume x: \"x \\<in> ?rhs\""], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "then"], ["proof (chain)\npicking this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)", "obtain t' s\n      where x': \"x = (tFirst t', s)\"\n        and t'sC: \"t' \\<leadsto> s \\<in> SPR.jkbpC\"\n        and F: \"tObsC t' = tObsC t\""], ["proof (prove)\nusing this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n\ngoal (1 subgoal):\n 1. (\\<And>t' s.\n        \\<lbrakk>x = (tFirst t', s); t' \\<leadsto> s \\<in> SPR.jkbpC;\n         tObsC t' = tObsC t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = (tFirst t', s)\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  tObsC t' = tObsC t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "have t'Cn: \"t' \\<in> SPR.jkbpCn (tLength t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. t' \\<in> SPR.jkbpCn (tLength t')", "by blast"], ["proof (state)\nthis:\n  t' \\<in> SPR.jkbpCn (tLength t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "obtain eact aact\n      where eact: \"eact \\<in> set (envAction (tLast t'))\"\n        and aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t'))) t' a)\"\n        and s: \"s = envTrans eact aact (tLast t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using SPR.jkbpC_tLength_inv[where t=\"t' \\<leadsto> s\" and n=\"Suc (tLength t')\"]"], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n   tLength (t' \\<leadsto> s) = Suc (tLength t')\\<rbrakk>\n  \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: Let_def)"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  s = envTrans eact aact (tLast t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = (tFirst t', s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       tObsC t' = tObsC t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans (fst ec) (fst ec))", "from tC t'sC ec F x' s eact aact"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  tObsC t' = tObsC t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)", "show \"x \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  tObsC t' = tObsC t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n\ngoal (1 subgoal):\n 1. x \\<in> set (local.spr_trans (fst ec) (fst ec))", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  tObsC t' = tObsC t\n  x = (tFirst t', s)\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n\ngoal (1 subgoal):\n 1. x \\<in> set (concat\n                  (map (\\<lambda>(initialS, finalS).\n                           concat\n                            (map (\\<lambda>eact.\n                                     map (Pair initialS)\n(map (\\<lambda>aact. envTrans eact aact finalS)\n  (listToFuns (spr_jAction jkbp envVal envObs (fst ec) (initialS, finalS))\n    (toList agents))))\n                              (envAction finalS)))\n                    (toList (fst ec))))", "apply (clarsimp simp del: split_paired_Ex split_paired_All simp: toSet_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>tObsC_abs t.\n                         \\<exists>uu_ uua_.\n                            (uua_, uu_) = x \\<and>\n                            (\\<exists>x\\<in>set (envAction uu_).\n                                (tFirst t', envTrans eact aact (tLast t'))\n                                \\<in> (\\<lambda>xa.\n    (uua_, envTrans x xa uu_)) `\nset (listToFuns (spr_jAction jkbp envVal envObs (fst ec) (uua_, uu_))\n      (toList agents)))", "apply (rule bexI[where x=\"(tFirst t', tLast t')\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>uu_ uua_.\n                         (uua_, uu_) = (tFirst t', tLast t') \\<and>\n                         (\\<exists>x\\<in>set (envAction uu_).\n                             (tFirst t', envTrans eact aact (tLast t'))\n                             \\<in> (\\<lambda>xa.\n (uua_, envTrans x xa uu_)) `\n                                   set (listToFuns\n   (spr_jAction jkbp envVal envObs (fst ec) (uua_, uu_)) (toList agents)))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>set (envAction (tLast t')).\n                         (tFirst t', envTrans eact aact (tLast t'))\n                         \\<in> (\\<lambda>xa.\n                                   (tFirst t', envTrans x xa (tLast t'))) `\n                               set (listToFuns\n                                     (spr_jAction jkbp envVal envObs\n (fst ec) (tFirst t', tLast t'))\n                                     (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "apply (rule bexI[where x=\"eact\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', envTrans eact aact (tLast t'))\n                      \\<in> (\\<lambda>x.\n                                (tFirst t', envTrans eact x (tLast t'))) `\n                            set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> eact \\<in> set (envAction (tLast t'))\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "apply (rule_tac x=\"aact\" in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', envTrans eact aact (tLast t')) =\n                      (tFirst t', envTrans eact aact (tLast t'))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> aact\n                      \\<in> set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> eact \\<in> set (envAction (tLast t'))\n 4. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> aact\n                      \\<in> set (listToFuns\n                                  (spr_jAction jkbp envVal envObs (fst ec)\n                                    (tFirst t', tLast t'))\n                                  (toList agents))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "apply (simp add: listToFuns_ext[OF agents[unfolded toSet_def]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         aact x\n                         \\<in> set (spr_jAction jkbp envVal envObs (fst ec)\n                                     (tFirst t', tLast t') x)", "apply (subst spr_simAction[where t=t'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n     x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. aact x \\<in> set (jAction SPR.MC t' x)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply (auto iff: SPR.jkbpC_jkbpCn_jAction_eq[OF t'Cn])[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        spr_simAbs ec = SPRdet.sim_equiv_class a t; tObsC t' = tObsC t;\n        x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> spr_simAbs\n                          (fst ec,\n                           spr_knowledge envObs (fst ec) xa\n                            (tFirst t', tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply (clarsimp simp: spr_simAbs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 (s, s')\n                                 \\<in> toSet\n  (spr_knowledge envObs (fst ec) xa (tFirst t', tLast t'))) =\n                         SPRdet.sim_equiv_class xa t'", "apply (subst spr_knowledge)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa s' sa _.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> (tFirst t', tLast t') \\<in> toSet (fst ec)\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 (s, s')\n                                 \\<in> relations\n  (spr_repMC (toSet (fst ec))) xa ``\n {(tFirst t', tLast t')}) =\n                         SPRdet.sim_equiv_class xa t'", "apply (simp_all add: ec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', tLast t') \\<in> tObsC_abs t\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply (rule tObsC_absI[where t=t and t'=t'])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tObsC t' = tObsC t\n 3. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tFirst t' = tFirst t'\n 4. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> tLast t' = tLast t'\n 5. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (case ec of\n      (cec, aec) \\<Rightarrow>\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>s s'.\n                uu_ =\n                \\<lparr>sprFst = s, sprLst = s',\n                   sprCRel = toSet cec\\<rparr> \\<and>\n                (s, s') \\<in> toSet aec)) =\n     SPRdet.sim_equiv_class a t;\n     tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a.\n        aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n    \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 ((tFirst t', tLast t'), s, s')\n                                 \\<in> local.spr_repRels xa \\<and>\n                                 (tFirst t', tLast t')\n                                 \\<in> tObsC_abs t \\<and>\n                                 (s, s') \\<in> tObsC_abs t) =\n                         SPRdet.sim_equiv_class xa t'", "apply (clarsimp simp: spr_repRels_def tObsC_abs_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 envObs xa (tFirst t') = envObs xa s \\<and>\n                                 envObs xa (tLast t') = envObs xa s' \\<and>\n                                 (\\<exists>t'a.\n                                     t'a \\<in> SPR.jkbpC \\<and>\n                                     tObsC t'a = tObsC t \\<and>\n                                     tFirst t' = tFirst t'a \\<and>\n                                     tLast t' = tLast t'a) \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<in> SPR.jkbpC \\<and>\n                                     tObsC t' = tObsC t \\<and>\n                                     s = tFirst t' \\<and> s' = tLast t')) =\n                         SPRdet.sim_equiv_class xa t'", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s s'.\n                                 uu_ =\n                                 \\<lparr>sprFst = s, sprLst = s',\n                                    sprCRel = tObsC_abs t\\<rparr> \\<and>\n                                 envObs xa (tFirst t') = envObs xa s \\<and>\n                                 envObs xa (tLast t') = envObs xa s' \\<and>\n                                 (\\<exists>t'a.\n                                     t'a \\<in> SPR.jkbpC \\<and>\n                                     tObsC t'a = tObsC t \\<and>\n                                     tFirst t' = tFirst t'a \\<and>\n                                     tLast t' = tLast t'a) \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<in> SPR.jkbpC \\<and>\n                                     tObsC t' = tObsC t \\<and>\n                                     s = tFirst t' \\<and> s' = tLast t'))\n                         \\<subseteq> SPRdet.sim_equiv_class xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = tLast t'aa,\n                            sprCRel = tObsC_abs t\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (rule_tac x=t'aa in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = tLast t'aa,\n                            sprCRel = tObsC_abs t\\<rparr> =\n                         spr_sim t'aa\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'aa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xa t'a = spr_jview xa t')\n 3. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (auto iff: spr_sim_def [abs_def])[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t'aa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview xa t'a = spr_jview xa t')\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> spr_jview xa t'aa = spr_jview xa t'\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (rule spr_jview_tObsCI[OF _ _ spr_jview_det_ps])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'aa = tObsC t'\n 2. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t'aa) = envObs xa (tFirst t')\n 3. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> {t'aa, t'} \\<subseteq> SPR.jkbpC\n 4. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> tObsC t'aa = tObsC t'\n 5. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t'aa) = envObs xa (tFirst t')\n 6. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa t'a t'aa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t'a) \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t;\n        x = (tFirst t'a, envTrans eact aact (tLast t'a));\n        s = envTrans eact aact (tLast t'a);\n        eact \\<in> set (envAction (tLast t'a));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        envObs xa (tFirst t'a) = envObs xa (tFirst t'aa);\n        envObs xa (tLast t'a) = envObs xa (tLast t'aa); t'a \\<in> SPR.jkbpC;\n        t'aa \\<in> SPR.jkbpC; tObsC t'a = tObsC t; tObsC t'aa = tObsC t;\n        tFirst t' = tFirst t'a; tLast t' = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpC\n 2. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        SPRdet.sim_equiv_class a t;\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a.\n           aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\\<rbrakk>\n       \\<Longrightarrow> SPRdet.sim_equiv_class xa t'\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s s'.\n       uu_ =\n       \\<lparr>sprFst = s, sprLst = s', sprCRel = tObsC_abs t\\<rparr> \\<and>\n       envObs xa (tFirst t') = envObs xa s \\<and>\n       envObs xa (tLast t') = envObs xa s' \\<and>\n       (\\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           tObsC t'a = tObsC t \\<and>\n           tFirst t' = tFirst t'a \\<and> tLast t' = tLast t'a) \\<and>\n       (\\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           tObsC t' = tObsC t \\<and> s = tFirst t' \\<and> s' = tLast t'))", "apply (clarsimp simp: spr_sim_def [abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t \\<and>\n                         envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xb = tObsC_abs t\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (auto dest!: tObsC_abs_jview_eq intro: spr_tFirst spr_tLast)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') =\n                         envObs xa (tFirst xb) \\<and>\n                         envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tFirst t') = envObs xa (tFirst xb)\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (auto intro: spr_tFirst)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb) \\<and>\n                         (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> envObs xa (tLast t') = envObs xa (tLast xb)\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (auto intro: spr_tLast)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'a.\n                             t'a \\<in> SPR.jkbpC \\<and>\n                             tObsC t'a = tObsC t \\<and>\n                             tFirst t' = tFirst t'a \\<and>\n                             tLast t' = tLast t'a) \\<and>\n                         (\\<exists>t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             tObsC t' = tObsC t \\<and>\n                             tFirst xb = tFirst t' \\<and>\n                             tLast xb = tLast t')", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t'a = tObsC t \\<and>\n                            tFirst t' = tFirst t'a \\<and>\n                            tLast t' = tLast t'a\n 2. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xb = tFirst t' \\<and> tLast xb = tLast t'", "apply (auto intro: spr_tLast)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t \\<and>\n                            tFirst xb = tFirst t' \\<and> tLast xb = tLast t'", "apply (rule_tac x=xb in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        (case ec of\n         (cec, aec) \\<Rightarrow>\n           rel_ext\n            (\\<lambda>uu_.\n                \\<exists>s s'.\n                   uu_ =\n                   \\<lparr>sprFst = s, sprLst = s',\n                      sprCRel = toSet cec\\<rparr> \\<and>\n                   (s, s') \\<in> toSet aec)) =\n        (\\<lambda>x.\n            \\<lparr>sprFst = tFirst x, sprLst = tLast x,\n               sprCRel = tObsC_abs x\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t);\n        tObsC t' = tObsC t; x = (tFirst t', envTrans eact aact (tLast t'));\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        xb \\<in> SPR.jkbpC; spr_jview xa xb = spr_jview xa t'\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> SPR.jkbpC \\<and>\n                         tObsC xb = tObsC t \\<and>\n                         tFirst xb = tFirst xb \\<and> tLast xb = tLast xb", "apply (auto dest: spr_jview_tObsC intro: spr_jview_tObsC_trans)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> set (local.spr_trans (fst ec) (fst ec))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n  \\<subseteq> set (local.spr_trans (fst ec) (fst ec))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_simObsC:\n    assumes t'sC: \"t \\<leadsto> s \\<in> SPR.jkbpC\"\n        and aec': \"toSet aec = (rel_ext (envObs_rel (envObs a)) \\<inter> X \\<times> X) `` {(tFirst t, s)}\"\n        and X: \"X = {(tFirst t', s) |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n    shows \"spr_simObsC envObsC aec = envObsC (es s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simObsC envObsC aec = envObsC (es s)", "unfolding spr_simObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd) aec = envObsC (es s)", "apply (cases aec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. aec = ODList.empty \\<Longrightarrow>\n    (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd) aec = envObsC (es s)\n 2. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs); distinct (x # xs);\n        sorted (x # xs)\\<rbrakk>\n       \\<Longrightarrow> (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd)\n                          aec =\n                         envObsC (es s)", "using assms"], ["proof (prove)\nusing this:\n  t \\<leadsto> s \\<in> SPR.jkbpC\n  toSet aec = Restr (rel_ext (envObs_rel (envObs a))) X `` {(tFirst t, s)}\n  X =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n\ngoal (2 subgoals):\n 1. aec = ODList.empty \\<Longrightarrow>\n    (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd) aec = envObsC (es s)\n 2. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs); distinct (x # xs);\n        sorted (x # xs)\\<rbrakk>\n       \\<Longrightarrow> (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd)\n                          aec =\n                         envObsC (es s)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs); distinct (x # xs);\n        sorted (x # xs)\\<rbrakk>\n       \\<Longrightarrow> (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd)\n                          aec =\n                         envObsC (es s)", "using assms"], ["proof (prove)\nusing this:\n  t \\<leadsto> s \\<in> SPR.jkbpC\n  toSet aec = Restr (rel_ext (envObs_rel (envObs a))) X `` {(tFirst t, s)}\n  X =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs); distinct (x # xs);\n        sorted (x # xs)\\<rbrakk>\n       \\<Longrightarrow> (envObsC \\<circ> es \\<circ> snd \\<circ> ODList.hd)\n                          aec =\n                         envObsC (es s)", "apply (simp add: ODList.hd_def toList_fromList)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs);\n        x \\<notin> set xs \\<and> distinct xs;\n        (\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> sorted xs;\n        t \\<leadsto> s \\<in> SPR.jkbpC;\n        insert x (set xs) =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t, s)};\n        X =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t)\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd x)) = envObsC (es s)", "apply (subgoal_tac \"x \\<in> insert x (set xs)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs);\n        x \\<notin> set xs \\<and> distinct xs;\n        (\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> sorted xs;\n        t \\<leadsto> s \\<in> SPR.jkbpC;\n        insert x (set xs) =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t, s)};\n        X =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        x \\<in> insert x (set xs)\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd x)) = envObsC (es s)\n 2. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs);\n        x \\<notin> set xs \\<and> distinct xs;\n        (\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> sorted xs;\n        t \\<leadsto> s \\<in> SPR.jkbpC;\n        insert x (set xs) =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t, s)};\n        X =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert x (set xs)", "apply (auto iff: envObs_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>aec = fromList (x # xs);\n        x \\<notin> set xs \\<and> distinct xs;\n        (\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> sorted xs;\n        t \\<leadsto> s \\<in> SPR.jkbpC;\n        insert x (set xs) =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t, s)};\n        X =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert x (set xs)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma envObs_rel_equiv:\n  \"equiv UNIV (rel_ext (envObs_rel (envObs a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv UNIV (rel_ext (envObs_rel (envObs a)))", "by (intro equivI refl_onI symI transI) auto"], ["", "(*>*)"], ["", "text\\<open>\n\nShowing that \\<open>spr_simTrans\\<close> works requires a series of\nauxiliary lemmas that show we do in fact compute the correct successor\nequivalence classes. We elide the unedifying details, skipping\nstraight to the lemma that the @{term \"Algorithm\"} locale expects:\n\n\\<close>"], ["", "lemma spr_simTrans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRdet.sim_equiv_class a t\"\n  shows \"spr_simAbs ` set (spr_simTrans a ec)\n      = { SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n          |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n(*<*)(is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. spr_simAbs ` set (local.spr_simTrans a ec)\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ =\n                        SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview a t' = spr_jview a t)\n 2. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec)\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ =\n                        SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview a t' = spr_jview a t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "assume x: \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "then"], ["proof (chain)\npicking this:\n  x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "obtain rx\n      where xrx: \"x = spr_simAbs rx\"\n        and rx: \"rx \\<in> set (spr_simTrans a ec)\""], ["proof (prove)\nusing this:\n  x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)\n\ngoal (1 subgoal):\n 1. (\\<And>rx.\n        \\<lbrakk>x = spr_simAbs rx;\n         rx \\<in> set (local.spr_simTrans a ec)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = spr_simAbs rx\n  rx \\<in> set (local.spr_simTrans a ec)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "with tC ec"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x = spr_simAbs rx\n  rx \\<in> set (local.spr_simTrans a ec)", "obtain cec' aec' UV' t' s\n      where rxp: \"rx = (cec', aec')\"\n        and t'sC: \"t' \\<leadsto> s \\<in> SPR.jkbpC\"\n        and tt': \"spr_jview a t' = spr_jview a t\"\n        and aec': \"toSet aec' = (rel_ext (envObs_rel (envObs a)) \\<inter> set (spr_trans (fst ec) (snd ec))\n                                                       \\<times> set (spr_trans (fst ec) (snd ec))) `` {(tFirst t', s)}\"\n        and cec': \"cec' = ODList.filter (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec') (fromList (spr_trans (fst ec) (fst ec)))\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x = spr_simAbs rx\n  rx \\<in> set (local.spr_simTrans a ec)\n\ngoal (1 subgoal):\n 1. (\\<And>cec' aec' t' s.\n        \\<lbrakk>rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview a t' = spr_jview a t;\n         toSet aec' =\n         Restr (rel_ext (envObs_rel (envObs a)))\n          (set (local.spr_trans (fst ec) (snd ec))) ``\n         {(tFirst t', s)};\n         cec' =\n         ODList.filter\n          (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n          (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding spr_simTrans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x = spr_simAbs rx\n  rx \\<in> set (let aSuccs = local.spr_trans (fst ec) (snd ec);\n                    cec' = fromList (local.spr_trans (fst ec) (fst ec))\n                in map (\\<lambda>aec'.\n                           (ODList.filter\n                             (\\<lambda>s.\n                                 envObsC (es (snd s)) =\n                                 spr_simObsC envObsC aec')\n                             cec',\n                            aec'))\n                    (map fromList\n                      (List_local.partition (envObs_rel (envObs a))\n                        aSuccs)))\n\ngoal (1 subgoal):\n 1. (\\<And>cec' aec' t' s.\n        \\<lbrakk>rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview a t' = spr_jview a t;\n         toSet aec' =\n         Restr (rel_ext (envObs_rel (envObs a)))\n          (set (local.spr_trans (fst ec) (snd ec))) ``\n         {(tFirst t', s)};\n         cec' =\n         ODList.filter\n          (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n          (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using spr_trans_aec[OF assms]"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRdet.sim_equiv_class a t\n  x = spr_simAbs rx\n  rx \\<in> set (let aSuccs = local.spr_trans (fst ec) (snd ec);\n                    cec' = fromList (local.spr_trans (fst ec) (fst ec))\n                in map (\\<lambda>aec'.\n                           (ODList.filter\n                             (\\<lambda>s.\n                                 envObsC (es (snd s)) =\n                                 spr_simObsC envObsC aec')\n                             cec',\n                            aec'))\n                    (map fromList\n                      (List_local.partition (envObs_rel (envObs a))\n                        aSuccs)))\n  set (local.spr_trans (fst ec) (snd ec)) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. (\\<And>cec' aec' t' s.\n        \\<lbrakk>rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview a t' = spr_jview a t;\n         toSet aec' =\n         Restr (rel_ext (envObs_rel (envObs a)))\n          (set (local.spr_trans (fst ec) (snd ec))) ``\n         {(tFirst t', s)};\n         cec' =\n         ODList.filter\n          (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n          (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto split: prod.split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>cec' t' s.\n                   \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n                    spr_jview a t' = spr_jview a t;\n                    set xa =\n                    Restr (rel_ext (envObs_rel (envObs a)))\n                     (rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>t' s.\n                              uu_ = (tFirst t', s) \\<and>\n                              t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a t)) ``\n                    {(tFirst t', s)};\n                    cec' =\n                    ODList.filter\n                     (\\<lambda>s.\n                         envObsC (es (snd s)) =\n                         spr_simObsC envObsC (fromList xa))\n                     (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x =\n        spr_simAbs\n         (ODList.filter\n           (\\<lambda>s.\n               envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n           (fromList (local.spr_trans (fst ec) (fst ec))),\n          fromList xa);\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        xa \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        rx =\n        (ODList.filter\n          (\\<lambda>s.\n              envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n          (fromList (local.spr_trans (fst ec) (fst ec))),\n         fromList xa)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (drule imageI[where f=set])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>cec' t' s.\n                   \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n                    spr_jview a t' = spr_jview a t;\n                    set xa =\n                    Restr (rel_ext (envObs_rel (envObs a)))\n                     (rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>t' s.\n                              uu_ = (tFirst t', s) \\<and>\n                              t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a t)) ``\n                    {(tFirst t', s)};\n                    cec' =\n                    ODList.filter\n                     (\\<lambda>s.\n                         envObsC (es (snd s)) =\n                         spr_simObsC envObsC (fromList xa))\n                     (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x =\n        spr_simAbs\n         (ODList.filter\n           (\\<lambda>s.\n               envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n           (fromList (local.spr_trans (fst ec) (fst ec))),\n          fromList xa);\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        rx =\n        (ODList.filter\n          (\\<lambda>s.\n              envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n          (fromList (local.spr_trans (fst ec) (fst ec))),\n         fromList xa);\n        set xa\n        \\<in> set `\n              set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)))\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: partition[OF envObs_rel_equiv subset_UNIV])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>cec' t' s.\n                   \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n                    spr_jview a t' = spr_jview a t;\n                    set xa =\n                    Restr (rel_ext (envObs_rel (envObs a)))\n                     (rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>t' s.\n                              uu_ = (tFirst t', s) \\<and>\n                              t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a t)) ``\n                    {(tFirst t', s)};\n                    cec' =\n                    ODList.filter\n                     (\\<lambda>s.\n                         envObsC (es (snd s)) =\n                         spr_simObsC envObsC (fromList xa))\n                     (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x =\n        spr_simAbs\n         (ODList.filter\n           (\\<lambda>s.\n               envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n           (fromList (local.spr_trans (fst ec) (fst ec))),\n          fromList xa);\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        rx =\n        (ODList.filter\n          (\\<lambda>s.\n              envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n          (fromList (local.spr_trans (fst ec) (fst ec))),\n         fromList xa);\n        set xa\n        \\<in> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ = (tFirst t', s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview a t' = spr_jview a t) //\n              Restr (rel_ext (envObs_rel (envObs a)))\n               (rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = (tFirst t', s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview a t' = spr_jview a t))\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (erule quotientE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>\\<And>cec' t' s.\n                   \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n                    spr_jview a t' = spr_jview a t;\n                    set xa =\n                    Restr (rel_ext (envObs_rel (envObs a)))\n                     (rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>t' s.\n                              uu_ = (tFirst t', s) \\<and>\n                              t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                              spr_jview a t' = spr_jview a t)) ``\n                    {(tFirst t', s)};\n                    cec' =\n                    ODList.filter\n                     (\\<lambda>s.\n                         envObsC (es (snd s)) =\n                         spr_simObsC envObsC (fromList xa))\n                     (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> SPR.jkbpC; spr_simAbs ec = SPRdet.sim_equiv_class a t;\n        x =\n        spr_simAbs\n         (ODList.filter\n           (\\<lambda>s.\n               envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n           (fromList (local.spr_trans (fst ec) (fst ec))),\n          fromList xa);\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        rx =\n        (ODList.filter\n          (\\<lambda>s.\n              envObsC (es (snd s)) = spr_simObsC envObsC (fromList xa))\n          (fromList (local.spr_trans (fst ec) (fst ec))),\n         fromList xa);\n        set xa =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {xaa};\n        xaa\n        \\<in> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ = (tFirst t', s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview a t' = spr_jview a t)\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rx = (cec', aec')\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  toSet aec' =\n  Restr (rel_ext (envObs_rel (envObs a)))\n   (set (local.spr_trans (fst ec) (snd ec))) ``\n  {(tFirst t', s)}\n  cec' =\n  ODList.filter\n   (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n   (fromList (local.spr_trans (fst ec) (fst ec)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "from t'sC tt' aec' cec'"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  toSet aec' =\n  Restr (rel_ext (envObs_rel (envObs a)))\n   (set (local.spr_trans (fst ec) (snd ec))) ``\n  {(tFirst t', s)}\n  cec' =\n  ODList.filter\n   (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n   (fromList (local.spr_trans (fst ec) (fst ec)))", "have \"spr_simAbs (cec', aec') = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  toSet aec' =\n  Restr (rel_ext (envObs_rel (envObs a)))\n   (set (local.spr_trans (fst ec) (snd ec))) ``\n  {(tFirst t', s)}\n  cec' =\n  ODList.filter\n   (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n   (fromList (local.spr_trans (fst ec) (fst ec)))\n\ngoal (1 subgoal):\n 1. spr_simAbs (cec', aec') = SPRdet.sim_equiv_class a (t' \\<leadsto> s)", "unfolding spr_simAbs_def"], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  toSet aec' =\n  Restr (rel_ext (envObs_rel (envObs a)))\n   (set (local.spr_trans (fst ec) (snd ec))) ``\n  {(tFirst t', s)}\n  cec' =\n  ODList.filter\n   (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n   (fromList (local.spr_trans (fst ec) (fst ec)))\n\ngoal (1 subgoal):\n 1. (case (cec', aec') of\n     (cec, aec) \\<Rightarrow>\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s s'.\n               uu_ =\n               \\<lparr>sprFst = s, sprLst = s',\n                  sprCRel = toSet cec\\<rparr> \\<and>\n               (s, s') \\<in> toSet aec)) =\n    SPRdet.sim_equiv_class a (t' \\<leadsto> s)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n  envObsC (es (snd x)) = spr_simObsC envObsC aec')\\<rparr> \\<and>\n                              envObs a s' = envObs a s \\<and>\n                              (tFirst t', s)\n                              \\<in> set (local.spr_trans (fst ec)\n    (snd ec)) \\<and>\n                              (sa, s')\n                              \\<in> set (local.spr_trans (fst ec)\n    (snd ec))) =\n                      SPRdet.sim_equiv_class a (t' \\<leadsto> s)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n  envObsC (es (snd x)) = spr_simObsC envObsC aec')\\<rparr> \\<and>\n                              envObs a s' = envObs a s \\<and>\n                              (tFirst t', s)\n                              \\<in> set (local.spr_trans (fst ec)\n    (snd ec)) \\<and>\n                              (sa, s')\n                              \\<in> set (local.spr_trans (fst ec) (snd ec)))\n                      \\<subseteq> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "using spr_trans_aec[OF assms] spr_trans_cec[OF assms]"], ["proof (prove)\nusing this:\n  set (local.spr_trans (fst ec) (snd ec)) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n  set (local.spr_trans (fst ec) (fst ec)) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n  envObsC (es (snd x)) = spr_simObsC envObsC aec')\\<rparr> \\<and>\n                              envObs a s' = envObs a s \\<and>\n                              (tFirst t', s)\n                              \\<in> set (local.spr_trans (fst ec)\n    (snd ec)) \\<and>\n                              (sa, s')\n                              \\<in> set (local.spr_trans (fst ec) (snd ec)))\n                      \\<subseteq> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = s',\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   spr_simObsC envObsC aec')\\<rparr>\n                         \\<in> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (rule_tac x=\"t'aa \\<leadsto> s'\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = s',\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   spr_simObsC envObsC aec')\\<rparr> =\n                         spr_sim (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (simp add: spr_sim_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) =\n                              spr_simObsC envObsC aec') =\n                         tObsC_abs (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (cut_tac aec=aec' and t=t' and s=s in spr_simObsC[where a=a])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpC\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> toSet aec' =\n                         Restr (rel_ext (envObs_rel (envObs a)))\n                          (?X31 s' t'a t'aa) ``\n                         {(tFirst t', s)}\n 3. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> ?X31 s' t'a t'aa =\n                         rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>t'a s.\n                                 uu_ = (tFirst t'a, s) \\<and>\n                                 t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                 spr_jview a t'a = spr_jview a t')\n 4. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) =\n                              spr_simObsC envObsC aec') =\n                         tObsC_abs (t'aa \\<leadsto> s')\n 5. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 6. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s)) =\n                         tObsC_abs (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply rule"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s))\n                         \\<subseteq> tObsC_abs (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'aa \\<leadsto> s')\n                         \\<subseteq> rel_ext\n(\\<lambda>x.\n    (\\<exists>t' s.\n        x = (tFirst t', s) \\<and>\n        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n    envObsC (es (snd x)) = envObsC (es s))\n 3. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s' t'a t'aa t'b sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); t'b \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'b, sa)\n                         \\<in> tObsC_abs (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'aa \\<leadsto> s')\n                         \\<subseteq> rel_ext\n(\\<lambda>x.\n    (\\<exists>t' s.\n        x = (tFirst t', s) \\<and>\n        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n    envObsC (es (snd x)) = envObsC (es s))\n 3. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (erule_tac t'=\"t'b \\<leadsto> sa\" in tObsC_absI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s' t'a t'aa t'b sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'b \\<leadsto> sa) =\n                         tObsC (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa t'b sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'b = tFirst (t'b \\<leadsto> sa)\n 3. \\<And>s' t'a t'aa t'b sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> sa = tLast (t'b \\<leadsto> sa)\n 4. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'aa \\<leadsto> s')\n                         \\<subseteq> rel_ext\n(\\<lambda>x.\n    (\\<exists>t' s.\n        x = (tFirst t', s) \\<and>\n        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n    envObsC (es (snd x)) = envObsC (es s))\n 5. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 6. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s' t'a t'aa t'b sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'b = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'b \\<leadsto> sa) =\n                         tObsC (t'aa \\<leadsto> s')\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'aa \\<leadsto> s')\n                         \\<subseteq> rel_ext\n(\\<lambda>x.\n    (\\<exists>t' s.\n        x = (tFirst t', s) \\<and>\n        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n    envObsC (es (snd x)) = envObsC (es s))\n 3. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (auto dest: spr_jview_tObsC iff: tObsC_def envObs_def_raw)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'aa \\<leadsto> s')\n                         \\<subseteq> rel_ext\n(\\<lambda>x.\n    (\\<exists>t' s.\n        x = (tFirst t', s) \\<and>\n        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n    envObsC (es (snd x)) = envObsC (es s))\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (clarsimp simp: envObs_def_raw tObsC_abs_conv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa t'b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC (t'aa \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'b = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'b \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (case_tac t'b)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s' t'a t'aa t'b x1.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC (t'aa \\<leadsto> s');\n        t'b = tInit x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'b = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'b \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>s' t'a t'aa t'b x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC (t'aa \\<leadsto> s');\n        t'b = x21 \\<leadsto> x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'b = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'b \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa t'b x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        t'b \\<in> SPR.jkbpC; tObsC t'b = tObsC (t'aa \\<leadsto> s');\n        t'b = x21 \\<leadsto> x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'b = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'b \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        x21 \\<leadsto> x22 \\<in> SPR.jkbpC;\n        tObsC (x21 \\<leadsto> x22) = tObsC (t'aa \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst x21 = tFirst t' \\<and>\n                            t' \\<leadsto> x22 \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (rename_tac Trace State)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa Trace State.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        Trace \\<leadsto> State \\<in> SPR.jkbpC;\n        tObsC (Trace \\<leadsto> State) = tObsC (t'aa \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst Trace = tFirst t' \\<and>\n                            t' \\<leadsto> State \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (rule_tac x=Trace in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s' t'a t'aa Trace State.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr\n         (rel_ext\n           (\\<lambda>(s, s').\n               envObsC (es (snd s')) = envObsC (es (snd s)) \\<and>\n               ODList.lookup (ps (snd s')) a =\n               ODList.lookup (ps (snd s)) a))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        tFirst t' = tFirst t'a; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es s') = envObsC (es s);\n        ODList.lookup (ps s') a = ODList.lookup (ps s) a;\n        Trace \\<leadsto> State \\<in> SPR.jkbpC;\n        tObsC (Trace \\<leadsto> State) = tObsC (t'aa \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tFirst Trace = tFirst Trace \\<and>\n                         Trace \\<leadsto> State \\<in> SPR.jkbpC \\<and>\n                         tObsC Trace = tObsC t\n 2. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (auto dest: spr_jview_tObsC simp: tObsC_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s' t'a t'aa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t'a, s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        envObs a s' = envObs a s; tFirst t' = tFirst t'a;\n        t'a \\<leadsto> s \\<in> SPR.jkbpC; spr_jview a t'a = spr_jview a t;\n        t'aa \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_jview a (t'aa \\<leadsto> s') =\n                         spr_jview a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (simp add: spr_jview_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "using spr_trans_aec[OF assms] spr_trans_cec[OF assms]"], ["proof (prove)\nusing this:\n  set (local.spr_trans (fst ec) (snd ec)) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n  set (local.spr_trans (fst ec) (fst ec)) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = (tFirst t', s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     toSet aec' =\n     Restr (rel_ext (envObs_rel (envObs a)))\n      (set (local.spr_trans (fst ec) (snd ec))) ``\n     {(tFirst t', s)};\n     cec' =\n     ODList.filter\n      (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n      (fromList (local.spr_trans (fst ec) (fst ec)))\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              x \\<in> set (local.spr_trans (fst ec) (fst ec)) \\<and>\n              envObsC (es (snd x)) =\n              spr_simObsC envObsC aec')\\<rparr> \\<and>\n    envObs a s' = envObs a s \\<and>\n    (tFirst t', s) \\<in> set (local.spr_trans (fst ec) (snd ec)) \\<and>\n    (sa, s') \\<in> set (local.spr_trans (fst ec) (snd ec)))", "apply (clarsimp simp: spr_sim_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC;\n        spr_jview a xa = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xa =\n                         rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) =\n                              spr_simObsC envObsC aec') \\<and>\n                         envObs a (tLast xa) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             tFirst xa = tFirst t' \\<and>\n                             t' \\<leadsto> tLast xa \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)", "apply (cut_tac aec=aec' and t=t' and s=s in spr_simObsC[where a=a])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC;\n        spr_jview a xa = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpC\n 2. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC;\n        spr_jview a xa = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> toSet aec' =\n                         Restr (rel_ext (envObs_rel (envObs a)))\n                          (?X85 xa) ``\n                         {(tFirst t', s)}\n 3. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC;\n        spr_jview a xa = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> ?X85 xa =\n                         rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>t'a s.\n                                 uu_ = (tFirst t'a, s) \\<and>\n                                 t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                 spr_jview a t'a = spr_jview a t')\n 4. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter\n         (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC aec')\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC; spr_jview a xa = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xa =\n                         rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) =\n                              spr_simObsC envObsC aec') \\<and>\n                         envObs a (tLast xa) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             tFirst xa = tFirst t' \\<and>\n                             t' \\<leadsto> tLast xa \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC; spr_jview a xa = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xa =\n                         rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s)) \\<and>\n                         envObs a (tLast xa) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             tFirst xa = tFirst t' \\<and>\n                             t' \\<leadsto> tLast xa \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        xa \\<in> SPR.jkbpC; spr_jview a xa = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        \\<exists>t'' s'. xa = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs xa =\n                         rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s)) \\<and>\n                         envObs a (tLast xa) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             tFirst xa = tFirst t' \\<and>\n                             t' \\<leadsto> tLast xa \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tObsC_abs (t'' \\<leadsto> s') =\n                         rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s)) \\<and>\n                         envObs a s' = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             tFirst t'' = tFirst t' \\<and>\n                             t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)", "apply safe"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' s.\n                            (aa, b) = (tFirst t', s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (clarsimp simp: tObsC_abs_conv)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s); t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (case_tac t'a)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t'' s' t'a x1.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s); t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC (t'' \\<leadsto> s'); t'a = tInit x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' t'a x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s); t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC (t'' \\<leadsto> s');\n        t'a = x21 \\<leadsto> x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 4. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 7. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' t'a x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s); t'a \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC (t'' \\<leadsto> s');\n        t'a = x21 \\<leadsto> x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' x21 x22.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        x21 \\<leadsto> x22 \\<in> SPR.jkbpC;\n        tObsC (x21 \\<leadsto> x22) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst x21 = tFirst t' \\<and>\n                            t' \\<leadsto> x22 \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (rename_tac Trace State)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' Trace State.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        Trace \\<leadsto> State \\<in> SPR.jkbpC;\n        tObsC (Trace \\<leadsto> State) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst Trace = tFirst t' \\<and>\n                            t' \\<leadsto> State \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (rule_tac x=\"Trace\" in exI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' Trace State.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        Trace \\<leadsto> State \\<in> SPR.jkbpC;\n        tObsC (Trace \\<leadsto> State) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tFirst Trace = tFirst Trace \\<and>\n                         Trace \\<leadsto> State \\<in> SPR.jkbpC \\<and>\n                         tObsC Trace = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (drule spr_jview_prefix_closed)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' Trace State.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        Trace \\<leadsto> State \\<in> SPR.jkbpC;\n        tObsC (Trace \\<leadsto> State) = tObsC (t'' \\<leadsto> s');\n        spr_jview a t'' = spr_jview a t'\\<rbrakk>\n       \\<Longrightarrow> tFirst Trace = tFirst Trace \\<and>\n                         Trace \\<leadsto> State \\<in> SPR.jkbpC \\<and>\n                         tObsC Trace = tObsC t\n 2. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (auto dest: spr_jview_tObsC simp: tObsC_def)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' aa b.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        (aa, b) \\<in> tObsC_abs (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (snd (aa, b))) = envObsC (es s)\n 2. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (auto simp: spr_jview_def Let_def envObs_def_raw)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        t'a \\<leadsto> sa \\<in> SPR.jkbpC; tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'a, sa)\n                         \\<in> tObsC_abs (t'' \\<leadsto> s')\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (erule_tac t'=\"t'a \\<leadsto> sa\" in tObsC_absI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'a = tFirst (t'a \\<leadsto> sa)\n 3. \\<And>t'' s' aa b t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es (snd (tFirst t'a, sa))) = envObsC (es s);\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> sa = tLast (t'a \\<leadsto> sa)\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 5. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 6. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (drule spr_jview_tObsC[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'a = tObsC t;\n        tObsC t = tObsC t'\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (frule spr_jview_prefix_closed)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s);\n        envObsC (es sa) = envObsC (es s); tObsC t'a = tObsC t;\n        tObsC t = tObsC t'; spr_jview a t'' = spr_jview a t'\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 4. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (auto dest: spr_jview_tObsC simp: tObsC_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> envObs a s' = envObs a s\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 3. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (simp add: spr_jview_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            tFirst t' = tFirst t'a \\<and>\n                            t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t'a = spr_jview a t\n 2. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t", "apply (rule_tac x=\"t''\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        spr_simObsC envObsC aec' = envObsC (es s)\\<rbrakk>\n       \\<Longrightarrow> tFirst t'' = tFirst t'' \\<and>\n                         t'' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t'' = spr_jview a t", "apply (drule spr_jview_prefix_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        toSet aec' =\n        Restr (rel_ext (envObs_rel (envObs a)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)) ``\n        {(tFirst t', s)};\n        cec' =\n        ODList.filter (\\<lambda>sa. envObsC (es (snd sa)) = envObsC (es s))\n         (fromList (local.spr_trans (fst ec) (fst ec)));\n        set (local.spr_trans (fst ec) (snd ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                spr_jview a t' = spr_jview a t);\n        set (local.spr_trans (fst ec) (fst ec)) =\n        rel_ext\n         (\\<lambda>uu_.\n             \\<exists>t' s.\n                uu_ = (tFirst t', s) \\<and>\n                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_simObsC envObsC aec' = envObsC (es s);\n        spr_jview a t'' = spr_jview a t'\\<rbrakk>\n       \\<Longrightarrow> tFirst t'' = tFirst t'' \\<and>\n                         t'' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t'' = spr_jview a t", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_simAbs (cec', aec') = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t)", "with xrx rxp t'sC tt'"], ["proof (chain)\npicking this:\n  x = spr_simAbs rx\n  rx = (cec', aec')\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  spr_simAbs (cec', aec') = SPRdet.sim_equiv_class a (t' \\<leadsto> s)", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  x = spr_simAbs rx\n  rx = (cec', aec')\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  spr_simAbs (cec', aec') = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    spr_jview a t' = spr_jview a t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     spr_simAbs (cec', aec') =\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t'a sa.\n                         SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                         SPRdet.sim_equiv_class a (t'a \\<leadsto> sa) \\<and>\n                         t'a \\<leadsto> sa \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t'a = spr_jview a t", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     spr_simAbs (cec', aec') =\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sa.\n                         SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                         SPRdet.sim_equiv_class a (t' \\<leadsto> sa) \\<and>\n                         t' \\<leadsto> sa \\<in> SPR.jkbpC \\<and>\n                         spr_jview a t' = spr_jview a t", "apply (rule_tac x=s in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx = (cec', aec'); t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     spr_simAbs (cec', aec') =\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview a t' = spr_jview a t", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  spr_simAbs ` set (local.spr_simTrans a ec)\n  \\<subseteq> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ =\n                      SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)", "note image_cong_simp [cong del]"], ["proof (state)\nthis:\n  \\<lbrakk>?M = ?N; \\<And>x. x \\<in> ?N =simp=> ?f x = ?g x\\<rbrakk>\n  \\<Longrightarrow> ?f ` ?M = ?g ` ?N\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)\n    \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "assume x: \"x \\<in> ?rhs\""], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "then"], ["proof (chain)\npicking this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)", "obtain t' s\n      where t'sC: \"t' \\<leadsto> s \\<in> SPR.jkbpC\"\n        and tt': \"spr_jview a t' = spr_jview a t\"\n        and xt's: \"x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\""], ["proof (prove)\nusing this:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. (\\<And>t' s.\n        \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview a t' = spr_jview a t;\n         x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "then"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)", "have \"(\\<lambda>s. (sprFst s, sprLst s)) ` x \\<in> set ` set (partition (envObs_rel (envObs a)) (spr_trans (fst ec) (snd ec)))\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. (sprFst s, sprLst s)) ` x\n    \\<in> set `\n          set (List_local.partition (envObs_rel (envObs a))\n                (local.spr_trans (fst ec) (snd ec)))", "apply (simp add: partition[OF envObs_rel_equiv] spr_trans_aec[OF assms] spr_sim_def [abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>s. (sprFst s, sprLst s)) `\n                      (\\<lambda>t.\n                          \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                             sprCRel = tObsC_abs t\\<rparr>) `\n                      rel_ext\n                       (\\<lambda>t'a.\n                           t'a \\<in> SPR.jkbpC \\<and>\n                           spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\n                      \\<in> rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t' s.\n                                    uu_ = (tFirst t', s) \\<and>\n                                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t' = spr_jview a t) //\n                            Restr (rel_ext (envObs_rel (envObs a)))\n                             (rel_ext\n                               (\\<lambda>uu_.\n                                   \\<exists>t' s.\nuu_ = (tFirst t', s) \\<and>\nt' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t))", "apply (rule_tac x=\"(tFirst t', s)\" in quotientI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (tFirst t', s)\n                      \\<in> rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t' s.\n                                    uu_ = (tFirst t', s) \\<and>\n                                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t' = spr_jview a t)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>s. (sprFst s, sprLst s)) `\n                      (\\<lambda>t.\n                          \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                             sprCRel = tObsC_abs t\\<rparr>) `\n                      rel_ext\n                       (\\<lambda>t'a.\n                           t'a \\<in> SPR.jkbpC \\<and>\n                           spr_jview a t'a =\n                           spr_jview a (t' \\<leadsto> s)) =\n                      Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>s. (sprFst s, sprLst s)) `\n                      (\\<lambda>t.\n                          \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                             sprCRel = tObsC_abs t\\<rparr>) `\n                      rel_ext\n                       (\\<lambda>t'a.\n                           t'a \\<in> SPR.jkbpC \\<and>\n                           spr_jview a t'a =\n                           spr_jview a (t' \\<leadsto> s)) =\n                      Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}", "apply (auto dest: spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst ta = tFirst t' \\<and>\n                            t' \\<leadsto> tLast ta \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst ta = tFirst t' \\<and>\n                            t' \\<leadsto> tLast ta \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') =\n        spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_prefix_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a t'' = spr_jview a t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'' = tFirst t' \\<and>\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview a t' = spr_jview a t\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=\"\\<lparr>sprFst = tFirst t'aa, sprLst = sa, sprCRel = tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa) =\n                         (sprFst\n                           \\<lparr>sprFst = tFirst t'aa, sprLst = sa,\n                              sprCRel =\n                                tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>,\n                          sprLst\n                           \\<lparr>sprFst = tFirst t'aa, sprLst = sa,\n                              sprCRel =\n                                tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>)\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = sa,\n                            sprCRel = tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>\n                         \\<in> (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = sa,\n                            sprCRel = tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>\n                         \\<in> (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=\"t'aa \\<leadsto> sa\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst t'aa, sprLst = sa,\n                            sprCRel =\n                              tObsC_abs (t'aa \\<leadsto> sa)\\<rparr> =\n                         \\<lparr>sprFst = tFirst (t'aa \\<leadsto> sa),\n                            sprLst = tLast (t'aa \\<leadsto> sa),\n                            sprCRel = tObsC_abs (t'aa \\<leadsto> sa)\\<rparr>\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> sa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> sa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (simp add: spr_jview_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>s. (sprFst s, sprLst s)) ` x\n  \\<in> set `\n        set (List_local.partition (envObs_rel (envObs a))\n              (local.spr_trans (fst ec) (snd ec)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>s. (sprFst s, sprLst s)) ` x\n  \\<in> set `\n        set (List_local.partition (envObs_rel (envObs a))\n              (local.spr_trans (fst ec) (snd ec)))", "obtain rx\n      where \"rx \\<in> set (partition (envObs_rel (envObs a)) (spr_trans (fst ec) (snd ec)))\"\n        and \"set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x\""], ["proof (prove)\nusing this:\n  (\\<lambda>s. (sprFst s, sprLst s)) ` x\n  \\<in> set `\n        set (List_local.partition (envObs_rel (envObs a))\n              (local.spr_trans (fst ec) (snd ec)))\n\ngoal (1 subgoal):\n 1. (\\<And>rx.\n        \\<lbrakk>rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                                (local.spr_trans (fst ec) (snd ec)));\n         set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                 (local.spr_trans (fst ec) (snd ec)))\n  set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ =\n                       SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview a t' = spr_jview a t) \\<Longrightarrow>\n       x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "with t'sC tt' xt's"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n  rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                 (local.spr_trans (fst ec) (snd ec)))\n  set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x", "show \"x \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n  rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                 (local.spr_trans (fst ec) (snd ec)))\n  set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x\n\ngoal (1 subgoal):\n 1. x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)", "unfolding spr_simTrans_def"], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview a t' = spr_jview a t\n  x = SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n  rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                 (local.spr_trans (fst ec) (snd ec)))\n  set rx = (\\<lambda>s. (sprFst s, sprLst s)) ` x\n\ngoal (1 subgoal):\n 1. x \\<in> spr_simAbs `\n            set (let aSuccs = local.spr_trans (fst ec) (snd ec);\n                     cec' = fromList (local.spr_trans (fst ec) (fst ec))\n                 in map (\\<lambda>aec'.\n                            (ODList.filter\n                              (\\<lambda>s.\n                                  envObsC (es (snd s)) =\n                                  spr_simObsC envObsC aec')\n                              cec',\n                             aec'))\n                     (map fromList\n                       (List_local.partition (envObs_rel (envObs a))\n                         aSuccs)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<in> spr_simAbs `\n                            ((\\<lambda>aec'.\n                                 (ODList.filter\n                                   (\\<lambda>s.\n envObsC (es (snd s)) = spr_simObsC envObsC aec')\n                                   (fromList\n                                     (local.spr_trans (fst ec) (fst ec))),\n                                  aec')) \\<circ>\n                             fromList) `\n                            set (List_local.partition\n                                  (envObs_rel (envObs a))\n                                  (local.spr_trans (fst ec) (snd ec)))", "apply (rule_tac x=\"(ODList.filter (\\<lambda>s. envObsC (es (snd s)) = spr_simObsC envObsC (fromList rx)) (fromList (spr_trans (fst ec) (fst ec))), fromList rx)\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>s.\n                             envObsC (es (snd s)) =\n                             spr_simObsC envObsC (fromList rx))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> (ODList.filter\n                        (\\<lambda>s.\n                            envObsC (es (snd s)) =\n                            spr_simObsC envObsC (fromList rx))\n                        (fromList (local.spr_trans (fst ec) (fst ec))),\n                       fromList rx)\n                      \\<in> ((\\<lambda>aec'.\n                                 (ODList.filter\n                                   (\\<lambda>s.\n envObsC (es (snd s)) = spr_simObsC envObsC aec')\n                                   (fromList\n                                     (local.spr_trans (fst ec) (fst ec))),\n                                  aec')) \\<circ>\n                             fromList) `\n                            set (List_local.partition\n                                  (envObs_rel (envObs a))\n                                  (local.spr_trans (fst ec) (snd ec)))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> (ODList.filter\n                        (\\<lambda>s.\n                            envObsC (es (snd s)) =\n                            spr_simObsC envObsC (fromList rx))\n                        (fromList (local.spr_trans (fst ec) (fst ec))),\n                       fromList rx)\n                      \\<in> ((\\<lambda>aec'.\n                                 (ODList.filter\n                                   (\\<lambda>s.\n envObsC (es (snd s)) = spr_simObsC envObsC aec')\n                                   (fromList\n                                     (local.spr_trans (fst ec) (fst ec))),\n                                  aec')) \\<circ>\n                             fromList) `\n                            set (List_local.partition\n                                  (envObs_rel (envObs a))\n                                  (local.spr_trans (fst ec) (snd ec)))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>s.\n                             envObsC (es (snd s)) =\n                             spr_simObsC envObsC (fromList rx))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (rule_tac x=\"rx\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> (ODList.filter\n                        (\\<lambda>s.\n                            envObsC (es (snd s)) =\n                            spr_simObsC envObsC (fromList rx))\n                        (fromList (local.spr_trans (fst ec) (fst ec))),\n                       fromList rx) =\n                      ((\\<lambda>aec'.\n                           (ODList.filter\n                             (\\<lambda>s.\n                                 envObsC (es (snd s)) =\n                                 spr_simObsC envObsC aec')\n                             (fromList (local.spr_trans (fst ec) (fst ec))),\n                            aec')) \\<circ>\n                       fromList)\n                       rx\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> rx \\<in> set (List_local.partition\n                                     (envObs_rel (envObs a))\n                                     (local.spr_trans (fst ec) (snd ec)))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>s.\n                             envObsC (es (snd s)) =\n                             spr_simObsC envObsC (fromList rx))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> rx \\<in> set (List_local.partition\n                                     (envObs_rel (envObs a))\n                                     (local.spr_trans (fst ec) (snd ec)))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>s.\n                             envObsC (es (snd s)) =\n                             spr_simObsC envObsC (fromList rx))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>s.\n                             envObsC (es (snd s)) =\n                             spr_simObsC envObsC (fromList rx))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (subst spr_simObsC[where a=a and t=t' and s=s, OF _ _ refl])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpC\n 2. \\<And>sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> toSet (fromList rx) =\n                         Restr (rel_ext (envObs_rel (envObs a)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'a s.\n                                   uu_ = (tFirst t'a, s) \\<and>\n                                   t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                   spr_jview a t'a = spr_jview a t')) ``\n                         {(tFirst t', s)}\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>s. (sprFst s, sprLst s)) `\n                      SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>s. (sprFst s, sprLst s)) `\n                      SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n                      \\<subseteq> Restr (rel_ext (envObs_rel (envObs a)))\n                                   (rel_ext\n                                     (\\<lambda>uu_.\n   \\<exists>t' s.\n      uu_ = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n      spr_jview a t' = spr_jview a t)) ``\n                                  {(tFirst t', s)}\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}\n                      \\<subseteq> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                  SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        xa \\<in> SPR.jkbpC;\n        spr_jview a xa = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> envObs a (sprLst (spr_sim xa)) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             sprFst (spr_sim xa) = tFirst t' \\<and>\n                             t' \\<leadsto> sprLst (spr_sim xa)\n                             \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}\n                      \\<subseteq> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                  SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        xa \\<in> SPR.jkbpC; spr_jview a xa = spr_jview a (t' \\<leadsto> s);\n        \\<exists>t'' s'. xa = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> envObs a (sprLst (spr_sim xa)) = envObs a s \\<and>\n                         (\\<exists>t'a.\n                             tFirst t' = tFirst t'a \\<and>\n                             t'a \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t'a = spr_jview a t) \\<and>\n                         (\\<exists>t'.\n                             sprFst (spr_sim xa) = tFirst t' \\<and>\n                             t' \\<leadsto> sprLst (spr_sim xa)\n                             \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}\n                      \\<subseteq> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                  SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (auto simp: spr_jview_def spr_sim_def [abs_def])[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs a)))\n                       (rel_ext\n                         (\\<lambda>uu_.\n                             \\<exists>t' s.\n                                uu_ = (tFirst t', s) \\<and>\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview a t' = spr_jview a t)) ``\n                      {(tFirst t', s)}\n                      \\<subseteq> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                  SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (rule_tac x=\"spr_sim (t'aa \\<leadsto> sa)\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> (tFirst t'aa, sa) =\n                         (sprFst (spr_sim (t'aa \\<leadsto> sa)),\n                          sprLst (spr_sim (t'aa \\<leadsto> sa)))\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_sim (t'aa \\<leadsto> sa)\n                         \\<in> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (simp add: spr_sim_def [abs_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_sim (t'aa \\<leadsto> sa)\n                         \\<in> SPRdet.sim_equiv_class a (t' \\<leadsto> s)\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (rule_tac x=\"t'aa \\<leadsto> sa\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> spr_sim (t'aa \\<leadsto> sa) =\n                         spr_sim (t'aa \\<leadsto> sa)\n 2. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> sa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'aa sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n        envObs a sa = envObs a s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t'a = spr_jview a t; tFirst t' = tFirst t'a;\n        t'aa \\<leadsto> sa \\<in> SPR.jkbpC;\n        spr_jview a t'aa = spr_jview a t\\<rbrakk>\n       \\<Longrightarrow> t'aa \\<leadsto> sa\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (simp add: spr_jview_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x = SPRdet.sim_equiv_class a (t' \\<leadsto> s);\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     SPRdet.sim_equiv_class a (t' \\<leadsto> s)\\<rbrakk>\n    \\<Longrightarrow> SPRdet.sim_equiv_class a (t' \\<leadsto> s) =\n                      spr_simAbs\n                       (ODList.filter\n                         (\\<lambda>sa.\n                             envObsC (es (snd sa)) = envObsC (es s))\n                         (fromList (local.spr_trans (fst ec) (fst ec))),\n                        fromList rx)", "apply (clarsimp simp: spr_trans_cec[OF assms] spr_sim_def [abs_def] spr_simAbs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>t.\n                          \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                             sprCRel = tObsC_abs t\\<rparr>) `\n                      rel_ext\n                       (\\<lambda>t'a.\n                           t'a \\<in> SPR.jkbpC \\<and>\n                           spr_jview a t'a =\n                           spr_jview a (t' \\<leadsto> s)) =\n                      rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>t.\n                          \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                             sprCRel = tObsC_abs t\\<rparr>) `\n                      rel_ext\n                       (\\<lambda>t'a.\n                           t'a \\<in> SPR.jkbpC \\<and>\n                           spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\n                      \\<subseteq> rel_ext\n                                   (\\<lambda>uu_.\n \\<exists>sa s'.\n    uu_ =\n    \\<lparr>sprFst = sa, sprLst = s',\n       sprCRel =\n         rel_ext\n          (\\<lambda>x.\n              (\\<exists>t' s.\n                  x = (tFirst t', s) \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  tObsC t' = tObsC t) \\<and>\n              envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n    (sa, s')\n    \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n          (\\<lambda>t.\n              \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                 sprCRel = tObsC_abs t\\<rparr>) `\n          rel_ext\n           (\\<lambda>t'a.\n               t'a \\<in> SPR.jkbpC \\<and>\n               spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (auto iff: tObsC_abs_conv)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule tObsC_tStep_eq_inv)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s');\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_prefix_closed)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        spr_jview a t'' = spr_jview a t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        spr_jview a t'' = spr_jview a t'; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC t' = tObsC t; tObsC t'' = tObsC t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule tObsC_prefix_closed)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC; tObsC t' = tObsC t;\n        tObsC t'' = tObsC t'; tObsC t''a = tObsC t''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=t''a in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC; tObsC t' = tObsC t;\n        tObsC t'' = tObsC t'; tObsC t''a = tObsC t''\\<rbrakk>\n       \\<Longrightarrow> tFirst t''a = tFirst t''a \\<and>\n                         t''a \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                         tObsC t''a = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 3. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 4. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 5. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule tObsC_tStep_eq_inv)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s');\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC (t'' \\<leadsto> s') = tObsC (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)\n 2. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 3. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 4. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC ta \\<and>\n                            tFirst t'a = tFirst t' \\<and> sa = tLast t'\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=\"t'a \\<leadsto> sa\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> sa \\<in> SPR.jkbpC \\<and>\n                         tObsC (t'a \\<leadsto> sa) = tObsC ta \\<and>\n                         tFirst t'a = tFirst (t'a \\<leadsto> sa) \\<and>\n                         sa = tLast (t'a \\<leadsto> sa)\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) = tObsC ta\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) = tObsC ta\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (frule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tObsC t' = tObsC t;\n        tObsC (t'' \\<leadsto> s') = tObsC (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta)\n                         \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                               (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=\"spr_sim ta\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (tFirst ta, tLast ta) =\n                         (sprFst (spr_sim ta), sprLst (spr_sim ta))\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_sim ta\n                         \\<in> (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (simp add: spr_sim_def [abs_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_sim ta\n                         \\<in> (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=ta in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_sim ta =\n                         \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel = tObsC_abs ta\\<rparr>\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> ta \\<in> rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\n 3. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply (simp add: spr_sim_def [abs_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> ta \\<in> rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\n 2. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n     spr_jview a t' = spr_jview a t;\n     x =\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n     rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                    (local.spr_trans (fst ec) (snd ec)));\n     set rx =\n     (\\<lambda>s. (sprFst s, sprLst s)) `\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>) `\n     rel_ext\n      (\\<lambda>t'a.\n          t'a \\<in> SPR.jkbpC \\<and>\n          spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\\<rbrakk>\n    \\<Longrightarrow> rel_ext\n                       (\\<lambda>uu_.\n                           \\<exists>sa s'.\n                              uu_ =\n                              \\<lparr>sprFst = sa, sprLst = s',\n                                 sprCRel =\n                                   rel_ext\n                                    (\\<lambda>x.\n  (\\<exists>t' s.\n      x = (tFirst t', s) \\<and>\n      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n  envObsC (es (snd x)) = envObsC (es s))\\<rparr> \\<and>\n                              (sa, s')\n                              \\<in> (\\<lambda>s. (sprFst s, sprLst s)) `\n                                    (\\<lambda>t.\n  \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n     sprCRel = tObsC_abs t\\<rparr>) `\n                                    rel_ext\n                                     (\\<lambda>t'a.\n   t'a \\<in> SPR.jkbpC \\<and>\n   spr_jview a t'a = spr_jview a (t' \\<leadsto> s)))\n                      \\<subseteq> (\\<lambda>t.\n\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n   sprCRel = tObsC_abs t\\<rparr>) `\n                                  rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   envObsC (es s))\\<rparr>\n                         \\<in> (\\<lambda>t.\n                                   \\<lparr>sprFst = tFirst t,\nsprLst = tLast t, sprCRel = tObsC_abs t\\<rparr>) `\n                               rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview a t'a =\n                                    spr_jview a (t' \\<leadsto> s))", "apply (rule_tac x=ta in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   envObsC (es s))\\<rparr> =\n                         \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel = tObsC_abs ta\\<rparr>\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> ta \\<in> rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> ta \\<in> rel_ext\n                                   (\\<lambda>t'a.\n t'a \\<in> SPR.jkbpC \\<and> spr_jview a t'a = spr_jview a (t' \\<leadsto> s))\n 2. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   envObsC (es s))\\<rparr> =\n                         \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel = tObsC_abs ta\\<rparr>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel = tObsC_abs t\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel =\n                              rel_ext\n                               (\\<lambda>x.\n                                   (\\<exists>t' s.\n x = (tFirst t', s) \\<and>\n t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t) \\<and>\n                                   envObsC (es (snd x)) =\n                                   envObsC (es s))\\<rparr> =\n                         \\<lparr>sprFst = tFirst ta, sprLst = tLast ta,\n                            sprCRel = tObsC_abs ta\\<rparr>", "apply (clarsimp simp: tObsC_abs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC;\n        spr_jview a ta = spr_jview a (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>x.\n                              (\\<exists>t' s.\n                                  x = (tFirst t', s) \\<and>\n                                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                  tObsC t' = tObsC t) \\<and>\n                              envObsC (es (snd x)) = envObsC (es s)) =\n                         rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>t'.\n                                 uu_ = (tFirst t', tLast t') \\<and>\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 tObsC t' = tObsC ta)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            sa = tLast t' \\<and>\n                            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC ta\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (rule_tac x=\"t'a \\<leadsto> sa\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t'a = tFirst (t'a \\<leadsto> sa) \\<and>\n                         sa = tLast (t'a \\<leadsto> sa) \\<and>\n                         t'a \\<leadsto> sa \\<in> SPR.jkbpC \\<and>\n                         tObsC (t'a \\<leadsto> sa) = tObsC ta\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) = tObsC ta\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ta t'a sa.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) = tObsC ta\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule spr_jview_tObsC)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t'a sa t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        envObsC (es sa) = envObsC (es s); t'a \\<leadsto> sa \\<in> SPR.jkbpC;\n        tObsC t'a = tObsC t; tObsC t' = tObsC t;\n        tObsC (t'' \\<leadsto> s') = tObsC (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> tObsC (t'a \\<leadsto> sa) =\n                         tObsC (t'' \\<leadsto> s')\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 3. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule tObsC_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s');\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t'a = tFirst t' \\<and>\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            tFirst t''a = tFirst t' \\<and>\n                            t' \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                            tObsC t' = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (rule_tac x=\"t''a\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> tFirst t''a = tFirst t''a \\<and>\n                         t''a \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                         tObsC t''a = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> tFirst t''a = tFirst t''a \\<and>\n                         t''a \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                         tObsC t''a = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule spr_jview_tObsC)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC t' = tObsC t;\n        tObsC (t'' \\<leadsto> s') = tObsC (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> tFirst t''a = tFirst t''a \\<and>\n                         t''a \\<leadsto> s'a \\<in> SPR.jkbpC \\<and>\n                         tObsC t''a = tObsC t\n 2. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta t'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        ta \\<in> SPR.jkbpC; spr_jview a ta = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC ta;\n        \\<exists>t'' s'. ta = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply (frule tObsC_tStep_eq_inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'a t'' s'.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t'a \\<in> SPR.jkbpC; tObsC t'a = tObsC (t'' \\<leadsto> s');\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> envObsC (es (tLast t'a)) = envObsC (es s)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)", "apply (drule spr_jview_tObsC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview a (t'' \\<leadsto> s') = spr_jview a (t' \\<leadsto> s);\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC t' = tObsC t\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t'' s' t''a s'a.\n       \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview a t' = spr_jview a t;\n        x =\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        rx \\<in> set (List_local.partition (envObs_rel (envObs a))\n                       (local.spr_trans (fst ec) (snd ec)));\n        set rx =\n        (\\<lambda>s. (sprFst s, sprLst s)) `\n        (\\<lambda>t.\n            \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n               sprCRel =\n                 rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         uu_ = (tFirst t', tLast t') \\<and>\n                         t' \\<in> SPR.jkbpC \\<and>\n                         tObsC t' = tObsC t)\\<rparr>) `\n        rel_ext\n         (\\<lambda>t'a.\n             t'a \\<in> SPR.jkbpC \\<and>\n             spr_jview a t'a = spr_jview a (t' \\<leadsto> s));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        t''a \\<leadsto> s'a \\<in> SPR.jkbpC;\n        tObsC (t''a \\<leadsto> s'a) = tObsC (t'' \\<leadsto> s');\n        tObsC (t'' \\<leadsto> s') = tObsC (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> envObsC (es s'a) = envObsC (es s)", "apply (simp add: tObsC_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> spr_simAbs ` set (local.spr_simTrans a ec)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n  \\<subseteq> spr_simAbs ` set (local.spr_simTrans a ec)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe explicit-state approach sketched above is quite inefficient, and\nalso some distance from the symbolic techniques we use in\n\\S\\ref{sec:kbps-prag-algorithmics}. However it does suffice to\ndemonstrate the theory on the muddy children example in\n\\S\\ref{sec:kbps-theory-mc}.\n\n\\<close>"], ["", "end"], ["", "(* context FiniteDetBroadcastEnvironment *)"], ["", "subsubsection\\<open>Maps\\<close>"], ["", "text\\<open>\n\nAs always we use a pair of tries. The domain of these maps is the pair\nof relations.\n\n\\<close>"], ["", "type_synonym ('a, 'es, 'obs, 'as) trans_trie\n    = \"(('a, 'es, 'as) BEState,\n        (('a, 'es, 'as) BEState,\n          (('a, 'es, 'as) BEState,\n           (('a, 'es, 'as) BEState,\n            ('obs, ('a, 'es, 'as) spr_simWorldsRep) mapping) trie) trie) trie) trie\""], ["", "type_synonym\n  ('a, 'es, 'aAct, 'as) acts_trie\n    = \"(('a, 'es, 'as) BEState,\n        (('a, 'es, 'as) BEState,\n          (('a, 'es, 'as) BEState,\n           (('a, 'es, 'as) BEState, 'aAct) trie) trie) trie) trie\""], ["", "(*<*)"], ["", "definition\n  trans_MapOps_lookup :: \"('a :: linorder, 'es :: linorder, 'obs, 'as :: linorder) trans_trie\n                        \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep \\<times> 'obs\n                        \\<rightharpoonup> ('a, 'es, 'as) spr_simWorldsRep\"\nwhere\n  \"trans_MapOps_lookup \\<equiv> \\<lambda>m ((cec, aec), obs).\n     Option.bind (lookup_trie m (map fst (toList cec)))\n      (\\<lambda>m. Option.bind (lookup_trie m (map snd (toList cec)))\n       (\\<lambda>m. Option.bind (lookup_trie m (map fst (toList aec)))\n        (\\<lambda>m. Option.bind (lookup_trie m (map snd (toList aec)))\n         (\\<lambda>m. Mapping.lookup m obs))))\""], ["", "definition\n  trans_MapOps_update :: \"('a, 'es, 'as) spr_simWorldsRep \\<times> 'obs\n                        \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep\n                        \\<Rightarrow> ('a :: linorder, 'es :: linorder, 'obs, 'as :: linorder) trans_trie\n                        \\<Rightarrow> ('a, 'es, 'obs, 'as) trans_trie\"\nwhere\n  \"trans_MapOps_update \\<equiv> \\<lambda>((cec, aec), obs) v m.\n     trie_update_with' (map fst (toList cec)) m empty_trie\n      (\\<lambda>m. trie_update_with' (map snd (toList cec)) m empty_trie\n       (\\<lambda>m. trie_update_with' (map fst (toList aec)) m empty_trie\n        (\\<lambda>m. trie_update_with' (map snd (toList aec)) m Mapping.empty\n         (\\<lambda>m. Mapping.update obs v m))))\""], ["", "definition\n  trans_MapOps :: \"(('a :: linorder, 'es :: linorder, 'obs, 'as :: linorder) trans_trie,\n                    ('a, 'es, 'as) spr_simWorldsRep \\<times> 'obs,\n                    ('a, 'es, 'as) spr_simWorldsRep) MapOps\"\nwhere\n  \"trans_MapOps \\<equiv>\n     \\<lparr> MapOps.empty = empty_trie,\n       lookup = trans_MapOps_lookup,\n       update = trans_MapOps_update \\<rparr>\""], ["", "lemma (in FiniteDetBroadcastEnvironment) trans_MapOps[intro, simp]:\n  \"MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k)) (SPRdet.jkbpSEC \\<times> UNIV) trans_MapOps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       (spr_simAbs (fst k), snd k)\n       \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n             UNIV \\<Longrightarrow>\n       MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       (spr_simAbs (fst k), snd k)\n       \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n             UNIV \\<Longrightarrow>\n       MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "show \"MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None", "unfolding trans_MapOps_def trans_MapOps_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m ((cec, aec), obs).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            Option.bind\n                             (lookup_trie m (map snd (toList aec)))\n                             (\\<lambda>m. Mapping.lookup m obs)))),\n        update = trans_MapOps_update\\<rparr>\n     (MapOps.empty\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m ((cec, aec), obs).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              Option.bind\n                               (lookup_trie m (map snd (toList aec)))\n                               (\\<lambda>m. Mapping.lookup m obs)))),\n          update = trans_MapOps_update\\<rparr>)\n     k =\n    None", "by (auto split: prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "fix e k k' M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "assume k: \"(spr_simAbs (fst k), snd k) \\<in> SPRdet.jkbpSEC \\<times> (UNIV :: 'z set)\"\n     and k': \"(spr_simAbs (fst k'), snd k') \\<in> SPRdet.jkbpSEC \\<times> (UNIV :: 'z set)\""], ["proof (state)\nthis:\n  (spr_simAbs (fst k), snd k)\n  \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n  (spr_simAbs (fst k'), snd k')\n  \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "show \"MapOps.lookup trans_MapOps (MapOps.update trans_MapOps k e M) k'\n         = (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n             then Some e else MapOps.lookup trans_MapOps M k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "proof(cases \"(spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "case True"], ["proof (state)\nthis:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "hence \"k = k'\""], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. k = k'", "using inj_onD[OF spr_simAbs_inj_on] k k'"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n  \\<lbrakk>spr_simAbs ?x = spr_simAbs ?y;\n   ?x \\<in> rel_ext\n             (\\<lambda>x.\n                 spr_simAbs x\n                 \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC));\n   ?y \\<in> rel_ext\n             (\\<lambda>x.\n                 spr_simAbs x\n                 \\<in> (\\<Union>a.\n                           SPRdet.sim_equiv_class a ` SPR.jkbpC))\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n  (spr_simAbs (fst k), snd k)\n  \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n  (spr_simAbs (fst k'), snd k')\n  \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n\ngoal (1 subgoal):\n 1. k = k'", "by (auto iff: prod_eqI)"], ["proof (state)\nthis:\n  k = k'\n\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "unfolding trans_MapOps_def trans_MapOps_lookup_def trans_MapOps_update_def"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m ((cec, aec), obs).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            Option.bind\n                             (lookup_trie m (map snd (toList aec)))\n                             (\\<lambda>m. Mapping.lookup m obs)))),\n        update =\n          \\<lambda>((cec, aec), obs) v m.\n             trie_update_with' (map fst (toList cec)) m empty_trie\n              (\\<lambda>m.\n                  trie_update_with' (map snd (toList cec)) m empty_trie\n                   (\\<lambda>m.\n                       trie_update_with' (map fst (toList aec)) m empty_trie\n                        (\\<lambda>m.\n                            trie_update_with' (map snd (toList aec)) m\n                             Mapping.empty (Mapping.update obs v))))\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m ((cec, aec), obs).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              Option.bind\n                               (lookup_trie m (map snd (toList aec)))\n                               (\\<lambda>m. Mapping.lookup m obs)))),\n          update =\n            \\<lambda>((cec, aec), obs) v m.\n               trie_update_with' (map fst (toList cec)) m empty_trie\n                (\\<lambda>m.\n                    trie_update_with' (map snd (toList cec)) m empty_trie\n                     (\\<lambda>m.\n                         trie_update_with' (map fst (toList aec)) m\n                          empty_trie\n                          (\\<lambda>m.\n                              trie_update_with' (map snd (toList aec)) m\n                               Mapping.empty\n                               (Mapping.update obs v))))\\<rparr>\n       k e M)\n     k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m ((cec, aec), obs).\n                   Option.bind (lookup_trie m (map fst (toList cec)))\n                    (\\<lambda>m.\n                        Option.bind (lookup_trie m (map snd (toList cec)))\n                         (\\<lambda>m.\n                             Option.bind\n                              (lookup_trie m (map fst (toList aec)))\n                              (\\<lambda>m.\n                                  Option.bind\n                                   (lookup_trie m (map snd (toList aec)))\n                                   (\\<lambda>m. Mapping.lookup m obs)))),\n              update =\n                \\<lambda>((cec, aec), obs) v m.\n                   trie_update_with' (map fst (toList cec)) m empty_trie\n                    (\\<lambda>m.\n                        trie_update_with' (map snd (toList cec)) m\n                         empty_trie\n                         (\\<lambda>m.\n                             trie_update_with' (map fst (toList aec)) m\n                              empty_trie\n                              (\\<lambda>m.\n                                  trie_update_with' (map snd (toList aec)) m\n                                   Mapping.empty\n                                   (Mapping.update obs v))))\\<rparr>\n           M k')", "by (auto simp: lookup_update lookup_trie_update_with split: option.split prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "have *: \"\\<And> y ya. y \\<noteq> ya \\<Longrightarrow> Mapping.lookup (Mapping.update y e Mapping.empty) ya = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       y \\<noteq> ya \\<Longrightarrow>\n       Mapping.lookup (Mapping.update y e Mapping.empty) ya = None", "by transfer simp"], ["proof (state)\nthis:\n  ?y1 \\<noteq> ?ya1 \\<Longrightarrow>\n  Mapping.lookup (Mapping.update ?y1 e Mapping.empty) ?ya1 = None\n\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "case False"], ["proof (state)\nthis:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "unfolding trans_MapOps_def trans_MapOps_lookup_def trans_MapOps_update_def"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m ((cec, aec), obs).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            Option.bind\n                             (lookup_trie m (map snd (toList aec)))\n                             (\\<lambda>m. Mapping.lookup m obs)))),\n        update =\n          \\<lambda>((cec, aec), obs) v m.\n             trie_update_with' (map fst (toList cec)) m empty_trie\n              (\\<lambda>m.\n                  trie_update_with' (map snd (toList cec)) m empty_trie\n                   (\\<lambda>m.\n                       trie_update_with' (map fst (toList aec)) m empty_trie\n                        (\\<lambda>m.\n                            trie_update_with' (map snd (toList aec)) m\n                             Mapping.empty (Mapping.update obs v))))\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m ((cec, aec), obs).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              Option.bind\n                               (lookup_trie m (map snd (toList aec)))\n                               (\\<lambda>m. Mapping.lookup m obs)))),\n          update =\n            \\<lambda>((cec, aec), obs) v m.\n               trie_update_with' (map fst (toList cec)) m empty_trie\n                (\\<lambda>m.\n                    trie_update_with' (map snd (toList cec)) m empty_trie\n                     (\\<lambda>m.\n                         trie_update_with' (map fst (toList aec)) m\n                          empty_trie\n                          (\\<lambda>m.\n                              trie_update_with' (map snd (toList aec)) m\n                               Mapping.empty\n                               (Mapping.update obs v))))\\<rparr>\n       k e M)\n     k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m ((cec, aec), obs).\n                   Option.bind (lookup_trie m (map fst (toList cec)))\n                    (\\<lambda>m.\n                        Option.bind (lookup_trie m (map snd (toList cec)))\n                         (\\<lambda>m.\n                             Option.bind\n                              (lookup_trie m (map fst (toList aec)))\n                              (\\<lambda>m.\n                                  Option.bind\n                                   (lookup_trie m (map snd (toList aec)))\n                                   (\\<lambda>m. Mapping.lookup m obs)))),\n              update =\n                \\<lambda>((cec, aec), obs) v m.\n                   trie_update_with' (map fst (toList cec)) m empty_trie\n                    (\\<lambda>m.\n                        trie_update_with' (map snd (toList cec)) m\n                         empty_trie\n                         (\\<lambda>m.\n                             trie_update_with' (map fst (toList aec)) m\n                              empty_trie\n                              (\\<lambda>m.\n                                  trie_update_with' (map snd (toList aec)) m\n                                   Mapping.empty\n                                   (Mapping.update obs v))))\\<rparr>\n           M k')", "by (auto dest: map_prod_eq simp: lookup_trie_update_with split: option.split prod.split intro!: lookup_update_neq *)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A map for the agent actions. *)"], ["", "definition\n  acts_MapOps_lookup :: \"('a :: linorder, 'es :: linorder, 'aAct, 'as :: linorder) acts_trie\n                       \\<Rightarrow> ('a, 'es, 'as) spr_simWorldsRep\n                       \\<rightharpoonup> 'aAct\"\nwhere\n  \"acts_MapOps_lookup \\<equiv> \\<lambda>m (cec, aec).\n     Option.bind (lookup_trie m (map fst (toList cec)))\n      (\\<lambda>m. Option.bind (lookup_trie m (map snd (toList cec)))\n       (\\<lambda>m. Option.bind (lookup_trie m (map fst (toList aec)))\n        (\\<lambda>m. lookup_trie m (map snd (toList aec)))))\""], ["", "definition\n  acts_MapOps_update :: \"('a, 'es, 'as) spr_simWorldsRep\n                       \\<Rightarrow> 'aAct\n                       \\<Rightarrow> ('a :: linorder, 'es :: linorder, 'aAct, 'as :: linorder) acts_trie\n                       \\<Rightarrow> ('a, 'es, 'aAct, 'as) acts_trie\"\nwhere\n  \"acts_MapOps_update \\<equiv> \\<lambda>(cec, aec) pAct m.\n     trie_update_with' (map fst (toList cec)) m empty_trie\n      (\\<lambda>m. trie_update_with' (map snd (toList cec)) m empty_trie\n       (\\<lambda>m. trie_update_with' (map fst (toList aec)) m empty_trie\n        (\\<lambda>m. trie_update (map snd (toList aec)) pAct m)))\""], ["", "definition\n  acts_MapOps :: \"(('a :: linorder, 'es :: linorder, 'aAct, 'as :: linorder) acts_trie,\n                   ('a, 'es, 'as) spr_simWorldsRep,\n                   'aAct) MapOps\"\nwhere\n  \"acts_MapOps \\<equiv>\n     \\<lparr> MapOps.empty = empty_trie,\n       lookup = acts_MapOps_lookup,\n       update = acts_MapOps_update \\<rparr>\""], ["", "lemma (in FiniteDetBroadcastEnvironment) acts_MapOps[intro, simp]:\n  \"MapOps spr_simAbs SPRdet.jkbpSEC acts_MapOps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       spr_simAbs k\n       \\<in> (\\<Union>a.\n                 SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<Longrightarrow>\n       MapOps.lookup acts_MapOps (MapOps.empty acts_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       spr_simAbs k\n       \\<in> (\\<Union>a.\n                 SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<Longrightarrow>\n       MapOps.lookup acts_MapOps (MapOps.empty acts_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "show \"MapOps.lookup acts_MapOps (MapOps.empty acts_MapOps) k = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup acts_MapOps (MapOps.empty acts_MapOps) k = None", "unfolding acts_MapOps_def acts_MapOps_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m (cec, aec).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            lookup_trie m (map snd (toList aec))))),\n        update = acts_MapOps_update\\<rparr>\n     (MapOps.empty\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m (cec, aec).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              lookup_trie m (map snd (toList aec))))),\n          update = acts_MapOps_update\\<rparr>)\n     k =\n    None", "by auto"], ["proof (state)\nthis:\n  MapOps.lookup acts_MapOps (MapOps.empty acts_MapOps) k = None\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "fix e k k' M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "assume k: \"spr_simAbs k \\<in> SPRdet.jkbpSEC\"\n     and k': \"spr_simAbs k' \\<in> SPRdet.jkbpSEC\""], ["proof (state)\nthis:\n  spr_simAbs k \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n  spr_simAbs k' \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>spr_simAbs k\n                \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC);\n        spr_simAbs k'\n        \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup acts_MapOps\n                          (update acts_MapOps k e M) k' =\n                         (if spr_simAbs k' = spr_simAbs k then Some e\n                          else MapOps.lookup acts_MapOps M k')", "show \"MapOps.lookup acts_MapOps (MapOps.update acts_MapOps k e M) k'\n         = (if spr_simAbs k' = spr_simAbs k\n             then Some e else MapOps.lookup acts_MapOps M k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "proof(cases \"spr_simAbs k' = spr_simAbs k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. spr_simAbs k' = spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')\n 2. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "case True"], ["proof (state)\nthis:\n  spr_simAbs k' = spr_simAbs k\n\ngoal (2 subgoals):\n 1. spr_simAbs k' = spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')\n 2. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "hence \"k = k'\""], ["proof (prove)\nusing this:\n  spr_simAbs k' = spr_simAbs k\n\ngoal (1 subgoal):\n 1. k = k'", "using inj_onD[OF spr_simAbs_inj_on] k k'"], ["proof (prove)\nusing this:\n  spr_simAbs k' = spr_simAbs k\n  \\<lbrakk>spr_simAbs ?x = spr_simAbs ?y;\n   ?x \\<in> rel_ext\n             (\\<lambda>x.\n                 spr_simAbs x\n                 \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC));\n   ?y \\<in> rel_ext\n             (\\<lambda>x.\n                 spr_simAbs x\n                 \\<in> (\\<Union>a.\n                           SPRdet.sim_equiv_class a ` SPR.jkbpC))\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n  spr_simAbs k \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n  spr_simAbs k' \\<in> (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n\ngoal (1 subgoal):\n 1. k = k'", "by (auto iff: prod_eqI)"], ["proof (state)\nthis:\n  k = k'\n\ngoal (2 subgoals):\n 1. spr_simAbs k' = spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')\n 2. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "unfolding acts_MapOps_def acts_MapOps_lookup_def acts_MapOps_update_def"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m (cec, aec).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            lookup_trie m (map snd (toList aec))))),\n        update =\n          \\<lambda>(cec, aec) pAct m.\n             trie_update_with' (map fst (toList cec)) m empty_trie\n              (\\<lambda>m.\n                  trie_update_with' (map snd (toList cec)) m empty_trie\n                   (\\<lambda>m.\n                       trie_update_with' (map fst (toList aec)) m empty_trie\n                        (trie_update (map snd (toList aec)) pAct)))\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m (cec, aec).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              lookup_trie m (map snd (toList aec))))),\n          update =\n            \\<lambda>(cec, aec) pAct m.\n               trie_update_with' (map fst (toList cec)) m empty_trie\n                (\\<lambda>m.\n                    trie_update_with' (map snd (toList cec)) m empty_trie\n                     (\\<lambda>m.\n                         trie_update_with' (map fst (toList aec)) m\n                          empty_trie\n                          (trie_update (map snd (toList aec))\n                            pAct)))\\<rparr>\n       k e M)\n     k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m (cec, aec).\n                   Option.bind (lookup_trie m (map fst (toList cec)))\n                    (\\<lambda>m.\n                        Option.bind (lookup_trie m (map snd (toList cec)))\n                         (\\<lambda>m.\n                             Option.bind\n                              (lookup_trie m (map fst (toList aec)))\n                              (\\<lambda>m.\n                                  lookup_trie m (map snd (toList aec))))),\n              update =\n                \\<lambda>(cec, aec) pAct m.\n                   trie_update_with' (map fst (toList cec)) m empty_trie\n                    (\\<lambda>m.\n                        trie_update_with' (map snd (toList cec)) m\n                         empty_trie\n                         (\\<lambda>m.\n                             trie_update_with' (map fst (toList aec)) m\n                              empty_trie\n                              (trie_update (map snd (toList aec))\n                                pAct)))\\<rparr>\n           M k')", "by (auto simp: lookup_trie_update_with lookup_trie_update split: option.split prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n  (if spr_simAbs k' = spr_simAbs k then Some e\n   else MapOps.lookup acts_MapOps M k')\n\ngoal (1 subgoal):\n 1. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "case False"], ["proof (state)\nthis:\n  spr_simAbs k' \\<noteq> spr_simAbs k\n\ngoal (1 subgoal):\n 1. spr_simAbs k' \\<noteq> spr_simAbs k \\<Longrightarrow>\n    MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  spr_simAbs k' \\<noteq> spr_simAbs k\n\ngoal (1 subgoal):\n 1. MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup acts_MapOps M k')", "unfolding acts_MapOps_def acts_MapOps_lookup_def acts_MapOps_update_def"], ["proof (prove)\nusing this:\n  spr_simAbs k' \\<noteq> spr_simAbs k\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m (cec, aec).\n             Option.bind (lookup_trie m (map fst (toList cec)))\n              (\\<lambda>m.\n                  Option.bind (lookup_trie m (map snd (toList cec)))\n                   (\\<lambda>m.\n                       Option.bind (lookup_trie m (map fst (toList aec)))\n                        (\\<lambda>m.\n                            lookup_trie m (map snd (toList aec))))),\n        update =\n          \\<lambda>(cec, aec) pAct m.\n             trie_update_with' (map fst (toList cec)) m empty_trie\n              (\\<lambda>m.\n                  trie_update_with' (map snd (toList cec)) m empty_trie\n                   (\\<lambda>m.\n                       trie_update_with' (map fst (toList aec)) m empty_trie\n                        (trie_update (map snd (toList aec)) pAct)))\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m (cec, aec).\n               Option.bind (lookup_trie m (map fst (toList cec)))\n                (\\<lambda>m.\n                    Option.bind (lookup_trie m (map snd (toList cec)))\n                     (\\<lambda>m.\n                         Option.bind (lookup_trie m (map fst (toList aec)))\n                          (\\<lambda>m.\n                              lookup_trie m (map snd (toList aec))))),\n          update =\n            \\<lambda>(cec, aec) pAct m.\n               trie_update_with' (map fst (toList cec)) m empty_trie\n                (\\<lambda>m.\n                    trie_update_with' (map snd (toList cec)) m empty_trie\n                     (\\<lambda>m.\n                         trie_update_with' (map fst (toList aec)) m\n                          empty_trie\n                          (trie_update (map snd (toList aec))\n                            pAct)))\\<rparr>\n       k e M)\n     k' =\n    (if spr_simAbs k' = spr_simAbs k then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m (cec, aec).\n                   Option.bind (lookup_trie m (map fst (toList cec)))\n                    (\\<lambda>m.\n                        Option.bind (lookup_trie m (map snd (toList cec)))\n                         (\\<lambda>m.\n                             Option.bind\n                              (lookup_trie m (map fst (toList aec)))\n                              (\\<lambda>m.\n                                  lookup_trie m (map snd (toList aec))))),\n              update =\n                \\<lambda>(cec, aec) pAct m.\n                   trie_update_with' (map fst (toList cec)) m empty_trie\n                    (\\<lambda>m.\n                        trie_update_with' (map snd (toList cec)) m\n                         empty_trie\n                         (\\<lambda>m.\n                             trie_update_with' (map fst (toList aec)) m\n                              empty_trie\n                              (trie_update (map snd (toList aec))\n                                pAct)))\\<rparr>\n           M k')", "by (auto dest: map_prod_eq simp: lookup_trie_update_with lookup_trie_update split: option.split prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n  (if spr_simAbs k' = spr_simAbs k then Some e\n   else MapOps.lookup acts_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  MapOps.lookup acts_MapOps (update acts_MapOps k e M) k' =\n  (if spr_simAbs k' = spr_simAbs k then Some e\n   else MapOps.lookup acts_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThis suffices to placate the @{term \"Algorithm\"} locale.\n\n\\<close>"], ["", "sublocale FiniteDetBroadcastEnvironment\n        < SPRdet: Algorithm\n            jkbp envInit envAction envTrans envVal\n            spr_jview envObs spr_jviewInit spr_jviewIncr\n            spr_sim spr_simRels spr_simVal\n            spr_simAbs spr_simObs spr_simInit spr_simTrans spr_simAction\n            acts_MapOps trans_MapOps"], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm jkbp envInit envAction envTrans envVal spr_jview envObs\n     spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal spr_simAbs\n     local.spr_simObs local.spr_simInit local.spr_simTrans\n     local.spr_simAction acts_MapOps trans_MapOps", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm jkbp envInit envAction envTrans envVal spr_jview envObs\n     spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal spr_simAbs\n     local.spr_simObs local.spr_simInit local.spr_simTrans\n     local.spr_simAction acts_MapOps trans_MapOps", "apply (unfold_locales)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<forall>a iobs.\n       iobs \\<in> envObs a ` set envInit \\<longrightarrow>\n       spr_simAbs (local.spr_simInit a iobs) =\n       spr_sim `\n       rel_ext\n        (\\<lambda>t'.\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 4. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 5. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 6. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simInit"], ["proof (prove)\nusing this:\n  ?iobs \\<in> envObs ?a ` set envInit \\<Longrightarrow>\n  spr_simAbs (local.spr_simInit ?a ?iobs) =\n  spr_sim `\n  rel_ext\n   (\\<lambda>t'.\n       t' \\<in> SPR.jkbpC \\<and> spr_jview ?a t' = spr_jviewInit ?a ?iobs)\n\ngoal (6 subgoals):\n 1. \\<forall>a iobs.\n       iobs \\<in> envObs a ` set envInit \\<longrightarrow>\n       spr_simAbs (local.spr_simInit a iobs) =\n       spr_sim `\n       rel_ext\n        (\\<lambda>t'.\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 4. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 5. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 6. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 4. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 5. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simObs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRdet.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> local.spr_simObs ?a ?ec = envObs ?a (tLast ?t)\n\ngoal (5 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 4. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 5. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 3. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 4. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simAction"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRdet.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> set (local.spr_simAction ?a ?ec) =\n                    set (jAction SPR.MC ?t ?a)\n\ngoal (4 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 3. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 4. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 2. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 3. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simTrans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRdet.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> spr_simAbs ` set (local.spr_simTrans ?a ?ec) =\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>t' s.\n                            uu_ =\n                            SPRdet.sim_equiv_class ?a\n                             (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview ?a t' = spr_jview ?a ?t)\n\ngoal (3 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRdet.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRdet.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 2. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 3. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. MapOps spr_simAbs (\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC)\n     acts_MapOps\n 2. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply (rule acts_MapOps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRdet.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply (rule trans_MapOps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"mkSPRDetAuto \\<equiv> \\<lambda>agents jkbp envInit envAction envTrans envVal envObsC envObs.\n    mkAlgAuto acts_MapOps\n              trans_MapOps\n              (spr_simObs envObsC)\n              (spr_simInit envInit envObsC envObs)\n              (spr_simTrans agents jkbp envAction envTrans envVal envObsC envObs)\n              (spr_simAction jkbp envVal envObs)\n              (\\<lambda>a. map (spr_simInit envInit envObsC envObs a \\<circ> envObs a) envInit)\""], ["", "lemma (in FiniteDetBroadcastEnvironment) mkSPRDetAuto_implements:\n  \"SPR.implements (mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC envObs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SPR.implements\n     (mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC\n       envObs)", "using SPRdet.k_mkAlgAuto_implements"], ["proof (prove)\nusing this:\n  SPR.implements SPRdet.k_mkAlgAuto\n\ngoal (1 subgoal):\n 1. SPR.implements\n     (mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC\n       envObs)", "unfolding mkSPRDetAuto_def mkAlgAuto_def SPRdet.k_frontier_def"], ["proof (prove)\nusing this:\n  SPR.implements\n   (\\<lambda>a.\n       let auto =\n             alg_dfs acts_MapOps trans_MapOps (local.spr_simObs a)\n              (local.spr_simTrans a) (local.spr_simAction a)\n              (map (local.spr_simInit a \\<circ> envObs a) envInit)\n       in \\<lparr>pInit = local.spr_simInit a,\n             pTrans =\n               \\<lambda>obs ec.\n                  the (MapOps.lookup trans_MapOps (aTrans auto) (ec, obs)),\n             pAct =\n               \\<lambda>ec.\n                  the (MapOps.lookup acts_MapOps (aActs auto) ec)\\<rparr>)\n\ngoal (1 subgoal):\n 1. SPR.implements\n     (\\<lambda>a.\n         let auto =\n               alg_dfs acts_MapOps trans_MapOps (local.spr_simObs a)\n                (local.spr_simTrans a) (local.spr_simAction a)\n                (map (local.spr_simInit a \\<circ> envObs a) envInit)\n         in \\<lparr>pInit = local.spr_simInit a,\n               pTrans =\n                 \\<lambda>obs ec.\n                    the (MapOps.lookup trans_MapOps (aTrans auto)\n                          (ec, obs)),\n               pAct =\n                 \\<lambda>ec.\n                    the (MapOps.lookup acts_MapOps (aActs auto) ec)\\<rparr>)", "by simp"], ["", "(*\n\nWe actually run this unfolding of the algorithm. The lemma is keeping\nus honest.\n\n*)"], ["", "definition\n  \"SPRDetAutoDFS \\<equiv> \\<lambda>agents jkbp envInit envAction envTrans envVal envObsC envObs. \\<lambda>a.\n    alg_dfs acts_MapOps\n            trans_MapOps\n            (spr_simObs envObsC a)\n            (spr_simTrans agents jkbp envAction envTrans envVal envObsC envObs a)\n            (spr_simAction jkbp envVal envObs a)\n            (map (spr_simInit envInit envObsC envObs a \\<circ> envObs a) envInit)\""], ["", "lemma (in FiniteDetBroadcastEnvironment)\n  \"mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC envObs\n = (\\<lambda>a. alg_mk_auto acts_MapOps trans_MapOps\n           (spr_simInit a)\n           (SPRDetAutoDFS agents jkbp envInit envAction envTrans envVal envObsC envObs a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mkSPRDetAuto agents jkbp envInit envAction envTrans envVal envObsC\n     envObs =\n    (\\<lambda>a.\n        alg_mk_auto acts_MapOps trans_MapOps (local.spr_simInit a)\n         (SPRDetAutoDFS agents jkbp envInit envAction envTrans envVal\n           envObsC envObs a))", "unfolding mkSPRDetAuto_def mkAlgAuto_def SPRDetAutoDFS_def alg_mk_auto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        let auto =\n              alg_dfs acts_MapOps trans_MapOps (local.spr_simObs a)\n               (local.spr_simTrans a) (local.spr_simAction a)\n               (map (local.spr_simInit a \\<circ> envObs a) envInit)\n        in \\<lparr>pInit = local.spr_simInit a,\n              pTrans =\n                \\<lambda>obs ec.\n                   the (MapOps.lookup trans_MapOps (aTrans auto) (ec, obs)),\n              pAct =\n                \\<lambda>ec.\n                   the (MapOps.lookup acts_MapOps (aActs auto)\n                         ec)\\<rparr>) =\n    (\\<lambda>a.\n        \\<lparr>pInit = local.spr_simInit a,\n           pTrans =\n             \\<lambda>obs ec.\n                the (MapOps.lookup trans_MapOps\n                      (aTrans\n                        (alg_dfs acts_MapOps trans_MapOps\n                          (local.spr_simObs a) (local.spr_simTrans a)\n                          (local.spr_simAction a)\n                          (map (local.spr_simInit a \\<circ> envObs a)\n                            envInit)))\n                      (ec, obs)),\n           pAct =\n             \\<lambda>ec.\n                the (MapOps.lookup acts_MapOps\n                      (aActs\n                        (alg_dfs acts_MapOps trans_MapOps\n                          (local.spr_simObs a) (local.spr_simTrans a)\n                          (local.spr_simAction a)\n                          (map (local.spr_simInit a \\<circ> envObs a)\n                            envInit)))\n                      ec)\\<rparr>)", "by (simp add: Let_def)"], ["", "(*>*)"], ["", "text\\<open>\n\nAs we remarked earlier in this section, in general it may be difficult\nto establish the determinacy of a KBP as it is a function of the\nenvironment. However in many cases determinism is syntactically\nmanifest as the guards are logically disjoint, independently of the\nknowledge subformulas. The following lemma generates the required\nproof obligations for this case:\n\n\\<close>"], ["", "lemma (in PreEnvironmentJView) jkbpDetI:\n  assumes tC: \"t \\<in> jkbpC\"\n  assumes jkbpSynDet: \"\\<forall>a. distinct (map guard (jkbp a))\"\n  assumes jkbpSemDet: \"\\<forall>a gc gc'.\n        gc \\<in> set (jkbp a) \\<and> gc' \\<in> set (jkbp a) \\<and> t \\<in> jkbpC\n    \\<longrightarrow> guard gc = guard gc' \\<or> \\<not>(MC, t \\<Turnstile> guard gc \\<and> MC, t \\<Turnstile> guard gc')\"\n  shows \"length (jAction MC t a) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "fix a X"], ["proof (state)\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "assume \"set X \\<subseteq> set (jkbp a)\"\n       and \"distinct (map guard X)\""], ["proof (state)\nthis:\n  set X \\<subseteq> set (jkbp a)\n  distinct (map guard X)\n\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "with tC"], ["proof (chain)\npicking this:\n  t \\<in> jkbpC\n  set X \\<subseteq> set (jkbp a)\n  distinct (map guard X)", "have \"length [ action gc . gc \\<leftarrow> X, MC, t \\<Turnstile> guard gc ] \\<le> 1\""], ["proof (prove)\nusing this:\n  t \\<in> jkbpC\n  set X \\<subseteq> set (jkbp a)\n  distinct (map guard X)\n\ngoal (1 subgoal):\n 1. length\n     (concat\n       (map (\\<lambda>gc.\n                if MC, t \\<Turnstile> guard gc then [action gc] else [])\n         X))\n    \\<le> 1", "apply (induct X)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> jkbpC; set [] \\<subseteq> set (jkbp a);\n     distinct (map guard [])\\<rbrakk>\n    \\<Longrightarrow> length\n                       (concat\n                         (map (\\<lambda>gc.\n                                  if MC, t \\<Turnstile> guard gc\n                                  then [action gc] else [])\n                           []))\n                      \\<le> 1\n 2. \\<And>a X.\n       \\<lbrakk>\\<lbrakk>t \\<in> jkbpC; set X \\<subseteq> set (jkbp a);\n                 distinct (map guard X)\\<rbrakk>\n                \\<Longrightarrow> length\n                                   (concat\n                                     (map\n (\\<lambda>gc. if MC, t \\<Turnstile> guard gc then [action gc] else []) X))\n                                  \\<le> 1;\n        t \\<in> jkbpC; set (a # X) \\<subseteq> set (jkbp a);\n        distinct (map guard (a # X))\\<rbrakk>\n       \\<Longrightarrow> length\n                          (concat\n                            (map (\\<lambda>gc.\n                                     if MC, t \\<Turnstile> guard gc\n                                     then [action gc] else [])\n                              (a # X)))\n                         \\<le> 1", "using jkbpSemDet[rule_format, where a=a]"], ["proof (prove)\nusing this:\n  ?gc \\<in> set (jkbp a) \\<and>\n  ?gc' \\<in> set (jkbp a) \\<and> t \\<in> jkbpC \\<Longrightarrow>\n  guard ?gc = guard ?gc' \\<or>\n  \\<not> (MC, t \\<Turnstile> guard ?gc \\<and> MC, t \\<Turnstile> guard ?gc')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> jkbpC; set [] \\<subseteq> set (jkbp a);\n     distinct (map guard [])\\<rbrakk>\n    \\<Longrightarrow> length\n                       (concat\n                         (map (\\<lambda>gc.\n                                  if MC, t \\<Turnstile> guard gc\n                                  then [action gc] else [])\n                           []))\n                      \\<le> 1\n 2. \\<And>a X.\n       \\<lbrakk>\\<lbrakk>t \\<in> jkbpC; set X \\<subseteq> set (jkbp a);\n                 distinct (map guard X)\\<rbrakk>\n                \\<Longrightarrow> length\n                                   (concat\n                                     (map\n (\\<lambda>gc. if MC, t \\<Turnstile> guard gc then [action gc] else []) X))\n                                  \\<le> 1;\n        t \\<in> jkbpC; set (a # X) \\<subseteq> set (jkbp a);\n        distinct (map guard (a # X))\\<rbrakk>\n       \\<Longrightarrow> length\n                          (concat\n                            (map (\\<lambda>gc.\n                                     if MC, t \\<Turnstile> guard gc\n                                     then [action gc] else [])\n                              (a # X)))\n                         \\<le> 1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  length\n   (concat\n     (map (\\<lambda>gc.\n              if MC, t \\<Turnstile> guard gc then [action gc] else [])\n       X))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set ?X3 \\<subseteq> set (jkbp ?aa3);\n   distinct (map guard ?X3)\\<rbrakk>\n  \\<Longrightarrow> length\n                     (concat\n                       (map (\\<lambda>gc.\n                                if MC, t \\<Turnstile> guard gc\n                                then [action gc] else [])\n                         ?X3))\n                    \\<le> 1\n\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "from this[OF subset_refl jkbpSynDet[rule_format]]"], ["proof (chain)\npicking this:\n  length\n   (concat\n     (map (\\<lambda>gc.\n              if MC, t \\<Turnstile> guard gc then [action gc] else [])\n       (jkbp ?aa3)))\n  \\<le> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (concat\n     (map (\\<lambda>gc.\n              if MC, t \\<Turnstile> guard gc then [action gc] else [])\n       (jkbp ?aa3)))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. length (jAction MC t a) \\<le> 1", "unfolding jAction_def"], ["proof (prove)\nusing this:\n  length\n   (concat\n     (map (\\<lambda>gc.\n              if MC, t \\<Turnstile> guard gc then [action gc] else [])\n       (jkbp ?aa3)))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. length\n     (concat\n       (map (\\<lambda>gc.\n                if MC, t \\<Turnstile> guard gc then [action gc] else [])\n         (jkbp a)))\n    \\<le> 1", "by simp"], ["proof (state)\nthis:\n  length (jAction MC t a) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe scenario presented here is a variant of the broadcast environments\ntreated by \\citet{Ron:1996}, which we cover in the next section.\n\n\\FloatBarrier\n\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}