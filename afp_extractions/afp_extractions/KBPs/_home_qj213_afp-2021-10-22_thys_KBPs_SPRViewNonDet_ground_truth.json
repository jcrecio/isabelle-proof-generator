{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/SPRViewNonDet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma spr_jview_tObsC:\n  assumes \"spr_jview a t = spr_jview a t'\"\n  shows \"tObsC t = tObsC t'\"", "lemma tObsC_tLength:\n  \"tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'\"", "lemma tObsC_tStep_eq_inv:\n  \"tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\"", "lemma tObsC_prefix_closed[dest]:\n  \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow> tObsC t = tObsC t'\"", "lemma tObsC_tLast[iff]:\n  \"tLast (tObsC t) = (envObsC (es (tLast t)), pubActs (tLast t))\"", "lemma tObsC_tStep:\n  \"tObsC (t \\<leadsto> s) = tObsC t \\<leadsto> (envObsC (es s), pubActs s)\"", "lemma tObsC_initial[iff]:\n  \"tFirst (tObsC t) = (envObsC (es (tFirst t)), pubActs (tFirst t))\"\n  \"tObsC (tInit s) = tInit (envObsC (es s), pubActs s)\"\n  \"tObsC t = tInit cobs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObsC (es s) = fst cobs \\<and> pubActs s = snd cobs)\"", "lemma spr_tObsC_trc_aux:\n  assumes \"(t, t') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\"\n  shows \"tObsC t = tObsC t'\"", "lemma tObsC_abs_jview_eq[dest, intro]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\"", "lemma tObsC_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t\"", "lemma tObsC_abs_conv:\n  \"(u, v) \\<in> tObsC_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')\"", "lemma agent_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> agent_abs a t\"", "lemma agent_abs_tLastD[simp]:\n  \"(u, v) \\<in> agent_abs a t \\<Longrightarrow> envObs a v = envObs a (tLast t)\"", "lemma agent_abs_inv[dest]:\n  \"(u, v) \\<in> agent_abs a t\n    \\<Longrightarrow> \\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t\n           \\<and> u = tFirst t' \\<and> v = tLast t'\"", "lemma spr_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s\"", "lemma spr_simVal_def2[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\"", "lemma sSplice_es[simp]:\n  \"es (sSplice a s s') = es s\"", "lemma sSplice_pubActs[simp]:\n  \"pubActs (sSplice a s s') = pubActs s\"", "lemma sSplice_envObs[simp]:\n  assumes init: \"envObs a s = envObs a s'\"\n  shows \"sSplice a s s' = s\"", "lemma sSplice_envObs_a:\n  assumes \"envObsC (es s) = envObsC (es s')\"\n  assumes \"pubActs s = pubActs s'\"\n  shows \"envObs a (sSplice a s s') = envObs a s'\"", "lemma sSplice_envObs_not_a:\n  assumes \"a' \\<noteq> a\"\n  shows \"envObs a' (sSplice a s s') = envObs a' s\"", "lemma tSplice_tObsC:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tObsC t\"", "lemma tSplice_spr_jview_a:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = spr_jview a t'\"", "lemma tSplice_spr_jview_not_a:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  assumes aa': \"a \\<noteq> a'\"\n  shows \"spr_jview a' (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = spr_jview a' t\"", "lemma tSplice_es:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = es (tLast t)\"", "lemma tSplice_pubActs:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = pubActs (tLast t)\"", "lemma tSplice_envAction:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = envAction (tLast t)\"", "lemma tSplice_tFirst[simp]:\n  assumes tLen: \"tLength t = tLength t'\"\n  assumes init: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  shows \"tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tFirst t\"", "lemma tSplice_tLast[simp]:\n  assumes tLen: \"tLength t = tLength t'\"\n  assumes last: \"envObs a (tLast t) = envObs a (tLast t')\"\n  shows \"tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t\"", "lemma tSplice_jkbpC:\n  assumes tt': \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes init: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\"", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\"", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\""], "translations": [["", "lemma spr_jview_tObsC:\n  assumes \"spr_jview a t = spr_jview a t'\"\n  shows \"tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "using SPR.sync[rule_format, OF assms] assms"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  spr_jview a t = spr_jview a t'\n\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "by (induct rule: trace_induct2) (auto simp: envObs_def tObsC_def)"], ["", "lemma tObsC_tLength:\n  \"tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t' \\<Longrightarrow> tLength t = tLength t'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t =\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t' \\<Longrightarrow>\n    tLength t = tLength t'", "by (rule tMap_eq_imp_tLength_eq)"], ["", "lemma tObsC_tStep_eq_inv:\n  \"tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow> \\<exists>t'' s'. t' = t'' \\<leadsto> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t' = tObsC (t \\<leadsto> s) \\<Longrightarrow>\n    \\<exists>t'' s'. t' = t'' \\<leadsto> s'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t' =\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s))\n     (t \\<leadsto> s) \\<Longrightarrow>\n    \\<exists>t'' s'. t' = t'' \\<leadsto> s'", "by auto"], ["", "lemma tObsC_prefix_closed[dest]:\n  \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow> tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s') \\<Longrightarrow>\n    tObsC t = tObsC t'", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. (envObsC (es s), pubActs s)) (t \\<leadsto> s) =\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s))\n     (t' \\<leadsto> s') \\<Longrightarrow>\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t =\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t'", "by simp"], ["", "lemma tObsC_tLast[iff]:\n  \"tLast (tObsC t) = (envObsC (es (tLast t)), pubActs (tLast t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (tObsC t) = (envObsC (es (tLast t)), pubActs (tLast t))", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t) =\n    (envObsC (es (tLast t)), pubActs (tLast t))", "by simp"], ["", "lemma tObsC_tStep:\n  \"tObsC (t \\<leadsto> s) = tObsC t \\<leadsto> (envObsC (es s), pubActs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC (t \\<leadsto> s) = tObsC t \\<leadsto> (envObsC (es s), pubActs s)", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tMap (\\<lambda>s. (envObsC (es s), pubActs s)) (t \\<leadsto> s) =\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t \\<leadsto>\n    (envObsC (es s), pubActs s)", "by simp"], ["", "lemma tObsC_initial[iff]:\n  \"tFirst (tObsC t) = (envObsC (es (tFirst t)), pubActs (tFirst t))\"\n  \"tObsC (tInit s) = tInit (envObsC (es s), pubActs s)\"\n  \"tObsC t = tInit cobs \\<longleftrightarrow> (\\<exists>s. t = tInit s \\<and> envObsC (es s) = fst cobs \\<and> pubActs s = snd cobs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (tObsC t) = (envObsC (es (tFirst t)), pubActs (tFirst t)) &&&\n    tObsC (tInit s) = tInit (envObsC (es s), pubActs s) &&&\n    (tObsC t = tInit cobs) =\n    (\\<exists>s.\n        t = tInit s \\<and>\n        envObsC (es s) = fst cobs \\<and> pubActs s = snd cobs)", "unfolding tObsC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t) =\n    (envObsC (es (tFirst t)), pubActs (tFirst t)) &&&\n    tMap (\\<lambda>s. (envObsC (es s), pubActs s)) (tInit s) =\n    tInit (envObsC (es s), pubActs s) &&&\n    (tMap (\\<lambda>s. (envObsC (es s), pubActs s)) t = tInit cobs) =\n    (\\<exists>s.\n        t = tInit s \\<and>\n        envObsC (es s) = fst cobs \\<and> pubActs s = snd cobs)", "by auto"], ["", "lemma spr_tObsC_trc_aux:\n  assumes \"(t, t') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\"\n  shows \"tObsC t = tObsC t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "using assms"], ["proof (prove)\nusing this:\n  (t, t') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (1 subgoal):\n 1. tObsC t = tObsC t'", "apply (induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tObsC t = tObsC t\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        (y, z) \\<in> \\<Union> (range (relations SPR.MC));\n        tObsC t = tObsC y\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC z", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        (y, z) \\<in> \\<Union> (range (relations SPR.MC));\n        tObsC t = tObsC y\\<rbrakk>\n       \\<Longrightarrow> tObsC t = tObsC z", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        tObsC t = tObsC y; (y, z) \\<in> relations SPR.MC x\\<rbrakk>\n       \\<Longrightarrow> tObsC y = tObsC z", "apply (rule_tac a=x in spr_jview_tObsC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t, y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        tObsC t = tObsC y; (y, z) \\<in> relations SPR.MC x\\<rbrakk>\n       \\<Longrightarrow> spr_jview x y = spr_jview x z", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nSimilarly we introduce common and agent-specific abstraction functions:\n\n\\<close>"], ["", "definition\n  tObsC_abs :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n             \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Relation\"\nwhere\n  \"tObsC_abs t \\<equiv> { (tFirst t', tLast t')\n                   |t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t }\""], ["", "definition\n  agent_abs :: \"'a \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n             \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Relation\"\nwhere\n  \"agent_abs a t \\<equiv> { (tFirst t', tLast t')\n                     |t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t }\""], ["", "(*<*)"], ["", "lemma tObsC_abs_jview_eq[dest, intro]:\n  \"spr_jview a t' = spr_jview a t\n    \\<Longrightarrow> tObsC_abs t = tObsC_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    tObsC_abs t = tObsC_abs t'", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t' = spr_jview a t \\<Longrightarrow>\n    {(tFirst t', tLast t') |t'.\n     t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t} =\n    {(tFirst t'a, tLast t'a) |t'a.\n     t'a \\<in> SPR.jkbpC \\<and> tObsC t'a = tObsC t'}", "by (fastforce dest: spr_jview_tObsC)"], ["", "lemma tObsC_absI[intro]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t';\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> tObsC_abs t", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; tObsC t' = tObsC t; u = tFirst t';\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v)\n                      \\<in> {(tFirst t', tLast t') |t'.\n                             t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t}", "by blast"], ["", "lemma tObsC_abs_conv:\n  \"(u, v) \\<in> tObsC_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v) \\<in> tObsC_abs t) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v)\n     \\<in> {(tFirst t', tLast t') |t'.\n            t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC t}) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        tObsC t' = tObsC t \\<and> u = tFirst t' \\<and> v = tLast t')", "by blast"], ["", "lemma agent_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; u = tFirst t'; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> agent_abs a t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     u = tFirst t'; v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> agent_abs a t", "unfolding agent_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     u = tFirst t'; v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> (u, v)\n                      \\<in> {(tFirst t', tLast t') |t'.\n                             t' \\<in> SPR.jkbpC \\<and>\n                             spr_jview a t' = spr_jview a t}", "by blast"], ["", "lemma agent_abs_tLastD[simp]:\n  \"(u, v) \\<in> agent_abs a t \\<Longrightarrow> envObs a v = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> agent_abs a t \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "unfolding agent_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> {(tFirst t', tLast t') |t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           spr_jview a t' = spr_jview a t} \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "by auto"], ["", "lemma agent_abs_inv[dest]:\n  \"(u, v) \\<in> agent_abs a t\n    \\<Longrightarrow> \\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t\n           \\<and> u = tFirst t' \\<and> v = tLast t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> agent_abs a t \\<Longrightarrow>\n    \\<exists>t'.\n       t' \\<in> SPR.jkbpC \\<and>\n       spr_jview a t' = spr_jview a t \\<and>\n       u = tFirst t' \\<and> v = tLast t'", "unfolding agent_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> {(tFirst t', tLast t') |t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           spr_jview a t' = spr_jview a t} \\<Longrightarrow>\n    \\<exists>t'.\n       t' \\<in> SPR.jkbpC \\<and>\n       spr_jview a t' = spr_jview a t \\<and>\n       u = tFirst t' \\<and> v = tLast t'", "by blast"], ["", "(*>*)"], ["", "end"], ["", "(* context FiniteBroadcastEnvironment *)"], ["", "text\\<open>\n\nThe simulation is identical to that in the previous section:\n\n\\<close>"], ["", "record ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate =\n  sprFst :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\"\n  sprLst :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\"\n  sprCRel :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Relation\""], ["", "context FiniteBroadcastEnvironment\nbegin"], ["", "definition\n  spr_sim :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n           \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate\"\nwhere\n  \"spr_sim \\<equiv> \\<lambda>t. \\<lparr> sprFst = tFirst t, sprLst = tLast t, sprCRel = tObsC_abs t \\<rparr>\""], ["", "(*<*)"], ["", "lemma spr_sim_tFirst_tLast:\n  \"\\<lbrakk> spr_sim t = s; t \\<in> SPR.jkbpC \\<rbrakk> \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>spr_sim t = s; t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s", "unfolding spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs t\\<rparr> =\n             s;\n     t \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (sprFst s, sprLst s) \\<in> sprCRel s", "by auto"], ["", "(*>*)"], ["", "text\\<open>\n\nThe Kripke structure over simulated traces is also the same:\n\n\\<close>"], ["", "definition\n  spr_simRels :: \"'a \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate Relation\"\nwhere\n  \"spr_simRels \\<equiv> \\<lambda>a. { (s, s') |s s'.\n                         envObs a (sprFst s) = envObs a (sprFst s')\n                       \\<and> envObs a (sprLst s) = envObs a (sprLst s')\n                       \\<and> sprCRel s = sprCRel s' }\""], ["", "definition\n  spr_simVal :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) SPRstate \\<Rightarrow> 'p \\<Rightarrow> bool\"\nwhere\n  \"spr_simVal \\<equiv> envVal \\<circ> sprLst\""], ["", "abbreviation\n  \"spr_simMC \\<equiv> mkKripke (spr_sim ` SPR.jkbpC) spr_simRels spr_simVal\""], ["", "(*<*)"], ["", "lemma spr_simVal_def2[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simVal (spr_sim t) = envVal (tLast t)", "unfolding spr_sim_def spr_simVal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envVal \\<circ> sprLst)\n     \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n        sprCRel = tObsC_abs t\\<rparr> =\n    envVal (tLast t)", "by simp"], ["", "(*>*)"], ["", "text\\<open>\n\nAs usual, showing that @{term \"spr_sim\"} is in fact a simulation is\nroutine for all properties except for reverse simulation. For that we\nuse proof techniques similar to those of\n\\citet{DBLP:journals/tocl/LomuscioMR00}: the goal is to show that,\ngiven @{term \"t \\<in> jkbpC\"}, we can construct a trace @{term \"t' \\<in>\njkbpC\"} indistinguishable from @{term \"t\"} by agent @{term \"a\"}, based\non the public actions, the common observation and @{term \"a\"}'s\nprivate and initial states.\n\nTo do this we define a splicing operation:\n\n\\<close>"], ["", "definition\n  sSplice :: \"'a\n           \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\n           \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\n           \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState\"\nwhere\n  \"sSplice a s s' \\<equiv> s\\<lparr> ps := (ps s)(a := ps s' a) \\<rparr>\""], ["", "(*<*)"], ["", "lemma sSplice_es[simp]:\n  \"es (sSplice a s s') = es s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es (sSplice a s s') = es s", "unfolding sSplice_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. es (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>) = es s", "by simp"], ["", "lemma sSplice_pubActs[simp]:\n  \"pubActs (sSplice a s s') = pubActs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubActs (sSplice a s s') = pubActs s", "unfolding sSplice_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pubActs (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>) = pubActs s", "by simp"], ["", "lemma sSplice_envObs[simp]:\n  assumes init: \"envObs a s = envObs a s'\"\n  shows \"sSplice a s s' = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sSplice a s s' = s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sSplice a s s' = s", "from init"], ["proof (chain)\npicking this:\n  envObs a s = envObs a s'", "have \"ps s a = ps s' a\""], ["proof (prove)\nusing this:\n  envObs a s = envObs a s'\n\ngoal (1 subgoal):\n 1. ps s a = ps s' a", "by (auto simp: envObs_def)"], ["proof (state)\nthis:\n  ps s a = ps s' a\n\ngoal (1 subgoal):\n 1. sSplice a s s' = s", "thus ?thesis"], ["proof (prove)\nusing this:\n  ps s a = ps s' a\n\ngoal (1 subgoal):\n 1. sSplice a s s' = s", "unfolding sSplice_def"], ["proof (prove)\nusing this:\n  ps s a = ps s' a\n\ngoal (1 subgoal):\n 1. s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr> = s", "by (simp add: fun_upd_idem_iff)"], ["proof (state)\nthis:\n  sSplice a s s' = s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sSplice_envObs_a:\n  assumes \"envObsC (es s) = envObsC (es s')\"\n  assumes \"pubActs s = pubActs s'\"\n  shows \"envObs a (sSplice a s s') = envObs a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envObs a (sSplice a s s') = envObs a s'", "using assms"], ["proof (prove)\nusing this:\n  envObsC (es s) = envObsC (es s')\n  pubActs s = pubActs s'\n\ngoal (1 subgoal):\n 1. envObs a (sSplice a s s') = envObs a s'", "unfolding sSplice_def envObs_def"], ["proof (prove)\nusing this:\n  envObsC (es s) = envObsC (es s')\n  pubActs s = pubActs s'\n\ngoal (1 subgoal):\n 1. (envObsC (es (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>)),\n     ps (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>) a,\n     pubActs (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>)) =\n    (envObsC (es s'), ps s' a, pubActs s')", "by simp"], ["", "lemma sSplice_envObs_not_a:\n  assumes \"a' \\<noteq> a\"\n  shows \"envObs a' (sSplice a s s') = envObs a' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envObs a' (sSplice a s s') = envObs a' s", "using assms"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. envObs a' (sSplice a s s') = envObs a' s", "unfolding sSplice_def envObs_def"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. (envObsC (es (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>)),\n     ps (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>) a',\n     pubActs (s\\<lparr>ps := (ps s)(a := ps s' a)\\<rparr>)) =\n    (envObsC (es s), ps s a', pubActs s)", "by simp"], ["", "(*>*)"], ["", "text\\<open>\n\nThe effect of @{term \"sSplice a s s'\"} is to update @{term \"s\"} with\n@{term \"a\"}'s private state in @{term \"s'\"}. The key properties are\nthat provided the common observation on @{term \"s\"} and @{term \"s'\"}\nare the same, then agent @{term \"a\"}'s observation on @{term \"sSplice\na s s'\"} is the same as\n at @{term \"s'\"}, while everyone else's is the\nsame as at @{term \"s\"}.\n\nWe hoist this operation pointwise to traces:\n\n\\<close>"], ["", "abbreviation\n  tSplice :: \"('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n            \\<Rightarrow> 'a\n            \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\n            \\<Rightarrow> ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState Trace\"\n      (\"_ \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>_\\<^esub> _\" [55, 1000, 56] 55)\nwhere\n  \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<equiv> tZip (sSplice a) t t'\""], ["", "(*<*)"], ["", "declare sSplice_envObs_a[simp] sSplice_envObs_not_a[simp]"], ["", "lemma tSplice_tObsC:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tObsC t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tObsC t", "using tObsC_tLength[OF tObsC] tObsC"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tObsC t = tObsC t'\n\ngoal (1 subgoal):\n 1. tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tObsC t", "by (induct rule: trace_induct2) (simp_all add: tObsC_tStep)"], ["", "lemma tSplice_spr_jview_a:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = spr_jview a t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') =\n    spr_jview a t'", "using tObsC_tLength[OF tObsC] tObsC"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tObsC t = tObsC t'\n\ngoal (1 subgoal):\n 1. spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') =\n    spr_jview a t'", "by (induct rule: trace_induct2) (simp_all add: tObsC_tStep spr_jview_def)"], ["", "lemma tSplice_spr_jview_not_a:\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  assumes aa': \"a \\<noteq> a'\"\n  shows \"spr_jview a' (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = spr_jview a' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a' (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') =\n    spr_jview a' t", "using tObsC_tLength[OF tObsC] tObsC aa'"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  tObsC t = tObsC t'\n  a \\<noteq> a'\n\ngoal (1 subgoal):\n 1. spr_jview a' (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') =\n    spr_jview a' t", "by (induct rule: trace_induct2) (simp_all add: tObsC_tStep spr_jview_def)"], ["", "lemma tSplice_es:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = es (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    es (tLast t)", "using tLen"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n\ngoal (1 subgoal):\n 1. es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    es (tLast t)", "by (induct rule: trace_induct2) simp_all"], ["", "lemma tSplice_pubActs:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = pubActs (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    pubActs (tLast t)", "using tLen"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n\ngoal (1 subgoal):\n 1. pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    pubActs (tLast t)", "by (induct rule: trace_induct2) simp_all"], ["", "lemma tSplice_envAction:\n  assumes tLen: \"tLength t = tLength t'\"\n  shows \"envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = envAction (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    envAction (tLast t)", "unfolding envAction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. envActionES\n     (es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')))\n     (pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))) =\n    envActionES (es (tLast t)) (pubActs (tLast t))", "using tSplice_es[OF tLen] tSplice_pubActs[OF tLen]"], ["proof (prove)\nusing this:\n  es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> t')) =\n  es (tLast t)\n  pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> t')) =\n  pubActs (tLast t)\n\ngoal (1 subgoal):\n 1. envActionES\n     (es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')))\n     (pubActs (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))) =\n    envActionES (es (tLast t)) (pubActs (tLast t))", "by simp"], ["", "lemma tSplice_tFirst[simp]:\n  assumes tLen: \"tLength t = tLength t'\"\n  assumes init: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  shows \"tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tFirst t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tFirst t", "using tLen init"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  envObs a (tFirst t) = envObs a (tFirst t')\n\ngoal (1 subgoal):\n 1. tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tFirst t", "by (induct rule: trace_induct2) simp_all"], ["", "lemma tSplice_tLast[simp]:\n  assumes tLen: \"tLength t = tLength t'\"\n  assumes last: \"envObs a (tLast t) = envObs a (tLast t')\"\n  shows \"tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t", "using tLen last"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  envObs a (tLast t) = envObs a (tLast t')\n\ngoal (1 subgoal):\n 1. tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t", "unfolding envObs_def"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  (envObsC (es (tLast t)), ps (tLast t) a, pubActs (tLast t)) =\n  (envObsC (es (tLast t')), ps (tLast t') a, pubActs (tLast t'))\n\ngoal (1 subgoal):\n 1. tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t", "apply (induct rule: trace_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       (envObsC (es (tLast (tInit s))), ps (tLast (tInit s)) a,\n        pubActs (tLast (tInit s))) =\n       (envObsC (es (tLast (tInit s'))), ps (tLast (tInit s')) a,\n        pubActs (tLast (tInit s'))) \\<Longrightarrow>\n       tLast (tInit s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit s') =\n       tLast (tInit s)\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        (envObsC (es (tLast t)), ps (tLast t) a, pubActs (tLast t)) =\n        (envObsC (es (tLast t')), ps (tLast t') a,\n         pubActs (tLast t')) \\<Longrightarrow>\n        tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') = tLast t;\n        (envObsC (es (tLast (t \\<leadsto> s))),\n         ps (tLast (t \\<leadsto> s)) a, pubActs (tLast (t \\<leadsto> s))) =\n        (envObsC (es (tLast (t' \\<leadsto> s'))),\n         ps (tLast (t' \\<leadsto> s')) a,\n         pubActs (tLast (t' \\<leadsto> s')))\\<rbrakk>\n       \\<Longrightarrow> tLast\n                          (t \\<leadsto>\n                           s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                  s') =\n                         tLast (t \\<leadsto> s)", "apply (auto iff: sSplice_def fun_upd_idem_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>\n\nThe key properties are that after splicing, if @{term \"t\"} and @{term\n\"t'\"} have the same common observation, then so does @{term \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub>\nt'\"}, and for all agents @{term \"a' \\<noteq> a\"}, the view @{term \"a'\"} has\nof @{term \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\"} is the same as it has of @{term \"t\"}, while for\n@{term \"a\"} it is the same as @{term \"t'\"}.\n\nWe can conclude that provided the two traces are initially\nindistinguishable to @{term \"a\"}, and not commonly distinguishable,\nthen @{term \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\"} is a canonical trace:\n\n\\<close>"], ["", "lemma tSplice_jkbpC:\n  assumes tt': \"{t, t'} \\<subseteq> SPR.jkbpC\"\n  assumes init: \"envObs a (tFirst t) = envObs a (tFirst t')\"\n  assumes tObsC: \"tObsC t = tObsC t'\"\n  shows \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC", "using tObsC_tLength[OF tObsC] tt' init tObsC"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  {t, t'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst t) = envObs a (tFirst t')\n  tObsC t = tObsC t'\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC", "proof(induct rule: trace_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>{tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'));\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tInit\n                          s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit\n                                  s'\n                         \\<in> SPR.jkbpC\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "case (tInit s s')"], ["proof (state)\nthis:\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'))\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>{tInit s, tInit s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'));\n        tObsC (tInit s) = tObsC (tInit s')\\<rbrakk>\n       \\<Longrightarrow> tInit\n                          s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit\n                                  s'\n                         \\<in> SPR.jkbpC\n 2. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "thus ?case"], ["proof (prove)\nusing this:\n  {tInit s, tInit s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (tInit s)) = envObs a (tFirst (tInit s'))\n  tObsC (tInit s) = tObsC (tInit s')\n\ngoal (1 subgoal):\n 1. tInit s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit s'\n    \\<in> SPR.jkbpC", "by simp"], ["proof (state)\nthis:\n  tInit s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> tInit s'\n  \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "case (tStep s s' t t')"], ["proof (state)\nthis:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "hence tt': \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\"\n    and tLen: \"tLength t' = tLength t\"\n    and tObsC: \"tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC &&&\n    tLength t' = tLength t &&&\n    tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "by auto"], ["proof (state)\nthis:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n  tLength t' = tLength t\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "hence tt'n: \"t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpCn (tLength t)\""], ["proof (prove)\nusing this:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n  tLength t' = tLength t\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n    \\<in> SPR.jkbpCn (tLength t)", "by auto"], ["proof (state)\nthis:\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have ts: \"t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\"\n   and t's': \"t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t)) &&&\n    t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n    \\<Longrightarrow> t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n    \\<Longrightarrow> t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply ((rule SPR.jkbpC_tLength_inv, simp_all)[1])+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from ts"], ["proof (chain)\npicking this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))", "obtain eact aact\n    where eact: \"eact \\<in> set (envAction (tLast t))\"\n      and aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t a)\"\n      and trans: \"envTrans eact aact (tLast t) = s\""], ["proof (prove)\nusing this:\n  t \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a);\n         envTrans eact aact (tLast t) = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto iff: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  envTrans eact aact (tLast t) = s\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from t's'"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))", "obtain eact' aact'\n    where eact': \"eact' \\<in> set (envAction (tLast t'))\"\n      and aact': \"\\<forall>a. aact' a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t'))) t' a)\"\n      and trans': \"envTrans eact' aact' (tLast t') = s'\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s' \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. (\\<And>eact' aact'.\n        \\<lbrakk>eact' \\<in> set (envAction (tLast t'));\n         \\<forall>a.\n            aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         envTrans eact' aact' (tLast t') = s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto iff: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eact' \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "define aact'' where \"aact'' = aact (a := aact' a)\""], ["proof (state)\nthis:\n  aact'' = aact(a := aact' a)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tObsC trans trans'"], ["proof (chain)\npicking this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'", "have aact''_fst: \"fst \\<circ> aact'' = fst \\<circ> aact\""], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. fst \\<circ> aact'' = fst \\<circ> aact", "unfolding envTrans_def aact''_def"], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n     ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n  s\n  \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n     ps = snd \\<circ> aact',\n     pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n  s'\n\ngoal (1 subgoal):\n 1. fst \\<circ> aact(a := aact' a) = fst \\<circ> aact", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n        ps = snd \\<circ> aact,\n        pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n     s;\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n     s'\\<rbrakk>\n    \\<Longrightarrow> fst \\<circ> aact(a := aact' a) = fst \\<circ> aact", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n        \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n           ps = snd \\<circ> aact,\n           pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n        s;\n        \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n           ps = snd \\<circ> aact',\n           pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n        s'\\<rbrakk>\n       \\<Longrightarrow> (fst \\<circ> aact(a := aact' a)) x =\n                         (fst \\<circ> aact) x", "apply (auto iff: tObsC_tStep)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s =\n             \\<lparr>es = envTransES eact (fst \\<circ> aact')\n                           (es (tLast t)),\n                ps = snd \\<circ> aact,\n                pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     s' =\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     tObsC t = tObsC t';\n     envObsC (envTransES eact (fst \\<circ> aact') (es (tLast t))) =\n     envObsC (envTransES eact' (fst \\<circ> aact') (es (tLast t')));\n     fst eact = fst eact'; fst \\<circ> aact = fst \\<circ> aact'\\<rbrakk>\n    \\<Longrightarrow> fst (aact' a) = fst (aact a)", "apply (erule o_eq_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s =\n             \\<lparr>es = envTransES eact (fst \\<circ> aact')\n                           (es (tLast t)),\n                ps = snd \\<circ> aact,\n                pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     s' =\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr>;\n     tObsC t = tObsC t';\n     envObsC (envTransES eact (fst \\<circ> aact') (es (tLast t))) =\n     envObsC (envTransES eact' (fst \\<circ> aact') (es (tLast t')));\n     fst eact = fst eact'; \\<And>v. fst (aact v) = fst (aact' v)\\<rbrakk>\n    \\<Longrightarrow> fst (aact' a) = fst (aact a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst \\<circ> aact'' = fst \\<circ> aact\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tObsC trans trans'"], ["proof (chain)\npicking this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'", "have aact''_snd: \"snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\""], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  envTrans eact aact (tLast t) = s\n  envTrans eact' aact' (tLast t') = s'\n\ngoal (1 subgoal):\n 1. snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)", "unfolding envTrans_def aact''_def"], ["proof (prove)\nusing this:\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n     ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n  s\n  \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n     ps = snd \\<circ> aact',\n     pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n  s'\n\ngoal (1 subgoal):\n 1. snd \\<circ> aact(a := aact' a) = (snd \\<circ> aact)(a := ps s' a)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n        ps = snd \\<circ> aact,\n        pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n     s;\n     \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n        ps = snd \\<circ> aact',\n        pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n     s'\\<rbrakk>\n    \\<Longrightarrow> snd \\<circ> aact(a := aact' a) = (snd \\<circ> aact)\n                      (a := ps s' a)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n        \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n           ps = snd \\<circ> aact,\n           pubActs = (fst eact, fst \\<circ> aact)\\<rparr> =\n        s;\n        \\<lparr>es = envTransES eact' (fst \\<circ> aact') (es (tLast t')),\n           ps = snd \\<circ> aact',\n           pubActs = (fst eact', fst \\<circ> aact')\\<rparr> =\n        s'\\<rbrakk>\n       \\<Longrightarrow> (snd \\<circ> aact(a := aact' a)) x =\n                         ((snd \\<circ> aact)(a := ps s' a)) x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "have \"envTrans eact aact'' (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))\n      = sSplice a (envTrans eact aact (tLast t)) s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. envTrans eact aact''\n     (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    sSplice a (envTrans eact aact (tLast t)) s'", "apply (simp only: envTrans_def sSplice_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>es = envTransES eact (fst \\<circ> aact'')\n                  (es (tLast\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))),\n       ps = snd \\<circ> aact'',\n       pubActs = (fst eact, fst \\<circ> aact'')\\<rparr> =\n    \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n       ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr>\n    \\<lparr>ps :=\n              (ps \\<lparr>es = envTransES eact (fst \\<circ> aact)\n                                (es (tLast t)),\n                     ps = snd \\<circ> aact,\n                     pubActs = (fst eact, fst \\<circ> aact)\\<rparr>)\n              (a := ps s' a)\\<rparr>", "using tSplice_es[OF tLen[symmetric]] aact''_fst aact''_snd"], ["proof (prove)\nusing this:\n  es (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> t')) =\n  es (tLast t)\n  fst \\<circ> aact'' = fst \\<circ> aact\n  snd \\<circ> aact'' = (snd \\<circ> aact)(a := ps s' a)\n\ngoal (1 subgoal):\n 1. \\<lparr>es = envTransES eact (fst \\<circ> aact'')\n                  (es (tLast\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'))),\n       ps = snd \\<circ> aact'',\n       pubActs = (fst eact, fst \\<circ> aact'')\\<rparr> =\n    \\<lparr>es = envTransES eact (fst \\<circ> aact) (es (tLast t)),\n       ps = snd \\<circ> aact, pubActs = (fst eact, fst \\<circ> aact)\\<rparr>\n    \\<lparr>ps :=\n              (ps \\<lparr>es = envTransES eact (fst \\<circ> aact)\n                                (es (tLast t)),\n                     ps = snd \\<circ> aact,\n                     pubActs = (fst eact, fst \\<circ> aact)\\<rparr>)\n              (a := ps s' a)\\<rparr>", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "{"], ["proof (state)\nthis:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "have \"aact'' a' \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "proof(cases \"a' = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "case False"], ["proof (state)\nthis:\n  a' \\<noteq> a\n\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' \\<noteq> a", "have \"jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a'\n                     = jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t a'\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t))\n     (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n    jAction (SPR.MCn (tLength t)) t a'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t))\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')\n                       a' =\n                      jAction (SPR.MCn (tLength t)) t a'", "apply (rule S5n_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations (SPR.MCn (tLength t)) a'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations (SPR.MCn (tLength t)) a'", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a'", "using tSplice_spr_jview_not_a tt'"], ["proof (prove)\nusing this:\n  \\<lbrakk>tObsC ?t = tObsC ?t'; ?a \\<noteq> ?a'\\<rbrakk>\n  \\<Longrightarrow> spr_jview ?a'\n                     (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t') =\n                    spr_jview ?a' ?t\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s');\n     a' \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t)\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a'", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (2 subgoals):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n 2. a' \\<noteq> a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with False aact"], ["proof (chain)\npicking this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'", "show ?thesis"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "unfolding aact''_def"], ["proof (prove)\nusing this:\n  a' \\<noteq> a\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t)) t a)\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a' =\n  jAction (SPR.MCn (tLength t)) t a'\n\ngoal (1 subgoal):\n 1. (aact(a := aact' a)) a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "by simp"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "case True"], ["proof (state)\nthis:\n  a' = a\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' = a", "have \"jAction (SPR.mkM (SPR.jkbpCn (tLength t))) (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a\n                     = jAction (SPR.mkM (SPR.jkbpCn (tLength t))) t' a\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  a' = a\n\ngoal (1 subgoal):\n 1. jAction (SPR.MCn (tLength t))\n     (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n    jAction (SPR.MCn (tLength t)) t' a", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> jAction (SPR.MCn (tLength t))\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n                      jAction (SPR.MCn (tLength t)) t' a", "apply (rule S5n_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t))\n 2. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations (SPR.MCn (tLength t)) a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations (SPR.MCn (tLength t)) a", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a", "using tSplice_spr_jview_a tt'"], ["proof (prove)\nusing this:\n  tObsC ?t = tObsC ?t' \\<Longrightarrow>\n  spr_jview ?a (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t') =\n  spr_jview ?a ?t'\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tLength t = tLength t';\n     \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n      envObs a (tFirst t) = envObs a (tFirst t');\n      tObsC t = tObsC t'\\<rbrakk>\n     \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                       \\<in> SPR.jkbpC;\n     {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n     envObs a (tFirst (t \\<leadsto> s)) =\n     envObs a (tFirst (t' \\<leadsto> s'));\n     tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s'); a' = a\\<rbrakk>\n    \\<Longrightarrow> (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t', t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     {(t, t').\n{t, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\nspr_jview a t = spr_jview a t'},\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             a", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. a' = a \\<Longrightarrow>\n    aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "with True aact' tLen"], ["proof (chain)\npicking this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a", "show ?thesis"], ["proof (prove)\nusing this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. aact'' a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "unfolding aact''_def"], ["proof (prove)\nusing this:\n  a' = a\n  \\<forall>a. aact' a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  tLength t' = tLength t\n  jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a =\n  jAction (SPR.MCn (tLength t)) t' a\n\ngoal (1 subgoal):\n 1. (aact(a := aact' a)) a'\n    \\<in> set (jAction (SPR.MCn (tLength t))\n                (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')", "by simp"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  aact'' a'\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a')\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "}"], ["proof (state)\nthis:\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "from tStep"], ["proof (chain)\npicking this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')", "have \"envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) = envAction (tLast t)\""], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n\ngoal (1 subgoal):\n 1. envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    envAction (tLast t)", "using tSplice_envAction"], ["proof (prove)\nusing this:\n  tLength t = tLength t'\n  \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n   envObs a (tFirst t) = envObs a (tFirst t'); tObsC t = tObsC t'\\<rbrakk>\n  \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                    \\<in> SPR.jkbpC\n  {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC\n  envObs a (tFirst (t \\<leadsto> s)) = envObs a (tFirst (t' \\<leadsto> s'))\n  tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\n  tLength ?t = tLength ?t' \\<Longrightarrow>\n  envAction (tLast (?t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>?a\\<^esub> ?t')) =\n  envAction (tLast ?t)\n\ngoal (1 subgoal):\n 1. envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n    envAction (tLast t)", "by blast"], ["proof (state)\nthis:\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "moreover"], ["proof (state)\nthis:\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "note eact trans tt'n"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "ultimately"], ["proof (chain)\npicking this:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)", "have \"(t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto> sSplice a s s' \\<in> SPR.jkbpCn (Suc (tLength t))\""], ["proof (prove)\nusing this:\n  envTrans eact aact''\n   (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  sSplice a (envTrans eact aact (tLast t)) s'\n  aact'' ?a'3\n  \\<in> set (jAction (SPR.MCn (tLength t))\n              (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') ?a'3)\n  envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n  envAction (tLast t)\n  eact \\<in> set (envAction (tLast t))\n  envTrans eact aact (tLast t) = s\n  t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n  \\<in> SPR.jkbpCn (tLength t)\n\ngoal (1 subgoal):\n 1. (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpCn (Suc (tLength t))", "apply (simp add: Let_def del: split_paired_Ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>eact aact.\n                         sSplice a s s' =\n                         envTrans eact aact\n                          (tLast\n                            (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                         eact \\<in> set (envAction (tLast t)) \\<and>\n                         (\\<forall>aa.\n                             aact aa\n                             \\<in> set (jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply (rule exI[where x=\"eact\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aact.\n                         sSplice a s s' =\n                         envTrans eact aact\n                          (tLast\n                            (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                         eact \\<in> set (envAction (tLast t)) \\<and>\n                         (\\<forall>aa.\n                             aact aa\n                             \\<in> set (jAction (SPR.MCn (tLength t))\n   (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply (rule exI[where x=\"aact''\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>envTrans eact aact''\n              (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n             sSplice a s s';\n     \\<And>a'.\n        aact'' a'\n        \\<in> set (jAction (SPR.MCn (tLength t))\n                    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') a');\n     envAction (tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) =\n     envAction (tLast t);\n     eact \\<in> set (envAction (tLast t)); envTrans eact aact (tLast t) = s;\n     t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n     \\<in> SPR.jkbpCn (tLength t)\\<rbrakk>\n    \\<Longrightarrow> sSplice a s s' =\n                      envTrans eact aact''\n                       (tLast\n                         (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t')) \\<and>\n                      eact \\<in> set (envAction (tLast t)) \\<and>\n                      (\\<forall>aa.\n                          aact'' aa\n                          \\<in> set (jAction (SPR.MCn (tLength t))\n(t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') aa))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n  sSplice a s s'\n  \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. \\<And>s s' t t'.\n       \\<lbrakk>tLength t = tLength t';\n        \\<lbrakk>{t, t'} \\<subseteq> SPR.jkbpC;\n         envObs a (tFirst t) = envObs a (tFirst t');\n         tObsC t = tObsC t'\\<rbrakk>\n        \\<Longrightarrow> t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t'\n                          \\<in> SPR.jkbpC;\n        {t \\<leadsto> s, t' \\<leadsto> s'} \\<subseteq> SPR.jkbpC;\n        envObs a (tFirst (t \\<leadsto> s)) =\n        envObs a (tFirst (t' \\<leadsto> s'));\n        tObsC (t \\<leadsto> s) = tObsC (t' \\<leadsto> s')\\<rbrakk>\n       \\<Longrightarrow> t \\<leadsto>\n                         s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto>\n                                s'\n                         \\<in> SPR.jkbpC", "thus ?case"], ["proof (prove)\nusing this:\n  (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n  sSplice a s s'\n  \\<in> SPR.jkbpCn (Suc (tLength t))\n\ngoal (1 subgoal):\n 1. t \\<leadsto>\n    s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto> s'\n    \\<in> SPR.jkbpC", "apply (simp only: tZip.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpCn (Suc (tLength t)) \\<Longrightarrow>\n    (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t') \\<leadsto>\n    sSplice a s s'\n    \\<in> SPR.jkbpC", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t \\<leadsto> s \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> t' \\<leadsto> s'\n  \\<in> SPR.jkbpC\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "proof(rule sim_rI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "fix a p q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "assume pT: \"p \\<in> worlds SPR.MC\"\n     and fpq': \"(spr_sim p, q') \\<in> relations spr_simMC a\""], ["proof (state)\nthis:\n  p \\<in> worlds SPR.MC\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_sim p, q') \\<in> relations spr_simMC a", "obtain uq fq vq\n    where q': \"q' = \\<lparr> sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p \\<rparr>\"\n      and uq: \"envObs a (tFirst p) = envObs a uq\"\n      and vq: \"envObs a (tLast p) = envObs a vq\""], ["proof (prove)\nusing this:\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. (\\<And>uq vq.\n        \\<lbrakk>q' =\n                 \\<lparr>sprFst = uq, sprLst = vq,\n                    sprCRel = tObsC_abs p\\<rparr>;\n         envObs a (tFirst p) = envObs a uq;\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mkKripke_def spr_sim_def spr_simRels_def"], ["proof (prove)\nusing this:\n  (\\<lparr>sprFst = tFirst p, sprLst = tLast p,\n      sprCRel = tObsC_abs p\\<rparr>,\n   q')\n  \\<in> relations\n         \\<lparr>worlds =\n                   (\\<lambda>t.\n                       \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                          sprCRel = tObsC_abs t\\<rparr>) `\n                   SPR.jkbpC,\n            relations =\n              \\<lambda>a.\n                 Restr\n                  {(s, s') |s s'.\n                   envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n                   envObs a (sprLst s) = envObs a (sprLst s') \\<and>\n                   sprCRel s = sprCRel s'}\n                  ((\\<lambda>t.\n                       \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                          sprCRel = tObsC_abs t\\<rparr>) `\n                   SPR.jkbpC),\n            valuation = spr_simVal\\<rparr>\n         a\n\ngoal (1 subgoal):\n 1. (\\<And>uq vq.\n        \\<lbrakk>q' =\n                 \\<lparr>sprFst = uq, sprLst = vq,\n                    sprCRel = tObsC_abs p\\<rparr>;\n         envObs a (tFirst p) = envObs a uq;\n         envObs a (tLast p) = envObs a vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from fpq'"], ["proof (chain)\npicking this:\n  (spr_sim p, q') \\<in> relations spr_simMC a", "have \"q' \\<in> worlds spr_simMC\""], ["proof (prove)\nusing this:\n  (spr_sim p, q') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. q' \\<in> worlds spr_simMC", "by simp"], ["proof (state)\nthis:\n  q' \\<in> worlds spr_simMC\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with q'"], ["proof (chain)\npicking this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC", "have \"(uq, vq) \\<in> tObsC_abs p\""], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC\n\ngoal (1 subgoal):\n 1. (uq, vq) \\<in> tObsC_abs p", "using spr_sim_tFirst_tLast[where s=q']"], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  q' \\<in> worlds spr_simMC\n  \\<lbrakk>spr_sim ?t = q'; ?t \\<in> SPR.jkbpC\\<rbrakk>\n  \\<Longrightarrow> (sprFst q', sprLst q') \\<in> sprCRel q'\n\ngoal (1 subgoal):\n 1. (uq, vq) \\<in> tObsC_abs p", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (uq, vq) \\<in> tObsC_abs p\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "then"], ["proof (chain)\npicking this:\n  (uq, vq) \\<in> tObsC_abs p", "obtain t\n    where tT: \"t \\<in> SPR.jkbpC\"\n      and tp: \"tObsC t = tObsC p\"\n      and tuq: \"tFirst t = uq\"\n      and tvq: \"tLast t = vq\""], ["proof (prove)\nusing this:\n  (uq, vq) \\<in> tObsC_abs p\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> SPR.jkbpC; tObsC t = tObsC p; tFirst t = uq;\n         tLast t = vq\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: tObsC_abs_conv)"], ["proof (state)\nthis:\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "define q where \"q = t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p\""], ["proof (state)\nthis:\n  q = t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from tp tuq uq"], ["proof (chain)\npicking this:\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq", "have \"spr_jview a p = spr_jview a q\""], ["proof (prove)\nusing this:\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n\ngoal (1 subgoal):\n 1. spr_jview a p = spr_jview a q", "unfolding q_def"], ["proof (prove)\nusing this:\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n\ngoal (1 subgoal):\n 1. spr_jview a p =\n    spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)", "by (simp add: tSplice_spr_jview_a)"], ["proof (state)\nthis:\n  spr_jview a p = spr_jview a q\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with pT tT tp tuq uq"], ["proof (chain)\npicking this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n  spr_jview a p = spr_jview a q", "have pt: \"(p, q) \\<in> relations SPR.MC a\""], ["proof (prove)\nusing this:\n  p \\<in> worlds SPR.MC\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n  spr_jview a p = spr_jview a q\n\ngoal (1 subgoal):\n 1. (p, q) \\<in> relations SPR.MC a", "unfolding SPR.mkM_def q_def"], ["proof (prove)\nusing this:\n  p \\<in> worlds\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   {(t, t').\n                    {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                    spr_jview a t = spr_jview a t'},\n              valuation = envVal \\<circ> tLast\\<rparr>\n  t \\<in> SPR.jkbpC\n  tObsC t = tObsC p\n  tFirst t = uq\n  envObs a (tFirst p) = envObs a uq\n  spr_jview a p =\n  spr_jview a (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\n\ngoal (1 subgoal):\n 1. (p, t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\n    \\<in> relations\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   {(t, t').\n                    {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                    spr_jview a t = spr_jview a t'},\n              valuation = envVal \\<circ> tLast\\<rparr>\n           a", "by (simp add: tSplice_jkbpC)"], ["proof (state)\nthis:\n  (p, q) \\<in> relations SPR.MC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from q' uq vq tp tuq tvq"], ["proof (chain)\npicking this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq", "have ftq': \"spr_sim q = q'\""], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. spr_sim q = q'", "unfolding spr_sim_def q_def"], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n\ngoal (1 subgoal):\n 1. \\<lparr>sprFst =\n              tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n       sprLst = tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n       sprCRel =\n         tObsC_abs\n          (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\\<rparr> =\n    q'", "using tSplice_tObsC[where a=a and t=t and t'=p]"], ["proof (prove)\nusing this:\n  q' = \\<lparr>sprFst = uq, sprLst = vq, sprCRel = tObsC_abs p\\<rparr>\n  envObs a (tFirst p) = envObs a uq\n  envObs a (tLast p) = envObs a vq\n  tObsC t = tObsC p\n  tFirst t = uq\n  tLast t = vq\n  tObsC t = tObsC p \\<Longrightarrow>\n  tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC t\n\ngoal (1 subgoal):\n 1. \\<lparr>sprFst =\n              tFirst (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n       sprLst = tLast (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p),\n       sprCRel =\n         tObsC_abs\n          (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)\\<rparr> =\n    q'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs p\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tFirst\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tFirst t \\<and>\n                      tLast\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tLast t \\<and>\n                      tObsC_abs\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tObsC_abs p", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs p\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tFirst\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tFirst t\n 2. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs p\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tLast\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tLast t\n 3. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs p\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tObsC_abs\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tObsC_abs p", "apply (auto dest: tObsC_tLength)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel = tObsC_abs p\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> tObsC_abs\n                       (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) =\n                      tObsC_abs p", "unfolding tObsC_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel =\n                  {(tFirst t', tLast t') |t'.\n                   t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> {(tFirst t', tLast t') |t'.\n                       t' \\<in> SPR.jkbpC \\<and>\n                       tObsC t' =\n                       tObsC\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)} =\n                      {(tFirst t', tLast t') |t'.\n                       t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}", "(* FIXME abstract *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q' =\n             \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                sprCRel =\n                  {(tFirst t', tLast t') |t'.\n                   t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}\\<rparr>;\n     envObs a (tFirst p) = envObs a (tFirst t);\n     envObs a (tLast p) = envObs a (tLast t); tObsC t = tObsC p;\n     tObsC (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p) = tObsC p;\n     uq = tFirst t; vq = tLast t\\<rbrakk>\n    \\<Longrightarrow> {(tFirst t', tLast t') |t'.\n                       t' \\<in> SPR.jkbpC \\<and>\n                       tObsC t' =\n                       tObsC\n                        (t \\<^bsub>\\<^esub>\\<bowtie>\\<^bsub>a\\<^esub> p)} =\n                      {(tFirst t', tLast t') |t'.\n                       t' \\<in> SPR.jkbpC \\<and> tObsC t' = tObsC p}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_sim q = q'\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from pt ftq'"], ["proof (chain)\npicking this:\n  (p, q) \\<in> relations SPR.MC a\n  spr_sim q = q'", "show \"\\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'\""], ["proof (prove)\nusing this:\n  (p, q) \\<in> relations SPR.MC a\n  spr_sim q = q'\n\ngoal (1 subgoal):\n 1. \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'", "by blast"], ["proof (state)\nthis:\n  \\<exists>q. (p, q) \\<in> relations SPR.MC a \\<and> spr_sim q = q'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe proof is by induction over @{term \"t\"} and @{term \"t'\"}, and\ndepends crucially on the public actions being recorded in the state\nand commonly observed. Showing the reverse simulation property is then\nstraightforward.\n\n\\<close>"], ["", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. sim_range SPR.MC spr_simMC spr_sim\n 2. sim_val SPR.MC spr_simMC spr_sim\n 3. sim_f SPR.MC spr_simMC spr_sim\n 4. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_range SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_range SPR.MC spr_simMC spr_sim", "by (rule sim_rangeI) (simp_all add: spr_sim_def)"], ["proof (state)\nthis:\n  sim_range SPR.MC spr_simMC spr_sim\n\ngoal (3 subgoals):\n 1. sim_val SPR.MC spr_simMC spr_sim\n 2. sim_f SPR.MC spr_simMC spr_sim\n 3. sim_r SPR.MC spr_simMC spr_sim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sim_val SPR.MC spr_simMC spr_sim\n 2. sim_f SPR.MC spr_simMC spr_sim\n 3. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_val SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val SPR.MC spr_simMC spr_sim", "by (rule sim_valI) simp"], ["proof (state)\nthis:\n  sim_val SPR.MC spr_simMC spr_sim\n\ngoal (2 subgoals):\n 1. sim_f SPR.MC spr_simMC spr_sim\n 2. sim_r SPR.MC spr_simMC spr_sim", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sim_f SPR.MC spr_simMC spr_sim\n 2. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_f SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f SPR.MC spr_simMC spr_sim", "unfolding spr_simRels_def spr_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f\n     \\<lparr>worlds = SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             {(t, t').\n              {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n              spr_jview a t = spr_jview a t'},\n        valuation = envVal \\<circ> tLast\\<rparr>\n     \\<lparr>worlds =\n               (\\<lambda>t.\n                   \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                      sprCRel = tObsC_abs t\\<rparr>) `\n               SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             Restr\n              {(s, s') |s s'.\n               envObs a (sprFst s) = envObs a (sprFst s') \\<and>\n               envObs a (sprLst s) = envObs a (sprLst s') \\<and>\n               sprCRel s = sprCRel s'}\n              ((\\<lambda>t.\n                   \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n                      sprCRel = tObsC_abs t\\<rparr>) `\n               SPR.jkbpC),\n        valuation = spr_simVal\\<rparr>\n     (\\<lambda>t.\n         \\<lparr>sprFst = tFirst t, sprLst = tLast t,\n            sprCRel = tObsC_abs t\\<rparr>)", "by (rule sim_fI, auto simp del: split_paired_Ex)"], ["proof (state)\nthis:\n  sim_f SPR.MC spr_simMC spr_sim\n\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_r SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "by (rule spr_sim_r)"], ["proof (state)\nthis:\n  sim_r SPR.MC spr_simMC spr_sim\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "end"], ["", "(* context FiniteBroadcastEnvironment *)"], ["", "sublocale FiniteBroadcastEnvironment\n        < SPR: SimIncrEnvironment jkbp envInit envAction envTrans envVal\n                                       spr_jview envObs spr_jviewInit spr_jviewIncr\n                                       spr_sim spr_simRels spr_simVal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "by standard (simp add: spr_sim)"], ["", "(*>*)"], ["", "text\\<open>\n\nThe algorithmic representations and machinery of the deterministic\nJKBP case suffice for this one too, and so we omit the details.\n\n\\FloatBarrier\n\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}