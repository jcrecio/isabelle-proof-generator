{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/Robot.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma Agent_univ: \"(UNIV :: Agent set) = {Robot}\"", "lemma (in FiniteLinorderEnvironment)\n  \"Robot.Clock.implements robot_ClockAlg\"", "lemma (in FiniteSingleAgentEnvironment)\n  \"Robot.Robot.SPR.implements robot_SPRSingleAlg\""], "translations": [["", "lemma Agent_univ: \"(UNIV :: Agent set) = {Robot}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = {Robot}", "unfolding UNIV_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext (\\<lambda>x. True) = {Robot}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x = Robot", "apply (case_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x = Robot \\<Longrightarrow> x = Robot", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instance Agent :: finite"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Agent, finite_class)", "apply intro_classes"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV", "apply (auto iff: Agent_univ)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instantiation Agent :: linorder\nbegin"], ["", "definition\n  less_Agent_def: \"(x::Agent) < y \\<equiv> False\""], ["", "definition\n  less_eq_Agent_def: \"(x::Agent) \\<le> y \\<equiv> x = y\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Agent, linorder_class)", "apply intro_classes"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "unfolding less_Agent_def less_eq_Agent_def"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. False = (x = y \\<and> y \\<noteq> x)\n 2. \\<And>x. x = x\n 3. \\<And>x y z. \\<lbrakk>x = y; y = z\\<rbrakk> \\<Longrightarrow> x = z\n 4. \\<And>x y. \\<lbrakk>x = y; y = x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x = y \\<or> y = x", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x = y \\<or> y = x", "apply (case_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x = Robot \\<Longrightarrow> x = y \\<or> y = x", "apply (case_tac y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x = Robot; y = Robot\\<rbrakk>\n       \\<Longrightarrow> x = y \\<or> y = x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "(*>*)"], ["", "subsubsection\\<open>Locale instantiations\\<close>"], ["", "interpretation Robot:\n  Environment \"\\<lambda>_. kbp\" envInit envAction envTrans envVal \"\\<lambda>_. envObs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Environment (\\<lambda>_. kbp)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a gc.\n       gc \\<in> set kbp \\<longrightarrow> subjective a (guard gc)", "apply (auto simp: kbp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. a = Robot\n 2. \\<And>a. a = Robot", "apply ((case_tac a, simp)+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>The Clock view implementation\\<close>"], ["", "interpretation Robot_Clock:\n  FiniteLinorderEnvironment \"\\<lambda>_. kbp\" envInit envAction envTrans envVal \"\\<lambda>_. envObs\" \"fromList [Robot]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FiniteLinorderEnvironment (\\<lambda>_. kbp) (fromList [Robot])", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (fromList [Robot]) = UNIV", "apply (simp add: Agent_univ)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "abbreviation \"Agents \\<equiv> ODList.fromList [Robot]\""], ["", "definition\n  robot_ClockDFS :: \"((EnvState, RobotAct list) clock_acts_trie, (EnvState, digit) clock_trans_trie) AlgState\"\nwhere\n  \"robot_ClockDFS \\<equiv> ClockAutoDFS Agents (\\<lambda>_. kbp) envInit envAction envTrans envVal (\\<lambda>_. envObs) Robot\""], ["", "definition\n  robot_ClockAlg :: \"Agent \\<Rightarrow> (digit, RobotAct, EnvState odlist \\<times> EnvState odlist) Protocol\"\nwhere\n  \"robot_ClockAlg \\<equiv> mkClockAuto Agents (\\<lambda>_. kbp) envInit envAction envTrans envVal (\\<lambda>_. envObs)\""], ["", "lemma (in FiniteLinorderEnvironment)\n  \"Robot.Clock.implements robot_ClockAlg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Robot.Clock.implements robot_ClockAlg", "unfolding robot_ClockAlg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Robot.Clock.implements\n     (mkClockAuto Agents (\\<lambda>_. kbp) envInit envAction envTrans envVal\n       (\\<lambda>_. envObs))", "by (rule Robot_Clock.mkClockAuto_implements)"], ["", "subsubsection\\<open>The SPR view implementation\\<close>"], ["", "interpretation Robot_SPR:\n  FiniteSingleAgentEnvironment \"\\<lambda>_. kbp\" envInit envAction envTrans envVal \"\\<lambda>_. envObs\" \"Robot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FiniteSingleAgentEnvironment (\\<lambda>_. kbp) Robot", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a = Robot", "apply (case_tac a, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  robot_SPRSingleDFS :: \"(RobotAct, digit, EnvState) SPRSingleAutoDFS\"\nwhere\n  \"robot_SPRSingleDFS \\<equiv> SPRSingleAutoDFS kbp envInit envAction envTrans envVal (\\<lambda>_. envObs) Robot\""], ["", "definition\n  robot_SPRSingleAlg :: \"Agent \\<Rightarrow> (digit, RobotAct, EnvState odlist) Protocol\"\nwhere\n  \"robot_SPRSingleAlg \\<equiv> mkSPRSingleAuto kbp envInit envAction envTrans envVal (\\<lambda>_. envObs)\""], ["", "lemma (in FiniteSingleAgentEnvironment)\n  \"Robot.Robot.SPR.implements robot_SPRSingleAlg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Robot.SPR.implements robot_SPRSingleAlg", "unfolding robot_SPRSingleAlg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Robot.SPR.implements\n     (mkSPRSingleAuto kbp envInit envAction envTrans envVal\n       (\\<lambda>_. envObs))", "by (rule Robot.Robot_SPR.mkSPRSingleAuto_implements)"], ["", "end"], ["", "(*>*)"]]}