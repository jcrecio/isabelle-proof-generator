{"file_name": "/home/qj213/afp-2021-10-22/thys/KBPs/SPRViewSingle.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KBPs", "problem_names": ["lemma spr_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> spr_abs t\"", "lemma spr_abs_tLastD[simp]:\n  \"v \\<in> spr_abs t \\<Longrightarrow> envObs a v = envObs a (tLast t)\"", "lemma spr_abs_conv:\n  \"v \\<in> spr_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t \\<and> v = tLast t')\"", "lemma spr_abs_eq[dest]:\n  \"spr_jview a t = spr_jview a t' \\<Longrightarrow> spr_abs t = spr_abs t'\"", "lemma spr_abs_refl[intro, simp]:\n  \"t \\<in> SPR.jkbpC \\<Longrightarrow> tLast t \\<in> spr_abs t\"", "lemma spr_sim_simps[simp]:\n  \"fst (spr_sim t) = spr_abs t\"", "lemma spr_simVal[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\"", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\"", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\"", "lemma spr_simAbs_inj: \"inj spr_simAbs\"", "lemma spr_sim_rep_abs[simp]:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"toSet ec = spr_abs t\"", "lemma spr_sim_rep_abs_syn[simp]:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (toList ec) = spr_abs t\"", "lemma spr_simAbs_list:\n  \"spr_simAbs ` fromList ` X = (\\<lambda>ss. { (ss, s) |s. s \\<in> ss }) ` set ` X\"", "lemma spr_repMC_kripke[intro, simp]: \"kripke (spr_repMC X)\"", "lemma spr_repMC_S5n[intro, simp]: \"S5n (spr_repMC X)\"", "lemma jkbpCSt_jkbpCS_subset:\n  \"SPRsingle.sim_equiv_class agent t \\<subseteq> spr_sim ` SPR.jkbpC\"", "lemma spr_simRep_sim_simps[simp]:\n  \"spr_repSim ` spr_sim ` T = tLast ` T\"\n  \"spr_repSim (spr_sim t) = tLast t\"", "lemma spr_repSim:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  shows \"sim (spr_simMCt t)\n             ((spr_repMC \\<circ> fst) (spr_sim t))\n             spr_repSim\"\n(*<*) (is \"sim ?M ?M' ?f\")", "lemma spr_simInit:\n  assumes \"iobs \\<in> envObs a ` set envInit\"\n  shows \"spr_simAbs (spr_simInit a iobs)\n       = spr_sim ` { t' \\<in> SPR.jkbpC. spr_jview a t' = spr_jviewInit a iobs }\"", "lemma spr_simObs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"spr_simObs a ec = envObs a (tLast t)\"", "lemma eval_ec_subseteq:\n  shows \"toSet (eval envVal ec \\<phi>) \\<subseteq> toSet ec\"", "lemma eval_models_aux:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  assumes s: \"s \\<in> toSet ec\"\n  shows \"s \\<in> toSet (eval envVal ec \\<phi>) \\<longleftrightarrow> spr_repMC (toSet ec), s \\<Turnstile> \\<phi>\"", "lemma eval_all_or_nothing:\n  assumes subj_phi: \"subjective agent \\<phi>\"\n  shows \"toSet (eval envVal ec \\<phi>) = {} \\<or> toSet (eval envVal ec \\<phi>) = toSet ec\"", "lemma eval_models:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  assumes subj: \"subjective agent \\<phi>\"\n  assumes s: \"s \\<in> toSet ec\"\n  shows \"toSet (eval envVal ec \\<phi>) \\<noteq> {} \\<longleftrightarrow> spr_repMC (toSet ec), s \\<Turnstile> \\<phi>\"", "lemma spr_simAction_jAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (spr_simAction agent ec)\n       = set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\"", "lemma spr_submodel_aux:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and s: \"s \\<in> worlds (spr_simMCt t)\"\n  shows \"gen_model SPRsingle.MCS s = gen_model (spr_simMCt t) s\"", "lemma spr_simAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec) = set (jAction SPR.MC t a)\"", "lemma envObs_rel_equiv:\n  \"equiv UNIV (rel_ext (envObs_rel (envObs agent)))\"", "lemma spr_trans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (spr_trans agent ec)\n       = { s |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t }\" (is \"?lhs = ?rhs\")", "lemma spr_simTrans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"spr_simAbs ` set (spr_simTrans a ec)\n      = { SPRsingle.sim_equiv_class a (t' \\<leadsto> s)\n          |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n(*<*) (is \"?lhs a = ?rhs a\")", "lemma (in FiniteSingleAgentEnvironment) trans_MapOps[intro, simp]:\n  \"MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k)) (SPRsingle.jkbpSEC \\<times> UNIV) trans_MapOps\"", "lemma (in FiniteSingleAgentEnvironment) mkSPRSingleAuto_implements:\n  \"SPR.implements (mkSPRSingleAuto (jkbp agent) envInit envAction envTrans envVal envObs)\"", "lemma (in FiniteSingleAgentEnvironment)\n  \"mkSPRSingleAuto kbp envInit envAction envTrans envVal envObs\n = (\\<lambda>a. alg_mk_auto trie_odlist_MapOps trans_MapOps (spr_simInit a) (SPRSingleAutoDFS kbp envInit envAction envTrans envVal envObs a))\""], "translations": [["", "lemma spr_absI[elim]:\n  \"\\<lbrakk> t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t; v = tLast t' \\<rbrakk>\n    \\<Longrightarrow> v \\<in> spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> spr_abs t", "unfolding spr_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> tLast `\n                              rel_ext\n                               (\\<lambda>t'.\n                                   t' \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' = spr_jview agent t)", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  a = agent\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t' \\<in> SPR.jkbpC; spr_jview a t' = spr_jview a t;\n     v = tLast t'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> tLast `\n                              rel_ext\n                               (\\<lambda>t'.\n                                   t' \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' = spr_jview agent t)", "by blast"], ["", "lemma spr_abs_tLastD[simp]:\n  \"v \\<in> spr_abs t \\<Longrightarrow> envObs a v = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> spr_abs t \\<Longrightarrow> envObs a v = envObs a (tLast t)", "unfolding spr_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> tLast `\n            rel_ext\n             (\\<lambda>t'.\n                 t' \\<in> SPR.jkbpC \\<and>\n                 spr_jview agent t' = spr_jview agent t) \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  a = agent\n\ngoal (1 subgoal):\n 1. v \\<in> tLast `\n            rel_ext\n             (\\<lambda>t'.\n                 t' \\<in> SPR.jkbpC \\<and>\n                 spr_jview agent t' = spr_jview agent t) \\<Longrightarrow>\n    envObs a v = envObs a (tLast t)", "by auto"], ["", "lemma spr_abs_conv:\n  \"v \\<in> spr_abs t\n    \\<longleftrightarrow> (\\<exists>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t \\<and> v = tLast t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> spr_abs t) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        spr_jview a t' = spr_jview a t \\<and> v = tLast t')", "unfolding spr_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> tLast `\n             rel_ext\n              (\\<lambda>t'.\n                  t' \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        spr_jview a t' = spr_jview a t \\<and> v = tLast t')", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  a = agent\n\ngoal (1 subgoal):\n 1. (v \\<in> tLast `\n             rel_ext\n              (\\<lambda>t'.\n                  t' \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) =\n    (\\<exists>t'.\n        t' \\<in> SPR.jkbpC \\<and>\n        spr_jview a t' = spr_jview a t \\<and> v = tLast t')", "by blast"], ["", "lemma spr_abs_eq[dest]:\n  \"spr_jview a t = spr_jview a t' \\<Longrightarrow> spr_abs t = spr_abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t' \\<Longrightarrow> spr_abs t = spr_abs t'", "unfolding spr_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t' \\<Longrightarrow>\n    tLast `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t) =\n    tLast `\n    rel_ext\n     (\\<lambda>t'a.\n         t'a \\<in> SPR.jkbpC \\<and>\n         spr_jview agent t'a = spr_jview agent t')", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  a = agent\n\ngoal (1 subgoal):\n 1. spr_jview a t = spr_jview a t' \\<Longrightarrow>\n    tLast `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t) =\n    tLast `\n    rel_ext\n     (\\<lambda>t'a.\n         t'a \\<in> SPR.jkbpC \\<and>\n         spr_jview agent t'a = spr_jview agent t')", "by auto"], ["", "lemma spr_abs_refl[intro, simp]:\n  \"t \\<in> SPR.jkbpC \\<Longrightarrow> tLast t \\<in> spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> SPR.jkbpC \\<Longrightarrow> tLast t \\<in> spr_abs t", "unfolding spr_abs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> SPR.jkbpC \\<Longrightarrow>\n    tLast t\n    \\<in> tLast `\n          rel_ext\n           (\\<lambda>t'.\n               t' \\<in> SPR.jkbpC \\<and>\n               spr_jview agent t' = spr_jview agent t)", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  a = agent\n\ngoal (1 subgoal):\n 1. t \\<in> SPR.jkbpC \\<Longrightarrow>\n    tLast t\n    \\<in> tLast `\n          rel_ext\n           (\\<lambda>t'.\n               t' \\<in> SPR.jkbpC \\<and>\n               spr_jview agent t' = spr_jview agent t)", "by auto"], ["", "lemma spr_sim_simps[simp]:\n  \"fst (spr_sim t) = spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (spr_sim t) = spr_abs t", "unfolding spr_sim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (spr_abs t, tLast t) = spr_abs t", "by simp"], ["", "(*>*)"], ["", "text\\<open>\n\nThe Kripke structure for this simulation relates worlds for @{term\n\"agent\"} if the sets of states it considers possible coincide, and the\nobservation of the final states of the trace is the same. Propositions\nare evaluated at the final state.\n\n\\<close>"], ["", "definition spr_simRels :: \"'a \\<Rightarrow> 's spr_simWorlds Relation\" where\n  \"spr_simRels \\<equiv> \\<lambda>a. { ((U, u), (V, v)) |U u V v.\n                         U = V \\<and> {u, v} \\<subseteq> U \\<and> envObs a u = envObs a v }\""], ["", "definition spr_simVal :: \"'s spr_simWorlds \\<Rightarrow> 'p \\<Rightarrow> bool\" where\n  \"spr_simVal \\<equiv> envVal \\<circ> snd\""], ["", "abbreviation spr_simMC :: \"('a, 'p, 's spr_simWorlds) KripkeStructure\" where\n  \"spr_simMC \\<equiv> mkKripke (spr_sim ` SPR.jkbpC) spr_simRels spr_simVal\""], ["", "(*<*)"], ["", "lemma spr_simVal[iff]:\n  \"spr_simVal (spr_sim t) = envVal (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simVal (spr_sim t) = envVal (tLast t)", "unfolding spr_sim_def spr_simVal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envVal \\<circ> snd) (spr_abs t, tLast t) = envVal (tLast t)", "by simp"], ["", "lemma spr_sim_r:\n  \"sim_r SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "fix a t v'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "assume t: \"t \\<in> worlds SPR.MC\"\n     and tv': \"(spr_sim t, v') \\<in> relations spr_simMC a\""], ["proof (state)\nthis:\n  t \\<in> worlds SPR.MC\n  (spr_sim t, v') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from tv'"], ["proof (chain)\npicking this:\n  (spr_sim t, v') \\<in> relations spr_simMC a", "obtain s\n    where vv': \"v' = (spr_abs t, s)\"\n      and st: \"s \\<in> spr_abs t\""], ["proof (prove)\nusing this:\n  (spr_sim t, v') \\<in> relations spr_simMC a\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>v' = (spr_abs t, s); s \\<in> spr_abs t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding spr_simRels_def spr_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\nusing this:\n  ((spr_abs t, tLast t), v')\n  \\<in> relations\n         \\<lparr>worlds = (\\<lambda>t. (spr_abs t, tLast t)) ` SPR.jkbpC,\n            relations =\n              \\<lambda>a.\n                 Restr\n                  (rel_ext\n                    (\\<lambda>uu_.\n                        \\<exists>U u V v.\n                           uu_ = ((U, u), V, v) \\<and>\n                           U = V \\<and>\n                           {u, v} \\<subseteq> U \\<and>\n                           envObs a u = envObs a v))\n                  ((\\<lambda>t. (spr_abs t, tLast t)) ` SPR.jkbpC),\n            valuation = spr_simVal\\<rparr>\n         a\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>v' = (spr_abs t, s); s \\<in> spr_abs t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v' = (spr_abs t, s)\n  s \\<in> spr_abs t\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "from st"], ["proof (chain)\npicking this:\n  s \\<in> spr_abs t", "obtain v\n    where \"v \\<in> SPR.jkbpC\"\n      and \"spr_jview a v = spr_jview a t\"\n      and \"tLast v = s\""], ["proof (prove)\nusing this:\n  s \\<in> spr_abs t\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> SPR.jkbpC; spr_jview a v = spr_jview a t;\n         tLast v = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto(*<*)iff: spr_abs_conv(*>*))"], ["proof (state)\nthis:\n  v \\<in> SPR.jkbpC\n  spr_jview a v = spr_jview a t\n  tLast v = s\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "with t vv'"], ["proof (chain)\npicking this:\n  t \\<in> worlds SPR.MC\n  v' = (spr_abs t, s)\n  v \\<in> SPR.jkbpC\n  spr_jview a v = spr_jview a t\n  tLast v = s", "have \"(t, v) \\<in> relations SPR.MC a\"\n   and \"spr_sim v = v'\""], ["proof (prove)\nusing this:\n  t \\<in> worlds SPR.MC\n  v' = (spr_abs t, s)\n  v \\<in> SPR.jkbpC\n  spr_jview a v = spr_jview a t\n  tLast v = s\n\ngoal (1 subgoal):\n 1. (t, v) \\<in> relations SPR.MC a &&& spr_sim v = v'", "unfolding spr_simRels_def spr_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\nusing this:\n  t \\<in> worlds\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   rel_ext\n                    (\\<lambda>(t, t').\n                        {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                        spr_jview a t = spr_jview a t'),\n              valuation = envVal \\<circ> tLast\\<rparr>\n  v' = (spr_abs t, s)\n  v \\<in> SPR.jkbpC\n  spr_jview a v = spr_jview a t\n  tLast v = s\n\ngoal (1 subgoal):\n 1. (t, v)\n    \\<in> relations\n           \\<lparr>worlds = SPR.jkbpC,\n              relations =\n                \\<lambda>a.\n                   rel_ext\n                    (\\<lambda>(t, t').\n                        {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                        spr_jview a t = spr_jview a t'),\n              valuation = envVal \\<circ> tLast\\<rparr>\n           a &&&\n    (spr_abs v, tLast v) = v'", "by auto"], ["proof (state)\nthis:\n  (t, v) \\<in> relations SPR.MC a\n  spr_sim v = v'\n\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds SPR.MC;\n        (spr_sim u, v') \\<in> relations spr_simMC a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v) \\<in> relations SPR.MC a \\<and>\n                            spr_sim v = v'", "thus \"\\<exists>v. (t, v) \\<in> relations SPR.MC a \\<and> spr_sim v = v'\""], ["proof (prove)\nusing this:\n  (t, v) \\<in> relations SPR.MC a\n  spr_sim v = v'\n\ngoal (1 subgoal):\n 1. \\<exists>v. (t, v) \\<in> relations SPR.MC a \\<and> spr_sim v = v'", "by blast"], ["proof (state)\nthis:\n  \\<exists>v. (t, v) \\<in> relations SPR.MC a \\<and> spr_sim v = v'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nDemonstrating that this is a simulation\n(\\S\\ref{sec:kripke-theory-simulations}) is straightforward.\n\n\\<close>"], ["", "lemma spr_sim: \"sim SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim SPR.MC spr_simMC spr_sim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. sim_range SPR.MC spr_simMC spr_sim\n 2. sim_val SPR.MC spr_simMC spr_sim\n 3. sim_f SPR.MC spr_simMC spr_sim\n 4. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_f SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f SPR.MC spr_simMC spr_sim", "unfolding spr_simRels_def spr_sim_def mkKripke_def SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_f\n     \\<lparr>worlds = SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             rel_ext\n              (\\<lambda>(t, t').\n                  {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                  spr_jview a t = spr_jview a t'),\n        valuation = envVal \\<circ> tLast\\<rparr>\n     \\<lparr>worlds = (\\<lambda>t. (spr_abs t, tLast t)) ` SPR.jkbpC,\n        relations =\n          \\<lambda>a.\n             Restr\n              (rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>U u V v.\n                       uu_ = ((U, u), V, v) \\<and>\n                       U = V \\<and>\n                       {u, v} \\<subseteq> U \\<and> envObs a u = envObs a v))\n              ((\\<lambda>t. (spr_abs t, tLast t)) ` SPR.jkbpC),\n        valuation = spr_simVal\\<rparr>\n     (\\<lambda>t. (spr_abs t, tLast t))", "by (rule) auto"], ["proof (state)\nthis:\n  sim_f SPR.MC spr_simMC spr_sim\n\ngoal (3 subgoals):\n 1. sim_range SPR.MC spr_simMC spr_sim\n 2. sim_val SPR.MC spr_simMC spr_sim\n 3. sim_r SPR.MC spr_simMC spr_sim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sim_range SPR.MC spr_simMC spr_sim\n 2. sim_val SPR.MC spr_simMC spr_sim\n 3. sim_r SPR.MC spr_simMC spr_sim", "show \"sim_r SPR.MC spr_simMC spr_sim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r SPR.MC spr_simMC spr_sim", "by (rule spr_sim_r)"], ["proof (state)\nthis:\n  sim_r SPR.MC spr_simMC spr_sim\n\ngoal (2 subgoals):\n 1. sim_range SPR.MC spr_simMC spr_sim\n 2. sim_val SPR.MC spr_simMC spr_sim", "qed auto"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "end"], ["", "(* context FiniteSingleAgentEnvironment *)"], ["", "sublocale FiniteSingleAgentEnvironment\n        < SPRsingle: SimIncrEnvironment jkbp envInit envAction envTrans envVal\n                                       spr_jview envObs spr_jviewInit spr_jviewIncr\n                                       spr_sim spr_simRels spr_simVal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SimIncrEnvironment jkbp envInit envAction envTrans envVal spr_jview\n     envObs spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal", "by standard (rule spr_sim)"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Representations\\<close>"], ["", "text\\<open>\n\n\\label{sec:kbps-theory-spr-single-rep}\n\nAs in \\S\\ref{sec:kbps-theory-clock-view-algops}, we quotient @{typ \"'s\nspr_simWorlds\"} by @{term \"spr_simRels\"}. Because there is only a\nsingle agent, an element of this quotient corresponding to a cononical\ntrace @{term \"t\"} is isomorphic to the set of states that are possible\ngiven the sequence of observations made by @{term \"agent\"} on @{term\n\"t\"}. Therefore we have a very simple representation:\n\n\\<close>"], ["", "context FiniteSingleAgentEnvironment\nbegin"], ["", "type_synonym (in -) 's spr_simWorldsRep = \"'s odlist\""], ["", "text\\<open>\n\nIt is very easy to map these representations back to simulated\nequivalence classes:\n\n\\<close>"], ["", "definition\n  spr_simAbs :: \"'s spr_simWorldsRep \\<Rightarrow> 's spr_simWorlds set\"\nwhere\n  \"spr_simAbs \\<equiv> \\<lambda>ss. { (toSet ss, s) |s. s \\<in> toSet ss }\""], ["", "text\\<open>\n\nThis time our representation is unconditionally canonical:\n\n\\<close>"], ["", "lemma spr_simAbs_inj: \"inj spr_simAbs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj spr_simAbs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj spr_simAbs", "apply (rule injI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. spr_simAbs x = spr_simAbs y \\<Longrightarrow> x = y", "unfolding spr_simAbs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s. uu_ = (toSet x, s) \\<and> s \\<in> toSet x) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s.\n               uu_ = (toSet y, s) \\<and> s \\<in> toSet y) \\<Longrightarrow>\n       x = y", "apply (subgoal_tac \"toSet x = toSet y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>s.\n                        uu_ = (toSet x, s) \\<and> s \\<in> toSet x) =\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>s. uu_ = (toSet y, s) \\<and> s \\<in> toSet y);\n        toSet x = toSet y\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s. uu_ = (toSet x, s) \\<and> s \\<in> toSet x) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>s.\n               uu_ = (toSet y, s) \\<and> s \\<in> toSet y) \\<Longrightarrow>\n       toSet x = toSet y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. toSet x = toSet y \\<Longrightarrow> x = y", "using toSet_inj"], ["proof (prove)\nusing this:\n  inj toSet\n\ngoal (1 subgoal):\n 1. \\<And>x y. toSet x = toSet y \\<Longrightarrow> x = y", "apply (erule injD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma spr_sim_rep_abs[simp]:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"toSet ec = spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet ec = spr_abs t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. toSet ec \\<subseteq> spr_abs t\n 2. spr_abs t \\<subseteq> toSet ec", "show \"toSet ec \\<subseteq> spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet ec \\<subseteq> spr_abs t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> toSet ec \\<Longrightarrow> x \\<in> spr_abs t", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> toSet ec \\<Longrightarrow> x \\<in> spr_abs t", "assume x: \"x \\<in> toSet ec\""], ["proof (state)\nthis:\n  x \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> toSet ec \\<Longrightarrow> x \\<in> spr_abs t", "hence \"(toSet ec, x) \\<in> spr_simAbs ec\""], ["proof (prove)\nusing this:\n  x \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (toSet ec, x) \\<in> spr_simAbs ec", "unfolding spr_simAbs_def"], ["proof (prove)\nusing this:\n  x \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (toSet ec, x)\n    \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>s. uu_ = (toSet ec, s) \\<and> s \\<in> toSet ec)", "by simp"], ["proof (state)\nthis:\n  (toSet ec, x) \\<in> spr_simAbs ec\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> toSet ec \\<Longrightarrow> x \\<in> spr_abs t", "with ec"], ["proof (chain)\npicking this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n  (toSet ec, x) \\<in> spr_simAbs ec", "have \"(toSet ec, x) \\<in> SPRsingle.sim_equiv_class a t\""], ["proof (prove)\nusing this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n  (toSet ec, x) \\<in> spr_simAbs ec\n\ngoal (1 subgoal):\n 1. (toSet ec, x) \\<in> SPRsingle.sim_equiv_class a t", "by simp"], ["proof (state)\nthis:\n  (toSet ec, x) \\<in> SPRsingle.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> toSet ec \\<Longrightarrow> x \\<in> spr_abs t", "with x envSingleAgent[where a=a]"], ["proof (chain)\npicking this:\n  x \\<in> toSet ec\n  a = agent\n  (toSet ec, x) \\<in> SPRsingle.sim_equiv_class a t", "show \"x \\<in> spr_abs t\""], ["proof (prove)\nusing this:\n  x \\<in> toSet ec\n  a = agent\n  (toSet ec, x) \\<in> SPRsingle.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. x \\<in> spr_abs t", "unfolding spr_sim_def spr_abs_def"], ["proof (prove)\nusing this:\n  x \\<in> toSet ec\n  a = agent\n  (toSet ec, x)\n  \\<in> (\\<lambda>t.\n            (tLast `\n             rel_ext\n              (\\<lambda>t'.\n                  t' \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t),\n             tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n\ngoal (1 subgoal):\n 1. x \\<in> tLast `\n            rel_ext\n             (\\<lambda>t'.\n                 t' \\<in> SPR.jkbpC \\<and>\n                 spr_jview agent t' = spr_jview agent t)", "by auto"], ["proof (state)\nthis:\n  x \\<in> spr_abs t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  toSet ec \\<subseteq> spr_abs t\n\ngoal (1 subgoal):\n 1. spr_abs t \\<subseteq> toSet ec", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. spr_abs t \\<subseteq> toSet ec", "show \"spr_abs t \\<subseteq> toSet ec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_abs t \\<subseteq> toSet ec", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> spr_abs t \\<Longrightarrow> x \\<in> toSet ec", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> spr_abs t \\<Longrightarrow> x \\<in> toSet ec", "assume x: \"x \\<in> spr_abs t\""], ["proof (state)\nthis:\n  x \\<in> spr_abs t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> spr_abs t \\<Longrightarrow> x \\<in> toSet ec", "with ec envSingleAgent[where a=a]"], ["proof (chain)\npicking this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n  a = agent\n  x \\<in> spr_abs t", "show \"x \\<in> toSet ec\""], ["proof (prove)\nusing this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n  a = agent\n  x \\<in> spr_abs t\n\ngoal (1 subgoal):\n 1. x \\<in> toSet ec", "unfolding spr_simAbs_def spr_sim_def spr_abs_def"], ["proof (prove)\nusing this:\n  rel_ext\n   (\\<lambda>uu_. \\<exists>s. uu_ = (toSet ec, s) \\<and> s \\<in> toSet ec) =\n  (\\<lambda>t.\n      (tLast `\n       rel_ext\n        (\\<lambda>t'.\n            t' \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t),\n       tLast t)) `\n  rel_ext\n   (\\<lambda>t'. t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t)\n  a = agent\n  x \\<in> tLast `\n          rel_ext\n           (\\<lambda>t'.\n               t' \\<in> SPR.jkbpC \\<and>\n               spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. x \\<in> toSet ec", "by auto"], ["proof (state)\nthis:\n  x \\<in> toSet ec\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  spr_abs t \\<subseteq> toSet ec\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_sim_rep_abs_syn[simp]:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (toList ec) = spr_abs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (toList ec) = spr_abs t", "using spr_sim_rep_abs[OF ec]"], ["proof (prove)\nusing this:\n  toSet ec = spr_abs t\n\ngoal (1 subgoal):\n 1. set (toList ec) = spr_abs t", "unfolding toSet_def"], ["proof (prove)\nusing this:\n  set (toList ec) = spr_abs t\n\ngoal (1 subgoal):\n 1. set (toList ec) = spr_abs t", "by simp"], ["", "lemma spr_simAbs_list:\n  \"spr_simAbs ` fromList ` X = (\\<lambda>ss. { (ss, s) |s. s \\<in> ss }) ` set ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ` fromList ` X =\n    (\\<lambda>ss.\n        rel_ext\n         (\\<lambda>uu_. \\<exists>s. uu_ = (ss, s) \\<and> s \\<in> ss)) `\n    set ` X", "unfolding spr_simAbs_def Set.image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>y.\n         \\<exists>x\\<in>rel_ext\n                         (\\<lambda>y. \\<exists>x\\<in>X. y = fromList x).\n            y =\n            rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>s. uu_ = (toSet x, s) \\<and> s \\<in> toSet x)) =\n    rel_ext\n     (\\<lambda>y.\n         \\<exists>x\\<in>rel_ext (\\<lambda>y. \\<exists>x\\<in>X. y = set x).\n            y =\n            rel_ext\n             (\\<lambda>uu_. \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x))", "by auto"], ["", "(*>*)"], ["", "text\\<open>\n\nWe again make use of the following Kripke structure, where the worlds\nare the final states of the subset of the temporal slice that @{term\n\"agent\"} believes possible:\n\n\\<close>"], ["", "definition spr_repRels :: \"'a \\<Rightarrow> ('s \\<times> 's) set\" where\n  \"spr_repRels \\<equiv> \\<lambda>a. { (s, s'). envObs a s' = envObs a s }\""], ["", "abbreviation spr_repMC :: \"'s set \\<Rightarrow> ('a, 'p, 's) KripkeStructure\" where\n  \"spr_repMC \\<equiv> \\<lambda>X. mkKripke X spr_repRels envVal\""], ["", "text\\<open>\n\nSimilarly we show that this Kripke structure is adequate by\nintroducing an intermediate structure and connecting them all with a\ntower of simulations:\n\n\\<close>"], ["", "abbreviation spr_jkbpCSt :: \"'s Trace \\<Rightarrow> 's spr_simWorlds set\" where\n  \"spr_jkbpCSt t \\<equiv> SPRsingle.sim_equiv_class agent t\""], ["", "abbreviation\n  spr_simMCt :: \"'s Trace \\<Rightarrow> ('a, 'p, 's spr_simWorlds) KripkeStructure\"\nwhere\n  \"spr_simMCt t \\<equiv> mkKripke (spr_jkbpCSt t) spr_simRels spr_simVal\""], ["", "definition spr_repSim :: \"'s spr_simWorlds \\<Rightarrow> 's\" where\n  \"spr_repSim \\<equiv> snd\""], ["", "(*<*)"], ["", "lemma spr_repMC_kripke[intro, simp]: \"kripke (spr_repMC X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kripke (spr_repMC X)", "by (rule kripkeI) simp"], ["", "lemma spr_repMC_S5n[intro, simp]: \"S5n (spr_repMC X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S5n (spr_repMC X)", "unfolding spr_repRels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. S5n (mkKripke X\n          (\\<lambda>a. rel_ext (\\<lambda>(s, s'). envObs a s' = envObs a s))\n          envVal)", "by (intro S5nI equivI refl_onI symI transI) auto"], ["", "lemma jkbpCSt_jkbpCS_subset:\n  \"SPRsingle.sim_equiv_class agent t \\<subseteq> spr_sim ` SPR.jkbpC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_jkbpCSt t \\<subseteq> SPRsingle.jkbpCS", "by auto"], ["", "lemma spr_simRep_sim_simps[simp]:\n  \"spr_repSim ` spr_sim ` T = tLast ` T\"\n  \"spr_repSim (spr_sim t) = tLast t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_repSim ` spr_sim ` T = tLast ` T &&&\n    spr_repSim (spr_sim t) = tLast t", "unfolding spr_repSim_def spr_sim_def Set.image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>y.\n         \\<exists>x\\<in>rel_ext\n                         (\\<lambda>y.\n                             \\<exists>x\\<in>T. y = (spr_abs x, tLast x)).\n            y = snd x) =\n    rel_ext (\\<lambda>y. \\<exists>x\\<in>T. y = tLast x) &&&\n    snd (spr_abs t, tLast t) = tLast t", "by auto"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_repSim:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  shows \"sim (spr_simMCt t)\n             ((spr_repMC \\<circ> fst) (spr_sim t))\n             spr_repSim\"\n(*<*) (is \"sim ?M ?M' ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. sim_range (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t))\n     spr_repSim\n 2. sim_val (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 3. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 4. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "show \"sim_range ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_range (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t))\n     spr_repSim", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. worlds ((spr_repMC \\<circ> fst) (spr_sim t)) =\n    spr_repSim ` worlds (spr_simMCt t)\n 2. \\<And>a.\n       relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> fst) (spr_sim t))", "show \"worlds ?M' = ?f ` worlds ?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worlds ((spr_repMC \\<circ> fst) (spr_sim t)) =\n    spr_repSim ` worlds (spr_simMCt t)", "unfolding spr_sim_def spr_repSim_def spr_abs_def Set.image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. worlds\n     ((spr_repMC \\<circ> fst)\n       (rel_ext\n         (\\<lambda>y.\n             \\<exists>x\\<in>rel_ext\n                             (\\<lambda>t'.\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 spr_jview agent t' = spr_jview agent t).\n                y = tLast x),\n        tLast t)) =\n    rel_ext\n     (\\<lambda>y.\n         \\<exists>x\\<in>worlds\n                         (mkKripke\n                           (rel_ext\n                             (\\<lambda>y.\n                                 \\<exists>x\n    \\<in>rel_ext\n          (\\<lambda>t'.\n              t' \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t).\n                                    y =\n                                    (rel_ext\n(\\<lambda>y.\n    \\<exists>x\\<in>rel_ext\n                    (\\<lambda>t'.\n                        t' \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent x).\n       y = tLast x),\n                                     tLast x)))\n                           spr_simRels spr_simVal).\n            y = snd x)", "by auto"], ["proof (state)\nthis:\n  worlds ((spr_repMC \\<circ> fst) (spr_sim t)) =\n  spr_repSim ` worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> fst) (spr_sim t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> fst) (spr_sim t))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n       \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n                   worlds ((spr_repMC \\<circ> fst) (spr_sim t))", "show \"relations ?M' a \\<subseteq> worlds ?M' \\<times> worlds ?M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n    \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n                worlds ((spr_repMC \\<circ> fst) (spr_sim t))", "unfolding spr_sim_def spr_repSim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. relations ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) a\n    \\<subseteq> worlds\n                 ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) \\<times>\n                worlds ((spr_repMC \\<circ> fst) (spr_abs t, tLast t))", "by simp"], ["proof (state)\nthis:\n  relations ((spr_repMC \\<circ> fst) (spr_sim t)) a\n  \\<subseteq> worlds ((spr_repMC \\<circ> fst) (spr_sim t)) \\<times>\n              worlds ((spr_repMC \\<circ> fst) (spr_sim t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sim_range (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n\ngoal (3 subgoals):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 2. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 3. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 2. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 3. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "show \"sim_val ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "unfolding spr_sim_def spr_simVal_def spr_repSim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_val\n     (mkKripke\n       ((\\<lambda>t. (spr_abs t, tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t))\n       spr_simRels (envVal \\<circ> snd))\n     ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) snd", "by auto"], ["proof (state)\nthis:\n  sim_val (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n\ngoal (2 subgoals):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 2. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n 2. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "from tC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC", "show \"sim_f ?M ?M' ?f\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "unfolding spr_sim_def spr_simVal_def spr_repSim_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. sim_f\n     (mkKripke\n       ((\\<lambda>t. (spr_abs t, tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t))\n       spr_simRels (envVal \\<circ> snd))\n     ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) snd", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> SPR.jkbpC \\<Longrightarrow>\n    sim_f\n     (mkKripke\n       ((\\<lambda>t. (spr_abs t, tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t))\n       spr_simRels (envVal \\<circ> snd))\n     ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) snd", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        (u, v)\n        \\<in> relations\n               (mkKripke\n                 ((\\<lambda>t. (spr_abs t, tLast t)) `\n                  rel_ext\n                   (\\<lambda>t'.\n                       t' \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' = spr_jview agent t))\n                 spr_simRels (envVal \\<circ> snd))\n               a\\<rbrakk>\n       \\<Longrightarrow> (snd u, snd v)\n                         \\<in> relations\n                                ((spr_repMC \\<circ> fst)\n                                  (spr_abs t, tLast t))\n                                a", "apply (cut_tac a=a in envSingleAgent)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        (u, v)\n        \\<in> relations\n               (mkKripke\n                 ((\\<lambda>t. (spr_abs t, tLast t)) `\n                  rel_ext\n                   (\\<lambda>t'.\n                       t' \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' = spr_jview agent t))\n                 spr_simRels (envVal \\<circ> snd))\n               a;\n        a = agent\\<rbrakk>\n       \\<Longrightarrow> (snd u, snd v)\n                         \\<in> relations\n                                ((spr_repMC \\<circ> fst)\n                                  (spr_abs t, tLast t))\n                                a", "apply (auto iff: spr_sim_def spr_repRels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta taa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        ((spr_abs ta, tLast ta), spr_abs taa, tLast taa)\n        \\<in> spr_simRels agent;\n        ta \\<in> SPR.jkbpC; spr_jview agent ta = spr_jview agent t;\n        taa \\<in> SPR.jkbpC;\n        spr_jview agent taa = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> envObs agent (tLast taa) = envObs agent (tLast ta)", "apply (rule spr_tLast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta taa.\n       \\<lbrakk>t \\<in> SPR.jkbpC;\n        ((spr_abs ta, tLast ta), spr_abs taa, tLast taa)\n        \\<in> spr_simRels agent;\n        ta \\<in> SPR.jkbpC; spr_jview agent ta = spr_jview agent t;\n        taa \\<in> SPR.jkbpC;\n        spr_jview agent taa = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent taa = spr_jview agent ta", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sim_f (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "show \"sim_r ?M ?M' ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim", "unfolding spr_sim_def spr_simVal_def spr_repSim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r\n     (mkKripke\n       ((\\<lambda>t. (spr_abs t, tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t))\n       spr_simRels (envVal \\<circ> snd))\n     ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) snd", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_r\n     (mkKripke\n       ((\\<lambda>t. (spr_abs t, tLast t)) `\n        rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t))\n       spr_simRels (envVal \\<circ> snd))\n     ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) snd", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds\n                         (mkKripke\n                           ((\\<lambda>t. (spr_abs t, tLast t)) `\n                            rel_ext\n                             (\\<lambda>t'.\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 spr_jview agent t' = spr_jview agent t))\n                           spr_simRels (envVal \\<circ> snd));\n        (snd u, v')\n        \\<in> relations ((spr_repMC \\<circ> fst) (spr_abs t, tLast t))\n               a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v)\n                            \\<in> relations\n                                   (mkKripke\n                                     ((\\<lambda>t. (spr_abs t, tLast t)) `\nrel_ext\n (\\<lambda>t'.\n     t' \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t))\n                                     spr_simRels (envVal \\<circ> snd))\n                                   a \\<and>\n                            snd v = v'", "apply (cut_tac a=a in envSingleAgent)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds\n                         (mkKripke\n                           ((\\<lambda>t. (spr_abs t, tLast t)) `\n                            rel_ext\n                             (\\<lambda>t'.\n                                 t' \\<in> SPR.jkbpC \\<and>\n                                 spr_jview agent t' = spr_jview agent t))\n                           spr_simRels (envVal \\<circ> snd));\n        (snd u, v')\n        \\<in> relations ((spr_repMC \\<circ> fst) (spr_abs t, tLast t)) a;\n        a = agent\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v)\n                            \\<in> relations\n                                   (mkKripke\n                                     ((\\<lambda>t. (spr_abs t, tLast t)) `\nrel_ext\n (\\<lambda>t'.\n     t' \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t))\n                                     spr_simRels (envVal \\<circ> snd))\n                                   a \\<and>\n                            snd v = v'", "unfolding spr_abs_def spr_sim_def spr_repRels_def spr_simRels_def Set.image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a u v'.\n       \\<lbrakk>u \\<in> worlds\n                         (mkKripke\n                           (rel_ext\n                             (\\<lambda>y.\n                                 \\<exists>x\n    \\<in>rel_ext\n          (\\<lambda>t'.\n              t' \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t).\n                                    y =\n                                    (rel_ext\n(\\<lambda>y.\n    \\<exists>x\\<in>rel_ext\n                    (\\<lambda>t'.\n                        t' \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent x).\n       y = tLast x),\n                                     tLast x)))\n                           (\\<lambda>a.\n                               rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>U u V v.\n uu_ = ((U, u), V, v) \\<and>\n U = V \\<and> {u, v} \\<subseteq> U \\<and> envObs a u = envObs a v))\n                           (envVal \\<circ> snd));\n        (snd u, v')\n        \\<in> relations\n               (((\\<lambda>X.\n                     mkKripke X\n                      (\\<lambda>a.\n                          rel_ext\n                           (\\<lambda>(s, s'). envObs a s' = envObs a s))\n                      envVal) \\<circ>\n                 fst)\n                 (rel_ext\n                   (\\<lambda>y.\n                       \\<exists>x\\<in>rel_ext\n (\\<lambda>t'.\n     t' \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t).\n                          y = tLast x),\n                  tLast t))\n               a;\n        a = agent\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            (u, v)\n                            \\<in> relations\n                                   (mkKripke\n                                     (rel_ext\n (\\<lambda>y.\n     \\<exists>x\\<in>rel_ext\n                     (\\<lambda>t'.\n                         t' \\<in> SPR.jkbpC \\<and>\n                         spr_jview agent t' = spr_jview agent t).\n        y =\n        (rel_ext\n          (\\<lambda>y.\n              \\<exists>x\\<in>rel_ext\n                              (\\<lambda>t'.\n                                  t' \\<in> SPR.jkbpC \\<and>\n                                  spr_jview agent t' = spr_jview agent x).\n                 y = tLast x),\n         tLast x)))\n                                     (\\<lambda>a.\n   rel_ext\n    (\\<lambda>uu_.\n        \\<exists>U u V v.\n           uu_ = ((U, u), V, v) \\<and>\n           U = V \\<and>\n           {u, v} \\<subseteq> U \\<and> envObs a u = envObs a v))\n                                     (envVal \\<circ> snd))\n                                   a \\<and>\n                            snd v = v'", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sim_r (spr_simMCt t) ((spr_repMC \\<circ> fst) (spr_sim t)) spr_repSim\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nAs before, the following sections discharge the requirements of the\n\\<open>Algorithm\\<close> locale of Figure~\\ref{fig:kbps-alg-alg-locale}.\n\n\\<close>"], ["", "(* **************************************** *)"], ["", "subsubsection\\<open>Initial states\\<close>"], ["", "text\\<open>\n\nThe initial states of the automaton for @{term \"agent\"} is simply the\npartition of @{term \"envInit\"} under @{term \"agent\"}'s observation.\n\n\\<close>"], ["", "definition (in -)\n  spr_simInit :: \"('s :: linorder) list \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 'obs)\n                     \\<Rightarrow> 'a \\<Rightarrow> 'obs \\<Rightarrow> 's spr_simWorldsRep\"\nwhere\n  \"spr_simInit envInit envObs \\<equiv> \\<lambda>a iobs.\n    ODList.fromList [ s. s \\<leftarrow> envInit, envObs a s = iobs ]\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simInit :: \"'a \\<Rightarrow> 'obs \\<Rightarrow> 's spr_simWorldsRep\"\nwhere\n  \"spr_simInit \\<equiv> SPRViewSingle.spr_simInit envInit envObs\""], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_simInit:\n  assumes \"iobs \\<in> envObs a ` set envInit\"\n  shows \"spr_simAbs (spr_simInit a iobs)\n       = spr_sim ` { t' \\<in> SPR.jkbpC. spr_jview a t' = spr_jviewInit a iobs }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "using assms"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n\ngoal (1 subgoal):\n 1. spr_simAbs (local.spr_simInit a iobs) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "unfolding spr_simInit_def"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n\ngoal (1 subgoal):\n 1. spr_simAbs\n     (fromList\n       (concat\n         (map (\\<lambda>s. if envObs a s = iobs then [s] else [])\n           envInit))) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n  a = agent\n\ngoal (1 subgoal):\n 1. spr_simAbs\n     (fromList\n       (concat\n         (map (\\<lambda>s. if envObs a s = iobs then [s] else [])\n           envInit))) =\n    spr_sim `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "unfolding spr_simAbs_def spr_sim_def [abs_def] spr_abs_def"], ["proof (prove)\nusing this:\n  iobs \\<in> envObs a ` set envInit\n  a = agent\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>s.\n            uu_ =\n            (toSet\n              (fromList\n                (concat\n                  (map (\\<lambda>s. if envObs a s = iobs then [s] else [])\n                    envInit))),\n             s) \\<and>\n            s \\<in> toSet\n                     (fromList\n                       (concat\n                         (map (\\<lambda>s.\n                                  if envObs a s = iobs then [s] else [])\n                           envInit)))) =\n    (\\<lambda>t.\n        (tLast `\n         rel_ext\n          (\\<lambda>t'.\n              t' \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t),\n         tLast t)) `\n    rel_ext\n     (\\<lambda>t'.\n         t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)", "apply (auto iff: spr_jview_def SPR.jviewInit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> (set envInit \\<inter>\n                          rel_ext\n                           (\\<lambda>s. envObs agent s = envObs agent x),\n                          s)\n                         \\<in> (\\<lambda>xa.\n                                   (tLast `\n                                    rel_ext\n                                     (\\<lambda>t'.\n   t' \\<in> SPR.jkbpC \\<and>\n   (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x)),\n                                    tLast xa)) `\n                               rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 2. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply (rule_tac x=\"tInit s\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> (set envInit \\<inter>\n                          rel_ext\n                           (\\<lambda>s. envObs agent s = envObs agent x),\n                          s) =\n                         (tLast `\n                          rel_ext\n                           (\\<lambda>t'.\n                               t' \\<in> SPR.jkbpC \\<and>\n                               (\\<exists>s'.\n                                   t' = tInit s' \\<and>\n                                   envObs agent s' = envObs agent x)),\n                          tLast (tInit s))\n 2. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 3. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply (auto iff: spr_jview_def)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x s xa.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x;\n        xa \\<in> set envInit; envObs agent xa = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 2. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 3. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply (rule_tac x=\"tInit xa\" in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x s xa.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x;\n        xa \\<in> set envInit; envObs agent xa = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xa = tLast (tInit xa)\n 2. \\<And>x s xa.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x;\n        xa \\<in> set envInit; envObs agent xa = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 3. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 4. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x s xa.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x;\n        xa \\<in> set envInit; envObs agent xa = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 2. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 3. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        s \\<in> set envInit; envObs agent s = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit s\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))\n 2. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>s'. t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply (rule_tac x=\"tInit xb\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> xb = tLast (tInit xb)\n 2. \\<And>x s' xb.\n       \\<lbrakk>a = agent; x \\<in> set envInit; iobs = envObs agent x;\n        envObs agent s' = envObs agent x; s' \\<in> set envInit;\n        xb \\<in> set envInit; envObs agent xb = envObs agent x\\<rbrakk>\n       \\<Longrightarrow> tInit xb\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>s'.\n  t' = tInit s' \\<and> envObs agent s' = envObs agent x))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated observations\\<close>"], ["", "text\\<open>\n\nAs the agent makes the same observation on the entire equivalence\nclass, we arbitrarily choose the first element of the representation:\n\n\\<close>"], ["", "definition (in -)\n  spr_simObs :: \"('a \\<Rightarrow> 's \\<Rightarrow> 'obs)\n               \\<Rightarrow> 'a \\<Rightarrow> ('s :: linorder) spr_simWorldsRep \\<Rightarrow> 'obs\"\nwhere\n  \"spr_simObs envObs \\<equiv> \\<lambda>a. envObs a \\<circ> ODList.hd\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simObs :: \"'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 'obs\"\nwhere\n  \"spr_simObs \\<equiv> SPRViewSingle.spr_simObs envObs\""], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "lemma spr_simObs:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"spr_simObs a ec = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "have A: \"\\<forall>s \\<in> set (toList ec). envObs a s = envObs a (tLast t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (toList ec). envObs a s = envObs a (tLast t)", "using spr_sim_rep_abs[OF ec]"], ["proof (prove)\nusing this:\n  toSet ec = spr_abs t\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (toList ec). envObs a s = envObs a (tLast t)", "by (simp add: toSet_def)"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (toList ec). envObs a s = envObs a (tLast t)\n\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "from tC ec"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t", "have B: \"tLast t \\<in> set (toList ec)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. tLast t \\<in> set (toList ec)", "using envSingleAgent[where a=a]"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n  a = agent\n\ngoal (1 subgoal):\n 1. tLast t \\<in> set (toList ec)", "by simp"], ["proof (state)\nthis:\n  tLast t \\<in> set (toList ec)\n\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.spr_simObs a ec = envObs a (tLast t)", "unfolding spr_simObs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (envObs a \\<circ> ODList.hd) ec = envObs a (tLast t)", "by (simp add: list_choose_hd[OF A B] ODList.hd_def)"], ["proof (state)\nthis:\n  local.spr_simObs a ec = envObs a (tLast t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Evaluation\\<close>"], ["", "text\\<open>\n\n\\label{sec:kbps-spr-single-agent-eval}\n\nAs the single-agent case is much simpler than the multi-agent ones, we\ndefine an evaluation function specialised to its representation.\n\nIntuitively @{term \"eval\"} yields the subset of @{term \"X\"} where the\nformula holds, where @{term \"X\"} is taken to be a representation of a\ncanonical equivalence class for @{term \"agent\"}.\n\n\\<close>"], ["", "fun (in -)\n  eval :: \"(('s :: linorder) \\<Rightarrow> 'p \\<Rightarrow> bool)\n        \\<Rightarrow> 's odlist \\<Rightarrow> ('a, 'p) Kform \\<Rightarrow> 's odlist\"\nwhere\n  \"eval val X (Kprop p)      = ODList.filter (\\<lambda>s. val s p) X\"\n| \"eval val X (Knot \\<phi>)       = ODList.difference X (eval val X \\<phi>)\"\n| \"eval val X (Kand \\<phi> \\<psi>)     = ODList.intersect (eval val X \\<phi>) (eval val X \\<psi>)\"\n| \"eval val X (Kknows a \\<phi>)   = (if eval val X \\<phi> = X then X else ODList.empty)\"\n| \"eval val X (Kcknows as \\<phi>) =\n                     (if as = [] \\<or> eval val X \\<phi> = X then X else ODList.empty)\""], ["", "text\\<open>\n\nIn general this is less efficient than the tableau approach of\n\\citet[Proposition~3.2.1]{FHMV:1995}, which labels all states with all\nformulas. However it is often the case that the set of relevant worlds\nis much smaller than the set of all system states.\n\nShowing that this corresponds with the standard models relation is\nroutine.\n\n\\<close>"], ["", "(*<*)"], ["", "lemma eval_ec_subseteq:\n  shows \"toSet (eval envVal ec \\<phi>) \\<subseteq> toSet ec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (eval envVal ec \\<phi>) \\<subseteq> toSet ec", "by (induct \\<phi>) auto"], ["", "lemma eval_models_aux:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  assumes s: \"s \\<in> toSet ec\"\n  shows \"s \\<in> toSet (eval envVal ec \\<phi>) \\<longleftrightarrow> spr_repMC (toSet ec), s \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<phi>", "using s"], ["proof (prove)\nusing this:\n  s \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<phi>", "proof(induct \\<phi> arbitrary: s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>K\\<^sub>x1a \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>K\\<^sub>x1a \\<phi>\n 5. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "case (Kknows a \\<phi> s)"], ["proof (state)\nthis:\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n\ngoal (5 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>K\\<^sub>x1a \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>K\\<^sub>x1a \\<phi>\n 5. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "with ec envSingleAgent[where a=a]"], ["proof (chain)\npicking this:\n  spr_simAbs ec = spr_jkbpCSt t\n  a = agent\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec", "show ?case"], ["proof (prove)\nusing this:\n  spr_simAbs ec = spr_jkbpCSt t\n  a = agent\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>K\\<^sub>a \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<phi>", "unfolding spr_repRels_def"], ["proof (prove)\nusing this:\n  spr_simAbs ec = spr_jkbpCSt t\n  a = agent\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  mkKripke (toSet ec)\n   (\\<lambda>a. rel_ext (\\<lambda>(s, s'). envObs a s' = envObs a s))\n   envVal, ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>K\\<^sub>a \\<phi>)) =\n    mkKripke (toSet ec)\n     (\\<lambda>a. rel_ext (\\<lambda>(s, s'). envObs a s' = envObs a s))\n     envVal, s \\<Turnstile> \\<^bold>K\\<^sub>a \\<phi>", "by (auto simp: inj_eq[OF toSet_inj, symmetric] dest: subsetD[OF eval_ec_subseteq])"], ["proof (state)\nthis:\n  (s \\<in> toSet (eval envVal ec \\<^bold>K\\<^sub>a \\<phi>)) =\n  spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>K\\<^sub>a \\<phi>\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "case (Kcknows as \\<phi> s)"], ["proof (state)\nthis:\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2\n 4. \\<And>x1a \\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>x1a\\<^esub> \\<phi>", "from ec"], ["proof (chain)\npicking this:\n  spr_simAbs ec = spr_jkbpCSt t", "show ?case"], ["proof (prove)\nusing this:\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "proof(cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = []\\<rbrakk>\n    \\<Longrightarrow> (s \\<in> toSet\n                                (eval envVal ec\n                                  \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                      spr_repMC\n                       (toSet\n                         ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n 2. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "case Nil"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = []\\<rbrakk>\n    \\<Longrightarrow> (s \\<in> toSet\n                                (eval envVal ec\n                                  \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                      spr_repMC\n                       (toSet\n                         ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n 2. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "with Kcknows"], ["proof (chain)\npicking this:\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  as = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  as = []\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "by clarsimp"], ["proof (state)\nthis:\n  (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "case (Cons x xs)"], ["proof (state)\nthis:\n  as = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "hence \"set as = {agent}\""], ["proof (prove)\nusing this:\n  as = x # xs\n\ngoal (1 subgoal):\n 1. set as = {agent}", "by (induct as) (auto simp: envSingleAgent)"], ["proof (state)\nthis:\n  set as = {agent}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "moreover"], ["proof (state)\nthis:\n  set as = {agent}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "have \"(spr_repRels agent \\<inter> toSet ec \\<times> toSet ec)\\<^sup>+ = (spr_repRels agent \\<inter> toSet ec \\<times> toSet ec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Restr (spr_repRels agent) (toSet ec))\\<^sup>+ =\n    Restr (spr_repRels agent) (toSet ec)", "by (rule trancl_id) (simp add: spr_repRels_def trans_def)"], ["proof (state)\nthis:\n  (Restr (spr_repRels agent) (toSet ec))\\<^sup>+ =\n  Restr (spr_repRels agent) (toSet ec)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "moreover"], ["proof (state)\nthis:\n  (Restr (spr_repRels agent) (toSet ec))\\<^sup>+ =\n  Restr (spr_repRels agent) (toSet ec)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "note Kcknows ec"], ["proof (state)\nthis:\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t; as = a # list\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n                         spr_repMC\n                          (toSet\n                            ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  set as = {agent}\n  (Restr (spr_repRels agent) (toSet ec))\\<^sup>+ =\n  Restr (spr_repRels agent) (toSet ec)\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  spr_simAbs ec = spr_jkbpCSt t", "show ?thesis"], ["proof (prove)\nusing this:\n  set as = {agent}\n  (Restr (spr_repRels agent) (toSet ec))\\<^sup>+ =\n  Restr (spr_repRels agent) (toSet ec)\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  spr_repMC (toSet ec), ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "unfolding spr_repRels_def"], ["proof (prove)\nusing this:\n  set as = {agent}\n  (Restr (rel_ext (\\<lambda>(s, s'). envObs agent s' = envObs agent s))\n    (toSet ec))\\<^sup>+ =\n  Restr (rel_ext (\\<lambda>(s, s'). envObs agent s' = envObs agent s))\n   (toSet ec)\n  ?s1 \\<in> toSet ec \\<Longrightarrow>\n  (?s1 \\<in> toSet (eval envVal ec \\<phi>)) =\n  mkKripke (toSet ec)\n   (\\<lambda>a. rel_ext (\\<lambda>(s, s'). envObs a s' = envObs a s))\n   envVal, ?s1 \\<Turnstile> \\<phi>\n  s \\<in> toSet ec\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n    mkKripke (toSet ec)\n     (\\<lambda>a. rel_ext (\\<lambda>(s, s'). envObs a s' = envObs a s))\n     envVal, s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>", "by (auto simp: inj_eq[OF toSet_inj, symmetric] dest: subsetD[OF eval_ec_subseteq])"], ["proof (state)\nthis:\n  (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s \\<in> toSet (eval envVal ec \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>)) =\n  spr_repMC (toSet ec), s \\<Turnstile> \\<^bold>C\\<^bsub>as\\<^esub> \\<phi>\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       s \\<in> toSet ec \\<Longrightarrow>\n       (s \\<in> toSet (eval envVal ec (Kprop x))) =\n       spr_repMC (toSet ec), s \\<Turnstile> Kprop x\n 2. \\<And>\\<phi> s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet (eval envVal ec (Knot \\<phi>))) =\n                         spr_repMC (toSet ec), s \\<Turnstile> Knot \\<phi>\n 3. \\<And>\\<phi>1 \\<phi>2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> toSet ec \\<Longrightarrow>\n                   (s \\<in> toSet (eval envVal ec \\<phi>1)) =\n                   spr_repMC (toSet ec), s \\<Turnstile> \\<phi>1;\n        \\<And>s.\n           s \\<in> toSet ec \\<Longrightarrow>\n           (s \\<in> toSet (eval envVal ec \\<phi>2)) =\n           spr_repMC (toSet ec), s \\<Turnstile> \\<phi>2;\n        s \\<in> toSet ec\\<rbrakk>\n       \\<Longrightarrow> (s \\<in> toSet\n                                   (eval envVal ec\n                                     (Kand \\<phi>1 \\<phi>2))) =\n                         spr_repMC\n                          (toSet ec), s \\<Turnstile> Kand \\<phi>1 \\<phi>2", "qed simp_all"], ["", "lemma eval_all_or_nothing:\n  assumes subj_phi: \"subjective agent \\<phi>\"\n  shows \"toSet (eval envVal ec \\<phi>) = {} \\<or> toSet (eval envVal ec \\<phi>) = toSet ec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toSet (eval envVal ec \\<phi>) = {} \\<or>\n    toSet (eval envVal ec \\<phi>) = toSet ec", "using subj_phi"], ["proof (prove)\nusing this:\n  subjective agent \\<phi>\n\ngoal (1 subgoal):\n 1. toSet (eval envVal ec \\<phi>) = {} \\<or>\n    toSet (eval envVal ec \\<phi>) = toSet ec", "by (induct \\<phi> rule: subjective.induct) auto"], ["", "(*>*)"], ["", "lemma eval_models:\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  assumes subj: \"subjective agent \\<phi>\"\n  assumes s: \"s \\<in> toSet ec\"\n  shows \"toSet (eval envVal ec \\<phi>) \\<noteq> {} \\<longleftrightarrow> spr_repMC (toSet ec), s \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (toSet (eval envVal ec \\<phi>) \\<noteq> {}) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<phi>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (toSet (eval envVal ec \\<phi>) \\<noteq> {}) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<phi>", "using eval_models_aux[OF ec s, symmetric] eval_all_or_nothing[OF subj] s"], ["proof (prove)\nusing this:\n  spr_repMC (toSet ec), s \\<Turnstile> ?\\<phi> =\n  (s \\<in> toSet (eval envVal ec ?\\<phi>))\n  toSet (eval envVal ?ec \\<phi>) = {} \\<or>\n  toSet (eval envVal ?ec \\<phi>) = toSet ?ec\n  s \\<in> toSet ec\n\ngoal (1 subgoal):\n 1. (toSet (eval envVal ec \\<phi>) \\<noteq> {}) =\n    spr_repMC (toSet ec), s \\<Turnstile> \\<phi>", "by auto"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated actions\\<close>"], ["", "text\\<open>\n\nThe actions enabled on a canonical equivalence class are those for\nwhich @{term \"eval\"} yields a non-empty set of states:\n\n\\<close>"], ["", "definition (in -)\n  spr_simAction :: \"('a, 'p, 'aAct) KBP \\<Rightarrow> (('s :: linorder) \\<Rightarrow> 'p \\<Rightarrow> bool)\n                     \\<Rightarrow> 'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 'aAct list\"\nwhere\n  \"spr_simAction kbp envVal \\<equiv> \\<lambda>a X.\n    [ action gc. gc \\<leftarrow> kbp, eval envVal X (guard gc) \\<noteq> ODList.empty ]\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simAction :: \"'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 'aAct list\"\nwhere\n  \"spr_simAction \\<equiv> SPRViewSingle.spr_simAction (jkbp agent) envVal\""], ["", "(*>*)"], ["", "text\\<open>\n\nThe key lemma relates the agent's behaviour on an equivalence class to\nthat on its representation:\n\n\\<close>"], ["", "lemma spr_simAction_jAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (spr_simAction agent ec)\n       = set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "have \"\\<And>P. (set (jkbp agent) \\<inter> {gc. P gc})\n      = { gc \\<in> set (jkbp agent). P gc }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       set (jkbp agent) \\<inter> rel_ext P =\n       rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc)", "by blast"], ["proof (state)\nthis:\n  set (jkbp agent) \\<inter> rel_ext ?P1 =\n  rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> ?P1 gc)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "then"], ["proof (chain)\npicking this:\n  set (jkbp agent) \\<inter> rel_ext ?P1 =\n  rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> ?P1 gc)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (jkbp agent) \\<inter> rel_ext ?P1 =\n  rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> ?P1 gc)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "unfolding spr_simAction_def jAction_def"], ["proof (prove)\nusing this:\n  set (jkbp agent) \\<inter> rel_ext ?P1 =\n  rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> ?P1 gc)\n\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>gc.\n                   if eval envVal ec (guard gc) \\<noteq> ODList.empty\n                   then [action gc] else [])\n            (jkbp agent))) =\n    set (concat\n          (map (\\<lambda>gc.\n                   if spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\n                   then [action gc] else [])\n            (jkbp agent)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        set (jkbp agent) \\<inter> rel_ext P =\n        rel_ext\n         (\\<lambda>gc.\n             gc \\<in> set (jkbp agent) \\<and> P gc)) \\<Longrightarrow>\n    (\\<Union>x\\<in>rel_ext\n                    (\\<lambda>gc.\n                        gc \\<in> set (jkbp agent) \\<and>\n                        eval envVal ec (guard gc) \\<noteq> ODList.empty).\n        {action x}) =\n    (\\<Union>x\\<in>rel_ext\n                    (\\<lambda>gc.\n                        gc \\<in> set (jkbp agent) \\<and>\n                        spr_repMC\n                         (toSet ec), tLast t \\<Turnstile> guard gc).\n        {action x})", "apply (rule SUP_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>P.\n        set (jkbp agent) \\<inter> rel_ext P =\n        rel_ext\n         (\\<lambda>gc.\n             gc \\<in> set (jkbp agent) \\<and> P gc)) \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>gc.\n         gc \\<in> set (jkbp agent) \\<and>\n         eval envVal ec (guard gc) \\<noteq> ODList.empty) =\n    rel_ext\n     (\\<lambda>gc.\n         gc \\<in> set (jkbp agent) \\<and>\n         spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc)\n 2. \\<And>x.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        x \\<in> rel_ext\n                 (\\<lambda>gc.\n                     gc \\<in> set (jkbp agent) \\<and>\n                     spr_repMC\n                      (toSet ec), tLast t \\<Turnstile> guard gc)\\<rbrakk>\n       \\<Longrightarrow> {action x} = {action x}", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        set (jkbp agent) \\<inter> rel_ext P =\n        rel_ext\n         (\\<lambda>gc.\n             gc \\<in> set (jkbp agent) \\<and> P gc)) \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>gc.\n         gc \\<in> set (jkbp agent) \\<and>\n         eval envVal ec (guard gc) \\<noteq> ODList.empty) =\n    rel_ext\n     (\\<lambda>gc.\n         gc \\<in> set (jkbp agent) \\<and>\n         spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc)", "apply (rule Collect_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gc.\n       (\\<And>P.\n           set (jkbp agent) \\<inter> rel_ext P =\n           rel_ext\n            (\\<lambda>gc.\n                gc \\<in> set (jkbp agent) \\<and> P gc)) \\<Longrightarrow>\n       (gc \\<in> set (jkbp agent) \\<and>\n        eval envVal ec (guard gc) \\<noteq> ODList.empty) =\n       (gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        eval envVal ec (guard gc) \\<noteq> ODList.empty\\<rbrakk>\n       \\<Longrightarrow> gc \\<in> set (jkbp agent) \\<and>\n                         spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\n 2. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> gc \\<in> set (jkbp agent) \\<and>\n                         eval envVal ec (guard gc) \\<noteq> ODList.empty", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        eval envVal ec (guard gc) \\<noteq> ODList.empty\\<rbrakk>\n       \\<Longrightarrow> spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\n 2. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> gc \\<in> set (jkbp agent) \\<and>\n                         eval envVal ec (guard gc) \\<noteq> ODList.empty", "apply (subst eval_models[OF ec, symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        eval envVal ec (guard gc) \\<noteq> ODList.empty\\<rbrakk>\n       \\<Longrightarrow> subjective agent (guard gc)\n 2. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        eval envVal ec (guard gc) \\<noteq> ODList.empty\\<rbrakk>\n       \\<Longrightarrow> tLast t \\<in> toSet ec\n 3. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        eval envVal ec (guard gc) \\<noteq> ODList.empty\\<rbrakk>\n       \\<Longrightarrow> toSet (eval envVal ec (guard gc)) \\<noteq> {}\n 4. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> gc \\<in> set (jkbp agent) \\<and>\n                         eval envVal ec (guard gc) \\<noteq> ODList.empty", "apply (simp_all add: toSet_eq_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> subjective agent (guard gc)\n 2. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> tLast t \\<in> toSet ec\n 3. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> toSet (eval envVal ec (guard gc)) \\<noteq> {}", "using subj tC ec"], ["proof (prove)\nusing this:\n  \\<forall>a gc.\n     gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc)\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (3 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> subjective agent (guard gc)\n 2. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> tLast t \\<in> toSet ec\n 3. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> toSet (eval envVal ec (guard gc)) \\<noteq> {}", "apply (fastforce+)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent) \\<and>\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc\\<rbrakk>\n       \\<Longrightarrow> toSet (eval envVal ec (guard gc)) \\<noteq> {}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        spr_repMC (toSet ec), tLast t \\<Turnstile> guard gc;\n        toSet (eval envVal ec (guard gc)) = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) eval_models[OF ec, symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>toSet (eval envVal ec (guard gc)) = {};\n        \\<And>P.\n           set (jkbp agent) \\<inter> rel_ext P =\n           rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent)\\<rbrakk>\n       \\<Longrightarrow> subjective agent (guard gc)\n 2. \\<And>gc.\n       \\<lbrakk>toSet (eval envVal ec (guard gc)) = {};\n        \\<And>P.\n           set (jkbp agent) \\<inter> rel_ext P =\n           rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent)\\<rbrakk>\n       \\<Longrightarrow> tLast t \\<in> toSet ec\n 3. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {};\n        toSet (eval envVal ec (guard gc)) = {}\\<rbrakk>\n       \\<Longrightarrow> False", "using subj tC ec"], ["proof (prove)\nusing this:\n  \\<forall>a gc.\n     gc \\<in> set (jkbp a) \\<longrightarrow> subjective a (guard gc)\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (3 subgoals):\n 1. \\<And>gc.\n       \\<lbrakk>toSet (eval envVal ec (guard gc)) = {};\n        \\<And>P.\n           set (jkbp agent) \\<inter> rel_ext P =\n           rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent)\\<rbrakk>\n       \\<Longrightarrow> subjective agent (guard gc)\n 2. \\<And>gc.\n       \\<lbrakk>toSet (eval envVal ec (guard gc)) = {};\n        \\<And>P.\n           set (jkbp agent) \\<inter> rel_ext P =\n           rel_ext (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent)\\<rbrakk>\n       \\<Longrightarrow> tLast t \\<in> toSet ec\n 3. \\<And>gc.\n       \\<lbrakk>\\<And>P.\n                   set (jkbp agent) \\<inter> rel_ext P =\n                   rel_ext\n                    (\\<lambda>gc. gc \\<in> set (jkbp agent) \\<and> P gc);\n        gc \\<in> set (jkbp agent);\n        toSet (eval envVal ec (guard gc)) \\<noteq> {};\n        toSet (eval envVal ec (guard gc)) = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set (local.spr_simAction agent ec) =\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\n\ngoal:\nNo subgoals!", "(* FIXME improve *)"], ["proof (state)\nthis:\n  set (local.spr_simAction agent ec) =\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma spr_submodel_aux:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and s: \"s \\<in> worlds (spr_simMCt t)\"\n  shows \"gen_model SPRsingle.MCS s = gen_model (spr_simMCt t) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_model spr_simMC s = gen_model (spr_simMCt t) s", "proof(rule gen_model_subset[where T=\"SPRsingle.sim_equiv_class agent t\"])"], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "fix a"], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"SPRsingle.sim_equiv_class agent t\""], ["proof (state)\ngoal (8 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. \\<And>a.\n       Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n       Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n 4. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 6. s \\<in> worlds spr_simMC\n 7. s \\<in> worlds (spr_simMCt t)\n 8. valuation spr_simMC = valuation (spr_simMCt t)", "show \"relations SPRsingle.MCS a \\<inter> ?X \\<times> ?X\n      = relations (spr_simMCt t) a \\<inter> ?X \\<times> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n    Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)", "by (simp add: Int_ac Int_absorb1\n                  relation_mono[OF jkbpCSt_jkbpCS_subset jkbpCSt_jkbpCS_subset])"], ["proof (state)\nthis:\n  Restr (relations spr_simMC a) (spr_jkbpCSt t) =\n  Restr (relations (spr_simMCt t) a) (spr_jkbpCSt t)\n\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"SPRsingle.sim_equiv_class agent t\""], ["proof (state)\ngoal (7 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 5. s \\<in> worlds spr_simMC\n 6. s \\<in> worlds (spr_simMCt t)\n 7. valuation spr_simMC = valuation (spr_simMCt t)", "from s"], ["proof (chain)\npicking this:\n  s \\<in> worlds (spr_simMCt t)", "show \"(\\<Union>a. relations (spr_simMCt t) a)\\<^sup>* `` {s} \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  s \\<in> worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "apply (clarsimp simp del: mkKripke_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> worlds (spr_simMCt t);\n        ((aa, ba), a, b)\n        \\<in> (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>*;\n        s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> spr_jkbpCSt t", "apply (erule kripke_rels_trc_worlds)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> worlds (spr_simMCt t); s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> worlds (spr_simMCt t)\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> worlds (spr_simMCt t); s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> kripke (spr_simMCt t)\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(aa, ba) \\<in> worlds (spr_simMCt t); s = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt t = worlds (spr_simMCt t)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Union> (range (relations (spr_simMCt t))))\\<^sup>* `` {s}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "let ?Y = \"{ t' \\<in> SPR.jkbpC . spr_jview agent t' = spr_jview agent t }\""], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "let ?X = \"spr_sim ` ?Y\""], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from s"], ["proof (chain)\npicking this:\n  s \\<in> worlds (spr_simMCt t)", "obtain t'\n    where st': \"s = spr_sim t'\"\n      and t'C: \"t' \\<in> SPR.jkbpC\"\n      and t'O: \"spr_jview agent t = spr_jview agent t'\""], ["proof (prove)\nusing this:\n  s \\<in> worlds (spr_simMCt t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>s = spr_sim t'; t' \\<in> SPR.jkbpC;\n         spr_jview agent t = spr_jview agent t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_jview agent t = spr_jview agent t'\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "{"], ["proof (state)\nthis:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_jview agent t = spr_jview agent t'\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "fix t''"], ["proof (state)\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "assume tt': \"(t', t'') \\<in> (\\<Union>a. relations SPR.MC a)\\<^sup>*\""], ["proof (state)\nthis:\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from t'C tt'"], ["proof (chain)\npicking this:\n  t' \\<in> SPR.jkbpC\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*", "have t''C: \"t'' \\<in> SPR.jkbpC\""], ["proof (prove)\nusing this:\n  t' \\<in> SPR.jkbpC\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n\ngoal (1 subgoal):\n 1. t'' \\<in> SPR.jkbpC", "by - (erule kripke_rels_trc_worlds, simp_all)"], ["proof (state)\nthis:\n  t'' \\<in> SPR.jkbpC\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from tt' t'O"], ["proof (chain)\npicking this:\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n  spr_jview agent t = spr_jview agent t'", "have t''O: \"spr_jview agent t = spr_jview agent t''\""], ["proof (prove)\nusing this:\n  (t', t'') \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*\n  spr_jview agent t = spr_jview agent t'\n\ngoal (1 subgoal):\n 1. spr_jview agent t = spr_jview agent t''", "apply induct"], ["proof (prove)\ngoal (2 subgoals):\n 1. spr_jview agent t = spr_jview agent t' \\<Longrightarrow>\n    spr_jview agent t = spr_jview agent t'\n 2. \\<And>y z.\n       \\<lbrakk>(t', y) \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>*;\n        (y, z) \\<in> \\<Union> (range (relations SPR.MC));\n        spr_jview agent t = spr_jview agent t' \\<Longrightarrow>\n        spr_jview agent t = spr_jview agent y;\n        spr_jview agent t = spr_jview agent t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent t = spr_jview agent z", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. spr_jview agent t = spr_jview agent t' \\<Longrightarrow>\n    spr_jview agent t = spr_jview agent t'\n 2. \\<And>y z.\n       \\<lbrakk>(t', y)\n                \\<in> (\\<Union>\n                        (range\n                          (relations\n                            \\<lparr>worlds = SPR.jkbpC,\n                               relations =\n                                 \\<lambda>a.\n                                    rel_ext\n                                     (\\<lambda>(t, t').\n   {t, t'} \\<subseteq> SPR.jkbpC \\<and> spr_jview a t = spr_jview a t'),\n                               valuation =\n                                 envVal \\<circ> tLast\\<rparr>)))\\<^sup>*;\n        (y, z)\n        \\<in> \\<Union>\n               (range\n                 (relations\n                   \\<lparr>worlds = SPR.jkbpC,\n                      relations =\n                        \\<lambda>a.\n                           rel_ext\n                            (\\<lambda>(t, t').\n                                {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                                spr_jview a t = spr_jview a t'),\n                      valuation = envVal \\<circ> tLast\\<rparr>));\n        spr_jview agent t = spr_jview agent t' \\<Longrightarrow>\n        spr_jview agent t = spr_jview agent y;\n        spr_jview agent t = spr_jview agent t'\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent t = spr_jview agent z", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t', y)\n                \\<in> (\\<Union>x.\n                          rel_ext\n                           (\\<lambda>(t, t').\n                               t \\<in> SPR.jkbpC \\<and>\n                               t' \\<in> SPR.jkbpC \\<and>\n                               spr_jview x t = spr_jview x t'))\\<^sup>*;\n        spr_jview agent t' = spr_jview agent y;\n        spr_jview agent t = spr_jview agent y; y \\<in> SPR.jkbpC;\n        z \\<in> SPR.jkbpC; spr_jview x y = spr_jview x z\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent y = spr_jview agent z", "apply (cut_tac a=x in envSingleAgent)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z x.\n       \\<lbrakk>(t', y)\n                \\<in> (\\<Union>x.\n                          rel_ext\n                           (\\<lambda>(t, t').\n                               t \\<in> SPR.jkbpC \\<and>\n                               t' \\<in> SPR.jkbpC \\<and>\n                               spr_jview x t = spr_jview x t'))\\<^sup>*;\n        spr_jview agent t' = spr_jview agent y;\n        spr_jview agent t = spr_jview agent y; y \\<in> SPR.jkbpC;\n        z \\<in> SPR.jkbpC; spr_jview x y = spr_jview x z; x = agent\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent y = spr_jview agent z", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_jview agent t = spr_jview agent t''\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "from t''C t''O"], ["proof (chain)\npicking this:\n  t'' \\<in> SPR.jkbpC\n  spr_jview agent t = spr_jview agent t''", "have \"t'' \\<in> ?Y\""], ["proof (prove)\nusing this:\n  t'' \\<in> SPR.jkbpC\n  spr_jview agent t = spr_jview agent t''\n\ngoal (1 subgoal):\n 1. t''\n    \\<in> rel_ext\n           (\\<lambda>t'.\n               t' \\<in> SPR.jkbpC \\<and>\n               spr_jview agent t' = spr_jview agent t)", "by simp"], ["proof (state)\nthis:\n  t''\n  \\<in> rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t)\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "}"], ["proof (state)\nthis:\n  (t', ?t''3)\n  \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>* \\<Longrightarrow>\n  ?t''3\n  \\<in> rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t)\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "hence \"(\\<Union>a. relations SPR.MC a)\\<^sup>* `` {t'} \\<subseteq> ?Y\""], ["proof (prove)\nusing this:\n  (t', ?t''3)\n  \\<in> (\\<Union> (range (relations SPR.MC)))\\<^sup>* \\<Longrightarrow>\n  ?t''3\n  \\<in> rel_ext\n         (\\<lambda>t'.\n             t' \\<in> SPR.jkbpC \\<and>\n             spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n    \\<subseteq> rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t)", "by clarsimp"], ["proof (state)\nthis:\n  (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> rel_ext\n               (\\<lambda>t'.\n                   t' \\<in> SPR.jkbpC \\<and>\n                   spr_jview agent t' = spr_jview agent t)\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "hence \"spr_sim ` ((\\<Union>a. relations SPR.MC a)\\<^sup>* `` {t'}) \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> rel_ext\n               (\\<lambda>t'.\n                   t' \\<in> SPR.jkbpC \\<and>\n                   spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n    \\<subseteq> spr_jkbpCSt t", "by (rule image_mono)"], ["proof (state)\nthis:\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (6 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t\n 4. s \\<in> worlds spr_simMC\n 5. s \\<in> worlds (spr_simMCt t)\n 6. valuation spr_simMC = valuation (spr_simMCt t)", "with st' t'C"], ["proof (chain)\npicking this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t", "show \"(\\<Union>a. relations SPRsingle.MCS a)\\<^sup>* `` {s} \\<subseteq> ?X\""], ["proof (prove)\nusing this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "using sim_trc_commute[OF SPR.mkM_kripke spr_sim, where t=t']"], ["proof (prove)\nusing this:\n  s = spr_sim t'\n  t' \\<in> SPR.jkbpC\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'}\n  \\<subseteq> spr_jkbpCSt t\n  t' \\<in> worlds SPR.MC \\<Longrightarrow>\n  spr_sim ` (\\<Union> (range (relations SPR.MC)))\\<^sup>* `` {t'} =\n  (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {spr_sim t'}\n\ngoal (1 subgoal):\n 1. (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n    \\<subseteq> spr_jkbpCSt t", "by simp"], ["proof (state)\nthis:\n  (\\<Union> (range (relations spr_simMC)))\\<^sup>* `` {s}\n  \\<subseteq> spr_jkbpCSt t\n\ngoal (5 subgoals):\n 1. kripke spr_simMC\n 2. kripke (spr_simMCt t)\n 3. s \\<in> worlds spr_simMC\n 4. s \\<in> worlds (spr_simMCt t)\n 5. valuation spr_simMC = valuation (spr_simMCt t)", "qed (insert s, auto)"], ["", "(*>*)"], ["", "text\\<open>\n\nThe \\<open>Algorithm\\<close> locale requires the following lemma, which is\na straightforward chaining of the above simulations.\n\n\\<close>"], ["", "lemma spr_simAction:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n      and ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"set (spr_simAction a ec) = set (jAction SPR.MC t a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from ec"], ["proof (chain)\npicking this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t", "have ec': \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\""], ["proof (prove)\nusing this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t", "by (simp only: envSingleAgent[where a=a])"], ["proof (state)\nthis:\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "have \"set (spr_simAction a ec) = set (spr_simAction agent ec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (local.spr_simAction agent ec)", "by (simp only: envSingleAgent[where a=a])"], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) = set (local.spr_simAction agent ec)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) = set (local.spr_simAction agent ec)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC ec'"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t", "have \"... = set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction agent ec) =\n    set (jAction (spr_repMC (toSet ec)) (tLast t) agent)", "by (rule spr_simAction_jAction)"], ["proof (state)\nthis:\n  set (local.spr_simAction agent ec) =\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (local.spr_simAction agent ec) =\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC ec'"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t", "have \"... = set (jAction (spr_simMCt t) (spr_sim t) agent)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. set (jAction (spr_repMC (toSet ec)) (tLast t) agent) =\n    set (jAction (spr_simMCt t) (spr_sim t) agent)", "by (simp add: simulation_jAction_eq[OF _ spr_repSim])"], ["proof (state)\nthis:\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent) =\n  set (jAction (spr_simMCt t) (spr_sim t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (jAction (spr_repMC (toSet ec)) (tLast t) agent) =\n  set (jAction (spr_simMCt t) (spr_sim t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC", "have \"... = set (jAction SPRsingle.MCS (spr_sim t) agent)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. set (jAction (spr_simMCt t) (spr_sim t) agent) =\n    set (jAction spr_simMC (spr_sim t) agent)", "using gen_model_jAction_eq[OF spr_submodel_aux[OF tC, where s=\"spr_sim t\"], where w'=\"spr_sim t\"]\n          gen_model_world_refl[where w=\"spr_sim t\" and M=\"spr_simMCt t\"]"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  \\<lbrakk>spr_sim t \\<in> worlds (spr_simMCt t);\n   spr_sim t \\<in> worlds (gen_model (spr_simMCt t) (spr_sim t));\n   kripke spr_simMC; kripke (spr_simMCt t)\\<rbrakk>\n  \\<Longrightarrow> jAction spr_simMC (spr_sim t) =\n                    jAction (spr_simMCt t) (spr_sim t)\n  spr_sim t \\<in> worlds (spr_simMCt t) \\<Longrightarrow>\n  spr_sim t \\<in> worlds (gen_model (spr_simMCt t) (spr_sim t))\n\ngoal (1 subgoal):\n 1. set (jAction (spr_simMCt t) (spr_sim t) agent) =\n    set (jAction spr_simMC (spr_sim t) agent)", "by simp"], ["proof (state)\nthis:\n  set (jAction (spr_simMCt t) (spr_sim t) agent) =\n  set (jAction spr_simMC (spr_sim t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "also"], ["proof (state)\nthis:\n  set (jAction (spr_simMCt t) (spr_sim t) agent) =\n  set (jAction spr_simMC (spr_sim t) agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "from tC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC", "have \"... = set (jAction SPR.MC t agent)\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. set (jAction spr_simMC (spr_sim t) agent) = set (jAction SPR.MC t agent)", "by (simp add: simulation_jAction_eq[OF _ spr_sim])"], ["proof (state)\nthis:\n  set (jAction spr_simMC (spr_sim t) agent) = set (jAction SPR.MC t agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "finally"], ["proof (chain)\npicking this:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t agent)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t agent)\n\ngoal (1 subgoal):\n 1. set (local.spr_simAction a ec) = set (jAction SPR.MC t a)", "by (simp only: envSingleAgent[where a=a])"], ["proof (state)\nthis:\n  set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Simulated transitions\\<close>"], ["", "text\\<open>\n\nIt is straightforward to determine the possible successor states of a\ngiven canonical equivalence class @{term \"X\"}:\n\n\\<close>"], ["", "definition (in -)\n  spr_trans :: \"('a, 'p, 'aAct) KBP\n              \\<Rightarrow> ('s \\<Rightarrow> 'eAct list)\n              \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct) \\<Rightarrow> 's \\<Rightarrow> 's)\n              \\<Rightarrow> ('s \\<Rightarrow> 'p \\<Rightarrow> bool)\n              \\<Rightarrow> 'a \\<Rightarrow> ('s :: linorder) spr_simWorldsRep \\<Rightarrow> 's list\"\nwhere\n  \"spr_trans kbp envAction envTrans val \\<equiv> \\<lambda>a X.\n    [ envTrans eact (\\<lambda>a'. aact) s .\n       s \\<leftarrow> toList X, eact \\<leftarrow> envAction s, aact \\<leftarrow> spr_simAction kbp val a X ]\""], ["", "(*<*)"], ["", "abbreviation\n  spr_trans :: \"'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 's list\"\nwhere\n  \"spr_trans \\<equiv> SPRViewSingle.spr_trans (jkbp agent) envAction envTrans envVal\""], ["", "(*>*)"], ["", "text\\<open>\n\nUsing this function we can determine the set of possible successor\nequivalence classes from @{term \"X\"}:\n\n\\<close>"], ["", "abbreviation (in -) envObs_rel :: \"('s \\<Rightarrow> 'obs) \\<Rightarrow> 's \\<times> 's \\<Rightarrow> bool\" where\n  \"envObs_rel envObs \\<equiv> \\<lambda>(s, s'). envObs s' = envObs s\""], ["", "definition (in -)\n  spr_simTrans :: \"('a, 'p, 'aAct) KBP\n                 \\<Rightarrow> (('s::linorder) \\<Rightarrow> 'eAct list)\n                 \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct) \\<Rightarrow> 's \\<Rightarrow> 's)\n                 \\<Rightarrow> ('s \\<Rightarrow> 'p \\<Rightarrow> bool)\n                 \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 'obs)\n                 \\<Rightarrow> 'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 's spr_simWorldsRep list\"\nwhere\n  \"spr_simTrans kbp envAction envTrans val envObs \\<equiv> \\<lambda>a X.\n    map ODList.fromList (partition (envObs_rel (envObs a))\n                                   (spr_trans kbp envAction envTrans val a X))\""], ["", "(*<*)"], ["", "abbreviation\n  spr_simTrans :: \"'a \\<Rightarrow> 's spr_simWorldsRep \\<Rightarrow> 's spr_simWorldsRep list\"\nwhere\n  \"spr_simTrans \\<equiv> SPRViewSingle.spr_simTrans (jkbp agent) envAction envTrans envVal envObs\""], ["", "lemma envObs_rel_equiv:\n  \"equiv UNIV (rel_ext (envObs_rel (envObs agent)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv UNIV (rel_ext (envObs_rel (envObs agent)))", "by (intro equivI refl_onI symI transI) auto"], ["", "lemma spr_trans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\"\n  shows \"set (spr_trans agent ec)\n       = { s |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview agent t' = spr_jview agent t }\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans agent ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (local.spr_trans agent ec)\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = s \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t)\n 2. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> set (local.spr_trans agent ec)", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (local.spr_trans agent ec)\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = s \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans agent ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' = spr_jview agent t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans agent ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' = spr_jview agent t)", "assume x: \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> set (local.spr_trans agent ec)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (local.spr_trans agent ec) \\<Longrightarrow>\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' = spr_jview agent t)", "with assms"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  x \\<in> set (local.spr_trans agent ec)", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  x \\<in> set (local.spr_trans agent ec)\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = s \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    spr_jview agent t' = spr_jview agent t)", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  x \\<in> set (concat\n                (map (\\<lambda>s.\n                         concat\n                          (map (\\<lambda>eact.\n                                   map (\\<lambda>aact.\n     envTrans eact (\\<lambda>a'. aact) s)\n                                    (local.spr_simAction agent ec))\n                            (envAction s)))\n                  (toList ec)))\n\ngoal (1 subgoal):\n 1. x \\<in> rel_ext\n             (\\<lambda>uu_.\n                 \\<exists>t' s.\n                    uu_ = s \\<and>\n                    t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                    spr_jview agent t' = spr_jview agent t)", "apply (clarsimp simp del: split_paired_Ex split_paired_All)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> spr_abs t; xaa \\<in> set (envAction xa);\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) xa\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t", "apply (frule spr_sim_rep_abs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> spr_abs t; xaa \\<in> set (envAction xa);\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) xa;\n        toSet ec = spr_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) xa\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t", "unfolding toSet_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> spr_abs t; xaa \\<in> set (envAction xa);\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) xa;\n        set (toList ec) = spr_abs t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) xa\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> spr_abs t; xaa \\<in> set (envAction xa);\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) xa\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t", "apply (simp only: spr_abs_conv[where a=agent])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        \\<exists>t'.\n           t' \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t \\<and> xa = tLast t';\n        xaa \\<in> set (envAction xa);\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) xa\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xaa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'a.\n                            t'a \\<leadsto>\n                            envTrans xaa (\\<lambda>a'. aact) (tLast t')\n                            \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t'a = spr_jview agent t", "apply (rule_tac x=\"t'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xaa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xaa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto>\n                         envTrans xaa (\\<lambda>a'. aact) (tLast t')\n                         \\<in> SPR.jkbpC \\<and>\n                         spr_jview agent t' = spr_jview agent t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto>\n                         envTrans xa (\\<lambda>a'. aact) (tLast t')\n                         \\<in> SPR.jkbpC", "apply (rule_tac n=\"Suc (tLength t')\" in SPR.jkbpCn_jkbpC_inc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t' \\<leadsto>\n                         envTrans xa (\\<lambda>a'. aact) (tLast t')\n                         \\<in> SPR.jkbpCn (Suc (tLength t'))", "apply (auto iff: Let_def simp del: split_paired_Ex split_paired_All)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>eact aacta.\n                            envTrans xa (\\<lambda>a'. aact) (tLast t') =\n                            envTrans eact aacta (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            eact \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aacta a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=xa in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aacta.\n                            envTrans xa (\\<lambda>a'. aact) (tLast t') =\n                            envTrans xa aacta (tLast t') \\<and>\n                            t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                            xa \\<in> set (envAction (tLast t')) \\<and>\n                            (\\<forall>a.\n                                aacta a\n                                \\<in> set\n (jAction (SPR.MCn (tLength t')) t' a))", "apply (rule_tac x=\"\\<lambda>a'. aact\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> envTrans xa (\\<lambda>a'. aact) (tLast t') =\n                         envTrans xa (\\<lambda>a'. aact) (tLast t') \\<and>\n                         t' \\<in> SPR.jkbpCn (tLength t') \\<and>\n                         xa \\<in> set (envAction (tLast t')) \\<and>\n                         (\\<forall>a.\n                             aact\n                             \\<in> set (jAction (SPR.MCn (tLength t')) t'\n   a))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t' a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact\n                         \\<in> set (jAction (SPR.MCn (tLength t')) t' a)", "apply (subst envSingleAgent)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t' a.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (local.spr_simAction agent ec);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact\n                         \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)", "apply (simp add: spr_simAction[where a=agent])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact\n                         \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)", "apply (subst SPR.jkbpC_jkbpCn_jAction_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t' \\<in> SPR.jkbpCn (tLength t')\n 2. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact \\<in> set (jAction SPR.MC t' agent)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact \\<in> set (jAction SPR.MC t' agent)", "apply (subst S5n_jAction_eq[where w'=t])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> S5n SPR.MC\n 2. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (t', t) \\<in> relations SPR.MC agent\n 3. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> aact \\<in> set (jAction SPR.MC t agent)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact \\<in> set (jAction SPR.MC t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (t', t) \\<in> relations SPR.MC agent", "unfolding SPR.mkM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aact t'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> set (envAction (tLast t'));\n        aact\n        \\<in> set (jAction\n                    \\<lparr>worlds = SPR.jkbpC,\n                       relations =\n                         \\<lambda>a.\n                            rel_ext\n                             (\\<lambda>(t, t').\n                                 {t, t'} \\<subseteq> SPR.jkbpC \\<and>\n                                 spr_jview a t = spr_jview a t'),\n                       valuation = envVal \\<circ> tLast\\<rparr>\n                    t agent);\n        x = envTrans xa (\\<lambda>a'. aact) (tLast t'); t' \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (t', t)\n                         \\<in> relations\n                                \\<lparr>worlds = SPR.jkbpC,\n                                   relations =\n                                     \\<lambda>a.\n  rel_ext\n   (\\<lambda>(t, t').\n       {t, t'} \\<subseteq> SPR.jkbpC \\<and> spr_jview a t = spr_jview a t'),\n                                   valuation = envVal \\<circ> tLast\\<rparr>\n                                agent", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = s \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (local.spr_trans agent ec)\n  \\<subseteq> rel_ext\n               (\\<lambda>uu_.\n                   \\<exists>t' s.\n                      uu_ = s \\<and>\n                      t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                      spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> set (local.spr_trans agent ec)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> set (local.spr_trans agent ec)", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> set (local.spr_trans agent ec)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "assume s: \"s \\<in> ?rhs\""], ["proof (state)\nthis:\n  s \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = s \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "then"], ["proof (chain)\npicking this:\n  s \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = s \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)", "obtain t'\n      where t'sC: \"t' \\<leadsto> s \\<in> SPR.jkbpC\"\n        and tt': \"spr_jview agent t' = spr_jview agent t\""], ["proof (prove)\nusing this:\n  s \\<in> rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t' s.\n                  uu_ = s \\<and>\n                  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n         spr_jview agent t' = spr_jview agent t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  spr_jview agent t' = spr_jview agent t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "have t'Cn: \"t' \\<in> SPR.jkbpCn (tLength t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. t' \\<in> SPR.jkbpCn (tLength t')", "by blast"], ["proof (state)\nthis:\n  t' \\<in> SPR.jkbpCn (tLength t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "from t'sC"], ["proof (chain)\npicking this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "obtain eact aact\n      where eact: \"eact \\<in> set (envAction (tLast t'))\"\n        and aact: \"\\<forall>a. aact a \\<in> set (jAction (SPR.mkM (SPR.jkbpCn (tLength t'))) t' a)\"\n        and s: \"s = envTrans eact aact (tLast t')\""], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using SPR.jkbpC_tLength_inv[where t=\"t' \\<leadsto> s\" and n=\"Suc (tLength t')\"]"], ["proof (prove)\nusing this:\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n  \\<lbrakk>t' \\<leadsto> s \\<in> SPR.jkbpC;\n   tLength (t' \\<leadsto> s) = Suc (tLength t')\\<rbrakk>\n  \\<Longrightarrow> t' \\<leadsto> s \\<in> SPR.jkbpCn (Suc (tLength t'))\n\ngoal (1 subgoal):\n 1. (\\<And>eact aact.\n        \\<lbrakk>eact \\<in> set (envAction (tLast t'));\n         \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n         s = envTrans eact aact (tLast t')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: Let_def)"], ["proof (state)\nthis:\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  s = envTrans eact aact (tLast t')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rel_ext\n                (\\<lambda>uu_.\n                    \\<exists>t' s.\n                       uu_ = s \\<and>\n                       t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                       spr_jview agent t' =\n                       spr_jview agent t) \\<Longrightarrow>\n       x \\<in> set (local.spr_trans agent ec)", "from tC ec s eact aact tt' t'sC"], ["proof (chain)\npicking this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  spr_jview agent t' = spr_jview agent t\n  t' \\<leadsto> s \\<in> SPR.jkbpC", "show \"s \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  spr_jview agent t' = spr_jview agent t\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. s \\<in> set (local.spr_trans agent ec)", "unfolding spr_trans_def"], ["proof (prove)\nusing this:\n  t \\<in> SPR.jkbpC\n  spr_simAbs ec = spr_jkbpCSt t\n  s = envTrans eact aact (tLast t')\n  eact \\<in> set (envAction (tLast t'))\n  \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a)\n  spr_jview agent t' = spr_jview agent t\n  t' \\<leadsto> s \\<in> SPR.jkbpC\n\ngoal (1 subgoal):\n 1. s \\<in> set (concat\n                  (map (\\<lambda>s.\n                           concat\n                            (map (\\<lambda>eact.\n                                     map\n(\\<lambda>aact. envTrans eact (\\<lambda>a'. aact) s)\n(local.spr_simAction agent ec))\n                              (envAction s)))\n                    (toList ec)))", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>spr_abs t.\n                         \\<exists>xa\\<in>set (envAction x).\n                            envTrans eact aact (tLast t')\n                            \\<in> (\\<lambda>aact.\nenvTrans xa (\\<lambda>a'. aact) x) `\n                                  set (local.spr_simAction agent ec)", "apply (rule bexI[where x=\"tLast t'\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>set (envAction (tLast t')).\n                         envTrans eact aact (tLast t')\n                         \\<in> (\\<lambda>aact.\n                                   envTrans x (\\<lambda>a'. aact)\n                                    (tLast t')) `\n                               set (local.spr_simAction agent ec)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> tLast t' \\<in> spr_abs t", "apply (rule bexI[where x=eact])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t')\n                      \\<in> (\\<lambda>aact.\n                                envTrans eact (\\<lambda>a'. aact)\n                                 (tLast t')) `\n                            set (local.spr_simAction agent ec)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> eact \\<in> set (envAction (tLast t'))\n 3. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> tLast t' \\<in> spr_abs t", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t')\n                      \\<in> (\\<lambda>aact.\n                                envTrans eact (\\<lambda>a'. aact)\n                                 (tLast t')) `\n                            set (local.spr_simAction agent ec)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> tLast t' \\<in> spr_abs t", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> tLast t' \\<in> spr_abs t\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t')\n                      \\<in> (\\<lambda>aact.\n                                envTrans eact (\\<lambda>a'. aact)\n                                 (tLast t')) `\n                            set (local.spr_simAction agent ec)", "apply (blast intro: spr_absI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t')\n                      \\<in> (\\<lambda>aact.\n                                envTrans eact (\\<lambda>a'. aact)\n                                 (tLast t')) `\n                            set (local.spr_simAction agent ec)", "apply (simp add: spr_simAction[where a=agent])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t')\n                      \\<in> (\\<lambda>x.\n                                envTrans eact (\\<lambda>a'. x) (tLast t')) `\n                            set (jAction SPR.MC t agent)", "apply (rule image_eqI[where x=\"aact agent\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t') =\n                      envTrans eact (\\<lambda>a'. aact agent) (tLast t')\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply (subgoal_tac \"(\\<lambda>a'. aact agent) = aact\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     (\\<lambda>a'. aact agent) = aact\\<rbrakk>\n    \\<Longrightarrow> envTrans eact aact (tLast t') =\n                      envTrans eact (\\<lambda>a'. aact agent) (tLast t')\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a'. aact agent) = aact\n 3. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a'. aact agent) = aact\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply (rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        spr_jview agent t' = spr_jview agent t;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n       \\<Longrightarrow> aact agent = aact a'\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply (cut_tac a=a' in envSingleAgent)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a'.\n       \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n        s = envTrans eact aact (tLast t');\n        eact \\<in> set (envAction (tLast t'));\n        \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n        spr_jview agent t' = spr_jview agent t;\n        t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n        a' = agent\\<rbrakk>\n       \\<Longrightarrow> aact agent = aact a'\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     \\<forall>a. aact a \\<in> set (jAction (SPR.MCn (tLength t')) t' a);\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply (erule allE[where x=agent])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction SPR.MC t agent)", "apply (subst SPR.jkbpC_jkbpCn_jAction_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> SPR.jkbpCn ?n80\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent \\<in> set (jAction (SPR.MCn ?n80) t agent)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t agent)", "apply (subst S5n_jAction_eq[where w=t and w'=t'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> S5n (SPR.MCn (tLength t))\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> (t, t') \\<in> relations (SPR.MCn (tLength t)) agent\n 3. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t' agent)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> (t, t') \\<in> relations (SPR.MCn (tLength t)) agent\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t' agent)", "apply (unfold SPR.mkM_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent\n     \\<in> set (jAction\n                 \\<lparr>worlds = SPR.jkbpCn (tLength t'),\n                    relations =\n                      \\<lambda>a.\n                         rel_ext\n                          (\\<lambda>(t, t'a).\n                              {t, t'a}\n                              \\<subseteq> SPR.jkbpCn (tLength t') \\<and>\n                              spr_jview a t = spr_jview a t'a),\n                    valuation = envVal \\<circ> tLast\\<rparr>\n                 t' agent)\\<rbrakk>\n    \\<Longrightarrow> (t, t')\n                      \\<in> relations\n                             \\<lparr>worlds = SPR.jkbpCn (tLength t),\n                                relations =\n                                  \\<lambda>a.\n                                     rel_ext\n(\\<lambda>(ta, t').\n    {ta, t'} \\<subseteq> SPR.jkbpCn (tLength t) \\<and>\n    spr_jview a ta = spr_jview a t'),\n                                valuation = envVal \\<circ> tLast\\<rparr>\n                             agent\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t' agent)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent\n     \\<in> set (jAction\n                 \\<lparr>worlds = SPR.jkbpCn (tLength t'),\n                    relations =\n                      \\<lambda>a.\n                         rel_ext\n                          (\\<lambda>(t, t'a).\n                              t \\<in> SPR.jkbpCn (tLength t') \\<and>\n                              t'a \\<in> SPR.jkbpCn (tLength t') \\<and>\n                              spr_jview a t = spr_jview a t'a),\n                    valuation = envVal \\<circ> tLast\\<rparr>\n                 t' agent)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> SPR.jkbpCn (tLength t) \\<and>\n                      t' \\<in> SPR.jkbpCn (tLength t)\n 2. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t' agent)", "apply (blast dest: SPR.sync[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> SPR.jkbpC; spr_simAbs ec = spr_jkbpCSt t;\n     s = envTrans eact aact (tLast t');\n     eact \\<in> set (envAction (tLast t'));\n     spr_jview agent t' = spr_jview agent t;\n     t' \\<leadsto> envTrans eact aact (tLast t') \\<in> SPR.jkbpC;\n     aact agent \\<in> set (jAction (SPR.MCn (tLength t')) t' agent)\\<rbrakk>\n    \\<Longrightarrow> aact agent\n                      \\<in> set (jAction (SPR.MCn (tLength t)) t' agent)", "apply (auto dest: SPR.sync[rule_format])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  s \\<in> set (local.spr_trans agent ec)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = s \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview agent t' = spr_jview agent t)\n  \\<subseteq> set (local.spr_trans agent ec)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\nThe \\<open>partition\\<close> function splits a list into equivalence\nclasses under the given equivalence relation.\n\nThe property asked for by the \\<open>Algorithm\\<close> locale follows from\nthe properties of \\<open>partition\\<close> and \\<open>spr_trans\\<close>:\n\n\\<close>"], ["", "lemma spr_simTrans:\n  assumes tC: \"t \\<in> SPR.jkbpC\"\n  assumes ec: \"spr_simAbs ec = SPRsingle.sim_equiv_class a t\"\n  shows \"spr_simAbs ` set (spr_simTrans a ec)\n      = { SPRsingle.sim_equiv_class a (t' \\<leadsto> s)\n          |t' s. t' \\<leadsto> s \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jview a t}\"\n(*<*) (is \"?lhs a = ?rhs a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "from ec"], ["proof (chain)\npicking this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t", "have ec': \"spr_simAbs ec = SPRsingle.sim_equiv_class agent t\""], ["proof (prove)\nusing this:\n  spr_simAbs ec = SPRsingle.sim_equiv_class a t\n\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t", "by (simp only: envSingleAgent[where a=a])"], ["proof (state)\nthis:\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "from ec'"], ["proof (chain)\npicking this:\n  spr_simAbs ec = spr_jkbpCSt t", "have \"?lhs agent = ?rhs agent\""], ["proof (prove)\nusing this:\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans agent ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "unfolding spr_simTrans_def"], ["proof (prove)\nusing this:\n  spr_simAbs ec = spr_jkbpCSt t\n\ngoal (1 subgoal):\n 1. spr_simAbs `\n    set (map fromList\n          (List_local.partition (envObs_rel (envObs agent))\n            (local.spr_trans agent ec))) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    spr_simAbs `\n    fromList `\n    set (List_local.partition (envObs_rel (envObs agent))\n          (local.spr_trans agent ec)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "apply (simp only: spr_simAbs_list partition[OF envObs_rel_equiv subset_UNIV] spr_trans[OF tC ec'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    (\\<lambda>ss.\n        rel_ext\n         (\\<lambda>uu_. \\<exists>s. uu_ = (ss, s) \\<and> s \\<in> ss)) `\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = s \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t) //\n    Restr (rel_ext (envObs_rel (envObs agent)))\n     (rel_ext\n       (\\<lambda>uu_.\n           \\<exists>t' s.\n              uu_ = s \\<and>\n              t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    (\\<lambda>x.\n        rel_ext (\\<lambda>uu_. \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t) //\n    Restr (rel_ext (envObs_rel (envObs agent)))\n     (rel_ext\n       (\\<lambda>uu_.\n           \\<exists>t'.\n              t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t)) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    (\\<lambda>x.\n        rel_ext (\\<lambda>uu_. \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t) //\n    Restr (rel_ext (envObs_rel (envObs agent)))\n     (rel_ext\n       (\\<lambda>uu_.\n           \\<exists>t'.\n              t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "(* left to right *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    (\\<lambda>x.\n        rel_ext (\\<lambda>uu_. \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t'.\n            t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t) //\n    Restr (rel_ext (envObs_rel (envObs agent)))\n     (rel_ext\n       (\\<lambda>uu_.\n           \\<exists>t'.\n              t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent t))\n    \\<subseteq> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t' s.\n                        uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                        t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        xa \\<in> rel_ext\n                  (\\<lambda>uu_.\n                      \\<exists>t'.\n                         t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                         spr_jview agent t' = spr_jview agent t) //\n                 Restr (rel_ext (envObs_rel (envObs agent)))\n                  (rel_ext\n                    (\\<lambda>uu_.\n                        \\<exists>t'.\n                           t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                           spr_jview agent t' = spr_jview agent t))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' s.\n                            rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>s.\n                                    uu_ = (xa, s) \\<and> s \\<in> xa) =\n                            spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (erule quotientE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        xa =\n        Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x};\n        x \\<in> rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' s.\n                            rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>s.\n                                    uu_ = (xa, s) \\<and> s \\<in> xa) =\n                            spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t' s.\n                            rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>s.\n                                    uu_ =\n                                    (Restr\n(rel_ext (envObs_rel (envObs agent)))\n(rel_ext\n  (\\<lambda>uu_.\n      \\<exists>t'.\n         t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n         spr_jview agent t' = spr_jview agent t)) ``\n                                     {x},\n                                     s) \\<and>\n                                    envObs agent s = envObs agent x \\<and>\n                                    (\\<exists>t'.\n  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n  spr_jview agent t' = spr_jview agent t)) =\n                            spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=t' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>s.\n                                    uu_ =\n                                    (Restr\n(rel_ext (envObs_rel (envObs agent)))\n(rel_ext\n  (\\<lambda>uu_.\n      \\<exists>t'.\n         t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n         spr_jview agent t' = spr_jview agent t)) ``\n                                     {x},\n                                     s) \\<and>\n                                    envObs agent s = envObs agent x \\<and>\n                                    (\\<exists>t'.\n  t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n  spr_jview agent t' = spr_jview agent t)) =\n                            spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s.\n                                 uu_ =\n                                 (Restr\n                                   (rel_ext (envObs_rel (envObs agent)))\n                                   (rel_ext\n                                     (\\<lambda>uu_.\n   \\<exists>t'.\n      t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n      spr_jview agent t' = spr_jview agent t)) ``\n                                  {x},\n                                  s) \\<and>\n                                 envObs agent s = envObs agent x \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                     spr_jview agent t' =\n                                     spr_jview agent t)) =\n                         spr_jkbpCSt (t' \\<leadsto> x) \\<and>\n                         t' \\<leadsto> x \\<in> SPR.jkbpC \\<and>\n                         spr_jview agent t' = spr_jview agent t\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s.\n                                 uu_ =\n                                 (Restr\n                                   (rel_ext (envObs_rel (envObs agent)))\n                                   (rel_ext\n                                     (\\<lambda>uu_.\n   \\<exists>t'.\n      t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n      spr_jview agent t' = spr_jview agent t)) ``\n                                  {x},\n                                  s) \\<and>\n                                 envObs agent s = envObs agent x \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                     spr_jview agent t' =\n                                     spr_jview agent t)) =\n                         spr_jkbpCSt (t' \\<leadsto> x)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>s.\n                                 uu_ =\n                                 (Restr\n                                   (rel_ext (envObs_rel (envObs agent)))\n                                   (rel_ext\n                                     (\\<lambda>uu_.\n   \\<exists>t'.\n      t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n      spr_jview agent t' = spr_jview agent t)) ``\n                                  {x},\n                                  s) \\<and>\n                                 envObs agent s = envObs agent x \\<and>\n                                 (\\<exists>t'.\n                                     t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                     spr_jview agent t' =\n                                     spr_jview agent t))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> x)\n 2. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 3. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (Restr (rel_ext (envObs_rel (envObs agent)))\n                           (rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t' =\n                                    spr_jview agent t)) ``\n                          {x},\n                          s)\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> x)\n 2. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 3. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=\"t'a \\<leadsto> s\" in image_eqI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (Restr (rel_ext (envObs_rel (envObs agent)))\n                           (rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t' =\n                                    spr_jview agent t)) ``\n                          {x},\n                          s) =\n                         spr_sim (t'a \\<leadsto> s)\n 2. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 3. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 4. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (unfold spr_sim_def [abs_def] spr_abs_def)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent x),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> (Restr (rel_ext (envObs_rel (envObs agent)))\n                           (rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t' =\n                                    spr_jview agent t)) ``\n                          {x},\n                          s) =\n                         (tLast `\n                          rel_ext\n                           (\\<lambda>t'.\n                               t' \\<in> SPR.jkbpC \\<and>\n                               spr_jview agent t' =\n                               spr_jview agent (t'a \\<leadsto> s)),\n                          tLast (t'a \\<leadsto> s))\n 2. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 3. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 4. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {x} =\n                         tLast `\n                         rel_ext\n                          (\\<lambda>t'.\n                              t' \\<in> SPR.jkbpC \\<and>\n                              spr_jview agent t' =\n                              spr_jview agent (t'a \\<leadsto> s))\n 2. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 3. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 4. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (auto iff: spr_jview_def)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t' s t'a xa t'b t'c.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        envObs agent xa = envObs agent x; t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t;\n        t'c \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'c = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>tp' s'.\n     t' = tp' \\<leadsto> s' \\<and>\n     envObs agent x = envObs agent s' \\<and>\n     tMap (envObs agent) tp' = tMap (envObs agent) t))\n 2. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 3. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 4. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=\"t'c \\<leadsto> xa\" in image_eqI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x t' s t'a xa t'b t'c.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        envObs agent xa = envObs agent x; t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t;\n        t'c \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'c = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> xa = tLast (t'c \\<leadsto> xa)\n 2. \\<And>x t' s t'a xa t'b t'c.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        envObs agent xa = envObs agent x; t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t;\n        t'c \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'c = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> t'c \\<leadsto> xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>tp' s'.\n  t' = tp' \\<leadsto> s' \\<and>\n  envObs agent x = envObs agent s' \\<and>\n  tMap (envObs agent) tp' = tMap (envObs agent) t))\n 3. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 4. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 5. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t' s t'a xa t'b t'c.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        envObs agent xa = envObs agent x; t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t;\n        t'c \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'c = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> t'c \\<leadsto> xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>tp' s'.\n  t' = tp' \\<leadsto> s' \\<and>\n  envObs agent x = envObs agent s' \\<and>\n  tMap (envObs agent) tp' = tMap (envObs agent) t))\n 2. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 3. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 4. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent s = envObs agent x; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> t'a \\<leadsto> s\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> x))\n 2. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 3. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (simp add: spr_jview_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> x)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>s.\n       uu_ =\n       (Restr (rel_ext (envObs_rel (envObs agent)))\n         (rel_ext\n           (\\<lambda>uu_.\n               \\<exists>t'.\n                  t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                  spr_jview agent t' = spr_jview agent t)) ``\n        {x},\n        s) \\<and>\n       envObs agent s = envObs agent x \\<and>\n       (\\<exists>t'.\n           t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t' = spr_jview agent t))\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' a b xa.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; (a, b) = spr_sim xa;\n        xa \\<in> SPR.jkbpC;\n        spr_jview agent xa = spr_jview agent (t' \\<leadsto> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            spr_sim xa =\n                            (Restr (rel_ext (envObs_rel (envObs agent)))\n                              (rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t)) ``\n                             {x},\n                             s) \\<and>\n                            envObs agent s = envObs agent x \\<and>\n                            (\\<exists>t'.\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' a b xa.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; (a, b) = spr_sim xa;\n        xa \\<in> SPR.jkbpC;\n        spr_jview agent xa = spr_jview agent (t' \\<leadsto> x);\n        \\<exists>t'' s'. xa = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            spr_sim xa =\n                            (Restr (rel_ext (envObs_rel (envObs agent)))\n                              (rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t)) ``\n                             {x},\n                             s) \\<and>\n                            envObs agent s = envObs agent x \\<and>\n                            (\\<exists>t'.\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' a b t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        (a, b) = spr_sim (t'' \\<leadsto> s');\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            spr_sim (t'' \\<leadsto> s') =\n                            (Restr (rel_ext (envObs_rel (envObs agent)))\n                              (rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t)) ``\n                             {x},\n                             s) \\<and>\n                            envObs agent s = envObs agent x \\<and>\n                            (\\<exists>t'.\n                                t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                                spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=s' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' a b t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        (a, b) = spr_sim (t'' \\<leadsto> s');\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> x)\\<rbrakk>\n       \\<Longrightarrow> spr_sim (t'' \\<leadsto> s') =\n                         (Restr (rel_ext (envObs_rel (envObs agent)))\n                           (rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t' =\n                                    spr_jview agent t)) ``\n                          {x},\n                          s') \\<and>\n                         envObs agent s' = envObs agent x \\<and>\n                         (\\<exists>t'.\n                             t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                             spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (unfold spr_sim_def [abs_def] spr_abs_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' a b t'' s'.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent x),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        (a, b) =\n        (tLast `\n         rel_ext\n          (\\<lambda>t'.\n              t' \\<in> SPR.jkbpC \\<and>\n              spr_jview agent t' = spr_jview agent (t'' \\<leadsto> s')),\n         tLast (t'' \\<leadsto> s'));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> x)\\<rbrakk>\n       \\<Longrightarrow> (tLast `\n                          rel_ext\n                           (\\<lambda>t'.\n                               t' \\<in> SPR.jkbpC \\<and>\n                               spr_jview agent t' =\n                               spr_jview agent (t'' \\<leadsto> s')),\n                          tLast (t'' \\<leadsto> s')) =\n                         (Restr (rel_ext (envObs_rel (envObs agent)))\n                           (rel_ext\n                             (\\<lambda>uu_.\n                                 \\<exists>t'.\n                                    t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t' =\n                                    spr_jview agent t)) ``\n                          {x},\n                          s') \\<and>\n                         envObs agent s' = envObs agent x \\<and>\n                         (\\<exists>t'.\n                             t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                             spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> x)\\<rbrakk>\n       \\<Longrightarrow> tLast `\n                         rel_ext\n                          (\\<lambda>t'a.\n                              t'a \\<in> SPR.jkbpC \\<and>\n                              spr_jview agent t'a =\n                              spr_jview agent (t' \\<leadsto> x)) =\n                         Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {x} \\<and>\n                         envObs agent b = envObs agent x \\<and>\n                         (\\<exists>t'.\n                             t' \\<leadsto> b \\<in> SPR.jkbpC \\<and>\n                             spr_jview agent t' = spr_jview agent t)\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (auto iff: spr_jview_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' b t'' xa t'a t'b.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'' = tMap (envObs agent) t;\n        envObs agent b = envObs agent x; envObs agent xa = envObs agent x;\n        t'a \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        t'b \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> tLast `\n                                  rel_ext\n                                   (\\<lambda>t'.\n t' \\<in> SPR.jkbpC \\<and>\n (\\<exists>tp' s'.\n     t' = tp' \\<leadsto> s' \\<and>\n     envObs agent x = envObs agent s' \\<and>\n     tMap (envObs agent) tp' = tMap (envObs agent) t))\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=\"t'b \\<leadsto> xa\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t' b t'' xa t'a t'b.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'' = tMap (envObs agent) t;\n        envObs agent b = envObs agent x; envObs agent xa = envObs agent x;\n        t'a \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        t'b \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> xa = tLast (t'b \\<leadsto> xa)\n 2. \\<And>x t' b t'' xa t'a t'b.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'' = tMap (envObs agent) t;\n        envObs agent b = envObs agent x; envObs agent xa = envObs agent x;\n        t'a \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        t'b \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> t'b \\<leadsto> xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>tp' s'.\n  t' = tp' \\<leadsto> s' \\<and>\n  envObs agent x = envObs agent s' \\<and>\n  tMap (envObs agent) tp' = tMap (envObs agent) t))\n 3. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' b t'' xa t'a t'b.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x.\n                    (tLast `\n                     rel_ext\n                      (\\<lambda>t'.\n                          t' \\<in> SPR.jkbpC \\<and>\n                          tMap (envObs agent) t' = tMap (envObs agent) t),\n                     tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     tMap (envObs agent) t' = tMap (envObs agent) t);\n        t' \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t' = tMap (envObs agent) t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'' = tMap (envObs agent) t;\n        envObs agent b = envObs agent x; envObs agent xa = envObs agent x;\n        t'a \\<leadsto> x \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'a = tMap (envObs agent) t;\n        t'b \\<leadsto> xa \\<in> SPR.jkbpC;\n        tMap (envObs agent) t'b = tMap (envObs agent) t\\<rbrakk>\n       \\<Longrightarrow> t'b \\<leadsto> xa\n                         \\<in> rel_ext\n                                (\\<lambda>t'.\n                                    t' \\<in> SPR.jkbpC \\<and>\n                                    (\\<exists>tp' s'.\n  t' = tp' \\<leadsto> s' \\<and>\n  envObs agent x = envObs agent s' \\<and>\n  tMap (envObs agent) tp' = tMap (envObs agent) t))\n 2. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "(* right to left *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spr_simAbs ec = spr_jkbpCSt t \\<Longrightarrow>\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t' = spr_jview agent t)\n    \\<subseteq> (\\<lambda>x.\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                rel_ext\n                 (\\<lambda>uu_.\n                     \\<exists>t'.\n                        t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                        spr_jview agent t' = spr_jview agent t) //\n                Restr (rel_ext (envObs_rel (envObs agent)))\n                 (rel_ext\n                   (\\<lambda>uu_.\n                       \\<exists>t'.\n                          t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                          spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> s)\n                         \\<in> (\\<lambda>x.\n                                   rel_ext\n                                    (\\<lambda>uu_.\n  \\<exists>s. uu_ = (x, s) \\<and> s \\<in> x)) `\n                               rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=\"spr_abs (t' \\<leadsto> s)\" in image_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> s) =\n                         rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jkbpCSt (t' \\<leadsto> s)\n                         \\<subseteq> rel_ext\n(\\<lambda>uu_.\n    \\<exists>sa.\n       uu_ = (spr_abs (t' \\<leadsto> s), sa) \\<and>\n       sa \\<in> spr_abs (t' \\<leadsto> s))\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s a b x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; (a, b) = spr_sim x;\n        x \\<in> SPR.jkbpC;\n        spr_jview agent x = spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa.\n                            spr_sim x =\n                            (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                            sa \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s a b x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; (a, b) = spr_sim x;\n        x \\<in> SPR.jkbpC;\n        spr_jview agent x = spr_jview agent (t' \\<leadsto> s);\n        \\<exists>t'' s'. x = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa.\n                            spr_sim x =\n                            (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                            sa \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s a b t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        (a, b) = spr_sim (t'' \\<leadsto> s');\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa.\n                            spr_sim (t'' \\<leadsto> s') =\n                            (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                            sa \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (unfold spr_sim_def [abs_def])[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s a b t'' s'.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        (a, b) = (spr_abs (t'' \\<leadsto> s'), tLast (t'' \\<leadsto> s'));\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa.\n                            (spr_abs (t'' \\<leadsto> s'),\n                             tLast (t'' \\<leadsto> s')) =\n                            (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                            sa \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t'' \\<leadsto> b) =\n                         spr_abs (t' \\<leadsto> s) \\<and>\n                         b \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply rule"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t'' \\<leadsto> b) =\n                         spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> spr_abs (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 4. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (erule spr_abs_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> spr_abs (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (erule spr_absI[where a=agent])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent (t' \\<leadsto> s) =\n                         spr_jview agent (t' \\<leadsto> s)\n 2. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> b \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> b = tLast (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 4. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent (t'' \\<leadsto> b) =\n                         spr_jview agent (t' \\<leadsto> s)\n 2. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> b = tLast (t'' \\<leadsto> b)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 4. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s b t''.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        spr_jview agent (t'' \\<leadsto> b) =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> b = tLast (t'' \\<leadsto> b)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> rel_ext\n                          (\\<lambda>uu_.\n                              \\<exists>sa.\n                                 uu_ =\n                                 (spr_abs (t' \\<leadsto> s), sa) \\<and>\n                                 sa \\<in> spr_abs (t' \\<leadsto> s))\n                         \\<subseteq> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s sa.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        sa \\<in> spr_abs (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), sa)\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (simp only: spr_abs_conv[where a=agent])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s sa.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        \\<exists>t'a.\n           t'a \\<in> SPR.jkbpC \\<and>\n           spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s) \\<and>\n           sa = tLast t'a\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), sa)\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; t'a \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), tLast t'a)\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t; t'a \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s);\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), tLast t'a)\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), s')\n                         \\<in> spr_jkbpCSt (t' \\<leadsto> s)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=\"t'' \\<leadsto> s'\" in image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), s') =\n                         spr_sim (t'' \\<leadsto> s')\n 2. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t'' \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> s))\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (unfold spr_sim_def [abs_def])[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (spr_abs (t' \\<leadsto> s), s') =\n                         (spr_abs (t'' \\<leadsto> s'),\n                          tLast (t'' \\<leadsto> s'))\n 2. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t'' \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> s))\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec =\n                (\\<lambda>x. (spr_abs x, tLast x)) `\n                rel_ext\n                 (\\<lambda>t'.\n                     t' \\<in> SPR.jkbpC \\<and>\n                     spr_jview agent t' = spr_jview agent t);\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s) =\n                         spr_abs (t'' \\<leadsto> s')\n 2. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t'' \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> s))\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t'' \\<leadsto> s'\n                         \\<in> rel_ext\n                                (\\<lambda>t'a.\n                                    t'a \\<in> SPR.jkbpC \\<and>\n                                    spr_jview agent t'a =\n                                    spr_jview agent (t' \\<leadsto> s))\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<in> rel_ext\n                                (\\<lambda>uu_.\n                                    \\<exists>t'.\n t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n spr_jview agent t' = spr_jview agent t) //\n                               Restr (rel_ext (envObs_rel (envObs agent)))\n                                (rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t))", "apply (rule_tac x=s in quotientI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> s \\<in> rel_ext\n                                  (\\<lambda>uu_.\n\\<exists>t'.\n   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n   spr_jview agent t' = spr_jview agent t)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s) =\n                         Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s) =\n                         Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_abs (t' \\<leadsto> s)\n                         \\<subseteq> Restr\n(rel_ext (envObs_rel (envObs agent)))\n(rel_ext\n  (\\<lambda>uu_.\n      \\<exists>t'.\n         t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n         spr_jview agent t' = spr_jview agent t)) ``\n                                     {s}\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        x \\<in> spr_abs (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>t'.\n                             t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                             spr_jview agent t' = spr_jview agent t) \\<and>\n                         (\\<exists>t'.\n                             t' \\<leadsto> x \\<in> SPR.jkbpC \\<and>\n                             spr_jview agent t' = spr_jview agent t)\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t' s x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        x \\<in> spr_abs (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        x \\<in> spr_abs (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> x \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 3. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        x \\<in> spr_abs (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> x \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply (cut_tac v=x and t=\"t' \\<leadsto> s\" in spr_abs_conv[where a=agent])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        x \\<in> spr_abs (t' \\<leadsto> s);\n        (x \\<in> spr_abs (t' \\<leadsto> s)) =\n        (\\<exists>t'a.\n            t'a \\<in> SPR.jkbpC \\<and>\n            spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s) \\<and>\n            x = tLast t'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> x \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        tLast t'a \\<in> spr_abs (t' \\<leadsto> s); t'a \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply (frule spr_jview_tStep_eq_inv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'a.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        tLast t'a \\<in> spr_abs (t' \\<leadsto> s); t'a \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent (t' \\<leadsto> s);\n        \\<exists>t'' s'. t'a = t'' \\<leadsto> s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> tLast t'a \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        s' \\<in> spr_abs (t' \\<leadsto> s);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            t' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                            spr_jview agent t' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply (rule_tac x=t'' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s t'' s'.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        s' \\<in> spr_abs (t' \\<leadsto> s);\n        t'' \\<leadsto> s' \\<in> SPR.jkbpC;\n        spr_jview agent (t'' \\<leadsto> s') =\n        spr_jview agent (t' \\<leadsto> s)\\<rbrakk>\n       \\<Longrightarrow> t'' \\<leadsto> s' \\<in> SPR.jkbpC \\<and>\n                         spr_jview agent t'' = spr_jview agent t\n 2. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply (simp add: Let_def spr_jview_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' s.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> Restr (rel_ext (envObs_rel (envObs agent)))\n                          (rel_ext\n                            (\\<lambda>uu_.\n                                \\<exists>t'.\n                                   t' \\<leadsto> uu_ \\<in> SPR.jkbpC \\<and>\n                                   spr_jview agent t' =\n                                   spr_jview agent t)) ``\n                         {s}\n                         \\<subseteq> spr_abs (t' \\<leadsto> s)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t;\n        t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> spr_abs (t' \\<leadsto> s)", "apply (erule spr_absI[where a=agent])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t;\n        t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent (t' \\<leadsto> s) =\n                         spr_jview agent (t' \\<leadsto> s)\n 2. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t;\n        t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> x = tLast (t' \\<leadsto> s)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s;\n        spr_jview agent t'a = spr_jview agent t;\n        t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent (t'a \\<leadsto> s) =\n                         spr_jview agent (t' \\<leadsto> s)\n 2. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s;\n        spr_jview agent t'a = spr_jview agent t;\n        t'b \\<leadsto> x \\<in> SPR.jkbpC;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> x = tLast (t'a \\<leadsto> s)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> spr_jview agent (t'b \\<leadsto> x) =\n                         spr_jview agent (t' \\<leadsto> s)\n 2. \\<And>t' s x t'a t'b.\n       \\<lbrakk>spr_simAbs ec = spr_jkbpCSt t;\n        t' \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t' = spr_jview agent t;\n        envObs agent x = envObs agent s; t'a \\<leadsto> s \\<in> SPR.jkbpC;\n        spr_jview agent t'a = spr_jview agent t;\n        spr_jview agent t'b = spr_jview agent t\\<rbrakk>\n       \\<Longrightarrow> x = tLast (t'b \\<leadsto> x)", "apply (auto iff: spr_jview_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spr_simAbs ` set (local.spr_simTrans agent ec) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "thus \"?lhs a = ?rhs a\""], ["proof (prove)\nusing this:\n  spr_simAbs ` set (local.spr_simTrans agent ec) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = spr_jkbpCSt (t' \\<leadsto> s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview agent t' = spr_jview agent t)\n\ngoal (1 subgoal):\n 1. spr_simAbs ` set (local.spr_simTrans a ec) =\n    rel_ext\n     (\\<lambda>uu_.\n         \\<exists>t' s.\n            uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n            spr_jview a t' = spr_jview a t)", "by (simp only: envSingleAgent[where a=a])"], ["proof (state)\nthis:\n  spr_simAbs ` set (local.spr_simTrans a ec) =\n  rel_ext\n   (\\<lambda>uu_.\n       \\<exists>t' s.\n          uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n          t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n          spr_jview a t' = spr_jview a t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\\<close>"], ["", "end"], ["", "(* context FiniteSingleAgentEnvironment *)\n\n(* **************************************** *)"], ["", "subsubsection\\<open>Maps\\<close>"], ["", "text\\<open>\n\n\\label{sec:kbps-theory-spr-single-maps}\n\nAs in \\S\\ref{sec:kbps-theory-clock-view-maps}, we use a pair of tries\nand an association list to handle the automata representation. Recall\nthat the keys of these tries are lists of system states.\n\n\\<close>"], ["", "type_synonym ('s, 'obs) spr_trans_trie = \"('s, ('obs, 's odlist) mapping) trie\""], ["", "type_synonym ('s, 'aAct) spr_acts_trie = \"('s, ('s, 'aAct) trie) trie\""], ["", "(*<*)"], ["", "definition\n  trans_MapOps_lookup :: \"('s::linorder, 'obs) spr_trans_trie\n                        \\<Rightarrow> 's odlist \\<times> 'obs \\<rightharpoonup> 's odlist\"\nwhere\n  \"trans_MapOps_lookup \\<equiv> \\<lambda>m k.\n     Option.bind (trie_odlist_lookup m (fst k)) (\\<lambda>m'. Mapping.lookup m' (snd k))\""], ["", "definition\n  trans_MapOps_update :: \"'s odlist \\<times> 'obs \\<Rightarrow> ('s :: linorder) odlist\n                        \\<Rightarrow> ('s, ('obs, 's odlist) mapping) trie\n                        \\<Rightarrow> ('s, ('obs, 's odlist) mapping) trie\"\nwhere\n  \"trans_MapOps_update \\<equiv> \\<lambda>k v m.\n     trie_odlist_update_with (fst k) m Mapping.empty\n      (\\<lambda>m. Mapping.update (snd k) v m)\""], ["", "definition\n  trans_MapOps :: \"(('s :: linorder, ('obs, 's odlist) mapping) trie, 's odlist \\<times> 'obs, 's odlist) MapOps\"\nwhere\n  \"trans_MapOps \\<equiv>\n     \\<lparr> MapOps.empty = empty_trie,\n       lookup = trans_MapOps_lookup,\n       update = trans_MapOps_update \\<rparr>\""], ["", "lemma (in FiniteSingleAgentEnvironment) trans_MapOps[intro, simp]:\n  \"MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k)) (SPRsingle.jkbpSEC \\<times> UNIV) trans_MapOps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       (spr_simAbs (fst k), snd k)\n       \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n             UNIV \\<Longrightarrow>\n       MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       (spr_simAbs (fst k), snd k)\n       \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n             UNIV \\<Longrightarrow>\n       MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n 2. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "show \"MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None", "unfolding trans_MapOps_def trans_MapOps_lookup_def trie_odlist_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m k.\n             Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n              (\\<lambda>m'. Mapping.lookup m' (snd k)),\n        update = trans_MapOps_update\\<rparr>\n     (MapOps.empty\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m k.\n               Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n                (\\<lambda>m'. Mapping.lookup m' (snd k)),\n          update = trans_MapOps_update\\<rparr>)\n     k =\n    None", "by (auto split: prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (MapOps.empty trans_MapOps) k = None\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "fix e k k' M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "assume k: \"(spr_simAbs (fst k), snd k) \\<in> SPRsingle.jkbpSEC \\<times> (UNIV :: 'z set)\"\n     and k': \"(spr_simAbs (fst k'), snd k') \\<in> SPRsingle.jkbpSEC \\<times> (UNIV :: 'z set)\""], ["proof (state)\nthis:\n  (spr_simAbs (fst k), snd k)\n  \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n  (spr_simAbs (fst k'), snd k')\n  \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>e k k' M.\n       \\<lbrakk>(spr_simAbs (fst k), snd k)\n                \\<in> (\\<Union>a.\n                          SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n                      UNIV;\n        (spr_simAbs (fst k'), snd k')\n        \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times>\n              UNIV\\<rbrakk>\n       \\<Longrightarrow> MapOps.lookup trans_MapOps\n                          (update trans_MapOps k e M) k' =\n                         (if (spr_simAbs (fst k'), snd k') =\n                             (spr_simAbs (fst k), snd k)\n                          then Some e else MapOps.lookup trans_MapOps M k')", "show \"MapOps.lookup trans_MapOps (MapOps.update trans_MapOps k e M) k'\n         = (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n             then Some e else MapOps.lookup trans_MapOps M k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "proof(cases \"(spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "case True"], ["proof (state)\nthis:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "hence \"k = k'\""], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. k = k'", "using injD[OF spr_simAbs_inj] k k'"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n  spr_simAbs ?x = spr_simAbs ?y \\<Longrightarrow> ?x = ?y\n  (spr_simAbs (fst k), snd k)\n  \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n  (spr_simAbs (fst k'), snd k')\n  \\<in> (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV\n\ngoal (1 subgoal):\n 1. k = k'", "by (auto iff: prod_eqI)"], ["proof (state)\nthis:\n  k = k'\n\ngoal (2 subgoals):\n 1. (spr_simAbs (fst k'), snd k') =\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')\n 2. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "unfolding trans_MapOps_def trans_MapOps_lookup_def trans_MapOps_update_def trie_odlist_lookup_def trie_odlist_update_with_def"], ["proof (prove)\nusing this:\n  k = k'\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m k.\n             Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n              (\\<lambda>m'. Mapping.lookup m' (snd k)),\n        update =\n          \\<lambda>k v m.\n             trie_update_with' (toList (fst k)) m Mapping.empty\n              (Mapping.update (snd k) v)\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m k.\n               Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n                (\\<lambda>m'. Mapping.lookup m' (snd k)),\n          update =\n            \\<lambda>k v m.\n               trie_update_with' (toList (fst k)) m Mapping.empty\n                (Mapping.update (snd k) v)\\<rparr>\n       k e M)\n     k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m k.\n                   Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n                    (\\<lambda>m'. Mapping.lookup m' (snd k)),\n              update =\n                \\<lambda>k v m.\n                   trie_update_with' (toList (fst k)) m Mapping.empty\n                    (Mapping.update (snd k) v)\\<rparr>\n           M k')", "by (simp add: lookup_trie_update_with lookup_update split: option.split prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "case False"], ["proof (state)\nthis:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. (spr_simAbs (fst k'), snd k') \\<noteq>\n    (spr_simAbs (fst k), snd k) \\<Longrightarrow>\n    MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "thus ?thesis"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e else MapOps.lookup trans_MapOps M k')", "unfolding trans_MapOps_def trans_MapOps_lookup_def trans_MapOps_update_def trie_odlist_lookup_def trie_odlist_update_with_def"], ["proof (prove)\nusing this:\n  (spr_simAbs (fst k'), snd k') \\<noteq> (spr_simAbs (fst k), snd k)\n\ngoal (1 subgoal):\n 1. MapOps.lookup\n     \\<lparr>MapOps.empty = empty_trie,\n        lookup =\n          \\<lambda>m k.\n             Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n              (\\<lambda>m'. Mapping.lookup m' (snd k)),\n        update =\n          \\<lambda>k v m.\n             trie_update_with' (toList (fst k)) m Mapping.empty\n              (Mapping.update (snd k) v)\\<rparr>\n     (update\n       \\<lparr>MapOps.empty = empty_trie,\n          lookup =\n            \\<lambda>m k.\n               Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n                (\\<lambda>m'. Mapping.lookup m' (snd k)),\n          update =\n            \\<lambda>k v m.\n               trie_update_with' (toList (fst k)) m Mapping.empty\n                (Mapping.update (snd k) v)\\<rparr>\n       k e M)\n     k' =\n    (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n     then Some e\n     else MapOps.lookup\n           \\<lparr>MapOps.empty = empty_trie,\n              lookup =\n                \\<lambda>m k.\n                   Option.bind ((lookup_trie m \\<circ> toList) (fst k))\n                    (\\<lambda>m'. Mapping.lookup m' (snd k)),\n              update =\n                \\<lambda>k v m.\n                   trie_update_with' (toList (fst k)) m Mapping.empty\n                    (Mapping.update (snd k) v)\\<rparr>\n           M k')", "by (auto simp: lookup_empty lookup_update_neq lookup_trie_update_with split: option.split prod.split)"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  MapOps.lookup trans_MapOps (update trans_MapOps k e M) k' =\n  (if (spr_simAbs (fst k'), snd k') = (spr_simAbs (fst k), snd k)\n   then Some e else MapOps.lookup trans_MapOps M k')\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "subsubsection\\<open>Locale instantiation\\<close>"], ["", "text\\<open>\n\nThe above is sufficient to instantiate the @{term \"Algorithm\"} locale.\n\n\\<close>"], ["", "sublocale FiniteSingleAgentEnvironment\n        < SPRsingle: Algorithm\n            jkbp envInit envAction envTrans envVal\n            spr_jview envObs spr_jviewInit spr_jviewIncr\n            spr_sim spr_simRels spr_simVal\n            spr_simAbs spr_simObs spr_simInit spr_simTrans spr_simAction\n            trie_odlist_MapOps trans_MapOps"], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm jkbp envInit envAction envTrans envVal spr_jview envObs\n     spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal spr_simAbs\n     local.spr_simObs local.spr_simInit local.spr_simTrans\n     local.spr_simAction trie_odlist_MapOps trans_MapOps", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm jkbp envInit envAction envTrans envVal spr_jview envObs\n     spr_jviewInit spr_jviewIncr spr_sim spr_simRels spr_simVal spr_simAbs\n     local.spr_simObs local.spr_simInit local.spr_simTrans\n     local.spr_simAction trie_odlist_MapOps trans_MapOps", "apply (unfold_locales)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<forall>a iobs.\n       iobs \\<in> envObs a ` set envInit \\<longrightarrow>\n       spr_simAbs (local.spr_simInit a iobs) =\n       spr_sim `\n       rel_ext\n        (\\<lambda>t'.\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 4. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 5. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 6. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simInit"], ["proof (prove)\nusing this:\n  ?iobs \\<in> envObs ?a ` set envInit \\<Longrightarrow>\n  spr_simAbs (local.spr_simInit ?a ?iobs) =\n  spr_sim `\n  rel_ext\n   (\\<lambda>t'.\n       t' \\<in> SPR.jkbpC \\<and> spr_jview ?a t' = spr_jviewInit ?a ?iobs)\n\ngoal (6 subgoals):\n 1. \\<forall>a iobs.\n       iobs \\<in> envObs a ` set envInit \\<longrightarrow>\n       spr_simAbs (local.spr_simInit a iobs) =\n       spr_sim `\n       rel_ext\n        (\\<lambda>t'.\n            t' \\<in> SPR.jkbpC \\<and> spr_jview a t' = spr_jviewInit a iobs)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 4. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 5. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 6. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 4. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 5. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simObs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRsingle.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> local.spr_simObs ?a ?ec = envObs ?a (tLast ?t)\n\ngoal (5 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       local.spr_simObs a ec = envObs a (tLast t)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 3. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 4. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 5. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply auto[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 3. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 4. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simAction"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRsingle.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> set (local.spr_simAction ?a ?ec) =\n                    set (jAction SPR.MC ?t ?a)\n\ngoal (4 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       set (local.spr_simAction a ec) = set (jAction SPR.MC t a)\n 2. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 3. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 4. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 2. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 3. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "using spr_simTrans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> SPR.jkbpC;\n   spr_simAbs ?ec = SPRsingle.sim_equiv_class ?a ?t\\<rbrakk>\n  \\<Longrightarrow> spr_simAbs ` set (local.spr_simTrans ?a ?ec) =\n                    rel_ext\n                     (\\<lambda>uu_.\n                         \\<exists>t' s.\n                            uu_ =\n                            SPRsingle.sim_equiv_class ?a\n                             (t' \\<leadsto> s) \\<and>\n                            t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n                            spr_jview ?a t' = spr_jview ?a ?t)\n\ngoal (3 subgoals):\n 1. \\<forall>a ec t.\n       t \\<in> SPR.jkbpC \\<and>\n       spr_simAbs ec = SPRsingle.sim_equiv_class a t \\<longrightarrow>\n       spr_simAbs ` set (local.spr_simTrans a ec) =\n       rel_ext\n        (\\<lambda>uu_.\n            \\<exists>t' s.\n               uu_ = SPRsingle.sim_equiv_class a (t' \\<leadsto> s) \\<and>\n               t' \\<leadsto> s \\<in> SPR.jkbpC \\<and>\n               spr_jview a t' = spr_jview a t)\n 2. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 3. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. MapOps spr_simAbs (\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC)\n     trie_odlist_MapOps\n 2. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply (rule trie_odlist_MapOps[OF subset_inj_on[OF spr_simAbs_inj subset_UNIV]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. MapOps (\\<lambda>k. (spr_simAbs (fst k), snd k))\n     ((\\<Union>a. SPRsingle.sim_equiv_class a ` SPR.jkbpC) \\<times> UNIV)\n     trans_MapOps", "apply (rule trans_MapOps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  mkSPRSingleAuto :: \"('a, 'p, 'aAct) KBP\n                    \\<Rightarrow> ('s :: linorder) list\n                    \\<Rightarrow> ('s \\<Rightarrow> 'eAct list)\n                    \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct) \\<Rightarrow> 's \\<Rightarrow> 's)\n                    \\<Rightarrow> ('s \\<Rightarrow> 'p \\<Rightarrow> bool)\n                    \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 'obs)\n                    \\<Rightarrow> 'a \\<Rightarrow> ('obs, 'aAct, 's odlist) Protocol\"\nwhere\n  \"mkSPRSingleAuto \\<equiv> \\<lambda>kbp envInit envAction envTrans envVal envObs.\n    mkAlgAuto trie_odlist_MapOps\n              trans_MapOps\n              (spr_simObs envObs)\n              (spr_simInit envInit envObs)\n              (spr_simTrans kbp envAction envTrans envVal envObs)\n              (spr_simAction kbp envVal)\n              (\\<lambda>a. map (spr_simInit envInit envObs a \\<circ> envObs a) envInit)\""], ["", "lemma (in FiniteSingleAgentEnvironment) mkSPRSingleAuto_implements:\n  \"SPR.implements (mkSPRSingleAuto (jkbp agent) envInit envAction envTrans envVal envObs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SPR.implements\n     (mkSPRSingleAuto (jkbp agent) envInit envAction envTrans envVal envObs)", "using SPRsingle.k_mkAlgAuto_implements"], ["proof (prove)\nusing this:\n  SPR.implements SPRsingle.k_mkAlgAuto\n\ngoal (1 subgoal):\n 1. SPR.implements\n     (mkSPRSingleAuto (jkbp agent) envInit envAction envTrans envVal envObs)", "unfolding mkSPRSingleAuto_def mkAlgAuto_def alg_dfs_def SPRsingle.KBP.k_ins_def SPRsingle.KBP.k_empt_def SPRsingle.k_frontier_def SPRsingle.KBP.k_memb_def SPRsingle.KBP.transUpdate_def SPRsingle.KBP.actsUpdate_def"], ["proof (prove)\nusing this:\n  SPR.implements\n   (\\<lambda>a.\n       let auto =\n             (let k_empt =\n                    \\<lparr>aActs = MapOps.empty trie_odlist_MapOps,\n                       aTrans = MapOps.empty trans_MapOps\\<rparr>;\n                  k_memb =\n                    \\<lambda>s A.\n                       isSome\n                        (MapOps.lookup trie_odlist_MapOps (aActs A) s);\n                  k_succs = local.spr_simTrans a;\n                  actsUpdate =\n                    \\<lambda>ec A.\n                       update trie_odlist_MapOps ec\n                        (local.spr_simAction a ec) (aActs A);\n                  transUpdate =\n                    \\<lambda>ec ec'.\n                       update trans_MapOps (ec, local.spr_simObs a ec') ec';\n                  k_ins =\n                    \\<lambda>ec A.\n                       \\<lparr>aActs = actsUpdate ec A,\n                          aTrans =\n                            foldr (transUpdate ec) (k_succs ec)\n                             (aTrans A)\\<rparr>\n              in gen_dfs k_succs k_ins k_memb k_empt)\n              (map (local.spr_simInit a \\<circ> envObs a) envInit)\n       in \\<lparr>pInit = local.spr_simInit a,\n             pTrans =\n               \\<lambda>obs ec.\n                  the (MapOps.lookup trans_MapOps (aTrans auto) (ec, obs)),\n             pAct =\n               \\<lambda>ec.\n                  the (MapOps.lookup trie_odlist_MapOps (aActs auto)\n                        ec)\\<rparr>)\n\ngoal (1 subgoal):\n 1. SPR.implements\n     (\\<lambda>a.\n         let auto =\n               (let k_empt =\n                      \\<lparr>aActs = MapOps.empty trie_odlist_MapOps,\n                         aTrans = MapOps.empty trans_MapOps\\<rparr>;\n                    k_memb =\n                      \\<lambda>s A.\n                         isSome\n                          (MapOps.lookup trie_odlist_MapOps (aActs A) s);\n                    k_succs = local.spr_simTrans a;\n                    actsUpdate =\n                      \\<lambda>ec A.\n                         update trie_odlist_MapOps ec\n                          (local.spr_simAction a ec) (aActs A);\n                    transUpdate =\n                      \\<lambda>ec ec'.\n                         update trans_MapOps (ec, local.spr_simObs a ec')\n                          ec';\n                    k_ins =\n                      \\<lambda>ec A.\n                         \\<lparr>aActs = actsUpdate ec A,\n                            aTrans =\n                              foldr (transUpdate ec) (k_succs ec)\n                               (aTrans A)\\<rparr>\n                in gen_dfs k_succs k_ins k_memb k_empt)\n                (map (local.spr_simInit a \\<circ> envObs a) envInit)\n         in \\<lparr>pInit = local.spr_simInit a,\n               pTrans =\n                 \\<lambda>obs ec.\n                    the (MapOps.lookup trans_MapOps (aTrans auto)\n                          (ec, obs)),\n               pAct =\n                 \\<lambda>ec.\n                    the (MapOps.lookup trie_odlist_MapOps (aActs auto)\n                          ec)\\<rparr>)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\n\nWe actually run this unfolding of the algorithm. The lemma is keeping\nus honest.\n\n*)"], ["", "type_synonym (in -)\n  ('aAct, 'obs, 's) SPRSingleAutoDFS = \"(('s, 'aAct list) trie, (('s, ('obs, 's odlist) mapping) trie)) AlgState\""], ["", "definition\n  SPRSingleAutoDFS :: \"('a, 'p, 'aAct) KBP\n                     \\<Rightarrow> ('s :: linorder) list\n                     \\<Rightarrow> ('s \\<Rightarrow> 'eAct list)\n                     \\<Rightarrow> ('eAct \\<Rightarrow> ('a \\<Rightarrow> 'aAct) \\<Rightarrow> 's \\<Rightarrow> 's)\n                     \\<Rightarrow> ('s \\<Rightarrow> 'p \\<Rightarrow> bool)\n                     \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 'obs)\n                     \\<Rightarrow> 'a \\<Rightarrow> ('aAct, 'obs, 's) SPRSingleAutoDFS\"\nwhere\n  \"SPRSingleAutoDFS \\<equiv> \\<lambda>kbp envInit envAction envTrans envVal envObs. \\<lambda>a.\n    alg_dfs trie_odlist_MapOps\n            trans_MapOps\n            (spr_simObs envObs a)\n            (spr_simTrans kbp envAction envTrans envVal envObs a)\n            (spr_simAction kbp envVal a)\n            (map (spr_simInit envInit envObs a \\<circ> envObs a) envInit)\""], ["", "lemma (in FiniteSingleAgentEnvironment)\n  \"mkSPRSingleAuto kbp envInit envAction envTrans envVal envObs\n = (\\<lambda>a. alg_mk_auto trie_odlist_MapOps trans_MapOps (spr_simInit a) (SPRSingleAutoDFS kbp envInit envAction envTrans envVal envObs a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mkSPRSingleAuto kbp envInit envAction envTrans envVal envObs =\n    (\\<lambda>a.\n        alg_mk_auto trie_odlist_MapOps trans_MapOps (local.spr_simInit a)\n         (SPRSingleAutoDFS kbp envInit envAction envTrans envVal envObs a))", "unfolding mkSPRSingleAuto_def SPRSingleAutoDFS_def mkAlgAuto_def alg_mk_auto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        let auto =\n              alg_dfs trie_odlist_MapOps trans_MapOps (local.spr_simObs a)\n               (SPRViewSingle.spr_simTrans kbp envAction envTrans envVal\n                 envObs a)\n               (SPRViewSingle.spr_simAction kbp envVal a)\n               (map (local.spr_simInit a \\<circ> envObs a) envInit)\n        in \\<lparr>pInit = local.spr_simInit a,\n              pTrans =\n                \\<lambda>obs ec.\n                   the (MapOps.lookup trans_MapOps (aTrans auto) (ec, obs)),\n              pAct =\n                \\<lambda>ec.\n                   the (MapOps.lookup trie_odlist_MapOps (aActs auto)\n                         ec)\\<rparr>) =\n    (\\<lambda>a.\n        \\<lparr>pInit = local.spr_simInit a,\n           pTrans =\n             \\<lambda>obs ec.\n                the (MapOps.lookup trans_MapOps\n                      (aTrans\n                        (alg_dfs trie_odlist_MapOps trans_MapOps\n                          (local.spr_simObs a)\n                          (SPRViewSingle.spr_simTrans kbp envAction envTrans\n                            envVal envObs a)\n                          (SPRViewSingle.spr_simAction kbp envVal a)\n                          (map (local.spr_simInit a \\<circ> envObs a)\n                            envInit)))\n                      (ec, obs)),\n           pAct =\n             \\<lambda>ec.\n                the (MapOps.lookup trie_odlist_MapOps\n                      (aActs\n                        (alg_dfs trie_odlist_MapOps trans_MapOps\n                          (local.spr_simObs a)\n                          (SPRViewSingle.spr_simTrans kbp envAction envTrans\n                            envVal envObs a)\n                          (SPRViewSingle.spr_simAction kbp envVal a)\n                          (map (local.spr_simInit a \\<circ> envObs a)\n                            envInit)))\n                      ec)\\<rparr>)", "by (simp add: Let_def)"], ["", "(*>*)"], ["", "text\\<open>\n\nWe use this theory to synthesise a solution to the robot of\n\\S\\ref{sec:kbps-robot-intro} in \\S\\ref{sec:kbps-theory-robot}.\n\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}