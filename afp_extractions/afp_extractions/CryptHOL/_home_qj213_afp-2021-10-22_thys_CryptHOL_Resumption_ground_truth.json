{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptHOL/Resumption.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptHOL", "problem_names": ["lemma is_Done_bind_resumption [simp]:\n  \"is_Done (x \\<bind> f) \\<longleftrightarrow> is_Done x \\<and> (result x \\<noteq> None \\<longrightarrow> is_Done (f (the (result x))))\"", "lemma result_bind_resumption [simp]:\n  \"is_Done (x \\<bind> f) \\<Longrightarrow> result (x \\<bind> f) = result x \\<bind> result \\<circ> f\"", "lemma output_bind_resumption [simp]:\n  \"\\<not> is_Done (x \\<bind> f) \\<Longrightarrow> output (x \\<bind> f) = (if is_Done x then output (f (the (result x))) else output x)\"", "lemma resume_bind_resumption [simp]:\n  \"\\<not> is_Done (x \\<bind> f) \\<Longrightarrow>\n  resume (x \\<bind> f) = \n  (if is_Done x then resume (f (the (result x))) \n   else (\\<lambda>inp. resume x inp \\<bind> f))\"", "lemma [simp]:\n  shows is_Done_DONE: \"is_Done (DONE a)\"\n  and is_Done_ABORT: \"is_Done ABORT\"\n  and result_DONE: \"result (DONE a) = Some a\"\n  and result_ABORT: \"result ABORT = None\"\n  and DONE_inject: \"DONE a = DONE b \\<longleftrightarrow> a = b\"\n  and DONE_neq_ABORT: \"DONE a \\<noteq> ABORT\"\n  and ABORT_neq_DONE: \"ABORT \\<noteq> DONE a\"\n  and ABORT_eq_Done: \"\\<And>a. ABORT = Done a \\<longleftrightarrow> a = None\"\n  and Done_eq_ABORT: \"\\<And>a. Done a = ABORT \\<longleftrightarrow> a = None\"\n  and DONE_eq_Done: \"\\<And>b. DONE a = Done b \\<longleftrightarrow> b = Some a\"\n  and Done_eq_DONE: \"\\<And>b. Done b = DONE a \\<longleftrightarrow> b = Some a\"\n  and DONE_neq_Pause: \"DONE a \\<noteq> Pause out c\"\n  and Pause_neq_DONE: \"Pause out c \\<noteq> DONE a\"\n  and ABORT_neq_Pause: \"ABORT \\<noteq> Pause out c\"\n  and Pause_neq_ABORT: \"Pause out c \\<noteq> ABORT\"", "lemma resume_ABORT [simp]:\n  \"resume (Done r) = (\\<lambda>inp. ABORT)\"", "lemma results_DONE [simp]: \"results (DONE x) = {x}\"", "lemma results_ABORT [simp]: \"results ABORT = {}\"", "lemma outputs_ABORT [simp]: \"outputs ABORT = {}\"", "lemma outputs_DONE [simp]: \"outputs (DONE x) = {}\"", "lemma is_Done_cases [cases pred]:\n  assumes \"is_Done r\"\n  obtains (DONE) x where \"r = DONE x\" | (ABORT) \"r = ABORT\"", "lemma not_is_Done_conv_Pause: \"\\<not> is_Done r \\<longleftrightarrow> (\\<exists>out c. r = Pause out c)\"", "lemma Done_bind [code]:\n  \"Done a \\<bind> f = (case a of None \\<Rightarrow> Done None | Some a \\<Rightarrow> f a)\"", "lemma DONE_bind [simp]:\n  \"DONE a \\<bind> f = f a\"", "lemma bind_resumption_Pause [simp, code]: fixes cont shows\n  \"Pause out cont \\<bind> f\n  = Pause out (\\<lambda>inp. cont inp \\<bind> f)\"", "lemma bind_DONE [simp]:\n  \"x \\<bind> DONE = x\"", "lemma bind_bind_resumption:\n  fixes r :: \"('a, 'in, 'out) resumption\" \n  shows \"(r \\<bind> f) \\<bind> g = do { x \\<leftarrow> r; f x \\<bind> g }\"", "lemmas resumption_monad = DONE_bind bind_DONE bind_bind_resumption", "lemma ABORT_bind [simp]: \"ABORT \\<bind> f = ABORT\"", "lemma bind_resumption_is_Done: \"is_Done f \\<Longrightarrow> f \\<bind> g = (if result f = None then ABORT else g (the (result f)))\"", "lemma bind_resumption_eq_Done_iff [simp]:\n  \"f \\<bind> g = Done x \\<longleftrightarrow> (\\<exists>y. f = DONE y \\<and> g y = Done x) \\<or> f = ABORT \\<and> x = None\"", "lemma bind_resumption_cong:\n  assumes \"x = y\"\n  and \"\\<And>z. z \\<in> results y \\<Longrightarrow> f z = g z\"\n  shows \"x \\<bind> f = y \\<bind> g\"", "lemma results_bind_resumption: (* Move to Resumption *)\n  \"results (bind_resumption x f) = (\\<Union>a\\<in>results x. results (f a))\"\n  (is \"?lhs = ?rhs\")", "lemma outputs_bind_resumption [simp]:\n  \"outputs (bind_resumption r f) = outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\"\n  (is \"?lhs = ?rhs\")", "lemma is_Done_map_resumption [simp]:\n  \"is_Done (map_resumption f1 f2 r) \\<longleftrightarrow> is_Done r\"", "lemma result_map_resumption [simp]: \n  \"is_Done r \\<Longrightarrow> result (map_resumption f1 f2 r) = map_option f1 (result r)\"", "lemma output_map_resumption [simp]:\n  \"\\<not> is_Done r \\<Longrightarrow> output (map_resumption f1 f2 r) = f2 (output r)\"", "lemma resume_map_resumption [simp]:\n  \"\\<not> is_Done r\n  \\<Longrightarrow> resume (map_resumption f1 f2 r) = map_resumption f1 f2 \\<circ> resume r\"", "lemma rel_resumption_is_DoneD: \"rel_resumption A B r1 r2 \\<Longrightarrow> is_Done r1 \\<longleftrightarrow> is_Done r2\"", "lemma rel_resumption_resultD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; is_Done r1 \\<rbrakk> \\<Longrightarrow> rel_option A (result r1) (result r2)\"", "lemma rel_resumption_resultD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; is_Done r2 \\<rbrakk> \\<Longrightarrow> rel_option A (result r1) (result r2)\"", "lemma rel_resumption_outputD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r1 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2)\"", "lemma rel_resumption_outputD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r2 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2)\"", "lemma rel_resumption_resumeD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r1 \\<rbrakk>\n  \\<Longrightarrow> rel_resumption A B (resume r1 inp) (resume r2 inp)\"", "lemma rel_resumption_resumeD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r2 \\<rbrakk>\n  \\<Longrightarrow> rel_resumption A B (resume r1 inp) (resume r2 inp)\"", "lemma rel_resumption_coinduct\n  [consumes 1, case_names Done Pause,\n   case_conclusion Done is_Done result,\n   case_conclusion Pause \"output\" resume,\n   coinduct pred: rel_resumption]:\n  assumes X: \"X r1 r2\"\n  and Done: \"\\<And>r1 r2. X r1 r2 \\<Longrightarrow> (is_Done r1 \\<longleftrightarrow> is_Done r2) \\<and> (is_Done r1 \\<longrightarrow> is_Done r2 \\<longrightarrow> rel_option A (result r1) (result r2))\"\n  and Pause: \"\\<And>r1 r2. \\<lbrakk> X r1 r2; \\<not> is_Done r1; \\<not> is_Done r2 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2) \\<and> (\\<forall>inp. X (resume r1 inp) (resume r2 inp))\" \n  shows \"rel_resumption A B r1 r2\"", "lemma resumption_ord_is_DoneD:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> is_Done r\"", "lemma resumption_ord_resultD:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> flat_ord None (result r) (result r')\"", "lemma resumption_ord_outputD:\n  \"\\<lbrakk> resumption_ord r r'; \\<not> is_Done r \\<rbrakk> \\<Longrightarrow> output r = output r'\"", "lemma resumption_ord_resumeD:\n  \"\\<lbrakk> resumption_ord r r'; \\<not> is_Done r \\<rbrakk> \\<Longrightarrow> ((=) ===> resumption_ord) (resume r) (resume r')\"", "lemma resumption_ord_abort:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r; \\<not> is_Done r' \\<rbrakk> \\<Longrightarrow> result r = None\"", "lemma resumption_ord_coinduct [consumes 1, case_names Done Abort Pause, case_conclusion Pause \"output\" resume, coinduct pred: resumption_ord]:\n  assumes \"X r r'\"\n  and Done: \"\\<And>r r'. \\<lbrakk> X r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> is_Done r \\<and> flat_ord None (result r) (result r')\"\n  and Abort: \"\\<And>r r'. \\<lbrakk> X r r'; \\<not> is_Done r'; is_Done r \\<rbrakk> \\<Longrightarrow> result r = None\"\n  and Pause: \"\\<And>r r'. \\<lbrakk> X r r'; \\<not> is_Done r; \\<not> is_Done r' \\<rbrakk> \n  \\<Longrightarrow> output r = output r' \\<and> ((=) ===> (\\<lambda>r r'. X r r' \\<or> resumption_ord r r')) (resume r) (resume r')\"\n  shows \"resumption_ord r r'\"", "lemma resumption_ord_ABORT [intro!, simp]: \"resumption_ord ABORT r\"", "lemma resumption_ord_ABORT2 [simp]: \"resumption_ord r ABORT \\<longleftrightarrow> r = ABORT\"", "lemma resumption_ord_DONE1 [simp]: \"resumption_ord (DONE x) r \\<longleftrightarrow> r = DONE x\"", "lemma resumption_ord_refl: \"resumption_ord r r\"", "lemma resumption_ord_antisym:\n  \"\\<lbrakk> resumption_ord r r'; resumption_ord r' r \\<rbrakk>\n  \\<Longrightarrow> r = r'\"", "lemma resumption_ord_trans:\n  \"\\<lbrakk> resumption_ord r r'; resumption_ord r' r'' \\<rbrakk>\n  \\<Longrightarrow> resumption_ord r r''\"", "lemma is_Done_resumption_lub [simp]:\n  \"is_Done (resumption_lub R) \\<longleftrightarrow> (\\<forall>r \\<in> R. is_Done r)\"", "lemma result_resumption_lub [simp]:\n  \"\\<forall>r \\<in> R. is_Done r \\<Longrightarrow> result (resumption_lub R) = flat_lub None (result ` R)\"", "lemma output_resumption_lub [simp]:\n  \"\\<exists>r\\<in>R. \\<not> is_Done r \\<Longrightarrow> output (resumption_lub R) = (THE out. out \\<in> output ` (R \\<inter> {r. \\<not> is_Done r}))\"", "lemma resume_resumption_lub [simp]:\n  \"\\<exists>r\\<in>R. \\<not> is_Done r\n  \\<Longrightarrow> resume (resumption_lub R) inp = \n     resumption_lub ((\\<lambda>c. c inp) ` resume ` (R \\<inter> {r. \\<not> is_Done r}))\"", "lemma resumption_lub_empty: \"resumption_lub {} = ABORT\"", "lemma resumption_ord_chain_resume: \"Complete_Partial_Order.chain resumption_ord R'\"", "lemma resumption_partial_function_definition:\n  \"partial_function_definitions resumption_ord resumption_lub\"", "lemma mono_resumption_resume:\n  assumes \"mono_resumption B\"\n  shows \"mono_resumption (\\<lambda>f. resume (B f) inp)\"", "lemma bind_resumption_mono [partial_function_mono]:\n  assumes mf: \"mono_resumption B\"\n  and mg: \"\\<And>y. mono_resumption (C y)\"\n  shows \"mono_resumption (\\<lambda>f. do { y \\<leftarrow> B f; C y f })\"", "lemma fixes f F\n  defines \"F \\<equiv> \\<lambda>results r. case r of resumption.Done x \\<Rightarrow> set_option x | resumption.Pause out c \\<Rightarrow> \\<Union>input. results (c input)\"\n  shows results_conv_fixp: \"results \\<equiv> ccpo.fixp (fun_lub Union) (fun_ord (\\<subseteq>)) F\" (is \"_ \\<equiv> ?fixp\")\n  and results_mono: \"\\<And>x. monotone (fun_ord (\\<subseteq>)) (\\<subseteq>) (\\<lambda>f. F f x)\" (is \"PROP ?mono\")", "lemma mcont_case_resumption:\n  fixes f g\n  defines \"h \\<equiv> \\<lambda>r. if is_Done r then f (result r) else g (output r) (resume r) r\"\n  assumes mcont1: \"mcont (flat_lub None) option_ord lub ord f\"\n  and mcont2: \"\\<And>out. mcont (fun_lub resumption_lub) (fun_ord resumption_ord) lub ord (\\<lambda>c. g out c (Pause out c))\"\n  and ccpo: \"class.ccpo lub ord (mk_less ord)\"\n  and bot: \"\\<And>x. ord (f None) x\"\n  shows \"mcont resumption_lub resumption_ord lub ord (\\<lambda>r. case r of Done x \\<Rightarrow> f x | Pause out c \\<Rightarrow> g out c r)\"\n    (is \"mcont ?lub ?ord _ _ ?f\")", "lemma mcont2mcont_results[THEN mcont2mcont, cont_intro, simp]:\n  shows mcont_results: \"mcont resumption_lub resumption_ord Union (\\<subseteq>) results\"", "lemma mono2mono_results[THEN lfp.mono2mono, cont_intro, simp]:\n  shows monotone_results: \"monotone resumption_ord (\\<subseteq>) results\"", "lemma fixes f F\n  defines \"F \\<equiv> \\<lambda>outputs xs. case xs of resumption.Done x \\<Rightarrow> {} | resumption.Pause out c \\<Rightarrow> insert out (\\<Union>input. outputs (c input))\"\n  shows outputs_conv_fixp: \"outputs \\<equiv> ccpo.fixp (fun_lub Union) (fun_ord (\\<subseteq>)) F\" (is \"_ \\<equiv> ?fixp\")\n  and outputs_mono: \"\\<And>x. monotone (fun_ord (\\<subseteq>)) (\\<subseteq>) (\\<lambda>f. F f x)\" (is \"PROP ?mono\")", "lemma mcont2mcont_outputs[THEN lfp.mcont2mcont, cont_intro, simp]: \n  shows mcont_outputs: \"mcont resumption_lub resumption_ord Union (\\<subseteq>) outputs\"", "lemma mono2mono_outputs[THEN lfp.mono2mono, cont_intro, simp]:\n  shows monotone_outputs: \"monotone resumption_ord (\\<subseteq>) outputs\"", "lemma pred_resumption_antimono:\n  assumes r: \"pred_resumption A C r'\"\n  and le: \"resumption_ord r r'\"\n  shows \"pred_resumption A C r\"", "lemma rel_resumption_OO [relator_distr]:\n  \"rel_resumption A B OO rel_resumption C D = rel_resumption (A OO C) (B OO D)\"", "lemma left_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> left_total R1; left_total R2 \\<rbrakk> \\<Longrightarrow> left_total (rel_resumption R1 R2)\"", "lemma left_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> left_unique R1; left_unique R2 \\<rbrakk> \\<Longrightarrow> left_unique (rel_resumption R1 R2)\"", "lemma right_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> right_total R1; right_total R2 \\<rbrakk> \\<Longrightarrow> right_total (rel_resumption R1 R2)\"", "lemma right_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> right_unique R1; right_unique R2 \\<rbrakk> \\<Longrightarrow> right_unique (rel_resumption R1 R2)\"", "lemma bi_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> bi_total A; bi_total B \\<rbrakk> \\<Longrightarrow> bi_total (rel_resumption A B)\"", "lemma bi_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> bi_unique A; bi_unique B \\<rbrakk> \\<Longrightarrow> bi_unique (rel_resumption A B)\"", "lemma Quotient_resumption [quot_map]:\n  \"\\<lbrakk> Quotient R1 Abs1 Rep1 T1; Quotient R2 Abs2 Rep2 T2 \\<rbrakk>\n  \\<Longrightarrow> Quotient (rel_resumption R1 R2) (map_resumption Abs1 Abs2) (map_resumption Rep1 Rep2) (rel_resumption T1 T2)\""], "translations": [["", "lemma is_Done_bind_resumption [simp]:\n  \"is_Done (x \\<bind> f) \\<longleftrightarrow> is_Done x \\<and> (result x \\<noteq> None \\<longrightarrow> is_Done (f (the (result x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (x \\<bind> f) =\n    (Resumption.resumption.is_Done x \\<and>\n     (Resumption.resumption.result x \\<noteq> None \\<longrightarrow>\n      Resumption.resumption.is_Done\n       (f (the (Resumption.resumption.result x)))))", "by(simp add: bind_resumption_def)"], ["", "lemma result_bind_resumption [simp]:\n  \"is_Done (x \\<bind> f) \\<Longrightarrow> result (x \\<bind> f) = result x \\<bind> result \\<circ> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (x \\<bind> f) \\<Longrightarrow>\n    Resumption.resumption.result (x \\<bind> f) =\n    Resumption.resumption.result x \\<bind>\n    Resumption.resumption.result \\<circ> f", "by(simp add: bind_resumption_def)"], ["", "lemma output_bind_resumption [simp]:\n  \"\\<not> is_Done (x \\<bind> f) \\<Longrightarrow> output (x \\<bind> f) = (if is_Done x then output (f (the (result x))) else output x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done (x \\<bind> f) \\<Longrightarrow>\n    Resumption.resumption.output (x \\<bind> f) =\n    (if Resumption.resumption.is_Done x\n     then Resumption.resumption.output\n           (f (the (Resumption.resumption.result x)))\n     else Resumption.resumption.output x)", "by(simp add: bind_resumption_def)"], ["", "lemma resume_bind_resumption [simp]:\n  \"\\<not> is_Done (x \\<bind> f) \\<Longrightarrow>\n  resume (x \\<bind> f) = \n  (if is_Done x then resume (f (the (result x))) \n   else (\\<lambda>inp. resume x inp \\<bind> f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done (x \\<bind> f) \\<Longrightarrow>\n    Resumption.resumption.resume (x \\<bind> f) =\n    (if Resumption.resumption.is_Done x\n     then Resumption.resumption.resume\n           (f (the (Resumption.resumption.result x)))\n     else (\\<lambda>inp. Resumption.resumption.resume x inp \\<bind> f))", "by(auto simp add: bind_resumption_def)"], ["", "definition DONE :: \"'a \\<Rightarrow> ('a, 'out, 'in) resumption\"\nwhere \"DONE = Done \\<circ> Some\""], ["", "definition ABORT :: \"('a, 'out, 'in) resumption\"\nwhere \"ABORT = Done None\""], ["", "lemma [simp]:\n  shows is_Done_DONE: \"is_Done (DONE a)\"\n  and is_Done_ABORT: \"is_Done ABORT\"\n  and result_DONE: \"result (DONE a) = Some a\"\n  and result_ABORT: \"result ABORT = None\"\n  and DONE_inject: \"DONE a = DONE b \\<longleftrightarrow> a = b\"\n  and DONE_neq_ABORT: \"DONE a \\<noteq> ABORT\"\n  and ABORT_neq_DONE: \"ABORT \\<noteq> DONE a\"\n  and ABORT_eq_Done: \"\\<And>a. ABORT = Done a \\<longleftrightarrow> a = None\"\n  and Done_eq_ABORT: \"\\<And>a. Done a = ABORT \\<longleftrightarrow> a = None\"\n  and DONE_eq_Done: \"\\<And>b. DONE a = Done b \\<longleftrightarrow> b = Some a\"\n  and Done_eq_DONE: \"\\<And>b. Done b = DONE a \\<longleftrightarrow> b = Some a\"\n  and DONE_neq_Pause: \"DONE a \\<noteq> Pause out c\"\n  and Pause_neq_DONE: \"Pause out c \\<noteq> DONE a\"\n  and ABORT_neq_Pause: \"ABORT \\<noteq> Pause out c\"\n  and Pause_neq_ABORT: \"Pause out c \\<noteq> ABORT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Resumption.resumption.is_Done (DONE a) &&&\n      Resumption.resumption.is_Done ABORT &&&\n      Resumption.resumption.result (DONE a) = Some a) &&&\n     (Resumption.resumption.result ABORT = None &&&\n      (DONE a = DONE b) = (a = b)) &&&\n     DONE a \\<noteq> ABORT &&& ABORT \\<noteq> DONE a) &&&\n    (((\\<And>a. (ABORT = Resumption.resumption.Done a) = (a = None)) &&&\n      (\\<And>a. (Resumption.resumption.Done a = ABORT) = (a = None))) &&&\n     (\\<And>b. (DONE a = Resumption.resumption.Done b) = (b = Some a)) &&&\n     (\\<And>b. (Resumption.resumption.Done b = DONE a) = (b = Some a))) &&&\n    (DONE a \\<noteq> Resumption.resumption.Pause out c &&&\n     Resumption.resumption.Pause out c \\<noteq> DONE a) &&&\n    ABORT \\<noteq> Resumption.resumption.Pause out c &&&\n    Resumption.resumption.Pause out c \\<noteq> ABORT", "by(auto simp add: DONE_def ABORT_def)"], ["", "lemma resume_ABORT [simp]:\n  \"resume (Done r) = (\\<lambda>inp. ABORT)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.resume (Resumption.resumption.Done r) =\n    (\\<lambda>inp. ABORT)", "by(simp add: ABORT_def)"], ["", "declare resumption.sel(3)[simp del]"], ["", "lemma results_DONE [simp]: \"results (DONE x) = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. results (DONE x) = {x}", "by(simp add: DONE_def)"], ["", "lemma results_ABORT [simp]: \"results ABORT = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. results ABORT = {}", "by(simp add: ABORT_def)"], ["", "lemma outputs_ABORT [simp]: \"outputs ABORT = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outputs ABORT = {}", "by(simp add: ABORT_def)"], ["", "lemma outputs_DONE [simp]: \"outputs (DONE x) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. outputs (DONE x) = {}", "by(simp add: DONE_def)"], ["", "lemma is_Done_cases [cases pred]:\n  assumes \"is_Done r\"\n  obtains (DONE) x where \"r = DONE x\" | (ABORT) \"r = ABORT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. r = DONE x \\<Longrightarrow> thesis;\n     r = ABORT \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. r = DONE x \\<Longrightarrow> thesis;\n     r = ABORT \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(cases r) auto"], ["", "lemma not_is_Done_conv_Pause: \"\\<not> is_Done r \\<longleftrightarrow> (\\<exists>out c. r = Pause out c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> Resumption.resumption.is_Done r) =\n    (\\<exists>out c. r = Resumption.resumption.Pause out c)", "by(cases r) auto"], ["", "lemma Done_bind [code]:\n  \"Done a \\<bind> f = (case a of None \\<Rightarrow> Done None | Some a \\<Rightarrow> f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.Done a \\<bind> f =\n    (case a of None \\<Rightarrow> Resumption.resumption.Done None\n     | Some a \\<Rightarrow> f a)", "by(rule resumption.expand)(auto split: option.split)"], ["", "lemma DONE_bind [simp]:\n  \"DONE a \\<bind> f = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DONE a \\<bind> f = f a", "by(simp add: DONE_def Done_bind)"], ["", "lemma bind_resumption_Pause [simp, code]: fixes cont shows\n  \"Pause out cont \\<bind> f\n  = Pause out (\\<lambda>inp. cont inp \\<bind> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.Pause out cont \\<bind> f =\n    Resumption.resumption.Pause out (\\<lambda>inp. cont inp \\<bind> f)", "by(rule resumption.expand)(simp_all)"], ["", "lemma bind_DONE [simp]:\n  \"x \\<bind> DONE = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bind> DONE = x", "by(coinduction arbitrary: x)(auto simp add: split_beta o_def)"], ["", "lemma bind_bind_resumption:\n  fixes r :: \"('a, 'in, 'out) resumption\" \n  shows \"(r \\<bind> f) \\<bind> g = do { x \\<leftarrow> r; f x \\<bind> g }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<bind> f \\<bind> g = r \\<bind> (\\<lambda>x. f x \\<bind> g)", "apply(coinduction arbitrary: r rule: resumption.coinduct_strong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       Resumption.resumption.is_Done (r \\<bind> f \\<bind> g) =\n       Resumption.resumption.is_Done\n        (r \\<bind> (\\<lambda>x. f x \\<bind> g)) \\<and>\n       (Resumption.resumption.is_Done\n         (r \\<bind> f \\<bind> g) \\<longrightarrow>\n        Resumption.resumption.is_Done\n         (r \\<bind> (\\<lambda>x. f x \\<bind> g)) \\<longrightarrow>\n        Resumption.resumption.result (r \\<bind> f \\<bind> g) =\n        Resumption.resumption.result\n         (r \\<bind> (\\<lambda>x. f x \\<bind> g))) \\<and>\n       (\\<not> Resumption.resumption.is_Done\n                (r \\<bind> f \\<bind> g) \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done\n                (r \\<bind> (\\<lambda>x. f x \\<bind> g)) \\<longrightarrow>\n        Resumption.resumption.output (r \\<bind> f \\<bind> g) =\n        Resumption.resumption.output\n         (r \\<bind> (\\<lambda>x. f x \\<bind> g)) \\<and>\n        rel_fun (=)\n         (\\<lambda>resumption resumption'.\n             (\\<exists>r.\n                 resumption = r \\<bind> f \\<bind> g \\<and>\n                 resumption' = r \\<bind> (\\<lambda>x. f x \\<bind> g)) \\<or>\n             resumption = resumption')\n         (Resumption.resumption.resume (r \\<bind> f \\<bind> g))\n         (Resumption.resumption.resume\n           (r \\<bind> (\\<lambda>x. f x \\<bind> g))))", "apply(auto simp add: split_beta bind_eq_Some_conv)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 2. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))))\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 3. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 4. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))))\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)", "apply(case_tac [!] \"result r\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None;\n        Resumption.resumption.result r = None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 2. \\<And>r a.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None;\n        Resumption.resumption.result r = Some a\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 3. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))));\n        Resumption.resumption.result r = None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 4. \\<And>r a.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        \\<forall>y ya.\n           Resumption.resumption.result r = Some ya \\<longrightarrow>\n           Resumption.resumption.result (f ya) \\<noteq> Some y;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))));\n        Resumption.resumption.result r = Some a\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 5. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None;\n        Resumption.resumption.result r = None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 6. \\<And>r a.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.result\n         (f (the (Resumption.resumption.result r))) =\n        None;\n        Resumption.resumption.result r = Some a\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 7. \\<And>r.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))));\n        Resumption.resumption.result r = None\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)\n 8. \\<And>r a.\n       \\<lbrakk>Resumption.resumption.is_Done\n                 (f (the (Resumption.resumption.result r)));\n        Resumption.resumption.is_Done r;\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result r \\<bind>\n                  Resumption.resumption.result \\<circ> f)));\n        Resumption.resumption.is_Done\n         (g (the (Resumption.resumption.result\n                   (f (the (Resumption.resumption.result r))))));\n        Resumption.resumption.result r = Some a\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result r \\<bind>\n                         (\\<lambda>y.\n                             Resumption.resumption.result (f y) \\<bind>\n                             Resumption.resumption.result \\<circ> g) =\n                         Resumption.resumption.result r \\<bind>\n                         Resumption.resumption.result \\<circ>\n                         (\\<lambda>x. f x \\<bind> g)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas resumption_monad = DONE_bind bind_DONE bind_bind_resumption"], ["", "lemma ABORT_bind [simp]: \"ABORT \\<bind> f = ABORT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABORT \\<bind> f = ABORT", "by(simp add: ABORT_def Done_bind)"], ["", "lemma bind_resumption_is_Done: \"is_Done f \\<Longrightarrow> f \\<bind> g = (if result f = None then ABORT else g (the (result f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f \\<Longrightarrow>\n    f \\<bind> g =\n    (if Resumption.resumption.result f = None then ABORT\n     else g (the (Resumption.resumption.result f)))", "by(rule resumption.expand) auto"], ["", "lemma bind_resumption_eq_Done_iff [simp]:\n  \"f \\<bind> g = Done x \\<longleftrightarrow> (\\<exists>y. f = DONE y \\<and> g y = Done x) \\<or> f = ABORT \\<and> x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<bind> g = Resumption.resumption.Done x) =\n    ((\\<exists>y.\n         f = DONE y \\<and> g y = Resumption.resumption.Done x) \\<or>\n     f = ABORT \\<and> x = None)", "by(cases f)(auto simp add: Done_bind split: option.split)"], ["", "lemma bind_resumption_cong:\n  assumes \"x = y\"\n  and \"\\<And>z. z \\<in> results y \\<Longrightarrow> f z = g z\"\n  shows \"x \\<bind> f = y \\<bind> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bind> f = y \\<bind> g", "using assms(2)"], ["proof (prove)\nusing this:\n  ?z \\<in> results y \\<Longrightarrow> f ?z = g ?z\n\ngoal (1 subgoal):\n 1. x \\<bind> f = y \\<bind> g", "unfolding \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  ?z \\<in> results y \\<Longrightarrow> f ?z = g ?z\n\ngoal (1 subgoal):\n 1. y \\<bind> f = y \\<bind> g", "proof(coinduction arbitrary: y rule: resumption.coinduct_strong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<forall>z.\n          z \\<in> results y \\<longrightarrow> f z = g z \\<Longrightarrow>\n       Resumption.resumption.is_Done (y \\<bind> f) =\n       Resumption.resumption.is_Done (y \\<bind> g) \\<and>\n       (Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n        Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n        Resumption.resumption.result (y \\<bind> f) =\n        Resumption.resumption.result (y \\<bind> g)) \\<and>\n       (\\<not> Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n        Resumption.resumption.output (y \\<bind> f) =\n        Resumption.resumption.output (y \\<bind> g) \\<and>\n        rel_fun (=)\n         (\\<lambda>resumption resumption'.\n             (\\<exists>y.\n                 resumption = y \\<bind> f \\<and>\n                 resumption' = y \\<bind> g \\<and>\n                 (\\<forall>z.\n                     z \\<in> results y \\<longrightarrow> f z = g z)) \\<or>\n             resumption = resumption')\n         (Resumption.resumption.resume (y \\<bind> f))\n         (Resumption.resumption.resume (y \\<bind> g)))", "case Eq_resumption"], ["proof (state)\nthis:\n  \\<forall>z. z \\<in> results y \\<longrightarrow> f z = g z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<forall>z.\n          z \\<in> results y \\<longrightarrow> f z = g z \\<Longrightarrow>\n       Resumption.resumption.is_Done (y \\<bind> f) =\n       Resumption.resumption.is_Done (y \\<bind> g) \\<and>\n       (Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n        Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n        Resumption.resumption.result (y \\<bind> f) =\n        Resumption.resumption.result (y \\<bind> g)) \\<and>\n       (\\<not> Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n        Resumption.resumption.output (y \\<bind> f) =\n        Resumption.resumption.output (y \\<bind> g) \\<and>\n        rel_fun (=)\n         (\\<lambda>resumption resumption'.\n             (\\<exists>y.\n                 resumption = y \\<bind> f \\<and>\n                 resumption' = y \\<bind> g \\<and>\n                 (\\<forall>z.\n                     z \\<in> results y \\<longrightarrow> f z = g z)) \\<or>\n             resumption = resumption')\n         (Resumption.resumption.resume (y \\<bind> f))\n         (Resumption.resumption.resume (y \\<bind> g)))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>z. z \\<in> results y \\<longrightarrow> f z = g z\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (y \\<bind> f) =\n    Resumption.resumption.is_Done (y \\<bind> g) \\<and>\n    (Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n     Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n     Resumption.resumption.result (y \\<bind> f) =\n     Resumption.resumption.result (y \\<bind> g)) \\<and>\n    (\\<not> Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n     \\<not> Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n     Resumption.resumption.output (y \\<bind> f) =\n     Resumption.resumption.output (y \\<bind> g) \\<and>\n     rel_fun (=)\n      (\\<lambda>resumption resumption'.\n          (\\<exists>y.\n              resumption = y \\<bind> f \\<and>\n              resumption' = y \\<bind> g \\<and>\n              (\\<forall>z.\n                  z \\<in> results y \\<longrightarrow> f z = g z)) \\<or>\n          resumption = resumption')\n      (Resumption.resumption.resume (y \\<bind> f))\n      (Resumption.resumption.resume (y \\<bind> g)))", "by(auto intro: resumption.set_sel simp add: is_Done_def rel_fun_def)\n      (fastforce del: exI intro!: exI intro: resumption.set_sel(2) simp add: is_Done_def)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done (y \\<bind> f) =\n  Resumption.resumption.is_Done (y \\<bind> g) \\<and>\n  (Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n   Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n   Resumption.resumption.result (y \\<bind> f) =\n   Resumption.resumption.result (y \\<bind> g)) \\<and>\n  (\\<not> Resumption.resumption.is_Done (y \\<bind> f) \\<longrightarrow>\n   \\<not> Resumption.resumption.is_Done (y \\<bind> g) \\<longrightarrow>\n   Resumption.resumption.output (y \\<bind> f) =\n   Resumption.resumption.output (y \\<bind> g) \\<and>\n   rel_fun (=)\n    (\\<lambda>resumption resumption'.\n        (\\<exists>y.\n            resumption = y \\<bind> f \\<and>\n            resumption' = y \\<bind> g \\<and>\n            (\\<forall>z.\n                z \\<in> results y \\<longrightarrow> f z = g z)) \\<or>\n        resumption = resumption')\n    (Resumption.resumption.resume (y \\<bind> f))\n    (Resumption.resumption.resume (y \\<bind> g)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma results_bind_resumption: (* Move to Resumption *)\n  \"results (bind_resumption x f) = (\\<Union>a\\<in>results x. results (f a))\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. results (x \\<bind> f) = (\\<Union>a\\<in>results x. results (f a))", "proof(intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> results (x \\<bind> f) \\<Longrightarrow>\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "show \"z \\<in> ?rhs\" if \"z \\<in> ?lhs\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "using that"], ["proof (prove)\nusing this:\n  z \\<in> results (x \\<bind> f)\n\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "proof(induction r\\<equiv>\"x \\<bind> f\" arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>z xa x.\n       \\<lbrakk>xa \\<in> set_option z;\n        Resumption.resumption.Done z = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>z1 z2 xb xc x.\n       \\<lbrakk>xb \\<in> range z2; xc \\<in> results xb;\n        \\<And>x.\n           xb = x \\<bind> f \\<Longrightarrow>\n           xc \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause z1 z2 = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> (\\<Union>a\\<in>results x. results (f a))", "case (Done z z' x)"], ["proof (state)\nthis:\n  z' \\<in> set_option z\n  Resumption.resumption.Done z = x \\<bind> f\n\ngoal (2 subgoals):\n 1. \\<And>z xa x.\n       \\<lbrakk>xa \\<in> set_option z;\n        Resumption.resumption.Done z = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>z1 z2 xb xc x.\n       \\<lbrakk>xb \\<in> range z2; xc \\<in> results xb;\n        \\<And>x.\n           xb = x \\<bind> f \\<Longrightarrow>\n           xc \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause z1 z2 = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> (\\<Union>a\\<in>results x. results (f a))", "from Done(1) Done(2)[symmetric]"], ["proof (chain)\npicking this:\n  z' \\<in> set_option z\n  x \\<bind> f = Resumption.resumption.Done z", "show ?case"], ["proof (prove)\nusing this:\n  z' \\<in> set_option z\n  x \\<bind> f = Resumption.resumption.Done z\n\ngoal (1 subgoal):\n 1. z' \\<in> (\\<Union>a\\<in>results x. results (f a))", "by(auto)"], ["proof (state)\nthis:\n  z' \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xc x.\n       \\<lbrakk>xb \\<in> range z2; xc \\<in> results xb;\n        \\<And>x.\n           xb = x \\<bind> f \\<Longrightarrow>\n           xc \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause z1 z2 = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> (\\<Union>a\\<in>results x. results (f a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xc x.\n       \\<lbrakk>xb \\<in> range z2; xc \\<in> results xb;\n        \\<And>x.\n           xb = x \\<bind> f \\<Longrightarrow>\n           xc \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause z1 z2 = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> (\\<Union>a\\<in>results x. results (f a))", "case (Pause out c r z x)"], ["proof (state)\nthis:\n  r \\<in> range c\n  z \\<in> results r\n  r = ?x \\<bind> f \\<Longrightarrow>\n  z \\<in> (\\<Union>a\\<in>results ?x. results (f a))\n  Resumption.resumption.Pause out c = x \\<bind> f\n\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xc x.\n       \\<lbrakk>xb \\<in> range z2; xc \\<in> results xb;\n        \\<And>x.\n           xb = x \\<bind> f \\<Longrightarrow>\n           xc \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause z1 z2 = x \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> (\\<Union>a\\<in>results x. results (f a))", "then"], ["proof (chain)\npicking this:\n  r \\<in> range c\n  z \\<in> results r\n  r = ?x \\<bind> f \\<Longrightarrow>\n  z \\<in> (\\<Union>a\\<in>results ?x. results (f a))\n  Resumption.resumption.Pause out c = x \\<bind> f", "show ?case"], ["proof (prove)\nusing this:\n  r \\<in> range c\n  z \\<in> results r\n  r = ?x \\<bind> f \\<Longrightarrow>\n  z \\<in> (\\<Union>a\\<in>results ?x. results (f a))\n  Resumption.resumption.Pause out c = x \\<bind> f\n\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "proof(cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r \\<in> range c; z \\<in> results r;\n        \\<And>x.\n           r = x \\<bind> f \\<Longrightarrow>\n           z \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause out c = x \\<bind> f;\n        x = Resumption.resumption.Done x1\\<rbrakk>\n       \\<Longrightarrow> z \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>x21 x22.\n       \\<lbrakk>r \\<in> range c; z \\<in> results r;\n        \\<And>x.\n           r = x \\<bind> f \\<Longrightarrow>\n           z \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause out c = x \\<bind> f;\n        x = Resumption.resumption.Pause x21 x22\\<rbrakk>\n       \\<Longrightarrow> z \\<in> (\\<Union>a\\<in>results x. results (f a))", "case (Done x')"], ["proof (state)\nthis:\n  x = Resumption.resumption.Done x'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r \\<in> range c; z \\<in> results r;\n        \\<And>x.\n           r = x \\<bind> f \\<Longrightarrow>\n           z \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause out c = x \\<bind> f;\n        x = Resumption.resumption.Done x1\\<rbrakk>\n       \\<Longrightarrow> z \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>x21 x22.\n       \\<lbrakk>r \\<in> range c; z \\<in> results r;\n        \\<And>x.\n           r = x \\<bind> f \\<Longrightarrow>\n           z \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause out c = x \\<bind> f;\n        x = Resumption.resumption.Pause x21 x22\\<rbrakk>\n       \\<Longrightarrow> z \\<in> (\\<Union>a\\<in>results x. results (f a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "proof(cases x')"], ["proof (state)\ngoal (2 subgoals):\n 1. x' = None \\<Longrightarrow>\n    z \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>a.\n       x' = Some a \\<Longrightarrow>\n       z \\<in> (\\<Union>a\\<in>results x. results (f a))", "case None"], ["proof (state)\nthis:\n  x' = None\n\ngoal (2 subgoals):\n 1. x' = None \\<Longrightarrow>\n    z \\<in> (\\<Union>a\\<in>results x. results (f a))\n 2. \\<And>a.\n       x' = Some a \\<Longrightarrow>\n       z \\<in> (\\<Union>a\\<in>results x. results (f a))", "with Done Pause(4)"], ["proof (chain)\npicking this:\n  x = Resumption.resumption.Done x'\n  Resumption.resumption.Pause out c = x \\<bind> f\n  x' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Resumption.resumption.Done x'\n  Resumption.resumption.Pause out c = x \\<bind> f\n  x' = None\n\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "by(auto simp add: ABORT_def[symmetric])"], ["proof (state)\nthis:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x' = Some a \\<Longrightarrow>\n       z \\<in> (\\<Union>a\\<in>results x. results (f a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       x' = Some a \\<Longrightarrow>\n       z \\<in> (\\<Union>a\\<in>results x. results (f a))", "case (Some x'')"], ["proof (state)\nthis:\n  x' = Some x''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x' = Some a \\<Longrightarrow>\n       z \\<in> (\\<Union>a\\<in>results x. results (f a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x' = Some x''\n\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "using Pause(1,2,4) Done"], ["proof (prove)\nusing this:\n  x' = Some x''\n  r \\<in> range c\n  z \\<in> results r\n  Resumption.resumption.Pause out c = x \\<bind> f\n  x = Resumption.resumption.Done x'\n\ngoal (1 subgoal):\n 1. z \\<in> (\\<Union>a\\<in>results x. results (f a))", "by(auto 4 3 simp add: DONE_def[unfolded o_def, symmetric, unfolded fun_eq_iff] dest: sym)"], ["proof (state)\nthis:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>r \\<in> range c; z \\<in> results r;\n        \\<And>x.\n           r = x \\<bind> f \\<Longrightarrow>\n           z \\<in> (\\<Union>a\\<in>results x. results (f a));\n        Resumption.resumption.Pause out c = x \\<bind> f;\n        x = Resumption.resumption.Pause x21 x22\\<rbrakk>\n       \\<Longrightarrow> z \\<in> (\\<Union>a\\<in>results x. results (f a))", "qed(fastforce)"], ["proof (state)\nthis:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?z \\<in> results (x \\<bind> f) \\<Longrightarrow>\n  ?z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "assume \"z \\<in> ?rhs\""], ["proof (state)\nthis:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "then"], ["proof (chain)\npicking this:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))", "obtain z' where z': \"z' \\<in> results x\"\n    and z: \"z \\<in> results (f z')\""], ["proof (prove)\nusing this:\n  z \\<in> (\\<Union>a\\<in>results x. results (f a))\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>z' \\<in> results x; z \\<in> results (f z')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z' \\<in> results x\n  z \\<in> results (f z')\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<Union>a\\<in>results x. results (f a)) \\<Longrightarrow>\n       xa \\<in> results (x \\<bind> f)", "from z'"], ["proof (chain)\npicking this:\n  z' \\<in> results x", "show \"z \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  z' \\<in> results x\n\ngoal (1 subgoal):\n 1. z \\<in> results (x \\<bind> f)", "proof(induction z'\\<equiv>z' x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>za.\n       z' \\<in> set_option za \\<Longrightarrow>\n       z \\<in> results (Resumption.resumption.Done za \\<bind> f)\n 2. \\<And>z1 z2 xb.\n       \\<lbrakk>xb \\<in> range z2; z' \\<in> results xb;\n        z \\<in> results (xb \\<bind> f)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> results\n                                  (Resumption.resumption.Pause z1 z2 \\<bind>\n                                   f)", "case (Done r)"], ["proof (state)\nthis:\n  z' \\<in> set_option r\n\ngoal (2 subgoals):\n 1. \\<And>za.\n       z' \\<in> set_option za \\<Longrightarrow>\n       z \\<in> results (Resumption.resumption.Done za \\<bind> f)\n 2. \\<And>z1 z2 xb.\n       \\<lbrakk>xb \\<in> range z2; z' \\<in> results xb;\n        z \\<in> results (xb \\<bind> f)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> results\n                                  (Resumption.resumption.Pause z1 z2 \\<bind>\n                                   f)", "then"], ["proof (chain)\npicking this:\n  z' \\<in> set_option r", "show ?case"], ["proof (prove)\nusing this:\n  z' \\<in> set_option r\n\ngoal (1 subgoal):\n 1. z \\<in> results (Resumption.resumption.Done r \\<bind> f)", "using z"], ["proof (prove)\nusing this:\n  z' \\<in> set_option r\n  z \\<in> results (f z')\n\ngoal (1 subgoal):\n 1. z \\<in> results (Resumption.resumption.Done r \\<bind> f)", "by(auto simp add: DONE_def[unfolded o_def, symmetric, unfolded fun_eq_iff])"], ["proof (state)\nthis:\n  z \\<in> results (Resumption.resumption.Done r \\<bind> f)\n\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb.\n       \\<lbrakk>xb \\<in> range z2; z' \\<in> results xb;\n        z \\<in> results (xb \\<bind> f)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> results\n                                  (Resumption.resumption.Pause z1 z2 \\<bind>\n                                   f)", "qed auto"], ["proof (state)\nthis:\n  z \\<in> results (x \\<bind> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outputs_bind_resumption [simp]:\n  \"outputs (bind_resumption r f) = outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. outputs (r \\<bind> f) =\n    outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "proof(rule set_eqI iffI)+"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> outputs (r \\<bind> f) \\<Longrightarrow>\n       x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n 2. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "show \"x \\<in> ?rhs\" if \"x \\<in> ?lhs\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "using that"], ["proof (prove)\nusing this:\n  x \\<in> outputs (r \\<bind> f)\n\ngoal (1 subgoal):\n 1. x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "proof(induction r'\\<equiv>\"bind_resumption r f\" arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>z1 z2 r.\n       Resumption.resumption.Pause z1 z2 = r \\<bind> f \\<Longrightarrow>\n       z1 \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n 2. \\<And>z1 z2 xb xd r.\n       \\<lbrakk>xb \\<in> range z2; xd \\<in> outputs xb;\n        \\<And>r.\n           xb = r \\<bind> f \\<Longrightarrow>\n           xd \\<in> outputs r \\<union>\n                    (\\<Union>x\\<in>results r. outputs (f x));\n        Resumption.resumption.Pause z1 z2 = r \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xd \\<in> outputs r \\<union>\n                                  (\\<Union>x\\<in>results r. outputs (f x))", "case (Pause1 out c)"], ["proof (state)\nthis:\n  Resumption.resumption.Pause out c = r \\<bind> f\n\ngoal (2 subgoals):\n 1. \\<And>z1 z2 r.\n       Resumption.resumption.Pause z1 z2 = r \\<bind> f \\<Longrightarrow>\n       z1 \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n 2. \\<And>z1 z2 xb xd r.\n       \\<lbrakk>xb \\<in> range z2; xd \\<in> outputs xb;\n        \\<And>r.\n           xb = r \\<bind> f \\<Longrightarrow>\n           xd \\<in> outputs r \\<union>\n                    (\\<Union>x\\<in>results r. outputs (f x));\n        Resumption.resumption.Pause z1 z2 = r \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xd \\<in> outputs r \\<union>\n                                  (\\<Union>x\\<in>results r. outputs (f x))", "thus ?case"], ["proof (prove)\nusing this:\n  Resumption.resumption.Pause out c = r \\<bind> f\n\ngoal (1 subgoal):\n 1. out \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "by(cases r)(auto simp add: Done_bind split: option.split_asm dest: sym)"], ["proof (state)\nthis:\n  out \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xd r.\n       \\<lbrakk>xb \\<in> range z2; xd \\<in> outputs xb;\n        \\<And>r.\n           xb = r \\<bind> f \\<Longrightarrow>\n           xd \\<in> outputs r \\<union>\n                    (\\<Union>x\\<in>results r. outputs (f x));\n        Resumption.resumption.Pause z1 z2 = r \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xd \\<in> outputs r \\<union>\n                                  (\\<Union>x\\<in>results r. outputs (f x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xd r.\n       \\<lbrakk>xb \\<in> range z2; xd \\<in> outputs xb;\n        \\<And>r.\n           xb = r \\<bind> f \\<Longrightarrow>\n           xd \\<in> outputs r \\<union>\n                    (\\<Union>x\\<in>results r. outputs (f x));\n        Resumption.resumption.Pause z1 z2 = r \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xd \\<in> outputs r \\<union>\n                                  (\\<Union>x\\<in>results r. outputs (f x))", "case (Pause2 out c r' x)"], ["proof (state)\nthis:\n  r' \\<in> range c\n  x \\<in> outputs r'\n  r' = ?r \\<bind> f \\<Longrightarrow>\n  x \\<in> outputs ?r \\<union> (\\<Union>x\\<in>results ?r. outputs (f x))\n  Resumption.resumption.Pause out c = r \\<bind> f\n\ngoal (1 subgoal):\n 1. \\<And>z1 z2 xb xd r.\n       \\<lbrakk>xb \\<in> range z2; xd \\<in> outputs xb;\n        \\<And>r.\n           xb = r \\<bind> f \\<Longrightarrow>\n           xd \\<in> outputs r \\<union>\n                    (\\<Union>x\\<in>results r. outputs (f x));\n        Resumption.resumption.Pause z1 z2 = r \\<bind> f\\<rbrakk>\n       \\<Longrightarrow> xd \\<in> outputs r \\<union>\n                                  (\\<Union>x\\<in>results r. outputs (f x))", "thus ?case"], ["proof (prove)\nusing this:\n  r' \\<in> range c\n  x \\<in> outputs r'\n  r' = ?r \\<bind> f \\<Longrightarrow>\n  x \\<in> outputs ?r \\<union> (\\<Union>x\\<in>results ?r. outputs (f x))\n  Resumption.resumption.Pause out c = r \\<bind> f\n\ngoal (1 subgoal):\n 1. x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "by(cases r)(auto 4 3 simp add: Done_bind split: option.split_asm dest: sym)"], ["proof (state)\nthis:\n  x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> outputs (r \\<bind> f) \\<Longrightarrow>\n  ?x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "assume \"x \\<in> ?rhs\""], ["proof (state)\nthis:\n  x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "then"], ["proof (chain)\npicking this:\n  x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))", "consider (left) \"x \\<in> outputs r\" | (right) a where \"a \\<in> results r\" \"x \\<in> outputs (f a)\""], ["proof (prove)\nusing this:\n  x \\<in> outputs r \\<union> (\\<Union>x\\<in>results r. outputs (f x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> outputs r \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> outputs r \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> outputs r \\<union>\n               (\\<Union>x\\<in>results r. outputs (f x)) \\<Longrightarrow>\n       x \\<in> outputs (r \\<bind> f)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> outputs r \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"x \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> outputs r \\<Longrightarrow> ?thesis;\n   \\<And>a.\n      \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. x \\<in> outputs (r \\<bind> f)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> outputs r \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> outputs r \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "case left"], ["proof (state)\nthis:\n  x \\<in> outputs r\n\ngoal (2 subgoals):\n 1. x \\<in> outputs r \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> outputs r\n\ngoal (1 subgoal):\n 1. x \\<in> outputs (r \\<bind> f)", "by induction auto"], ["proof (state)\nthis:\n  x \\<in> outputs (r \\<bind> f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "}"], ["proof (state)\nthis:\n  x \\<in> outputs r \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "{"], ["proof (state)\nthis:\n  x \\<in> outputs r \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "case right"], ["proof (state)\nthis:\n  a \\<in> results r\n  x \\<in> outputs (f a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> results r; x \\<in> outputs (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> results r\n  x \\<in> outputs (f a)\n\ngoal (1 subgoal):\n 1. x \\<in> outputs (r \\<bind> f)", "by induction(auto simp add: Done_bind)"], ["proof (state)\nthis:\n  x \\<in> outputs (r \\<bind> f)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> results r; x \\<in> outputs (f ?a2)\\<rbrakk>\n  \\<Longrightarrow> x \\<in> outputs (r \\<bind> f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> outputs (r \\<bind> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec ensure :: \"bool \\<Rightarrow> (unit, 'out, 'in) resumption\"\nwhere\n  \"ensure True = DONE ()\" \n| \"ensure False = ABORT\""], ["", "lemma is_Done_map_resumption [simp]:\n  \"is_Done (map_resumption f1 f2 r) \\<longleftrightarrow> is_Done r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done\n     (Resumption.resumption.map_resumption f1 f2 r) =\n    Resumption.resumption.is_Done r", "by(cases r) simp_all"], ["", "lemma result_map_resumption [simp]: \n  \"is_Done r \\<Longrightarrow> result (map_resumption f1 f2 r) = map_option f1 (result r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.result\n     (Resumption.resumption.map_resumption f1 f2 r) =\n    map_option f1 (Resumption.resumption.result r)", "by(clarsimp simp add: is_Done_def)"], ["", "lemma output_map_resumption [simp]:\n  \"\\<not> is_Done r \\<Longrightarrow> output (map_resumption f1 f2 r) = f2 (output r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.output\n     (Resumption.resumption.map_resumption f1 f2 r) =\n    f2 (Resumption.resumption.output r)", "by(cases r) simp_all"], ["", "lemma resume_map_resumption [simp]:\n  \"\\<not> is_Done r\n  \\<Longrightarrow> resume (map_resumption f1 f2 r) = map_resumption f1 f2 \\<circ> resume r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.resume\n     (Resumption.resumption.map_resumption f1 f2 r) =\n    Resumption.resumption.map_resumption f1 f2 \\<circ>\n    Resumption.resumption.resume r", "by(cases r) simp_all"], ["", "lemma rel_resumption_is_DoneD: \"rel_resumption A B r1 r2 \\<Longrightarrow> is_Done r1 \\<longleftrightarrow> is_Done r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.rel_resumption A B r1 r2 \\<Longrightarrow>\n    Resumption.resumption.is_Done r1 = Resumption.resumption.is_Done r2", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust]) simp_all"], ["", "lemma rel_resumption_resultD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; is_Done r1 \\<rbrakk> \\<Longrightarrow> rel_option A (result r1) (result r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     Resumption.resumption.is_Done r1\\<rbrakk>\n    \\<Longrightarrow> rel_option A (Resumption.resumption.result r1)\n                       (Resumption.resumption.result r2)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust]) simp_all"], ["", "lemma rel_resumption_resultD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; is_Done r2 \\<rbrakk> \\<Longrightarrow> rel_option A (result r1) (result r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     Resumption.resumption.is_Done r2\\<rbrakk>\n    \\<Longrightarrow> rel_option A (Resumption.resumption.result r1)\n                       (Resumption.resumption.result r2)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust]) simp_all"], ["", "lemma rel_resumption_outputD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r1 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     \\<not> Resumption.resumption.is_Done r1\\<rbrakk>\n    \\<Longrightarrow> B (Resumption.resumption.output r1)\n                       (Resumption.resumption.output r2)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust]) simp_all"], ["", "lemma rel_resumption_outputD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r2 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     \\<not> Resumption.resumption.is_Done r2\\<rbrakk>\n    \\<Longrightarrow> B (Resumption.resumption.output r1)\n                       (Resumption.resumption.output r2)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust]) simp_all"], ["", "lemma rel_resumption_resumeD1:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r1 \\<rbrakk>\n  \\<Longrightarrow> rel_resumption A B (resume r1 inp) (resume r2 inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     \\<not> Resumption.resumption.is_Done r1\\<rbrakk>\n    \\<Longrightarrow> Resumption.resumption.rel_resumption A B\n                       (Resumption.resumption.resume r1 inp)\n                       (Resumption.resumption.resume r2 inp)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust])(auto dest: rel_funD)"], ["", "lemma rel_resumption_resumeD2:\n  \"\\<lbrakk> rel_resumption A B r1 r2; \\<not> is_Done r2 \\<rbrakk>\n  \\<Longrightarrow> rel_resumption A B (resume r1 inp) (resume r2 inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Resumption.resumption.rel_resumption A B r1 r2;\n     \\<not> Resumption.resumption.is_Done r2\\<rbrakk>\n    \\<Longrightarrow> Resumption.resumption.rel_resumption A B\n                       (Resumption.resumption.resume r1 inp)\n                       (Resumption.resumption.resume r2 inp)", "by(cases r1 r2 rule: resumption.exhaust[case_product resumption.exhaust])(auto dest: rel_funD)"], ["", "lemma rel_resumption_coinduct\n  [consumes 1, case_names Done Pause,\n   case_conclusion Done is_Done result,\n   case_conclusion Pause \"output\" resume,\n   coinduct pred: rel_resumption]:\n  assumes X: \"X r1 r2\"\n  and Done: \"\\<And>r1 r2. X r1 r2 \\<Longrightarrow> (is_Done r1 \\<longleftrightarrow> is_Done r2) \\<and> (is_Done r1 \\<longrightarrow> is_Done r2 \\<longrightarrow> rel_option A (result r1) (result r2))\"\n  and Pause: \"\\<And>r1 r2. \\<lbrakk> X r1 r2; \\<not> is_Done r1; \\<not> is_Done r2 \\<rbrakk> \\<Longrightarrow> B (output r1) (output r2) \\<and> (\\<forall>inp. X (resume r1 inp) (resume r2 inp))\" \n  shows \"rel_resumption A B r1 r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.rel_resumption A B r1 r2", "using X"], ["proof (prove)\nusing this:\n  X r1 r2\n\ngoal (1 subgoal):\n 1. Resumption.resumption.rel_resumption A B r1 r2", "apply(rule resumption.rel_coinduct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       Resumption.resumption.is_Done resumption =\n       Resumption.resumption.is_Done resumption' \\<and>\n       (Resumption.resumption.is_Done resumption \\<longrightarrow>\n        Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        rel_option A (Resumption.resumption.result resumption)\n         (Resumption.resumption.result resumption')) \\<and>\n       (\\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        B (Resumption.resumption.output resumption)\n         (Resumption.resumption.output resumption') \\<and>\n        rel_fun (=) X (Resumption.resumption.resume resumption)\n         (Resumption.resumption.resume resumption'))", "apply(unfold rel_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       Resumption.resumption.is_Done resumption =\n       Resumption.resumption.is_Done resumption' \\<and>\n       (Resumption.resumption.is_Done resumption \\<longrightarrow>\n        Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        rel_option A (Resumption.resumption.result resumption)\n         (Resumption.resumption.result resumption')) \\<and>\n       (\\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        B (Resumption.resumption.output resumption)\n         (Resumption.resumption.output resumption') \\<and>\n        (\\<forall>x y.\n            x = y \\<longrightarrow>\n            X (Resumption.resumption.resume resumption x)\n             (Resumption.resumption.resume resumption' y)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       Resumption.resumption.is_Done resumption =\n       Resumption.resumption.is_Done resumption'\n 2. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       (Resumption.resumption.is_Done resumption \\<longrightarrow>\n        Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        rel_option A (Resumption.resumption.result resumption)\n         (Resumption.resumption.result resumption')) \\<and>\n       (\\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        B (Resumption.resumption.output resumption)\n         (Resumption.resumption.output resumption') \\<and>\n        (\\<forall>x y.\n            x = y \\<longrightarrow>\n            X (Resumption.resumption.resume resumption x)\n             (Resumption.resumption.resume resumption' y)))", "apply(erule Done[THEN conjunct1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       (Resumption.resumption.is_Done resumption \\<longrightarrow>\n        Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        rel_option A (Resumption.resumption.result resumption)\n         (Resumption.resumption.result resumption')) \\<and>\n       (\\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n        \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n        B (Resumption.resumption.output resumption)\n         (Resumption.resumption.output resumption') \\<and>\n        (\\<forall>x y.\n            x = y \\<longrightarrow>\n            X (Resumption.resumption.resume resumption x)\n             (Resumption.resumption.resume resumption' y)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       Resumption.resumption.is_Done resumption \\<longrightarrow>\n       Resumption.resumption.is_Done resumption' \\<longrightarrow>\n       rel_option A (Resumption.resumption.result resumption)\n        (Resumption.resumption.result resumption')\n 2. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       \\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n       \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n       B (Resumption.resumption.output resumption)\n        (Resumption.resumption.output resumption') \\<and>\n       (\\<forall>x y.\n           x = y \\<longrightarrow>\n           X (Resumption.resumption.resume resumption x)\n            (Resumption.resumption.resume resumption' y))", "apply(erule Done[THEN conjunct2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       X resumption resumption' \\<Longrightarrow>\n       \\<not> Resumption.resumption.is_Done resumption \\<longrightarrow>\n       \\<not> Resumption.resumption.is_Done resumption' \\<longrightarrow>\n       B (Resumption.resumption.output resumption)\n        (Resumption.resumption.output resumption') \\<and>\n       (\\<forall>x y.\n           x = y \\<longrightarrow>\n           X (Resumption.resumption.resume resumption x)\n            (Resumption.resumption.resume resumption' y))", "apply(rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       \\<lbrakk>X resumption resumption';\n        \\<not> Resumption.resumption.is_Done resumption;\n        \\<not> Resumption.resumption.is_Done resumption'\\<rbrakk>\n       \\<Longrightarrow> B (Resumption.resumption.output resumption)\n                          (Resumption.resumption.output resumption') \\<and>\n                         (\\<forall>x y.\n                             x = y \\<longrightarrow>\n                             X (Resumption.resumption.resume resumption x)\n                              (Resumption.resumption.resume resumption' y))", "apply(drule (2) Pause)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>resumption resumption'.\n       \\<lbrakk>\\<not> Resumption.resumption.is_Done resumption;\n        \\<not> Resumption.resumption.is_Done resumption';\n        B (Resumption.resumption.output resumption)\n         (Resumption.resumption.output resumption') \\<and>\n        (\\<forall>inp.\n            X (Resumption.resumption.resume resumption inp)\n             (Resumption.resumption.resume resumption' inp))\\<rbrakk>\n       \\<Longrightarrow> B (Resumption.resumption.output resumption)\n                          (Resumption.resumption.output resumption') \\<and>\n                         (\\<forall>x y.\n                             x = y \\<longrightarrow>\n                             X (Resumption.resumption.resume resumption x)\n                              (Resumption.resumption.resume resumption' y))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Setup for \\<open>partial_function\\<close>\\<close>"], ["", "context includes lifting_syntax begin"], ["", "coinductive resumption_ord :: \"('a, 'out, 'in) resumption \\<Rightarrow> ('a, 'out, 'in) resumption \\<Rightarrow> bool\"\nwhere\n  Done_Done: \"flat_ord None a a' \\<Longrightarrow> resumption_ord (Done a) (Done a')\"\n| Done_Pause: \"resumption_ord ABORT (Pause out c)\"\n| Pause_Pause: \"((=) ===> resumption_ord) c c' \\<Longrightarrow> resumption_ord (Pause out c) (Pause out c')\""], ["", "inductive_simps resumption_ord_simps [simp]:\n  \"resumption_ord (Pause out c) r\"\n  \"resumption_ord r (Done a)\""], ["", "lemma resumption_ord_is_DoneD:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> is_Done r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r'; Resumption.resumption.is_Done r'\\<rbrakk>\n    \\<Longrightarrow> Resumption.resumption.is_Done r", "by(cases r')(auto simp add: fun_ord_def)"], ["", "lemma resumption_ord_resultD:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> flat_ord None (result r) (result r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r'; Resumption.resumption.is_Done r'\\<rbrakk>\n    \\<Longrightarrow> option_ord (Resumption.resumption.result r)\n                       (Resumption.resumption.result r')", "by(cases r')(auto simp add: flat_ord_def)"], ["", "lemma resumption_ord_outputD:\n  \"\\<lbrakk> resumption_ord r r'; \\<not> is_Done r \\<rbrakk> \\<Longrightarrow> output r = output r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r';\n     \\<not> Resumption.resumption.is_Done r\\<rbrakk>\n    \\<Longrightarrow> Resumption.resumption.output r =\n                      Resumption.resumption.output r'", "by(cases r) auto"], ["", "lemma resumption_ord_resumeD:\n  \"\\<lbrakk> resumption_ord r r'; \\<not> is_Done r \\<rbrakk> \\<Longrightarrow> ((=) ===> resumption_ord) (resume r) (resume r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r';\n     \\<not> Resumption.resumption.is_Done r\\<rbrakk>\n    \\<Longrightarrow> ((=) ===> resumption_ord)\n                       (Resumption.resumption.resume r)\n                       (Resumption.resumption.resume r')", "by(cases r) auto"], ["", "lemma resumption_ord_abort:\n  \"\\<lbrakk> resumption_ord r r'; is_Done r; \\<not> is_Done r' \\<rbrakk> \\<Longrightarrow> result r = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r'; Resumption.resumption.is_Done r;\n     \\<not> Resumption.resumption.is_Done r'\\<rbrakk>\n    \\<Longrightarrow> Resumption.resumption.result r = None", "by(auto elim: resumption_ord.cases)"], ["", "lemma resumption_ord_coinduct [consumes 1, case_names Done Abort Pause, case_conclusion Pause \"output\" resume, coinduct pred: resumption_ord]:\n  assumes \"X r r'\"\n  and Done: \"\\<And>r r'. \\<lbrakk> X r r'; is_Done r' \\<rbrakk> \\<Longrightarrow> is_Done r \\<and> flat_ord None (result r) (result r')\"\n  and Abort: \"\\<And>r r'. \\<lbrakk> X r r'; \\<not> is_Done r'; is_Done r \\<rbrakk> \\<Longrightarrow> result r = None\"\n  and Pause: \"\\<And>r r'. \\<lbrakk> X r r'; \\<not> is_Done r; \\<not> is_Done r' \\<rbrakk> \n  \\<Longrightarrow> output r = output r' \\<and> ((=) ===> (\\<lambda>r r'. X r r' \\<or> resumption_ord r r')) (resume r) (resume r')\"\n  shows \"resumption_ord r r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord r r'", "using \\<open>X r r'\\<close>"], ["proof (prove)\nusing this:\n  X r r'\n\ngoal (1 subgoal):\n 1. resumption_ord r r'", "proof coinduct"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       X x1 x2 \\<Longrightarrow>\n       (\\<exists>a a'.\n           x1 = Resumption.resumption.Done a \\<and>\n           x2 = Resumption.resumption.Done a' \\<and> option_ord a a') \\<or>\n       (\\<exists>out c.\n           x1 = ABORT \\<and> x2 = Resumption.resumption.Pause out c) \\<or>\n       (\\<exists>c c' out.\n           x1 = Resumption.resumption.Pause out c \\<and>\n           x2 = Resumption.resumption.Pause out c' \\<and>\n           ((=) ===>\n            (\\<lambda>uu_ uua_. X uu_ uua_ \\<or> resumption_ord uu_ uua_))\n            c c')", "case (resumption_ord r r')"], ["proof (state)\nthis:\n  X r r'\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       X x1 x2 \\<Longrightarrow>\n       (\\<exists>a a'.\n           x1 = Resumption.resumption.Done a \\<and>\n           x2 = Resumption.resumption.Done a' \\<and> option_ord a a') \\<or>\n       (\\<exists>out c.\n           x1 = ABORT \\<and> x2 = Resumption.resumption.Pause out c) \\<or>\n       (\\<exists>c c' out.\n           x1 = Resumption.resumption.Pause out c \\<and>\n           x2 = Resumption.resumption.Pause out c' \\<and>\n           ((=) ===>\n            (\\<lambda>uu_ uua_. X uu_ uua_ \\<or> resumption_ord uu_ uua_))\n            c c')", "thus ?case"], ["proof (prove)\nusing this:\n  X r r'\n\ngoal (1 subgoal):\n 1. (\\<exists>a a'.\n        r = Resumption.resumption.Done a \\<and>\n        r' = Resumption.resumption.Done a' \\<and> option_ord a a') \\<or>\n    (\\<exists>out c.\n        r = ABORT \\<and> r' = Resumption.resumption.Pause out c) \\<or>\n    (\\<exists>c c' out.\n        r = Resumption.resumption.Pause out c \\<and>\n        r' = Resumption.resumption.Pause out c' \\<and>\n        ((=) ===>\n         (\\<lambda>uu_ uua_. X uu_ uua_ \\<or> resumption_ord uu_ uua_))\n         c c')", "by(cases r r' rule: resumption.exhaust[case_product resumption.exhaust])(auto dest: Done Pause Abort)"], ["proof (state)\nthis:\n  (\\<exists>a a'.\n      r = Resumption.resumption.Done a \\<and>\n      r' = Resumption.resumption.Done a' \\<and> option_ord a a') \\<or>\n  (\\<exists>out c.\n      r = ABORT \\<and> r' = Resumption.resumption.Pause out c) \\<or>\n  (\\<exists>c c' out.\n      r = Resumption.resumption.Pause out c \\<and>\n      r' = Resumption.resumption.Pause out c' \\<and>\n      ((=) ===>\n       (\\<lambda>uu_ uua_. X uu_ uua_ \\<or> resumption_ord uu_ uua_))\n       c c')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma resumption_ord_ABORT [intro!, simp]: \"resumption_ord ABORT r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord ABORT r", "by(cases r)(simp_all add: flat_ord_def resumption_ord.Done_Pause)"], ["", "lemma resumption_ord_ABORT2 [simp]: \"resumption_ord r ABORT \\<longleftrightarrow> r = ABORT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord r ABORT = (r = ABORT)", "by(simp add: ABORT_def flat_ord_def)"], ["", "lemma resumption_ord_DONE1 [simp]: \"resumption_ord (DONE x) r \\<longleftrightarrow> r = DONE x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord (DONE x) r = (r = DONE x)", "by(cases r)(auto simp add: option_ord_Some1_iff DONE_def dest: resumption_ord_abort)"], ["", "lemma resumption_ord_refl: \"resumption_ord r r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord r r", "by(coinduction arbitrary: r)(auto simp add: flat_ord_def)"], ["", "lemma resumption_ord_antisym:\n  \"\\<lbrakk> resumption_ord r r'; resumption_ord r' r \\<rbrakk>\n  \\<Longrightarrow> r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r'; resumption_ord r' r\\<rbrakk>\n    \\<Longrightarrow> r = r'", "proof(coinduction arbitrary: r r' rule: resumption.coinduct_strong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<lbrakk>resumption_ord r r'; resumption_ord r' r\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done r =\n                         Resumption.resumption.is_Done r' \\<and>\n                         (Resumption.resumption.is_Done r \\<longrightarrow>\n                          Resumption.resumption.is_Done r' \\<longrightarrow>\n                          Resumption.resumption.result r =\n                          Resumption.resumption.result r') \\<and>\n                         (\\<not> Resumption.resumption.is_Done\n                                  r \\<longrightarrow>\n                          \\<not> Resumption.resumption.is_Done\n                                  r' \\<longrightarrow>\n                          Resumption.resumption.output r =\n                          Resumption.resumption.output r' \\<and>\n                          rel_fun (=)\n                           (\\<lambda>resumption resumption'.\n                               (\\<exists>r r'.\n                                   resumption = r \\<and>\n                                   resumption' = r' \\<and>\n                                   resumption_ord r r' \\<and>\n                                   resumption_ord r' r) \\<or>\n                               resumption = resumption')\n                           (Resumption.resumption.resume r)\n                           (Resumption.resumption.resume r'))", "case (Eq_resumption r r')"], ["proof (state)\nthis:\n  resumption_ord r r'\n  resumption_ord r' r\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<lbrakk>resumption_ord r r'; resumption_ord r' r\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done r =\n                         Resumption.resumption.is_Done r' \\<and>\n                         (Resumption.resumption.is_Done r \\<longrightarrow>\n                          Resumption.resumption.is_Done r' \\<longrightarrow>\n                          Resumption.resumption.result r =\n                          Resumption.resumption.result r') \\<and>\n                         (\\<not> Resumption.resumption.is_Done\n                                  r \\<longrightarrow>\n                          \\<not> Resumption.resumption.is_Done\n                                  r' \\<longrightarrow>\n                          Resumption.resumption.output r =\n                          Resumption.resumption.output r' \\<and>\n                          rel_fun (=)\n                           (\\<lambda>resumption resumption'.\n                               (\\<exists>r r'.\n                                   resumption = r \\<and>\n                                   resumption' = r' \\<and>\n                                   resumption_ord r r' \\<and>\n                                   resumption_ord r' r) \\<or>\n                               resumption = resumption')\n                           (Resumption.resumption.resume r)\n                           (Resumption.resumption.resume r'))", "thus ?case"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r =\n    Resumption.resumption.is_Done r' \\<and>\n    (Resumption.resumption.is_Done r \\<longrightarrow>\n     Resumption.resumption.is_Done r' \\<longrightarrow>\n     Resumption.resumption.result r =\n     Resumption.resumption.result r') \\<and>\n    (\\<not> Resumption.resumption.is_Done r \\<longrightarrow>\n     \\<not> Resumption.resumption.is_Done r' \\<longrightarrow>\n     Resumption.resumption.output r = Resumption.resumption.output r' \\<and>\n     rel_fun (=)\n      (\\<lambda>resumption resumption'.\n          (\\<exists>r r'.\n              resumption = r \\<and>\n              resumption' = r' \\<and>\n              resumption_ord r r' \\<and> resumption_ord r' r) \\<or>\n          resumption = resumption')\n      (Resumption.resumption.resume r) (Resumption.resumption.resume r'))", "by cases(auto simp add: flat_ord_def rel_fun_def)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done r = Resumption.resumption.is_Done r' \\<and>\n  (Resumption.resumption.is_Done r \\<longrightarrow>\n   Resumption.resumption.is_Done r' \\<longrightarrow>\n   Resumption.resumption.result r = Resumption.resumption.result r') \\<and>\n  (\\<not> Resumption.resumption.is_Done r \\<longrightarrow>\n   \\<not> Resumption.resumption.is_Done r' \\<longrightarrow>\n   Resumption.resumption.output r = Resumption.resumption.output r' \\<and>\n   rel_fun (=)\n    (\\<lambda>resumption resumption'.\n        (\\<exists>r r'.\n            resumption = r \\<and>\n            resumption' = r' \\<and>\n            resumption_ord r r' \\<and> resumption_ord r' r) \\<or>\n        resumption = resumption')\n    (Resumption.resumption.resume r) (Resumption.resumption.resume r'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resumption_ord_trans:\n  \"\\<lbrakk> resumption_ord r r'; resumption_ord r' r'' \\<rbrakk>\n  \\<Longrightarrow> resumption_ord r r''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>resumption_ord r r'; resumption_ord r' r''\\<rbrakk>\n    \\<Longrightarrow> resumption_ord r r''", "proof(coinduction arbitrary: r r' r'')"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra \\<and>\n                         option_ord (Resumption.resumption.result ra)\n                          (Resumption.resumption.result r'')\n 2. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done r'';\n        Resumption.resumption.is_Done ra\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra = None\n 3. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "case (Done r r' r'')"], ["proof (state)\nthis:\n  resumption_ord r r'\n  resumption_ord r' r''\n  Resumption.resumption.is_Done r''\n\ngoal (3 subgoals):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra \\<and>\n                         option_ord (Resumption.resumption.result ra)\n                          (Resumption.resumption.result r'')\n 2. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done r'';\n        Resumption.resumption.is_Done ra\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra = None\n 3. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "thus ?case"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n  Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r \\<and>\n    option_ord (Resumption.resumption.result r)\n     (Resumption.resumption.result r'')", "by(auto 4 4 elim: resumption_ord.cases simp add: flat_ord_def)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done r \\<and>\n  option_ord (Resumption.resumption.result r)\n   (Resumption.resumption.result r'')\n\ngoal (2 subgoals):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done r'';\n        Resumption.resumption.is_Done ra\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra = None\n 2. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done r'';\n        Resumption.resumption.is_Done ra\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra = None\n 2. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "case (Abort r r' r'')"], ["proof (state)\nthis:\n  resumption_ord r r'\n  resumption_ord r' r''\n  \\<not> Resumption.resumption.is_Done r''\n  Resumption.resumption.is_Done r\n\ngoal (2 subgoals):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done r'';\n        Resumption.resumption.is_Done ra\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra = None\n 2. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "thus ?case"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n  \\<not> Resumption.resumption.is_Done r''\n  Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result r = None", "by(auto 4 4 elim: resumption_ord.cases simp add: flat_ord_def)"], ["proof (state)\nthis:\n  Resumption.resumption.result r = None\n\ngoal (1 subgoal):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "case (Pause r r' r'')"], ["proof (state)\nthis:\n  resumption_ord r r'\n  resumption_ord r' r''\n  \\<not> Resumption.resumption.is_Done r\n  \\<not> Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "hence \"resumption_ord r r'\" \"resumption_ord r' r''\""], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n  \\<not> Resumption.resumption.is_Done r\n  \\<not> Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. resumption_ord r r' &&& resumption_ord r' r''", "by simp_all"], ["proof (state)\nthis:\n  resumption_ord r r'\n  resumption_ord r' r''\n\ngoal (1 subgoal):\n 1. \\<And>ra r'a r''.\n       \\<lbrakk>resumption_ord ra r'a; resumption_ord r'a r'';\n        \\<not> Resumption.resumption.is_Done ra;\n        \\<not> Resumption.resumption.is_Done r''\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra =\n                         Resumption.resumption.output r'' \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra r'a r''.\n                                  r = ra \\<and>\n                                  r' = r'' \\<and>\n                                  resumption_ord ra r'a \\<and>\n                                  resumption_ord r'a r'') \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra)\n                          (Resumption.resumption.resume r'')", "thus ?case"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output r = Resumption.resumption.output r'' \\<and>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>ra r'a r''.\n             r = ra \\<and>\n             r' = r'' \\<and>\n             resumption_ord ra r'a \\<and> resumption_ord r'a r'') \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume r) (Resumption.resumption.resume r'')", "using \\<open>\\<not> is_Done r\\<close> \\<open>\\<not> is_Done r''\\<close>"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n  \\<not> Resumption.resumption.is_Done r\n  \\<not> Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output r = Resumption.resumption.output r'' \\<and>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>ra r'a r''.\n             r = ra \\<and>\n             r' = r'' \\<and>\n             resumption_ord ra r'a \\<and> resumption_ord r'a r'') \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume r) (Resumption.resumption.resume r'')", "by(cases)(auto simp add: rel_fun_def)"], ["proof (state)\nthis:\n  Resumption.resumption.output r = Resumption.resumption.output r'' \\<and>\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra r'a r''.\n           r = ra \\<and>\n           r' = r'' \\<and>\n           resumption_ord ra r'a \\<and> resumption_ord r'a r'') \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r) (Resumption.resumption.resume r'')\n\ngoal:\nNo subgoals!", "qed"], ["", "primcorec resumption_lub :: \"('a, 'out, 'in) resumption set \\<Rightarrow> ('a, 'out, 'in) resumption\"\nwhere\n  \"\\<forall>r \\<in> R. is_Done r \\<Longrightarrow> is_Done (resumption_lub R)\"\n| \"result (resumption_lub R) = flat_lub None (result ` R)\"\n| \"output (resumption_lub R) = (THE out. out \\<in> output ` (R \\<inter> {r. \\<not> is_Done r}))\"\n| \"resume (resumption_lub R) = (\\<lambda>inp. resumption_lub ((\\<lambda>c. c inp) ` resume ` (R \\<inter> {r. \\<not> is_Done r})))\""], ["", "lemma is_Done_resumption_lub [simp]:\n  \"is_Done (resumption_lub R) \\<longleftrightarrow> (\\<forall>r \\<in> R. is_Done r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (resumption_lub R) =\n    (\\<forall>r\\<in>R. Resumption.resumption.is_Done r)", "by(simp add: resumption_lub_def)"], ["", "lemma result_resumption_lub [simp]:\n  \"\\<forall>r \\<in> R. is_Done r \\<Longrightarrow> result (resumption_lub R) = flat_lub None (result ` R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R. Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.result (resumption_lub R) =\n    flat_lub None (Resumption.resumption.result ` R)", "by(simp add: resumption_lub_def)"], ["", "lemma output_resumption_lub [simp]:\n  \"\\<exists>r\\<in>R. \\<not> is_Done r \\<Longrightarrow> output (resumption_lub R) = (THE out. out \\<in> output ` (R \\<inter> {r. \\<not> is_Done r}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>R.\n       \\<not> Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.output (resumption_lub R) =\n    (THE out.\n        out\n        \\<in> Resumption.resumption.output `\n              (R \\<inter> {r. \\<not> Resumption.resumption.is_Done r}))", "by(simp add: resumption_lub_def)"], ["", "lemma resume_resumption_lub [simp]:\n  \"\\<exists>r\\<in>R. \\<not> is_Done r\n  \\<Longrightarrow> resume (resumption_lub R) inp = \n     resumption_lub ((\\<lambda>c. c inp) ` resume ` (R \\<inter> {r. \\<not> is_Done r}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>R.\n       \\<not> Resumption.resumption.is_Done r \\<Longrightarrow>\n    Resumption.resumption.resume (resumption_lub R) inp =\n    resumption_lub\n     ((\\<lambda>c. c inp) `\n      Resumption.resumption.resume `\n      (R \\<inter> {r. \\<not> Resumption.resumption.is_Done r}))", "by(simp add: resumption_lub_def)"], ["", "lemma resumption_lub_empty: \"resumption_lub {} = ABORT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_lub {} = ABORT", "by(subst resumption_lub.code)(simp add: flat_lub_def)"], ["", "context\n  fixes R state inp R'\n  defines R'_def: \"R' \\<equiv> (\\<lambda>c. c inp) ` resume ` (R \\<inter> {r. \\<not> is_Done r})\"\n  assumes chain: \"Complete_Partial_Order.chain resumption_ord R\"\nbegin"], ["", "lemma resumption_ord_chain_resume: \"Complete_Partial_Order.chain resumption_ord R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R'", "proof(rule chainI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "fix r' r''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "assume \"r' \\<in> R'\"\n    and \"r'' \\<in> R'\""], ["proof (state)\nthis:\n  r' \\<in> R'\n  r'' \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "then"], ["proof (chain)\npicking this:\n  r' \\<in> R'\n  r'' \\<in> R'", "obtain \\<r>' \\<r>'' \n    where r': \"r' = resume \\<r>' inp\" \"\\<r>' \\<in> R\" \"\\<not> is_Done \\<r>'\"\n    and r'': \"r'' = resume \\<r>'' inp\" \"\\<r>'' \\<in> R\" \"\\<not> is_Done \\<r>''\""], ["proof (prove)\nusing this:\n  r' \\<in> R'\n  r'' \\<in> R'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<r>' \\<r>''.\n        \\<lbrakk>r' = Resumption.resumption.resume \\<r>' inp; \\<r>' \\<in> R;\n         \\<not> Resumption.resumption.is_Done \\<r>';\n         r'' = Resumption.resumption.resume \\<r>'' inp; \\<r>'' \\<in> R;\n         \\<not> Resumption.resumption.is_Done \\<r>''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: R'_def)"], ["proof (state)\nthis:\n  r' = Resumption.resumption.resume \\<r>' inp\n  \\<r>' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>'\n  r'' = Resumption.resumption.resume \\<r>'' inp\n  \\<r>'' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>''\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "from chain \\<open>\\<r>' \\<in> R\\<close> \\<open>\\<r>'' \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<r>' \\<in> R\n  \\<r>'' \\<in> R", "have \"resumption_ord \\<r>' \\<r>'' \\<or> resumption_ord \\<r>'' \\<r>'\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<r>' \\<in> R\n  \\<r>'' \\<in> R\n\ngoal (1 subgoal):\n 1. resumption_ord \\<r>' \\<r>'' \\<or> resumption_ord \\<r>'' \\<r>'", "by(auto elim: chainE)"], ["proof (state)\nthis:\n  resumption_ord \\<r>' \\<r>'' \\<or> resumption_ord \\<r>'' \\<r>'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "with r' r''"], ["proof (chain)\npicking this:\n  r' = Resumption.resumption.resume \\<r>' inp\n  \\<r>' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>'\n  r'' = Resumption.resumption.resume \\<r>'' inp\n  \\<r>'' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>''\n  resumption_ord \\<r>' \\<r>'' \\<or> resumption_ord \\<r>'' \\<r>'", "have \"resumption_ord (resume \\<r>' inp) (resume \\<r>'' inp) \\<or>\n        resumption_ord (resume \\<r>'' inp) (resume \\<r>' inp)\""], ["proof (prove)\nusing this:\n  r' = Resumption.resumption.resume \\<r>' inp\n  \\<r>' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>'\n  r'' = Resumption.resumption.resume \\<r>'' inp\n  \\<r>'' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>''\n  resumption_ord \\<r>' \\<r>'' \\<or> resumption_ord \\<r>'' \\<r>'\n\ngoal (1 subgoal):\n 1. resumption_ord (Resumption.resumption.resume \\<r>' inp)\n     (Resumption.resumption.resume \\<r>'' inp) \\<or>\n    resumption_ord (Resumption.resumption.resume \\<r>'' inp)\n     (Resumption.resumption.resume \\<r>' inp)", "by(auto elim: resumption_ord.cases simp add: rel_fun_def)"], ["proof (state)\nthis:\n  resumption_ord (Resumption.resumption.resume \\<r>' inp)\n   (Resumption.resumption.resume \\<r>'' inp) \\<or>\n  resumption_ord (Resumption.resumption.resume \\<r>'' inp)\n   (Resumption.resumption.resume \\<r>' inp)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> R'; y \\<in> R'\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x y \\<or> resumption_ord y x", "with r' r''"], ["proof (chain)\npicking this:\n  r' = Resumption.resumption.resume \\<r>' inp\n  \\<r>' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>'\n  r'' = Resumption.resumption.resume \\<r>'' inp\n  \\<r>'' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>''\n  resumption_ord (Resumption.resumption.resume \\<r>' inp)\n   (Resumption.resumption.resume \\<r>'' inp) \\<or>\n  resumption_ord (Resumption.resumption.resume \\<r>'' inp)\n   (Resumption.resumption.resume \\<r>' inp)", "show \"resumption_ord r' r'' \\<or> resumption_ord r'' r'\""], ["proof (prove)\nusing this:\n  r' = Resumption.resumption.resume \\<r>' inp\n  \\<r>' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>'\n  r'' = Resumption.resumption.resume \\<r>'' inp\n  \\<r>'' \\<in> R\n  \\<not> Resumption.resumption.is_Done \\<r>''\n  resumption_ord (Resumption.resumption.resume \\<r>' inp)\n   (Resumption.resumption.resume \\<r>'' inp) \\<or>\n  resumption_ord (Resumption.resumption.resume \\<r>'' inp)\n   (Resumption.resumption.resume \\<r>' inp)\n\ngoal (1 subgoal):\n 1. resumption_ord r' r'' \\<or> resumption_ord r'' r'", "by auto"], ["proof (state)\nthis:\n  resumption_ord r' r'' \\<or> resumption_ord r'' r'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma resumption_partial_function_definition:\n  \"partial_function_definitions resumption_ord resumption_lub\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_function_definitions resumption_ord resumption_lub", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. resumption_ord x x\n 2. \\<And>x y z.\n       \\<lbrakk>resumption_ord x y; resumption_ord y z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x z\n 3. \\<And>x y.\n       \\<lbrakk>resumption_ord x y; resumption_ord y x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 4. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 5. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "show \"resumption_ord r r\" for r :: \"('a, 'b, 'c) resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord r r", "by(rule resumption_ord_refl)"], ["proof (state)\nthis:\n  resumption_ord ?r ?r\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>resumption_ord x y; resumption_ord y z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x z\n 2. \\<And>x y.\n       \\<lbrakk>resumption_ord x y; resumption_ord y x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 4. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "show \"resumption_ord r r''\" if \"resumption_ord r r'\" \"resumption_ord r' r''\"\n    for r r' r'' :: \"('a, 'b, 'c) resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord r r''", "using that"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r''\n\ngoal (1 subgoal):\n 1. resumption_ord r r''", "by(rule resumption_ord_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>resumption_ord ?r ?r'; resumption_ord ?r' ?r''\\<rbrakk>\n  \\<Longrightarrow> resumption_ord ?r ?r''\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>resumption_ord x y; resumption_ord y x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 3. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "show \"r = r'\" if \"resumption_ord r r'\" \"resumption_ord r' r\" for r r' :: \"('a, 'b, 'c) resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "using that"], ["proof (prove)\nusing this:\n  resumption_ord r r'\n  resumption_ord r' r\n\ngoal (1 subgoal):\n 1. r = r'", "by(rule resumption_ord_antisym)"], ["proof (state)\nthis:\n  \\<lbrakk>resumption_ord ?r ?r'; resumption_ord ?r' ?r\\<rbrakk>\n  \\<Longrightarrow> ?r = ?r'\n\ngoal (2 subgoals):\n 1. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 2. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 2. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "fix R and r :: \"('a, 'b, 'c) resumption\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 2. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "assume \"Complete_Partial_Order.chain resumption_ord R\" \"r \\<in> R\""], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>A x.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> resumption_ord x (resumption_lub A)\n 2. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "thus \"resumption_ord r (resumption_lub R)\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. resumption_ord r (resumption_lub R)", "proof(coinduction arbitrary: r R)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "case (Done r R)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n  Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "note chain = \\<open>Complete_Partial_Order.chain resumption_ord R\\<close>\n      and r = \\<open>r \\<in> R\\<close>"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "from \\<open>is_Done (resumption_lub R)\\<close>"], ["proof (chain)\npicking this:\n  Resumption.resumption.is_Done (resumption_lub R)", "have A: \"\\<forall>r \\<in> R. is_Done r\""], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>R. Resumption.resumption.is_Done r", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "with r"], ["proof (chain)\npicking this:\n  r \\<in> R\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r", "obtain a' where \"r = Done a'\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        r = Resumption.resumption.Done a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases r) auto"], ["proof (state)\nthis:\n  r = Resumption.resumption.Done a'\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "{"], ["proof (state)\nthis:\n  r = Resumption.resumption.Done a'\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "fix r'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "assume \"a' \\<noteq> None\""], ["proof (state)\nthis:\n  a' \\<noteq> None\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "hence \"(THE x. x \\<in> result ` R \\<and> x \\<noteq> None) = a'\""], ["proof (prove)\nusing this:\n  a' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (THE x.\n        x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n    a'", "using r A \\<open>r = Done a'\\<close>"], ["proof (prove)\nusing this:\n  a' \\<noteq> None\n  r \\<in> R\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r\n  r = Resumption.resumption.Done a'\n\ngoal (1 subgoal):\n 1. (THE x.\n        x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n    a'", "by(auto 4 3 del: the_equality intro!: the_equality intro: rev_image_eqI elim: chainE[OF chain] simp add: flat_ord_def is_Done_def)"], ["proof (state)\nthis:\n  (THE x. x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n  a'\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "}"], ["proof (state)\nthis:\n  a' \\<noteq> None \\<Longrightarrow>\n  (THE x. x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n  a'\n\ngoal (3 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done ra__ \\<and>\n                         option_ord (Resumption.resumption.result ra__)\n                          (Resumption.resumption.result (resumption_lub R))\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 3. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "with A r \\<open>r = Done a'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r\n  r \\<in> R\n  r = Resumption.resumption.Done a'\n  a' \\<noteq> None \\<Longrightarrow>\n  (THE x. x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n  a'", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>R. Resumption.resumption.is_Done r\n  r \\<in> R\n  r = Resumption.resumption.Done a'\n  a' \\<noteq> None \\<Longrightarrow>\n  (THE x. x \\<in> Resumption.resumption.result ` R \\<and> x \\<noteq> None) =\n  a'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r \\<and>\n    option_ord (Resumption.resumption.result r)\n     (Resumption.resumption.result (resumption_lub R))", "by(cases a')(auto simp add: flat_ord_def flat_lub_def)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done r \\<and>\n  option_ord (Resumption.resumption.result r)\n   (Resumption.resumption.result (resumption_lub R))\n\ngoal (2 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "case (Abort r R)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  Resumption.resumption.is_Done r\n\ngoal (2 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "hence chain: \"Complete_Partial_Order.chain resumption_ord R\" and \"r \\<in> R\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R &&& r \\<in> R", "by simp_all"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result ra__ = None\n 2. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "from \\<open>r \\<in> R\\<close> \\<open>\\<not> is_Done (resumption_lub R)\\<close> \\<open>is_Done r\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  Resumption.resumption.is_Done r", "show ?case"], ["proof (prove)\nusing this:\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result r = None", "by(auto elim: chainE[OF chain] dest: resumption_ord_abort resumption_ord_is_DoneD)"], ["proof (state)\nthis:\n  Resumption.resumption.result r = None\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "case (Pause r R)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done r\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "hence chain: \"Complete_Partial_Order.chain resumption_ord R\"\n      and r: \"r \\<in> R\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done r\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R &&& r \\<in> R", "by simp_all"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "have ?resume"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>ra__ R.\n             r = ra__ \\<and>\n             r' = resumption_lub R \\<and>\n             Complete_Partial_Order.chain resumption_ord R \\<and>\n             ra__ \\<in> R) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume r)\n     (Resumption.resumption.resume (resumption_lub R))", "using r \\<open>\\<not> is_Done r\\<close> resumption_ord_chain_resume[OF chain]"], ["proof (prove)\nusing this:\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done r\n  Complete_Partial_Order.chain resumption_ord\n   ((\\<lambda>c. c ?inp) `\n    Resumption.resumption.resume `\n    (R \\<inter> {r. \\<not> Resumption.resumption.is_Done r}))\n\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>ra__ R.\n             r = ra__ \\<and>\n             r' = resumption_lub R \\<and>\n             Complete_Partial_Order.chain resumption_ord R \\<and>\n             ra__ \\<in> R) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume r)\n     (Resumption.resumption.resume (resumption_lub R))", "by(auto simp add: rel_fun_def bexI)"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra__ R.\n           r = ra__ \\<and>\n           r' = resumption_lub R \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           ra__ \\<in> R) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r)\n   (Resumption.resumption.resume (resumption_lub R))\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "moreover"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra__ R.\n           r = ra__ \\<and>\n           r' = resumption_lub R \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           ra__ \\<in> R) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r)\n   (Resumption.resumption.resume (resumption_lub R))\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "from r \\<open>\\<not> is_Done r\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done r", "have \"output (resumption_lub R) = output r\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  \\<not> Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (resumption_lub R) =\n    Resumption.resumption.output r", "by(auto 4 4 simp add: bexI del: the_equality intro!: the_equality elim: chainE[OF chain] dest: resumption_ord_outputD)"], ["proof (state)\nthis:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n\ngoal (1 subgoal):\n 1. \\<And>ra__ R.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R; ra__ \\<in> R;\n        \\<not> Resumption.resumption.is_Done ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output ra__ =\n                         Resumption.resumption.output\n                          (resumption_lub R) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>ra__ R.\n                                  r = ra__ \\<and>\n                                  r' = resumption_lub R \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  ra__ \\<in> R) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume ra__)\n                          (Resumption.resumption.resume (resumption_lub R))", "ultimately"], ["proof (chain)\npicking this:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra__ R.\n           r = ra__ \\<and>\n           r' = resumption_lub R \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           ra__ \\<in> R) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r)\n   (Resumption.resumption.resume (resumption_lub R))\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r", "show ?case"], ["proof (prove)\nusing this:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra__ R.\n           r = ra__ \\<and>\n           r' = resumption_lub R \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           ra__ \\<in> R) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r)\n   (Resumption.resumption.resume (resumption_lub R))\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output r =\n    Resumption.resumption.output (resumption_lub R) \\<and>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>ra__ R.\n             r = ra__ \\<and>\n             r' = resumption_lub R \\<and>\n             Complete_Partial_Order.chain resumption_ord R \\<and>\n             ra__ \\<in> R) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume r)\n     (Resumption.resumption.resume (resumption_lub R))", "by simp"], ["proof (state)\nthis:\n  Resumption.resumption.output r =\n  Resumption.resumption.output (resumption_lub R) \\<and>\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>ra__ R.\n           r = ra__ \\<and>\n           r' = resumption_lub R \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           ra__ \\<in> R) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume r)\n   (Resumption.resumption.resume (resumption_lub R))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  resumption_ord r (resumption_lub R)\n\ngoal (1 subgoal):\n 1. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "fix R and r :: \"('a, 'b, 'c) resumption\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "assume \"Complete_Partial_Order.chain resumption_ord R\" \"\\<And>r'. r' \\<in> R \\<Longrightarrow> resumption_ord r' r\""], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  ?r' \\<in> R \\<Longrightarrow> resumption_ord ?r' r\n\ngoal (1 subgoal):\n 1. \\<And>A z.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> resumption_ord x z\\<rbrakk>\n       \\<Longrightarrow> resumption_ord (resumption_lub A) z", "thus \"resumption_ord (resumption_lub R) r\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  ?r' \\<in> R \\<Longrightarrow> resumption_ord ?r' r\n\ngoal (1 subgoal):\n 1. resumption_ord (resumption_lub R) r", "proof(coinduction arbitrary: R r)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "case (Done R r)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  Resumption.resumption.is_Done r\n\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "hence chain: \"Complete_Partial_Order.chain resumption_ord R\"\n      and ub: \"\\<forall>r'\\<in>R. resumption_ord r' r\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R &&&\n    \\<forall>r'\\<in>R. resumption_ord r' r", "by simp_all"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'\\<in>R. resumption_ord r' r\n\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "from \\<open>is_Done r\\<close> ub"], ["proof (chain)\npicking this:\n  Resumption.resumption.is_Done r\n  \\<forall>r'\\<in>R. resumption_ord r' r", "have is_Done: \"\\<forall>r' \\<in> R. is_Done r'\"\n      and ub': \"\\<And>r'. r' \\<in> result ` R \\<Longrightarrow> flat_ord None r' (result r)\""], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done r\n  \\<forall>r'\\<in>R. resumption_ord r' r\n\ngoal (1 subgoal):\n 1. \\<forall>r'\\<in>R. Resumption.resumption.is_Done r' &&&\n    (\\<And>r'.\n        r' \\<in> Resumption.resumption.result ` R \\<Longrightarrow>\n        option_ord r' (Resumption.resumption.result r))", "by(auto dest: resumption_ord_is_DoneD resumption_ord_resultD)"], ["proof (state)\nthis:\n  \\<forall>r'\\<in>R. Resumption.resumption.is_Done r'\n  ?r' \\<in> Resumption.resumption.result ` R \\<Longrightarrow>\n  option_ord ?r' (Resumption.resumption.result r)\n\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "from is_Done"], ["proof (chain)\npicking this:\n  \\<forall>r'\\<in>R. Resumption.resumption.is_Done r'", "have chain': \"Complete_Partial_Order.chain (flat_ord None) (result ` R)\""], ["proof (prove)\nusing this:\n  \\<forall>r'\\<in>R. Resumption.resumption.is_Done r'\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain option_ord\n     (Resumption.resumption.result ` R)", "by(auto 5 2 intro!: chainI elim: chainE[OF chain] dest: resumption_ord_resultD)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain option_ord (Resumption.resumption.result ` R)\n\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "hence \"flat_ord None (flat_lub None (result ` R)) (result r)\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain option_ord (Resumption.resumption.result ` R)\n\ngoal (1 subgoal):\n 1. option_ord (flat_lub None (Resumption.resumption.result ` R))\n     (Resumption.resumption.result r)", "by(rule partial_function_definitions.lub_least[OF flat_interpretation])(rule ub')"], ["proof (state)\nthis:\n  option_ord (flat_lub None (Resumption.resumption.result ` R))\n   (Resumption.resumption.result r)\n\ngoal (3 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done\n                          (resumption_lub R) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (resumption_lub R))\n                          (Resumption.resumption.result ra__)\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 3. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "thus ?case"], ["proof (prove)\nusing this:\n  option_ord (flat_lub None (Resumption.resumption.result ` R))\n   (Resumption.resumption.result r)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (resumption_lub R) \\<and>\n    option_ord (Resumption.resumption.result (resumption_lub R))\n     (Resumption.resumption.result r)", "using is_Done"], ["proof (prove)\nusing this:\n  option_ord (flat_lub None (Resumption.resumption.result ` R))\n   (Resumption.resumption.result r)\n  \\<forall>r'\\<in>R. Resumption.resumption.is_Done r'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (resumption_lub R) \\<and>\n    option_ord (Resumption.resumption.result (resumption_lub R))\n     (Resumption.resumption.result r)", "by simp"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done (resumption_lub R) \\<and>\n  option_ord (Resumption.resumption.result (resumption_lub R))\n   (Resumption.resumption.result r)\n\ngoal (2 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "case (Abort R r)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  \\<not> Resumption.resumption.is_Done r\n  Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (2 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "hence chain: \"Complete_Partial_Order.chain resumption_ord R\"\n      and ub: \"\\<forall>r'\\<in>R. resumption_ord r' r\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  \\<not> Resumption.resumption.is_Done r\n  Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R &&&\n    \\<forall>r'\\<in>R. resumption_ord r' r", "by simp_all"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'\\<in>R. resumption_ord r' r\n\ngoal (2 subgoals):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done ra__;\n        Resumption.resumption.is_Done (resumption_lub R)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (resumption_lub R) =\n                         None\n 2. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "from \\<open>\\<not> is_Done r\\<close> \\<open>is_Done (resumption_lub R)\\<close> ub"], ["proof (chain)\npicking this:\n  \\<not> Resumption.resumption.is_Done r\n  Resumption.resumption.is_Done (resumption_lub R)\n  \\<forall>r'\\<in>R. resumption_ord r' r", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> Resumption.resumption.is_Done r\n  Resumption.resumption.is_Done (resumption_lub R)\n  \\<forall>r'\\<in>R. resumption_ord r' r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result (resumption_lub R) = None", "by(auto simp add: flat_lub_def dest: resumption_ord_abort)"], ["proof (state)\nthis:\n  Resumption.resumption.result (resumption_lub R) = None\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "case (Pause R r)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  \\<not> Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "hence chain: \"Complete_Partial_Order.chain resumption_ord R\"\n      and ub: \"\\<And>r'. r'\\<in>R \\<Longrightarrow> resumption_ord r' r\""], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord R\n  \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' r\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n  \\<not> Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption_ord R &&&\n    (\\<And>r'. r' \\<in> R \\<Longrightarrow> resumption_ord r' r)", "by simp_all"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord R\n  ?r' \\<in> R \\<Longrightarrow> resumption_ord ?r' r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "from \\<open>\\<not> is_Done (resumption_lub R)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)", "have exR: \"\\<exists>r \\<in> R. \\<not> is_Done r\""], ["proof (prove)\nusing this:\n  \\<not> Resumption.resumption.is_Done (resumption_lub R)\n\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r", "by simp"], ["proof (state)\nthis:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "then"], ["proof (chain)\npicking this:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r", "obtain r' where r': \"r' \\<in> R\" \"\\<not> is_Done r'\""], ["proof (prove)\nusing this:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>r' \\<in> R;\n         \\<not> Resumption.resumption.is_Done r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "with ub[of r']"], ["proof (chain)\npicking this:\n  r' \\<in> R \\<Longrightarrow> resumption_ord r' r\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'", "have \"output r = output r'\""], ["proof (prove)\nusing this:\n  r' \\<in> R \\<Longrightarrow> resumption_ord r' r\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output r = Resumption.resumption.output r'", "by(auto dest: resumption_ord_outputD)"], ["proof (state)\nthis:\n  Resumption.resumption.output r = Resumption.resumption.output r'\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "also"], ["proof (state)\nthis:\n  Resumption.resumption.output r = Resumption.resumption.output r'\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "have [symmetric]: \"output (resumption_lub R) = output r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.output (resumption_lub R) =\n    Resumption.resumption.output r'", "using exR r'"], ["proof (prove)\nusing this:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (resumption_lub R) =\n    Resumption.resumption.output r'", "by(auto 4 4 elim: chainE[OF chain] dest: resumption_ord_outputD)"], ["proof (state)\nthis:\n  Resumption.resumption.output r' =\n  Resumption.resumption.output (resumption_lub R)\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "finally"], ["proof (chain)\npicking this:\n  Resumption.resumption.output r =\n  Resumption.resumption.output (resumption_lub R)", "have ?output"], ["proof (prove)\nusing this:\n  Resumption.resumption.output r =\n  Resumption.resumption.output (resumption_lub R)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (resumption_lub R) =\n    Resumption.resumption.output r", ".."], ["proof (state)\nthis:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "moreover"], ["proof (state)\nthis:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "{"], ["proof (state)\nthis:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "fix inp r''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "assume \"r'' \\<in> R\" \"\\<not> is_Done r''\""], ["proof (state)\nthis:\n  r'' \\<in> R\n  \\<not> Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "with ub[of r'']"], ["proof (chain)\npicking this:\n  r'' \\<in> R \\<Longrightarrow> resumption_ord r'' r\n  r'' \\<in> R\n  \\<not> Resumption.resumption.is_Done r''", "have \"resumption_ord (resume r'' inp) (resume r inp)\""], ["proof (prove)\nusing this:\n  r'' \\<in> R \\<Longrightarrow> resumption_ord r'' r\n  r'' \\<in> R\n  \\<not> Resumption.resumption.is_Done r''\n\ngoal (1 subgoal):\n 1. resumption_ord (Resumption.resumption.resume r'' inp)\n     (Resumption.resumption.resume r inp)", "by(auto dest!: resumption_ord_resumeD simp add: rel_fun_def)"], ["proof (state)\nthis:\n  resumption_ord (Resumption.resumption.resume r'' inp)\n   (Resumption.resumption.resume r inp)\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r''2 \\<in> R;\n   \\<not> Resumption.resumption.is_Done ?r''2\\<rbrakk>\n  \\<Longrightarrow> resumption_ord\n                     (Resumption.resumption.resume ?r''2 ?inp2)\n                     (Resumption.resumption.resume r ?inp2)\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "with exR resumption_ord_chain_resume[OF chain] r'"], ["proof (chain)\npicking this:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r\n  Complete_Partial_Order.chain resumption_ord\n   ((\\<lambda>c. c ?inp) `\n    Resumption.resumption.resume `\n    (R \\<inter> {r. \\<not> Resumption.resumption.is_Done r}))\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'\n  \\<lbrakk>?r''2 \\<in> R;\n   \\<not> Resumption.resumption.is_Done ?r''2\\<rbrakk>\n  \\<Longrightarrow> resumption_ord\n                     (Resumption.resumption.resume ?r''2 ?inp2)\n                     (Resumption.resumption.resume r ?inp2)", "have ?resume"], ["proof (prove)\nusing this:\n  \\<exists>r\\<in>R. \\<not> Resumption.resumption.is_Done r\n  Complete_Partial_Order.chain resumption_ord\n   ((\\<lambda>c. c ?inp) `\n    Resumption.resumption.resume `\n    (R \\<inter> {r. \\<not> Resumption.resumption.is_Done r}))\n  r' \\<in> R\n  \\<not> Resumption.resumption.is_Done r'\n  \\<lbrakk>?r''2 \\<in> R;\n   \\<not> Resumption.resumption.is_Done ?r''2\\<rbrakk>\n  \\<Longrightarrow> resumption_ord\n                     (Resumption.resumption.resume ?r''2 ?inp2)\n                     (Resumption.resumption.resume r ?inp2)\n\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>R ra__.\n             r = resumption_lub R \\<and>\n             r' = ra__ \\<and>\n             Complete_Partial_Order.chain resumption_ord R \\<and>\n             (\\<forall>r'.\n                 r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (resumption_lub R))\n     (Resumption.resumption.resume r)", "by(auto simp add: rel_fun_def)"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>R ra__.\n           r = resumption_lub R \\<and>\n           r' = ra__ \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           (\\<forall>r'.\n               r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (resumption_lub R))\n   (Resumption.resumption.resume r)\n\ngoal (1 subgoal):\n 1. \\<And>R ra__.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord R;\n        \\<forall>r'. r' \\<in> R \\<longrightarrow> resumption_ord r' ra__;\n        \\<not> Resumption.resumption.is_Done (resumption_lub R);\n        \\<not> Resumption.resumption.is_Done ra__\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (resumption_lub R) =\n                         Resumption.resumption.output ra__ \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>R ra__.\n                                  r = resumption_lub R \\<and>\n                                  r' = ra__ \\<and>\n                                  Complete_Partial_Order.chain\n                                   resumption_ord R \\<and>\n                                  (\\<forall>r'.\nr' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (resumption_lub R))\n                          (Resumption.resumption.resume ra__)", "ultimately"], ["proof (chain)\npicking this:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>R ra__.\n           r = resumption_lub R \\<and>\n           r' = ra__ \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           (\\<forall>r'.\n               r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (resumption_lub R))\n   (Resumption.resumption.resume r)", "show ?case"], ["proof (prove)\nusing this:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>R ra__.\n           r = resumption_lub R \\<and>\n           r' = ra__ \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           (\\<forall>r'.\n               r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (resumption_lub R))\n   (Resumption.resumption.resume r)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (resumption_lub R) =\n    Resumption.resumption.output r \\<and>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>R ra__.\n             r = resumption_lub R \\<and>\n             r' = ra__ \\<and>\n             Complete_Partial_Order.chain resumption_ord R \\<and>\n             (\\<forall>r'.\n                 r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (resumption_lub R))\n     (Resumption.resumption.resume r)", ".."], ["proof (state)\nthis:\n  Resumption.resumption.output (resumption_lub R) =\n  Resumption.resumption.output r \\<and>\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>R ra__.\n           r = resumption_lub R \\<and>\n           r' = ra__ \\<and>\n           Complete_Partial_Order.chain resumption_ord R \\<and>\n           (\\<forall>r'.\n               r' \\<in> R \\<longrightarrow> resumption_ord r' ra__)) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (resumption_lub R))\n   (Resumption.resumption.resume r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  resumption_ord (resumption_lub R) r\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation resumption:\n  partial_function_definitions resumption_ord resumption_lub\n  rewrites \"resumption_lub {} = (ABORT :: ('a, 'b, 'c) resumption)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_function_definitions resumption_ord resumption_lub &&&\n    resumption_lub {} = ABORT", "by (rule resumption_partial_function_definition resumption_lub_empty)+"], ["", "declaration \\<open>Partial_Function.init \"resumption\" @{term resumption.fixp_fun}\n  @{term resumption.mono_body} @{thm resumption.fixp_rule_uc} @{thm resumption.fixp_induct_uc} NONE\\<close>"], ["", "abbreviation \"mono_resumption \\<equiv> monotone (fun_ord resumption_ord) resumption_ord\""], ["", "lemma mono_resumption_resume:\n  assumes \"mono_resumption B\"\n  shows \"mono_resumption (\\<lambda>f. resume (B f) inp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_resumption (\\<lambda>f. Resumption.resumption.resume (B f) inp)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (Resumption.resumption.resume (B x) inp)\n        (Resumption.resumption.resume (B y) inp)", "fix f g :: \"'a \\<Rightarrow> ('b, 'c, 'd) resumption\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (Resumption.resumption.resume (B x) inp)\n        (Resumption.resumption.resume (B y) inp)", "assume fg: \"fun_ord resumption_ord f g\""], ["proof (state)\nthis:\n  resumption.le_fun f g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (Resumption.resumption.resume (B x) inp)\n        (Resumption.resumption.resume (B y) inp)", "hence \"resumption_ord (B f) (B g)\""], ["proof (prove)\nusing this:\n  resumption.le_fun f g\n\ngoal (1 subgoal):\n 1. resumption_ord (B f) (B g)", "by(rule monotoneD[OF assms])"], ["proof (state)\nthis:\n  resumption_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (Resumption.resumption.resume (B x) inp)\n        (Resumption.resumption.resume (B y) inp)", "with resumption_ord_resumeD[OF this]"], ["proof (chain)\npicking this:\n  \\<not> Resumption.resumption.is_Done (B f) \\<Longrightarrow>\n  rel_fun (=) resumption_ord (Resumption.resumption.resume (B f))\n   (Resumption.resumption.resume (B g))\n  resumption_ord (B f) (B g)", "show \"resumption_ord (resume (B f) inp) (resume (B g) inp)\""], ["proof (prove)\nusing this:\n  \\<not> Resumption.resumption.is_Done (B f) \\<Longrightarrow>\n  rel_fun (=) resumption_ord (Resumption.resumption.resume (B f))\n   (Resumption.resumption.resume (B g))\n  resumption_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. resumption_ord (Resumption.resumption.resume (B f) inp)\n     (Resumption.resumption.resume (B g) inp)", "by(cases \"is_Done (B f)\")(auto simp add: rel_fun_def is_Done_def)"], ["proof (state)\nthis:\n  resumption_ord (Resumption.resumption.resume (B f) inp)\n   (Resumption.resumption.resume (B g) inp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bind_resumption_mono [partial_function_mono]:\n  assumes mf: \"mono_resumption B\"\n  and mg: \"\\<And>y. mono_resumption (C y)\"\n  shows \"mono_resumption (\\<lambda>f. do { y \\<leftarrow> B f; C y f })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_resumption (\\<lambda>f. B f \\<bind> (\\<lambda>y. C y f))", "proof(rule monotoneI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "fix f g :: \"'a \\<Rightarrow> ('b, 'c, 'd) resumption\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "assume *: \"fun_ord resumption_ord f g\""], ["proof (state)\nthis:\n  resumption.le_fun f g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "define f' where \"f' \\<equiv> B f\""], ["proof (state)\nthis:\n  f' \\<equiv> B f\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "define g' where \"g' \\<equiv> B g\""], ["proof (state)\nthis:\n  g' \\<equiv> B g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "define h where \"h \\<equiv> \\<lambda>x. C x f\""], ["proof (state)\nthis:\n  h \\<equiv> \\<lambda>x. C x f\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "define k where \"k \\<equiv> \\<lambda>x. C x g\""], ["proof (state)\nthis:\n  k \\<equiv> \\<lambda>x. C x g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "from mf[THEN monotoneD, OF *] mg[THEN monotoneD, OF *] f'_def g'_def h_def k_def"], ["proof (chain)\npicking this:\n  resumption_ord (B f) (B g)\n  resumption_ord (C ?y1 f) (C ?y1 g)\n  f' \\<equiv> B f\n  g' \\<equiv> B g\n  h \\<equiv> \\<lambda>x. C x f\n  k \\<equiv> \\<lambda>x. C x g", "have \"resumption_ord f' g'\" \"\\<And>x. resumption_ord (h x) (k x)\""], ["proof (prove)\nusing this:\n  resumption_ord (B f) (B g)\n  resumption_ord (C ?y1 f) (C ?y1 g)\n  f' \\<equiv> B f\n  g' \\<equiv> B g\n  h \\<equiv> \\<lambda>x. C x f\n  k \\<equiv> \\<lambda>x. C x g\n\ngoal (1 subgoal):\n 1. resumption_ord f' g' &&& (\\<And>x. resumption_ord (h x) (k x))", "by auto"], ["proof (state)\nthis:\n  resumption_ord f' g'\n  resumption_ord (h ?x) (k ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       resumption.le_fun x y \\<Longrightarrow>\n       resumption_ord (B x \\<bind> (\\<lambda>y. C y x))\n        (B y \\<bind> (\\<lambda>ya. C ya y))", "thus \"resumption_ord (f' \\<bind> h) (g' \\<bind> k)\""], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  resumption_ord (h ?x) (k ?x)\n\ngoal (1 subgoal):\n 1. resumption_ord (f' \\<bind> h) (g' \\<bind> k)", "proof(coinduction arbitrary: f' g' h k)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "case (Done f' g' h k)"], ["proof (state)\nthis:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "hence le: \"resumption_ord f' g'\"\n      and mg: \"\\<And>y. resumption_ord (h y) (k y)\""], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. resumption_ord f' g' &&& (\\<And>y. resumption_ord (h y) (k y))", "by simp_all"], ["proof (state)\nthis:\n  resumption_ord f' g'\n  resumption_ord (h ?y) (k ?y)\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "from \\<open>is_Done (g' \\<bind> k)\\<close>"], ["proof (chain)\npicking this:\n  Resumption.resumption.is_Done (g' \\<bind> k)", "have done_Bg: \"is_Done g'\" \n      and \"result g' \\<noteq> None \\<Longrightarrow> is_Done (k (the (result g')))\""], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done g' &&&\n    (Resumption.resumption.result g' \\<noteq> None \\<Longrightarrow>\n     Resumption.resumption.is_Done\n      (k (the (Resumption.resumption.result g'))))", "by simp_all"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done g'\n  Resumption.resumption.result g' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.is_Done (k (the (Resumption.resumption.result g')))\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "moreover"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done g'\n  Resumption.resumption.result g' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.is_Done (k (the (Resumption.resumption.result g')))\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "have \"is_Done f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f'", "using le done_Bg"], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  Resumption.resumption.is_Done g'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f'", "by(rule resumption_ord_is_DoneD)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done f'\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "moreover"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done f'\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "from le done_Bg"], ["proof (chain)\npicking this:\n  resumption_ord f' g'\n  Resumption.resumption.is_Done g'", "have \"flat_ord None (result f') (result g')\""], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  Resumption.resumption.is_Done g'\n\ngoal (1 subgoal):\n 1. option_ord (Resumption.resumption.result f')\n     (Resumption.resumption.result g')", "by(rule resumption_ord_resultD)"], ["proof (state)\nthis:\n  option_ord (Resumption.resumption.result f')\n   (Resumption.resumption.result g')\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "hence \"result f' \\<noteq> None \\<Longrightarrow> result g' = result f'\""], ["proof (prove)\nusing this:\n  option_ord (Resumption.resumption.result f')\n   (Resumption.resumption.result g')\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result f' \\<noteq> None \\<Longrightarrow>\n    Resumption.resumption.result g' = Resumption.resumption.result f'", "by(auto simp add: flat_ord_def)"], ["proof (state)\nthis:\n  Resumption.resumption.result f' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.result g' = Resumption.resumption.result f'\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "moreover"], ["proof (state)\nthis:\n  Resumption.resumption.result f' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.result g' = Resumption.resumption.result f'\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "have \"resumption_ord (h (the (result f'))) (k (the (result f')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_ord (h (the (Resumption.resumption.result f')))\n     (k (the (Resumption.resumption.result f')))", "by(rule mg)"], ["proof (state)\nthis:\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))\n\ngoal (3 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n                         option_ord\n                          (Resumption.resumption.result (f' \\<bind> h))\n                          (Resumption.resumption.result (g' \\<bind> k))\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 3. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "ultimately"], ["proof (chain)\npicking this:\n  Resumption.resumption.is_Done g'\n  Resumption.resumption.result g' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.is_Done (k (the (Resumption.resumption.result g')))\n  Resumption.resumption.is_Done f'\n  Resumption.resumption.result f' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.result g' = Resumption.resumption.result f'\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))", "show ?case"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done g'\n  Resumption.resumption.result g' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.is_Done (k (the (Resumption.resumption.result g')))\n  Resumption.resumption.is_Done f'\n  Resumption.resumption.result f' \\<noteq> None \\<Longrightarrow>\n  Resumption.resumption.result g' = Resumption.resumption.result f'\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n    option_ord (Resumption.resumption.result (f' \\<bind> h))\n     (Resumption.resumption.result (g' \\<bind> k))", "by(subst (1 2) result_bind_resumption)(auto dest: resumption_ord_is_DoneD resumption_ord_resultD simp add: flat_ord_def bind_eq_None_conv)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done (f' \\<bind> h) \\<and>\n  option_ord (Resumption.resumption.result (f' \\<bind> h))\n   (Resumption.resumption.result (g' \\<bind> k))\n\ngoal (2 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "case (Abort f' g' h k)"], ["proof (state)\nthis:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  Resumption.resumption.is_Done (f' \\<bind> h)\n\ngoal (2 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "hence \"resumption_ord (h (the (result f'))) (k (the (result f')))\""], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  Resumption.resumption.is_Done (f' \\<bind> h)\n\ngoal (1 subgoal):\n 1. resumption_ord (h (the (Resumption.resumption.result f')))\n     (k (the (Resumption.resumption.result f')))", "by simp"], ["proof (state)\nthis:\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))\n\ngoal (2 subgoals):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k);\n        Resumption.resumption.is_Done (f' \\<bind> h)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.result (f' \\<bind> h) = None\n 2. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "thus ?case"], ["proof (prove)\nusing this:\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result (f' \\<bind> h) = None", "using Abort"], ["proof (prove)\nusing this:\n  resumption_ord (h (the (Resumption.resumption.result f')))\n   (k (the (Resumption.resumption.result f')))\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  Resumption.resumption.is_Done (f' \\<bind> h)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.result (f' \\<bind> h) = None", "by(cases \"is_Done g'\")(auto 4 4 simp add: bind_eq_None_conv flat_ord_def dest: resumption_ord_abort resumption_ord_resultD resumption_ord_is_DoneD)"], ["proof (state)\nthis:\n  Resumption.resumption.result (f' \\<bind> h) = None\n\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "case (Pause f' g' h k)"], ["proof (state)\nthis:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "hence ?output"], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (f' \\<bind> h) =\n    Resumption.resumption.output (g' \\<bind> k)", "by(auto 4 4 dest: resumption_ord_outputD resumption_ord_is_DoneD resumption_ord_resultD resumption_ord_abort simp add: flat_ord_def)"], ["proof (state)\nthis:\n  Resumption.resumption.output (f' \\<bind> h) =\n  Resumption.resumption.output (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "moreover"], ["proof (state)\nthis:\n  Resumption.resumption.output (f' \\<bind> h) =\n  Resumption.resumption.output (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "have ?resume"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "proof(cases \"is_Done f'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))\n 2. \\<not> Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "case False"], ["proof (state)\nthis:\n  \\<not> Resumption.resumption.is_Done f'\n\ngoal (2 subgoals):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))\n 2. \\<not> Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "with Pause"], ["proof (chain)\npicking this:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  \\<not> Resumption.resumption.is_Done f'", "show ?thesis"], ["proof (prove)\nusing this:\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  \\<not> Resumption.resumption.is_Done f'\n\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "by(auto simp add: rel_fun_def dest: resumption_ord_is_DoneD intro: resumption_ord_resumeD[THEN rel_funD] del: exI intro!: exI)"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "case True"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done f'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "hence \"is_Done g'\""], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done f'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done g'", "using Pause"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done f'\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done g'", "by(auto dest: resumption_ord_abort)"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done g'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done f' \\<Longrightarrow>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done g'\n\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "using True Pause resumption_ord_resultD[OF \\<open>resumption_ord f' g'\\<close>]"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done g'\n  Resumption.resumption.is_Done f'\n  resumption_ord f' g'\n  \\<forall>x. resumption_ord (h x) (k x)\n  \\<not> Resumption.resumption.is_Done (f' \\<bind> h)\n  \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\n  Resumption.resumption.is_Done g' \\<Longrightarrow>\n  option_ord (Resumption.resumption.result f')\n   (Resumption.resumption.result g')\n\ngoal (1 subgoal):\n 1. rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", "by(auto del: rel_funI intro!: rel_funI simp add: bind_resumption_is_Done flat_ord_def intro: resumption_ord_resumeD[THEN rel_funD] exI[where x=f'] exI[where x=g'])"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))\n\ngoal (1 subgoal):\n 1. \\<And>f' g' h k.\n       \\<lbrakk>resumption_ord f' g';\n        \\<forall>x. resumption_ord (h x) (k x);\n        \\<not> Resumption.resumption.is_Done (f' \\<bind> h);\n        \\<not> Resumption.resumption.is_Done (g' \\<bind> k)\\<rbrakk>\n       \\<Longrightarrow> Resumption.resumption.output (f' \\<bind> h) =\n                         Resumption.resumption.output (g' \\<bind> k) \\<and>\n                         rel_fun (=)\n                          (\\<lambda>r r'.\n                              (\\<exists>f' g' h k.\n                                  r = f' \\<bind> h \\<and>\n                                  r' = g' \\<bind> k \\<and>\n                                  resumption_ord f' g' \\<and>\n                                  (\\<forall>x.\nresumption_ord (h x) (k x))) \\<or>\n                              resumption_ord r r')\n                          (Resumption.resumption.resume (f' \\<bind> h))\n                          (Resumption.resumption.resume (g' \\<bind> k))", "ultimately"], ["proof (chain)\npicking this:\n  Resumption.resumption.output (f' \\<bind> h) =\n  Resumption.resumption.output (g' \\<bind> k)\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))", "show ?case"], ["proof (prove)\nusing this:\n  Resumption.resumption.output (f' \\<bind> h) =\n  Resumption.resumption.output (g' \\<bind> k)\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))\n\ngoal (1 subgoal):\n 1. Resumption.resumption.output (f' \\<bind> h) =\n    Resumption.resumption.output (g' \\<bind> k) \\<and>\n    rel_fun (=)\n     (\\<lambda>r r'.\n         (\\<exists>f' g' h k.\n             r = f' \\<bind> h \\<and>\n             r' = g' \\<bind> k \\<and>\n             resumption_ord f' g' \\<and>\n             (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n         resumption_ord r r')\n     (Resumption.resumption.resume (f' \\<bind> h))\n     (Resumption.resumption.resume (g' \\<bind> k))", ".."], ["proof (state)\nthis:\n  Resumption.resumption.output (f' \\<bind> h) =\n  Resumption.resumption.output (g' \\<bind> k) \\<and>\n  rel_fun (=)\n   (\\<lambda>r r'.\n       (\\<exists>f' g' h k.\n           r = f' \\<bind> h \\<and>\n           r' = g' \\<bind> k \\<and>\n           resumption_ord f' g' \\<and>\n           (\\<forall>x. resumption_ord (h x) (k x))) \\<or>\n       resumption_ord r r')\n   (Resumption.resumption.resume (f' \\<bind> h))\n   (Resumption.resumption.resume (g' \\<bind> k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  resumption_ord (f' \\<bind> h) (g' \\<bind> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fixes f F\n  defines \"F \\<equiv> \\<lambda>results r. case r of resumption.Done x \\<Rightarrow> set_option x | resumption.Pause out c \\<Rightarrow> \\<Union>input. results (c input)\"\n  shows results_conv_fixp: \"results \\<equiv> ccpo.fixp (fun_lub Union) (fun_ord (\\<subseteq>)) F\" (is \"_ \\<equiv> ?fixp\")\n  and results_mono: \"\\<And>x. monotone (fun_ord (\\<subseteq>)) (\\<subseteq>) (\\<lambda>f. F f x)\" (is \"PROP ?mono\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (results \\<equiv> set.fixp_fun F) &&&\n    (\\<And>x. set.mono_body (\\<lambda>f. F f x))", "proof(rule eq_reflection ext antisym subsetI)+"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> results x \\<Longrightarrow> xa \\<in> set.fixp_fun F x\n 2. \\<And>x. set.fixp_fun F x \\<subseteq> results x\n 3. \\<And>x. set.mono_body (\\<lambda>f. F f x)", "show mono: \"PROP ?mono\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. set.mono_body (\\<lambda>f. F f x)", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       set.mono_body\n        (\\<lambda>f.\n            case x of\n            Resumption.resumption.Done x \\<Rightarrow> set_option x\n            | Resumption.resumption.Pause out c \\<Rightarrow>\n                \\<Union>input. f (c input))", "by(tactic \\<open>Partial_Function.mono_tac @{context} 1\\<close>)"], ["proof (state)\nthis:\n  set.mono_body (\\<lambda>f. F f ?x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> results x \\<Longrightarrow> xa \\<in> set.fixp_fun F x\n 2. \\<And>x. set.fixp_fun F x \\<subseteq> results x", "fix x r"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> results x \\<Longrightarrow> xa \\<in> set.fixp_fun F x\n 2. \\<And>x. set.fixp_fun F x \\<subseteq> results x", "show \"?fixp r \\<subseteq> results r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set.fixp_fun F r \\<subseteq> results r", "by(induction arbitrary: r rule: lfp.fixp_induct_uc[of \"\\<lambda>x. x\" F \"\\<lambda>x. x\", OF mono reflexive refl])\n      (fastforce simp add: F_def split: resumption.split_asm)+"], ["proof (state)\nthis:\n  set.fixp_fun F r \\<subseteq> results r\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> results x \\<Longrightarrow> xa \\<in> set.fixp_fun F x", "assume \"x \\<in> results r\""], ["proof (state)\nthis:\n  x \\<in> results r\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> results x \\<Longrightarrow> xa \\<in> set.fixp_fun F x", "thus \"x \\<in> ?fixp r\""], ["proof (prove)\nusing this:\n  x \\<in> results r\n\ngoal (1 subgoal):\n 1. x \\<in> set.fixp_fun F r", "by induct(subst lfp.mono_body_fixp[OF mono]; auto simp add: F_def)+"], ["proof (state)\nthis:\n  x \\<in> set.fixp_fun F r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mcont_case_resumption:\n  fixes f g\n  defines \"h \\<equiv> \\<lambda>r. if is_Done r then f (result r) else g (output r) (resume r) r\"\n  assumes mcont1: \"mcont (flat_lub None) option_ord lub ord f\"\n  and mcont2: \"\\<And>out. mcont (fun_lub resumption_lub) (fun_ord resumption_ord) lub ord (\\<lambda>c. g out c (Pause out c))\"\n  and ccpo: \"class.ccpo lub ord (mk_less ord)\"\n  and bot: \"\\<And>x. ord (f None) x\"\n  shows \"mcont resumption_lub resumption_ord lub ord (\\<lambda>r. case r of Done x \\<Rightarrow> f x | Pause out c \\<Rightarrow> g out c r)\"\n    (is \"mcont ?lub ?ord _ _ ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. mcont resumption_lub resumption_ord lub ord\n     (\\<lambda>r.\n         case r of Resumption.resumption.Done x \\<Rightarrow> f x\n         | Resumption.resumption.Pause out c \\<Rightarrow> g out c r)", "proof(rule resumption.mcont_if_bot[OF ccpo bot, where bound=ABORT and f=h])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       (case x of Resumption.resumption.Done x \\<Rightarrow> f x\n        | Resumption.resumption.Pause out c \\<Rightarrow> g out c x) =\n       (if resumption_ord x ABORT then f None else h x)\n 2. \\<And>x y.\n       \\<lbrakk>resumption_ord x y; \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> ord (h x) (h y)\n 3. \\<And>Y.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord Y;\n        Y \\<noteq> {};\n        \\<And>x.\n           x \\<in> Y \\<Longrightarrow>\n           \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> h (resumption_lub Y) = lub (h ` Y)", "show \"?f x = (if ?ord x ABORT then f None else h x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case x of Resumption.resumption.Done x \\<Rightarrow> f x\n     | Resumption.resumption.Pause out c \\<Rightarrow> g out c x) =\n    (if resumption_ord x ABORT then f None else h x)", "by(simp add: h_def split: resumption.split)"], ["proof (state)\nthis:\n  (case ?x of Resumption.resumption.Done x \\<Rightarrow> f x\n   | Resumption.resumption.Pause out c \\<Rightarrow> g out c ?x) =\n  (if resumption_ord ?x ABORT then f None else h ?x)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>resumption_ord x y; \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> ord (h x) (h y)\n 2. \\<And>Y.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord Y;\n        Y \\<noteq> {};\n        \\<And>x.\n           x \\<in> Y \\<Longrightarrow>\n           \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> h (resumption_lub Y) = lub (h ` Y)", "show \"ord (h x) (h y)\" if \"?ord x y\" \"\\<not> ?ord x ABORT\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord (h x) (h y)", "using that"], ["proof (prove)\nusing this:\n  resumption_ord x y\n  \\<not> resumption_ord x ABORT\n\ngoal (1 subgoal):\n 1. ord (h x) (h y)", "by(cases x)(simp_all add: h_def mcont_monoD[OF mcont1] fun_ord_conv_rel_fun mcont_monoD[OF mcont2])"], ["proof (state)\nthis:\n  \\<lbrakk>resumption_ord ?x ?y; \\<not> resumption_ord ?x ABORT\\<rbrakk>\n  \\<Longrightarrow> ord (h ?x) (h ?y)\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord Y;\n        Y \\<noteq> {};\n        \\<And>x.\n           x \\<in> Y \\<Longrightarrow>\n           \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> h (resumption_lub Y) = lub (h ` Y)", "fix Y :: \"('a, 'b, 'c) resumption set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord Y;\n        Y \\<noteq> {};\n        \\<And>x.\n           x \\<in> Y \\<Longrightarrow>\n           \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> h (resumption_lub Y) = lub (h ` Y)", "assume chain: \"Complete_Partial_Order.chain ?ord Y\"\n    and Y: \"Y \\<noteq> {}\"\n    and nbot: \"\\<And>x. x \\<in> Y \\<Longrightarrow> \\<not> ?ord x ABORT\""], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption_ord Y\n  Y \\<noteq> {}\n  ?x \\<in> Y \\<Longrightarrow> \\<not> resumption_ord ?x ABORT\n\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>Complete_Partial_Order.chain resumption_ord Y;\n        Y \\<noteq> {};\n        \\<And>x.\n           x \\<in> Y \\<Longrightarrow>\n           \\<not> resumption_ord x ABORT\\<rbrakk>\n       \\<Longrightarrow> h (resumption_lub Y) = lub (h ` Y)", "show \"h (?lub Y) = lub (h ` Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (resumption_lub Y) = lub (h ` Y)", "proof(cases \"\\<exists>x. DONE x \\<in> Y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "case True"], ["proof (state)\nthis:\n  \\<exists>x. DONE x \\<in> Y\n\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. DONE x \\<in> Y", "obtain x where x: \"DONE x \\<in> Y\""], ["proof (prove)\nusing this:\n  \\<exists>x. DONE x \\<in> Y\n\ngoal (1 subgoal):\n 1. (\\<And>x. DONE x \\<in> Y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  DONE x \\<in> Y\n\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have is_Done: \"is_Done r\" if \"r \\<in> Y\" for r"], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r", "using chainD[OF chain that x]"], ["proof (prove)\nusing this:\n  resumption_ord r (DONE x) \\<or> resumption_ord (DONE x) r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done r", "by(auto dest: resumption_ord_is_DoneD)"], ["proof (state)\nthis:\n  ?r \\<in> Y \\<Longrightarrow> Resumption.resumption.is_Done ?r\n\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "from is_Done"], ["proof (chain)\npicking this:\n  ?r \\<in> Y \\<Longrightarrow> Resumption.resumption.is_Done ?r", "have chain': \"Complete_Partial_Order.chain (flat_ord None) (result ` Y)\""], ["proof (prove)\nusing this:\n  ?r \\<in> Y \\<Longrightarrow> Resumption.resumption.is_Done ?r\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain option_ord\n     (Resumption.resumption.result ` Y)", "by(auto 5 2 intro!: chainI elim: chainE[OF chain] dest: resumption_ord_resultD)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain option_ord (Resumption.resumption.result ` Y)\n\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "from is_Done"], ["proof (chain)\npicking this:\n  ?r \\<in> Y \\<Longrightarrow> Resumption.resumption.is_Done ?r", "have \"is_Done (?lub Y)\" \"Y \\<inter> {r. is_Done r} = Y\" \"Y \\<inter> {r. \\<not> is_Done r} = {}\""], ["proof (prove)\nusing this:\n  ?r \\<in> Y \\<Longrightarrow> Resumption.resumption.is_Done ?r\n\ngoal (1 subgoal):\n 1. Resumption.resumption.is_Done (resumption_lub Y) &&&\n    Y \\<inter> {r. Resumption.resumption.is_Done r} = Y &&&\n    Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = {}", "by auto"], ["proof (state)\nthis:\n  Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = Y\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = {}\n\ngoal (2 subgoals):\n 1. \\<exists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)\n 2. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "then"], ["proof (chain)\npicking this:\n  Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = Y\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = Y\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = {}\n\ngoal (1 subgoal):\n 1. h (resumption_lub Y) = lub (h ` Y)", "using Y"], ["proof (prove)\nusing this:\n  Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = Y\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = {}\n  Y \\<noteq> {}\n\ngoal (1 subgoal):\n 1. h (resumption_lub Y) = lub (h ` Y)", "by(simp add: h_def mcont_contD[OF mcont1 chain'] image_image)"], ["proof (state)\nthis:\n  h (resumption_lub Y) = lub (h ` Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. DONE x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have is_Done: \"\\<not> is_Done r\" if \"r \\<in> Y\" for r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done r", "using that False nbot"], ["proof (prove)\nusing this:\n  r \\<in> Y\n  \\<nexists>x. DONE x \\<in> Y\n  ?x \\<in> Y \\<Longrightarrow> \\<not> resumption_ord ?x ABORT\n\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done r", "by(auto elim!: is_Done_cases)"], ["proof (state)\nthis:\n  ?r \\<in> Y \\<Longrightarrow> \\<not> Resumption.resumption.is_Done ?r\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "from Y"], ["proof (chain)\npicking this:\n  Y \\<noteq> {}", "obtain out c where Pause: \"Pause out c \\<in> Y\""], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>out c.\n        Resumption.resumption.Pause out c \\<in> Y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto 5 2 dest: is_Done iff: not_is_Done_conv_Pause)"], ["proof (state)\nthis:\n  Resumption.resumption.Pause out c \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have out: \"(THE out. out \\<in> output ` (Y \\<inter> {r. \\<not> is_Done r})) = out\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE out.\n        out\n        \\<in> Resumption.resumption.output `\n              (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})) =\n    out", "using Pause"], ["proof (prove)\nusing this:\n  Resumption.resumption.Pause out c \\<in> Y\n\ngoal (1 subgoal):\n 1. (THE out.\n        out\n        \\<in> Resumption.resumption.output `\n              (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})) =\n    out", "by(auto 4 3 intro: rev_image_eqI iff: not_is_Done_conv_Pause dest: chainD[OF chain])"], ["proof (state)\nthis:\n  (THE out.\n      out\n      \\<in> Resumption.resumption.output `\n            (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})) =\n  out\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have \"(\\<lambda>r. g (output r) (resume r) r) ` (Y \\<inter> {r. \\<not> is_Done r}) = (\\<lambda>r. g out (resume r) r) ` (Y \\<inter> {r. \\<not> is_Done r})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>r.\n        g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n         r) `\n    (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n    (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n    (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})", "by(auto 4 3 simp add: not_is_Done_conv_Pause dest: chainD[OF chain Pause] intro: rev_image_eqI)"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n       r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n       r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have \"\\<not> is_Done (?lub Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done (resumption_lub Y)", "using Y is_Done"], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n  ?r \\<in> Y \\<Longrightarrow> \\<not> Resumption.resumption.is_Done ?r\n\ngoal (1 subgoal):\n 1. \\<not> Resumption.resumption.is_Done (resumption_lub Y)", "by(auto)"], ["proof (state)\nthis:\n  \\<not> Resumption.resumption.is_Done (resumption_lub Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  \\<not> Resumption.resumption.is_Done (resumption_lub Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "from is_Done"], ["proof (chain)\npicking this:\n  ?r \\<in> Y \\<Longrightarrow> \\<not> Resumption.resumption.is_Done ?r", "have \"Y \\<inter> {r. is_Done r} = {}\" \"Y \\<inter> {r. \\<not> is_Done r} = Y\""], ["proof (prove)\nusing this:\n  ?r \\<in> Y \\<Longrightarrow> \\<not> Resumption.resumption.is_Done ?r\n\ngoal (1 subgoal):\n 1. Y \\<inter> {r. Resumption.resumption.is_Done r} = {} &&&\n    Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y", "by auto"], ["proof (state)\nthis:\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = {}\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = {}\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have \"(\\<lambda>inp. resumption_lub ((\\<lambda>x. resume x inp) ` Y)) = fun_lub resumption_lub (resume ` Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>inp.\n        resumption_lub\n         ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n    resumption.lub_fun (Resumption.resumption.resume ` Y)", "by(auto simp add: fun_lub_def fun_eq_iff intro!: arg_cong[where f=\"resumption_lub\"])"], ["proof (state)\nthis:\n  (\\<lambda>inp.\n      resumption_lub\n       ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n  resumption.lub_fun (Resumption.resumption.resume ` Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>inp.\n      resumption_lub\n       ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n  resumption.lub_fun (Resumption.resumption.resume ` Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have \"resumption_lub Y = Pause out (fun_lub resumption_lub (resume ` Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_lub Y =\n    Resumption.resumption.Pause out\n     (resumption.lub_fun (Resumption.resumption.resume ` Y))", "using Y is_Done out"], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n  ?r \\<in> Y \\<Longrightarrow> \\<not> Resumption.resumption.is_Done ?r\n  (THE out.\n      out\n      \\<in> Resumption.resumption.output `\n            (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})) =\n  out\n\ngoal (1 subgoal):\n 1. resumption_lub Y =\n    Resumption.resumption.Pause out\n     (resumption.lub_fun (Resumption.resumption.resume ` Y))", "by(intro resumption.expand)(auto simp add: fun_lub_def fun_eq_iff image_image intro!: arg_cong[where f=resumption_lub])"], ["proof (state)\nthis:\n  resumption_lub Y =\n  Resumption.resumption.Pause out\n   (resumption.lub_fun (Resumption.resumption.resume ` Y))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  resumption_lub Y =\n  Resumption.resumption.Pause out\n   (resumption.lub_fun (Resumption.resumption.resume ` Y))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have chain': \"Complete_Partial_Order.chain resumption.le_fun (resume ` Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption.le_fun\n     (Resumption.resumption.resume ` Y)", "using chain"], ["proof (prove)\nusing this:\n  Complete_Partial_Order.chain resumption_ord Y\n\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain resumption.le_fun\n     (Resumption.resumption.resume ` Y)", "by(rule chain_imageI)(auto dest!: is_Done simp add: not_is_Done_conv_Pause fun_ord_conv_rel_fun)"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption.le_fun\n   (Resumption.resumption.resume ` Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "moreover"], ["proof (state)\nthis:\n  Complete_Partial_Order.chain resumption.le_fun\n   (Resumption.resumption.resume ` Y)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "have \"(\\<lambda>r. g out (resume r) (Pause out (resume r))) ` Y = (\\<lambda>r. g out (resume r) r) ` Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>r.\n        g out (Resumption.resumption.resume r)\n         (Resumption.resumption.Pause out\n           (Resumption.resumption.resume r))) `\n    Y =\n    (\\<lambda>r. g out (Resumption.resumption.resume r) r) ` Y", "by(intro image_cong[OF refl])(frule nbot; auto dest!: chainD[OF chain Pause] elim: resumption_ord.cases)"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      g out (Resumption.resumption.resume r)\n       (Resumption.resumption.Pause out (Resumption.resumption.resume r))) `\n  Y =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) ` Y\n\ngoal (1 subgoal):\n 1. \\<nexists>x. DONE x \\<in> Y \\<Longrightarrow>\n    h (resumption_lub Y) = lub (h ` Y)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>r.\n      g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n       r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})\n  \\<not> Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = {}\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y\n  (\\<lambda>inp.\n      resumption_lub\n       ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n  resumption.lub_fun (Resumption.resumption.resume ` Y)\n  resumption_lub Y =\n  Resumption.resumption.Pause out\n   (resumption.lub_fun (Resumption.resumption.resume ` Y))\n  Complete_Partial_Order.chain resumption.le_fun\n   (Resumption.resumption.resume ` Y)\n  (\\<lambda>r.\n      g out (Resumption.resumption.resume r)\n       (Resumption.resumption.Pause out (Resumption.resumption.resume r))) `\n  Y =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) ` Y", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>r.\n      g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n       r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})\n  \\<not> Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = {}\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y\n  (\\<lambda>inp.\n      resumption_lub\n       ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n  resumption.lub_fun (Resumption.resumption.resume ` Y)\n  resumption_lub Y =\n  Resumption.resumption.Pause out\n   (resumption.lub_fun (Resumption.resumption.resume ` Y))\n  Complete_Partial_Order.chain resumption.le_fun\n   (Resumption.resumption.resume ` Y)\n  (\\<lambda>r.\n      g out (Resumption.resumption.resume r)\n       (Resumption.resumption.Pause out (Resumption.resumption.resume r))) `\n  Y =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) ` Y\n\ngoal (1 subgoal):\n 1. h (resumption_lub Y) = lub (h ` Y)", "using False out Y"], ["proof (prove)\nusing this:\n  (\\<lambda>r.\n      g (Resumption.resumption.output r) (Resumption.resumption.resume r)\n       r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r}) =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) `\n  (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})\n  \\<not> Resumption.resumption.is_Done (resumption_lub Y)\n  Y \\<inter> {r. Resumption.resumption.is_Done r} = {}\n  Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r} = Y\n  (\\<lambda>inp.\n      resumption_lub\n       ((\\<lambda>x. Resumption.resumption.resume x inp) ` Y)) =\n  resumption.lub_fun (Resumption.resumption.resume ` Y)\n  resumption_lub Y =\n  Resumption.resumption.Pause out\n   (resumption.lub_fun (Resumption.resumption.resume ` Y))\n  Complete_Partial_Order.chain resumption.le_fun\n   (Resumption.resumption.resume ` Y)\n  (\\<lambda>r.\n      g out (Resumption.resumption.resume r)\n       (Resumption.resumption.Pause out (Resumption.resumption.resume r))) `\n  Y =\n  (\\<lambda>r. g out (Resumption.resumption.resume r) r) ` Y\n  \\<nexists>x. DONE x \\<in> Y\n  (THE out.\n      out\n      \\<in> Resumption.resumption.output `\n            (Y \\<inter> {r. \\<not> Resumption.resumption.is_Done r})) =\n  out\n  Y \\<noteq> {}\n\ngoal (1 subgoal):\n 1. h (resumption_lub Y) = lub (h ` Y)", "by(simp add: h_def image_image mcont_contD[OF mcont2])"], ["proof (state)\nthis:\n  h (resumption_lub Y) = lub (h ` Y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h (resumption_lub Y) = lub (h ` Y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mcont2mcont_results[THEN mcont2mcont, cont_intro, simp]:\n  shows mcont_results: \"mcont resumption_lub resumption_ord Union (\\<subseteq>) results\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>) results", "apply(rule lfp.fixp_preserves_mcont1[OF results_mono results_conv_fixp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        (\\<lambda>r.\n            case r of\n            Resumption.resumption.Done x \\<Rightarrow> set_option x\n            | Resumption.resumption.Pause out c \\<Rightarrow>\n                \\<Union>input. f (c input))", "apply(rule mcont_case_resumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       mcont (flat_lub None) option_ord \\<Union> (\\<subseteq>) set_option\n 2. \\<And>f out.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       mcont resumption.lub_fun resumption.le_fun \\<Union> (\\<subseteq>)\n        (\\<lambda>c. \\<Union>input. f (c input))\n 3. \\<And>f.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       class.ccpo \\<Union> (\\<subseteq>) (mk_less (\\<subseteq>))\n 4. \\<And>f x.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       set_option None \\<subseteq> x", "apply(simp_all add: mcont_applyI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono2mono_results[THEN lfp.mono2mono, cont_intro, simp]:\n  shows monotone_results: \"monotone resumption_ord (\\<subseteq>) results\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone resumption_ord (\\<subseteq>) results", "using mcont_results"], ["proof (prove)\nusing this:\n  mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>) results\n\ngoal (1 subgoal):\n 1. monotone resumption_ord (\\<subseteq>) results", "by(rule mcont_mono)"], ["", "lemma fixes f F\n  defines \"F \\<equiv> \\<lambda>outputs xs. case xs of resumption.Done x \\<Rightarrow> {} | resumption.Pause out c \\<Rightarrow> insert out (\\<Union>input. outputs (c input))\"\n  shows outputs_conv_fixp: \"outputs \\<equiv> ccpo.fixp (fun_lub Union) (fun_ord (\\<subseteq>)) F\" (is \"_ \\<equiv> ?fixp\")\n  and outputs_mono: \"\\<And>x. monotone (fun_ord (\\<subseteq>)) (\\<subseteq>) (\\<lambda>f. F f x)\" (is \"PROP ?mono\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (outputs \\<equiv> set.fixp_fun F) &&&\n    (\\<And>x. set.mono_body (\\<lambda>f. F f x))", "proof(rule eq_reflection ext antisym subsetI)+"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> outputs x \\<Longrightarrow> xa \\<in> set.fixp_fun F x\n 2. \\<And>x. set.fixp_fun F x \\<subseteq> outputs x\n 3. \\<And>x. set.mono_body (\\<lambda>f. F f x)", "show mono: \"PROP ?mono\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. set.mono_body (\\<lambda>f. F f x)", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       set.mono_body\n        (\\<lambda>f.\n            case x of Resumption.resumption.Done x \\<Rightarrow> {}\n            | Resumption.resumption.Pause out c \\<Rightarrow>\n                insert out (\\<Union>input. f (c input)))", "by(tactic \\<open>Partial_Function.mono_tac @{context} 1\\<close>)"], ["proof (state)\nthis:\n  set.mono_body (\\<lambda>f. F f ?x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> outputs x \\<Longrightarrow> xa \\<in> set.fixp_fun F x\n 2. \\<And>x. set.fixp_fun F x \\<subseteq> outputs x", "show \"?fixp r \\<subseteq> outputs r\" for r"], ["proof (prove)\ngoal (1 subgoal):\n 1. set.fixp_fun F r \\<subseteq> outputs r", "by(induct arbitrary: r rule: lfp.fixp_induct_uc[of \"\\<lambda>x. x\" F \"\\<lambda>x. x\", OF mono reflexive refl])(auto simp add: F_def split: resumption.split)"], ["proof (state)\nthis:\n  set.fixp_fun F ?r \\<subseteq> outputs ?r\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> outputs x \\<Longrightarrow> xa \\<in> set.fixp_fun F x", "show \"x \\<in> ?fixp r\" if \"x \\<in> outputs r\" for x r"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set.fixp_fun F r", "using that"], ["proof (prove)\nusing this:\n  x \\<in> outputs r\n\ngoal (1 subgoal):\n 1. x \\<in> set.fixp_fun F r", "by induct(subst lfp.mono_body_fixp[OF mono]; auto simp add: F_def; fail)+"], ["proof (state)\nthis:\n  ?x \\<in> outputs ?r \\<Longrightarrow> ?x \\<in> set.fixp_fun F ?r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mcont2mcont_outputs[THEN lfp.mcont2mcont, cont_intro, simp]: \n  shows mcont_outputs: \"mcont resumption_lub resumption_ord Union (\\<subseteq>) outputs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>) outputs", "apply(rule lfp.fixp_preserves_mcont1[OF outputs_mono outputs_conv_fixp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        f \\<Longrightarrow>\n       mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>)\n        (\\<lambda>xs.\n            case xs of Resumption.resumption.Done x \\<Rightarrow> {}\n            | Resumption.resumption.Pause out c \\<Rightarrow>\n                insert out (\\<Union>input. f (c input)))", "apply(auto intro: lfp.mcont2mcont intro!: mcont2mcont_insert mcont_SUP mcont_case_resumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono2mono_outputs[THEN lfp.mono2mono, cont_intro, simp]:\n  shows monotone_outputs: \"monotone resumption_ord (\\<subseteq>) outputs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone resumption_ord (\\<subseteq>) outputs", "using mcont_outputs"], ["proof (prove)\nusing this:\n  mcont resumption_lub resumption_ord \\<Union> (\\<subseteq>) outputs\n\ngoal (1 subgoal):\n 1. monotone resumption_ord (\\<subseteq>) outputs", "by(rule mcont_mono)"], ["", "lemma pred_resumption_antimono:\n  assumes r: \"pred_resumption A C r'\"\n  and le: \"resumption_ord r r'\"\n  shows \"pred_resumption A C r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.pred_resumption A C r", "using r monotoneD[OF monotone_results le] monotoneD[OF monotone_outputs le]"], ["proof (prove)\nusing this:\n  Resumption.resumption.pred_resumption A C r'\n  results r \\<subseteq> results r'\n  outputs r \\<subseteq> outputs r'\n\ngoal (1 subgoal):\n 1. Resumption.resumption.pred_resumption A C r", "by(auto simp add: pred_resumption_def)"], ["", "subsection \\<open>Setup for lifting and transfer\\<close>"], ["", "declare resumption.rel_eq [id_simps, relator_eq]"], ["", "declare resumption.rel_mono [relator_mono]"], ["", "lemma rel_resumption_OO [relator_distr]:\n  \"rel_resumption A B OO rel_resumption C D = rel_resumption (A OO C) (B OO D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Resumption.resumption.rel_resumption A B OO\n    Resumption.resumption.rel_resumption C D =\n    Resumption.resumption.rel_resumption (A OO C) (B OO D)", "by(simp add: resumption.rel_compp)"], ["", "lemma left_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> left_total R1; left_total R2 \\<rbrakk> \\<Longrightarrow> left_total (rel_resumption R1 R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_total R1; left_total R2\\<rbrakk>\n    \\<Longrightarrow> left_total\n                       (Resumption.resumption.rel_resumption R1 R2)", "by(simp only: left_total_alt_def resumption.rel_eq[symmetric] resumption.rel_conversep[symmetric] rel_resumption_OO resumption.rel_mono)"], ["", "lemma left_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> left_unique R1; left_unique R2 \\<rbrakk> \\<Longrightarrow> left_unique (rel_resumption R1 R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_unique R1; left_unique R2\\<rbrakk>\n    \\<Longrightarrow> left_unique\n                       (Resumption.resumption.rel_resumption R1 R2)", "by(simp only: left_unique_alt_def resumption.rel_eq[symmetric] resumption.rel_conversep[symmetric] rel_resumption_OO resumption.rel_mono)"], ["", "lemma right_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> right_total R1; right_total R2 \\<rbrakk> \\<Longrightarrow> right_total (rel_resumption R1 R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>right_total R1; right_total R2\\<rbrakk>\n    \\<Longrightarrow> right_total\n                       (Resumption.resumption.rel_resumption R1 R2)", "by(simp only: right_total_alt_def resumption.rel_eq[symmetric] resumption.rel_conversep[symmetric] rel_resumption_OO resumption.rel_mono)"], ["", "lemma right_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> right_unique R1; right_unique R2 \\<rbrakk> \\<Longrightarrow> right_unique (rel_resumption R1 R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>right_unique R1; right_unique R2\\<rbrakk>\n    \\<Longrightarrow> right_unique\n                       (Resumption.resumption.rel_resumption R1 R2)", "by(simp only: right_unique_alt_def resumption.rel_eq[symmetric] resumption.rel_conversep[symmetric] rel_resumption_OO resumption.rel_mono)"], ["", "lemma bi_total_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> bi_total A; bi_total B \\<rbrakk> \\<Longrightarrow> bi_total (rel_resumption A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bi_total A; bi_total B\\<rbrakk>\n    \\<Longrightarrow> bi_total (Resumption.resumption.rel_resumption A B)", "unfolding bi_total_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_total A \\<and> right_total A;\n     left_total B \\<and> right_total B\\<rbrakk>\n    \\<Longrightarrow> left_total\n                       (Resumption.resumption.rel_resumption A B) \\<and>\n                      right_total (Resumption.resumption.rel_resumption A B)", "by(blast intro: left_total_rel_resumption right_total_rel_resumption)"], ["", "lemma bi_unique_rel_resumption [transfer_rule]:\n  \"\\<lbrakk> bi_unique A; bi_unique B \\<rbrakk> \\<Longrightarrow> bi_unique (rel_resumption A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bi_unique A; bi_unique B\\<rbrakk>\n    \\<Longrightarrow> bi_unique (Resumption.resumption.rel_resumption A B)", "unfolding bi_unique_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>left_unique A \\<and> right_unique A;\n     left_unique B \\<and> right_unique B\\<rbrakk>\n    \\<Longrightarrow> left_unique\n                       (Resumption.resumption.rel_resumption A B) \\<and>\n                      right_unique\n                       (Resumption.resumption.rel_resumption A B)", "by(blast intro: left_unique_rel_resumption right_unique_rel_resumption)"], ["", "lemma Quotient_resumption [quot_map]:\n  \"\\<lbrakk> Quotient R1 Abs1 Rep1 T1; Quotient R2 Abs2 Rep2 T2 \\<rbrakk>\n  \\<Longrightarrow> Quotient (rel_resumption R1 R2) (map_resumption Abs1 Abs2) (map_resumption Rep1 Rep2) (rel_resumption T1 T2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Quotient R1 Abs1 Rep1 T1; Quotient R2 Abs2 Rep2 T2\\<rbrakk>\n    \\<Longrightarrow> Quotient (Resumption.resumption.rel_resumption R1 R2)\n                       (Resumption.resumption.map_resumption Abs1 Abs2)\n                       (Resumption.resumption.map_resumption Rep1 Rep2)\n                       (Resumption.resumption.rel_resumption T1 T2)", "by(simp add: Quotient_alt_def5 resumption.rel_Grp[of UNIV _ UNIV _, symmetric, simplified] resumption.rel_compp resumption.rel_conversep[symmetric] resumption.rel_mono)"], ["", "end"]]}