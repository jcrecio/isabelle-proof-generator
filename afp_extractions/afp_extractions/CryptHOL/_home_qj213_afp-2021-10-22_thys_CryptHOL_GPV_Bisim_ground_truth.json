{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptHOL/GPV_Bisim.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptHOL", "problem_names": ["lemma exec_gpv_oracle_bisim':\n  assumes *: \"X s1 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma exec_gpv_oracle_bisim:\n  assumes *: \"X s1 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  and R: \"\\<And>x s1' s2'. \\<lbrakk> X s1' s2'; (x, s1') \\<in> set_spmf (exec_gpv oracle1 gpv s1); (x, s2') \\<in> set_spmf (exec_gpv oracle2 gpv s2) \\<rbrakk> \\<Longrightarrow> R (x, s1') (x, s2')\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma run_gpv_oracle_bisim:\n  assumes  \"X s1 s2\"\n  and \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  shows \"run_gpv oracle1 gpv s1 = run_gpv oracle2 gpv s2\"", "lemma exec_until_bad_fixp_induct [case_names adm bottom step]:\n  assumes \"ccpo.admissible (fun_lub lub_spmf) (fun_ord (ord_spmf (=))) (\\<lambda>f. P (\\<lambda>gpv s1 s2. f ((gpv, s1), s2)))\"\n  and \"P (\\<lambda>_ _ _. return_pmf None)\"\n  and \"\\<And>exec_until_bad'. P exec_until_bad' \\<Longrightarrow> \n     P (\\<lambda>gpv s1 s2. if bad1 s1 \\<or> bad2 s2 then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n     else bind_spmf (the_gpv gpv) (\\<lambda>generat.\n     case generat of Pure x \\<Rightarrow> return_spmf ((x, s1), (x, s2))\n     | IO out f \\<Rightarrow> bind_spmf (joint_oracle (s1, s2) out) (\\<lambda>((x, s1'), (y, s2')). \n       if bad1 s1' \\<or> bad2 s2' then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2') \n       else exec_until_bad' (f x) s1' s2')))\"\n  shows \"P exec_until_bad\"", "lemma exec_gpv_oracle_bisim_bad_plossless:\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"plossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\" (* stronger than the invariants above because unconditional *)\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"\n  (is \"rel_spmf ?R ?p ?q\")", "lemma exec_gpv_oracle_bisim_bad':\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\" (* stronger than the invariants above because unconditional *)\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma exec_gpv_oracle_bisim_bad_invariant:\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\" and I1 :: \"'s1 \\<Rightarrow> bool\" and I2 :: \"'s2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I>; I1 s1; I2 s2 \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. \\<lbrakk> bad2 s2; I2 s2 \\<rbrakk> \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. \\<lbrakk> bad1 s1; I1 s1 \\<rbrakk> \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; I1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; I2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  and I1: \"callee_invariant_on oracle1 I1 \\<I>\"\n  and I2: \"callee_invariant_on oracle2 I2 \\<I>\"\n  and s1: \"I1 s1\"\n  and s2: \"I2 s2\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma exec_gpv_oracle_bisim_bad:\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. bad1 s1 \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. bad2 s2 \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\"\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  and R: \"\\<And>a s1 b s2. \\<lbrakk> bad1 s1 = bad2 s2; \\<not> bad2 s2 \\<Longrightarrow> a = b \\<and> X s1 s2; bad2 s2 \\<Longrightarrow> X_bad s1 s2 \\<rbrakk> \\<Longrightarrow> R (a, s1) (b, s2)\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma exec_gpv_oracle_bisim_bad_full:\n  assumes \"X s1 s2\"\n  and \"bad1 s1 = bad2 s2\"\n  and \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (\\<not> bad2 s2' \\<longrightarrow> a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and \"callee_invariant oracle1 bad1\"\n  and \"callee_invariant oracle2 bad2\"\n  and \"\\<And>s1 x. bad1 s1 \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and \"\\<And>s2 x. bad2 s2 \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and \"lossless_gpv \\<I>_full gpv\"\n  and R: \"\\<And>a s1 b s2. \\<lbrakk> bad1 s1 = bad2 s2; \\<not> bad2 s2 \\<Longrightarrow> a = b \\<and> X s1 s2 \\<rbrakk> \\<Longrightarrow> R (a, s1) (b, s2)\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"", "lemma max_enn2ereal: \"max (enn2ereal x) (enn2ereal y) = enn2ereal (max x y)\"", "lemma identical_until_bad:\n  assumes bad_eq: \"map_spmf bad p = map_spmf bad q\"\n  and not_bad: \"measure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p)) (A \\<times> {False}) = measure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q)) (A \\<times> {False})\"\n  shows \"\\<bar>measure (measure_spmf (map_spmf f p)) A - measure (measure_spmf (map_spmf f q)) A\\<bar> \\<le> spmf (map_spmf bad p) True\"", "lemma (in callee_invariant_on) exec_gpv_bind_materialize:\n  fixes f :: \"'s \\<Rightarrow> 'r spmf\"\n  and g :: \"'x \\<times> 's \\<Rightarrow> 'r \\<Rightarrow> 'y spmf\"\n  and s :: \"'s\"\n  defines \"exec_gpv2 \\<equiv> exec_gpv\"\n  assumes cond: \"\\<And>s x y s'. \\<lbrakk> (y, s') \\<in> set_spmf (callee s x); I s \\<rbrakk> \\<Longrightarrow> f s = f s'\"\n  and \\<I>: \"\\<I> = \\<I>_full\" (* TODO: generalize *)\n  shows \"bind_spmf (exec_gpv callee gpv s) (\\<lambda>as. bind_spmf (f (snd as)) (g as)) =\n    exec_gpv2 (\\<lambda>(r, s) x. bind_spmf (callee s x) (\\<lambda>(y, s'). if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, (Some r, s'))) (f s') else return_spmf (y, (r, s')))) gpv (None, s)\n    \\<bind> (\\<lambda>(a, r, s). case r of None \\<Rightarrow> bind_spmf (f s) (g (a, s)) | Some r' \\<Rightarrow> g (a, s) r')\"\n    (is \"?lhs = ?rhs\" is \"_ = bind_spmf (exec_gpv2 ?callee2 _ _) _\")", "lemma gpv_stop_Done [simp]: \"gpv_stop (Done x) = Done (Some x)\"", "lemma gpv_stop_Fail [simp]: \"gpv_stop Fail = Fail\"", "lemma gpv_stop_Pause [simp]: \"gpv_stop (Pause out rpv) = Pause out (\\<lambda>input. case input of None \\<Rightarrow> Done None | Some input' \\<Rightarrow> gpv_stop (rpv input'))\"", "lemma gpv_stop_lift_spmf [simp]: \"gpv_stop (lift_spmf p) = lift_spmf (map_spmf Some p)\"", "lemma gpv_stop_bind [simp]:\n  \"gpv_stop (bind_gpv gpv f) = bind_gpv (gpv_stop gpv) (\\<lambda>x. case x of None \\<Rightarrow> Done None | Some x' \\<Rightarrow> gpv_stop (f x'))\"", "lemma gpv_stop_parametric':\n  notes [transfer_rule] = the_gpv_parametric' the_gpv_parametric' Done_parametric' corec_gpv_parametric'\n  shows \"(rel_gpv'' A C R ===> rel_gpv'' (rel_option A) C (rel_option R)) gpv_stop gpv_stop\"", "lemma gpv_stop_parametric [transfer_rule]:\n  shows \"(rel_gpv A C ===> rel_gpv (rel_option A) C) gpv_stop gpv_stop\"", "lemma gpv_stop_transfer:\n  \"(rel_gpv'' A B C ===> rel_gpv'' (pcr_Some A) B (pcr_Some C)) (\\<lambda>x. x) gpv_stop\"", "lemma gpv_stop_map' [simp]:\n  \"gpv_stop (map_gpv' f g h gpv) = map_gpv' (map_option f) g (map_option h) (gpv_stop gpv)\"", "lemma interaction_bound_gpv_stop [simp]:\n  \"interaction_bound consider (gpv_stop gpv) = interaction_bound consider gpv\"", "lemma ord_spmf_exec_gpv_stop: (* TODO: generalize ord_spmf to support different type variables *)\n  fixes callee1 :: \"('c, 'r option, 's) callee\"\n  and callee2 :: \"('c, 'r option, 's) callee\"\n  and S :: \"'s \\<Rightarrow> 's \\<Rightarrow> bool\"\n  and gpv :: \"('a, 'c, 'r) gpv\"\n  assumes bisim:\n    \"\\<And>s1 s2 x. \\<lbrakk> S s1 s2; \\<not> stop s2 \\<rbrakk> \\<Longrightarrow> \n    ord_spmf (\\<lambda>(r1, s1') (r2, s2'). le_option r2 r1 \\<and> S s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None \\<longleftrightarrow> stop s2'))\n      (callee1 s1 x) (callee2 s2 x)\"\n  and init: \"S s1 s2\"\n  and go: \"\\<not> stop s2\"\n  and sticking: \"\\<And>s1 s2 x y s1'. \\<lbrakk> (y, s1') \\<in> set_spmf (callee1 s1 x); S s1 s2; stop s2 \\<rbrakk> \\<Longrightarrow> S s1' s2\"\n  shows \"ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)\""], "translations": [["", "lemma exec_gpv_oracle_bisim':\n  assumes *: \"X s1 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2')\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "by(rule exec_gpv_parametric[of X \"(=)\" \"(=)\", unfolded gpv.rel_eq rel_prod_conv, THEN rel_funD, THEN rel_funD, THEN rel_funD, OF rel_funI refl, OF rel_funI *])(simp add: bisim)"], ["", "lemma exec_gpv_oracle_bisim:\n  assumes *: \"X s1 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  and R: \"\\<And>x s1' s2'. \\<lbrakk> X s1' s2'; (x, s1') \\<in> set_spmf (exec_gpv oracle1 gpv s1); (x, s2') \\<in> set_spmf (exec_gpv oracle2 gpv s2) \\<rbrakk> \\<Longrightarrow> R (x, s1') (x, s2')\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "apply(rule spmf_rel_mono_strong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rel_spmf ?A (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set_spmf (exec_gpv oracle1 gpv s1);\n        y \\<in> set_spmf (exec_gpv oracle2 gpv s2); ?A x y\\<rbrakk>\n       \\<Longrightarrow> R x y", "apply(rule exec_gpv_oracle_bisim'[OF * bisim])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> X s1 s2\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set_spmf (exec_gpv oracle1 gpv s1);\n        y \\<in> set_spmf (exec_gpv oracle2 gpv s2);\n        (case x of\n         (a, s1') \\<Rightarrow> \\<lambda>(b, s2'). a = b \\<and> X s1' s2')\n         y\\<rbrakk>\n       \\<Longrightarrow> R x y", "apply(auto dest: R)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_gpv_oracle_bisim:\n  assumes  \"X s1 s2\"\n  and \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2') (oracle1 s1 x) (oracle2 s2 x)\"\n  shows \"run_gpv oracle1 gpv s1 = run_gpv oracle2 gpv s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run_gpv oracle1 gpv s1 = run_gpv oracle2 gpv s2", "using exec_gpv_oracle_bisim'[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>s1 s2 x.\n      X s1 s2 \\<Longrightarrow>\n      X (?s1.2 s1 x) (?s2.4 s2 x)) \\<Longrightarrow>\n  rel_spmf (\\<lambda>(a, s1') (b, s2'). a = b \\<and> X s1' s2')\n   (exec_gpv (\\<lambda>s1 x. oracle1 (?s1.2 s1 x) (?x5 x)) ?gpv s1)\n   (exec_gpv (\\<lambda>s2 x. oracle2 (?s2.4 s2 x) (?x5 x)) ?gpv s2)\n\ngoal (1 subgoal):\n 1. run_gpv oracle1 gpv s1 = run_gpv oracle2 gpv s2", "by(fold spmf_rel_eq)(fastforce simp add: spmf_rel_map intro: rel_spmf_mono)"], ["", "context\n  fixes joint_oracle :: \"('s1 \\<times> 's2) \\<Rightarrow> 'a \\<Rightarrow> (('b \\<times> 's1) \\<times> ('b \\<times> 's2)) spmf\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and bad1 :: \"'s1 \\<Rightarrow> bool\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  and bad2 :: \"'s2 \\<Rightarrow> bool\"\nbegin"], ["", "partial_function (spmf) exec_until_bad :: \"('x, 'a, 'b) gpv \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> (('x \\<times> 's1) \\<times> ('x \\<times> 's2)) spmf\"\nwhere\n  \"exec_until_bad gpv s1 s2 = \n  (if bad1 s1 \\<or> bad2 s2 then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n  else bind_spmf (the_gpv gpv) (\\<lambda>generat.\n     case generat of Pure x \\<Rightarrow> return_spmf ((x, s1), (x, s2))\n     | IO out f \\<Rightarrow> bind_spmf (joint_oracle (s1, s2) out) (\\<lambda>((x, s1'), (y, s2')). \n       if bad1 s1' \\<or> bad2 s2' then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n       else exec_until_bad (f x) s1' s2')))\""], ["", "lemma exec_until_bad_fixp_induct [case_names adm bottom step]:\n  assumes \"ccpo.admissible (fun_lub lub_spmf) (fun_ord (ord_spmf (=))) (\\<lambda>f. P (\\<lambda>gpv s1 s2. f ((gpv, s1), s2)))\"\n  and \"P (\\<lambda>_ _ _. return_pmf None)\"\n  and \"\\<And>exec_until_bad'. P exec_until_bad' \\<Longrightarrow> \n     P (\\<lambda>gpv s1 s2. if bad1 s1 \\<or> bad2 s2 then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n     else bind_spmf (the_gpv gpv) (\\<lambda>generat.\n     case generat of Pure x \\<Rightarrow> return_spmf ((x, s1), (x, s2))\n     | IO out f \\<Rightarrow> bind_spmf (joint_oracle (s1, s2) out) (\\<lambda>((x, s1'), (y, s2')). \n       if bad1 s1' \\<or> bad2 s2' then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2') \n       else exec_until_bad' (f x) s1' s2')))\"\n  shows \"P exec_until_bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P local.exec_until_bad", "using assms"], ["proof (prove)\nusing this:\n  spmf.admissible (\\<lambda>f. P (\\<lambda>gpv s1 s2. f ((gpv, s1), s2)))\n  P (\\<lambda>_ _ _. return_pmf None)\n  P ?exec_until_bad'1 \\<Longrightarrow>\n  P (\\<lambda>gpv s1 s2.\n        if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     joint_oracle (s1, s2) out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else ?exec_until_bad'1 (f x) s1' s2')))\n\ngoal (1 subgoal):\n 1. P local.exec_until_bad", "by(rule exec_until_bad.fixp_induct[unfolded curry_conv[abs_def]])"], ["", "end"], ["", "lemma exec_gpv_oracle_bisim_bad_plossless:\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"plossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\" (* stronger than the invariants above because unconditional *)\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\"\n  (is \"rel_spmf ?R ?p ?q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "let ?R' = \"\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "from bisim"], ["proof (chain)\npicking this:\n  \\<lbrakk>X ?s1.0 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2'))\n                     (oracle1 ?s1.0 ?x) (oracle2 ?s2.0 ?x)", "have \"\\<forall>s1 s2. \\<forall>x \\<in> outs_\\<I> \\<I>. X s1 s2 \\<longrightarrow> rel_spmf ?R' (oracle1 s1 x) (oracle2 s2 x)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>X ?s1.0 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2'))\n                     (oracle1 ?s1.0 ?x) (oracle2 ?s2.0 ?x)\n\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       \\<forall>x\\<in>outs_\\<I> \\<I>.\n          X s1 s2 \\<longrightarrow>\n          rel_spmf\n           (\\<lambda>(a, s1') (b, s2').\n               bad1 s1' = bad2 s2' \\<and>\n               (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n           (oracle1 s1 x) (oracle2 s2 x)", "by blast"], ["proof (state)\nthis:\n  \\<forall>s1 s2.\n     \\<forall>x\\<in>outs_\\<I> \\<I>.\n        X s1 s2 \\<longrightarrow>\n        rel_spmf\n         (\\<lambda>(a, s1') (b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n         (oracle1 s1 x) (oracle2 s2 x)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>s1 s2.\n     \\<forall>x\\<in>outs_\\<I> \\<I>.\n        X s1 s2 \\<longrightarrow>\n        rel_spmf\n         (\\<lambda>(a, s1') (b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n         (oracle1 s1 x) (oracle2 s2 x)", "obtain joint_oracle\n    where oracle1 [symmetric]: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> map_spmf fst (joint_oracle s1 s2 x) = oracle1 s1 x\"\n    and oracle2 [symmetric]: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> map_spmf snd (joint_oracle s1 s2 x) = oracle2 s2 x\"\n    and 3 [rotated 2]: \"\\<And>s1 s2 x y y' s1' s2'. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I>; ((y, s1'), (y', s2')) \\<in> set_spmf (joint_oracle s1 s2 x) \\<rbrakk>\n      \\<Longrightarrow> bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else y = y' \\<and> X s1' s2')\""], ["proof (prove)\nusing this:\n  \\<forall>s1 s2.\n     \\<forall>x\\<in>outs_\\<I> \\<I>.\n        X s1 s2 \\<longrightarrow>\n        rel_spmf\n         (\\<lambda>(a, s1') (b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n         (oracle1 s1 x) (oracle2 s2 x)\n\ngoal (1 subgoal):\n 1. (\\<And>joint_oracle.\n        \\<lbrakk>\\<And>s1 s2 x.\n                    \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n                    \\<Longrightarrow> map_spmf fst (joint_oracle s1 s2 x) =\noracle1 s1 x;\n         \\<And>s1 s2 x.\n            \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n            \\<Longrightarrow> map_spmf snd (joint_oracle s1 s2 x) =\n                              oracle2 s2 x;\n         \\<And>s1 s2 x y y' s1' s2'.\n            \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>;\n             ((y, s1'), y', s2')\n             \\<in> set_spmf (joint_oracle s1 s2 x)\\<rbrakk>\n            \\<Longrightarrow> bad1 s1' = bad2 s2' \\<and>\n                              (if bad2 s2' then X_bad s1' s2'\n                               else y = y' \\<and> X s1' s2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply atomize_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       \\<forall>x\\<in>outs_\\<I> \\<I>.\n          X s1 s2 \\<longrightarrow>\n          rel_spmf\n           (\\<lambda>a.\n               case a of\n               (a, s1') \\<Rightarrow>\n                 \\<lambda>b.\n                    case b of\n                    (b, s2') \\<Rightarrow>\n                      bad1 s1' = bad2 s2' \\<and>\n                      (if bad2 s2' then X_bad s1' s2'\n                       else a = b \\<and> X s1' s2'))\n           (oracle1 s1 x) (oracle2 s2 x) \\<Longrightarrow>\n    \\<exists>joint_oracle.\n       (\\<forall>s1 s2 x.\n           X s1 s2 \\<longrightarrow>\n           x \\<in> outs_\\<I> \\<I> \\<longrightarrow>\n           map_spmf fst (joint_oracle s1 s2 x) = oracle1 s1 x) \\<and>\n       (\\<forall>s1 s2 x.\n           X s1 s2 \\<longrightarrow>\n           x \\<in> outs_\\<I> \\<I> \\<longrightarrow>\n           map_spmf snd (joint_oracle s1 s2 x) = oracle2 s2 x) \\<and>\n       (\\<forall>s1 s2 x y y' s1' s2'.\n           X s1 s2 \\<longrightarrow>\n           x \\<in> outs_\\<I> \\<I> \\<longrightarrow>\n           ((y, s1'), y', s2')\n           \\<in> set_spmf (joint_oracle s1 s2 x) \\<longrightarrow>\n           bad1 s1' = bad2 s2' \\<and>\n           (if bad2 s2' then X_bad s1' s2' else y = y' \\<and> X s1' s2'))", "apply(unfold rel_spmf_simps all_conj_distrib[symmetric] all_simps(6) imp_conjR[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       \\<forall>x\\<in>outs_\\<I> \\<I>.\n          X s1 s2 \\<longrightarrow>\n          (\\<exists>pq.\n              (\\<forall>((a, s1'), b, s2')\\<in>set_spmf pq.\n                  bad1 s1' = bad2 s2' \\<and>\n                  (if bad2 s2' then X_bad s1' s2'\n                   else a = b \\<and> X s1' s2')) \\<and>\n              map_spmf fst pq = oracle1 s1 x \\<and>\n              map_spmf snd pq = oracle2 s2 x) \\<Longrightarrow>\n    \\<exists>joint_oracle.\n       \\<forall>x xa.\n          X x xa \\<longrightarrow>\n          (\\<forall>xb.\n              xb \\<in> outs_\\<I> \\<I> \\<longrightarrow>\n              map_spmf fst (joint_oracle x xa xb) = oracle1 x xb \\<and>\n              map_spmf snd (joint_oracle x xa xb) = oracle2 xa xb \\<and>\n              (\\<forall>y y' s1' s2'.\n                  ((y, s1'), y', s2')\n                  \\<in> set_spmf (joint_oracle x xa xb) \\<longrightarrow>\n                  bad1 s1' = bad2 s2' \\<and>\n                  (if bad2 s2' then X_bad s1' s2'\n                   else y = y' \\<and> X s1' s2')))", "apply(subst choice_iff[symmetric] ex_simps(6))+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1 s2.\n       \\<forall>x\\<in>outs_\\<I> \\<I>.\n          X s1 s2 \\<longrightarrow>\n          (\\<exists>pq.\n              (\\<forall>((a, s1'), b, s2')\\<in>set_spmf pq.\n                  bad1 s1' = bad2 s2' \\<and>\n                  (if bad2 s2' then X_bad s1' s2'\n                   else a = b \\<and> X s1' s2')) \\<and>\n              map_spmf fst pq = oracle1 s1 x \\<and>\n              map_spmf snd pq = oracle2 s2 x) \\<Longrightarrow>\n    \\<forall>x xa.\n       X x xa \\<longrightarrow>\n       (\\<forall>xb.\n           xb \\<in> outs_\\<I> \\<I> \\<longrightarrow>\n           (\\<exists>xc.\n               map_spmf fst xc = oracle1 x xb \\<and>\n               map_spmf snd xc = oracle2 xa xb \\<and>\n               (\\<forall>y y' s1' s2'.\n                   ((y, s1'), y', s2') \\<in> set_spmf xc \\<longrightarrow>\n                   bad1 s1' = bad2 s2' \\<and>\n                   (if bad2 s2' then X_bad s1' s2'\n                    else y = y' \\<and> X s1' s2'))))", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>X ?s1.0 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> oracle1 ?s1.0 ?x =\n                    map_spmf fst (joint_oracle ?s1.0 ?s2.0 ?x)\n  \\<lbrakk>X ?s1.0 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> oracle2 ?s2.0 ?x =\n                    map_spmf snd (joint_oracle ?s1.0 ?s2.0 ?x)\n  \\<lbrakk>((?y1, ?s1'1), ?y'1, ?s2'1)\n           \\<in> set_spmf (joint_oracle ?s1.1 ?s2.1 ?x1);\n   X ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> bad1 ?s1'1 = bad2 ?s2'1 \\<and>\n                    (if bad2 ?s2'1 then X_bad ?s1'1 ?s2'1\n                     else ?y1 = ?y'1 \\<and> X ?s1'1 ?s2'1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "let ?joint_oracle = \"\\<lambda>(s1, s2). joint_oracle s1 s2\""], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "let ?pq = \"exec_until_bad ?joint_oracle oracle1 bad1 oracle2 bad2 gpv s1 s2\""], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have setD: \"\\<And>s1 s2 x y y' s1' s2'. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I>; ((y, s1'), (y', s2')) \\<in> set_spmf (joint_oracle s1 s2 x) \\<rbrakk>\n    \\<Longrightarrow> (y, s1') \\<in> set_spmf (oracle1 s1 x) \\<and> (y', s2') \\<in> set_spmf (oracle2 s2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 x y y' s1' s2'.\n       \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>;\n        ((y, s1'), y', s2') \\<in> set_spmf (joint_oracle s1 s2 x)\\<rbrakk>\n       \\<Longrightarrow> (y, s1') \\<in> set_spmf (oracle1 s1 x) \\<and>\n                         (y', s2') \\<in> set_spmf (oracle2 s2 x)", "unfolding oracle1 oracle2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 x y y' s1' s2'.\n       \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>;\n        ((y, s1'), y', s2') \\<in> set_spmf (joint_oracle s1 s2 x)\\<rbrakk>\n       \\<Longrightarrow> (y, s1')\n                         \\<in> set_spmf\n                                (map_spmf fst (joint_oracle s1 s2 x)) \\<and>\n                         (y', s2')\n                         \\<in> set_spmf\n                                (map_spmf snd (joint_oracle s1 s2 x))", "by(auto intro: rev_image_eqI)"], ["proof (state)\nthis:\n  \\<lbrakk>X ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>;\n   ((?y1, ?s1'1), ?y'1, ?s2'1)\n   \\<in> set_spmf (joint_oracle ?s1.1 ?s2.1 ?x1)\\<rbrakk>\n  \\<Longrightarrow> (?y1, ?s1'1) \\<in> set_spmf (oracle1 ?s1.1 ?x1) \\<and>\n                    (?y'1, ?s2'1) \\<in> set_spmf (oracle2 ?s2.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set_spmf ?pq \\<Longrightarrow>\n       (case x of\n        (a, s1') \\<Rightarrow>\n          \\<lambda>(b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n        y\n 2. map_spmf fst ?pq = exec_gpv oracle1 gpv s1\n 3. map_spmf snd ?pq = exec_gpv oracle2 gpv s2", "show \"map_spmf fst ?pq = exec_gpv oracle1 gpv s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf fst\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2) =\n    exec_gpv oracle1 gpv s1", "proof(rule spmf.leq_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle1 gpv s1)\n 2. ord_spmf (=) (exec_gpv oracle1 gpv s1)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "show \"ord_spmf (=) (map_spmf fst ?pq) (exec_gpv oracle1 gpv s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle1 gpv s1)", "using * bad WT_gpv lossless"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle1 gpv s1)", "proof(induction arbitrary: s1 s2 gpv rule: exec_until_bad_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf fst (f ((xb, x), xa)))\n                 (exec_gpv oracle1 xb x)))\n 2. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf fst (return_pmf None))\n                          (exec_gpv oracle1 gpv s1)\n 3. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf fst (f ((xb, x), xa)))\n                 (exec_gpv oracle1 xb x)))\n 2. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf fst (return_pmf None))\n                          (exec_gpv oracle1 gpv s1)\n 3. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf fst (f ((xb, x), xa)))\n                 (exec_gpv oracle1 xb x)))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>f.\n       \\<forall>x xa.\n          (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n          bad1 x = bad2 xa \\<longrightarrow>\n          (\\<forall>xb.\n              \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n              plossless_gpv \\<I> xb \\<longrightarrow>\n              ord_spmf (=) (map_spmf fst (f ((xb, x), xa)))\n               (exec_gpv oracle1 xb x)))\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf fst (return_pmf None))\n                          (exec_gpv oracle1 gpv s1)\n 2. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "case bottom"], ["proof (state)\nthis:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf fst (return_pmf None))\n                          (exec_gpv oracle1 gpv s1)\n 2. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf fst (return_pmf None)) (exec_gpv oracle1 gpv s1)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf fst (return_pmf None)) (exec_gpv oracle1 gpv s1)\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "case (step exec_until_bad')"], ["proof (state)\nthis:\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf fst (exec_until_bad' ?gpv1 ?s1.1 ?s2.1))\n                     (exec_gpv oracle1 ?gpv1 ?s1.1)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf fst (exec_until_bad' gpv s1 s2)) (exec_gpv oracle1 gpv s1);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf fst\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle1 gpv s1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "proof(cases \"bad2 s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "case True"], ["proof (state)\nthis:\n  bad2 s2\n\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "then"], ["proof (chain)\npicking this:\n  bad2 s2", "have \"weight_spmf (exec_gpv oracle2 gpv s2) = 1\""], ["proof (prove)\nusing this:\n  bad2 s2\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle2 gpv s2) = 1", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky2 lossless2, of s1 gpv s2]\n              step.prems weight_spmf_le_1[of \"exec_gpv oracle2 gpv s2\"]"], ["proof (prove)\nusing this:\n  bad2 s2\n  \\<lbrakk>bad1 s1;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1 s\\<rbrakk>\n      \\<Longrightarrow> bad2 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1 s\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g gpv \\<surd>; bad2 s2 \\<and> X_bad s1 s2\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> gpv\n                    \\<le> weight_spmf (exec_gpv oracle2 gpv s2)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n  weight_spmf (exec_gpv oracle2 gpv s2) \\<le> 1\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle2 gpv s2) = 1", "by(simp add: pgen_lossless_gpv_def weight_gpv_def)"], ["proof (state)\nthis:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "then"], ["proof (chain)\npicking this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "using True"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n  bad2 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf fst\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle1 gpv s1)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "case False"], ["proof (state)\nthis:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "hence \"\\<not> bad1 s1\""], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "using step.prems(2)"], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n  bad1 s1 = bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "by simp"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "moreover"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "{"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "fix out c r1 s1' r2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "assume IO: \"IO out c \\<in> set_spmf (the_gpv gpv)\"\n              and joint: \"((r1, s1'), (r2, s2')) \\<in> set_spmf (joint_oracle s1 s2 out)\""], ["proof (state)\nthis:\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  ((r1, s1'), r2, s2') \\<in> set_spmf (joint_oracle s1 s2 out)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "from step.prems(3) IO"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)", "have out: \"out \\<in> outs_\\<I> \\<I>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n\ngoal (1 subgoal):\n 1. out \\<in> outs_\\<I> \\<I>", "by(rule WT_gpvD)"], ["proof (state)\nthis:\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "from setD[OF _ out joint] step.prems(1) False"], ["proof (chain)\npicking this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2", "have 1: \"(r1, s1') \\<in> set_spmf (oracle1 s1 out)\"\n              and 2: \"(r2, s2') \\<in> set_spmf (oracle2 s2 out)\""], ["proof (prove)\nusing this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "by simp_all"], ["proof (state)\nthis:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "hence r1: \"r1 \\<in> responses_\\<I> \\<I> out\" and r2: \"r2 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "using WT_oracle1 WT_oracle2 out"], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "by(blast dest: WT_calleeD)+"], ["proof (state)\nthis:\n  r1 \\<in> responses_\\<I> \\<I> out\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "have *: \"plossless_gpv \\<I> (c r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r2)", "using step.prems(4) IO r2 step.prems(3)"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> gpv\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r2 \\<in> responses_\\<I> \\<I> out\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r2)", "by(rule plossless_gpv_ContD)"], ["proof (state)\nthis:\n  plossless_gpv \\<I> (c r2)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "then"], ["proof (chain)\npicking this:\n  plossless_gpv \\<I> (c r2)", "have \"bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (c r2) s2') = 1\"\n              and \"\\<not> bad2 s2' \\<Longrightarrow> ord_spmf (=) (map_spmf fst (exec_until_bad' (c r2) s1' s2')) (exec_gpv oracle1 (c r2) s1')\""], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r2)\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle2 (c r2) s2') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (map_spmf fst (exec_until_bad' (c r2) s1' s2'))\n      (exec_gpv oracle1 (c r2) s1'))", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky2 lossless2, of s1' \"c r2\" s2'] \n                weight_spmf_le_1[of \"exec_gpv oracle2 (c r2) s2'\"] WT_gpv_ContD[OF step.prems(3) IO r2]\n                3[OF joint _ out] step.prems(1) False"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r2)\n  \\<lbrakk>bad1 s1';\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1' s\\<rbrakk>\n      \\<Longrightarrow> bad2 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1' s\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g c r2 \\<surd>; bad2 s2' \\<and> X_bad s1' s2'\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> (c r2)\n                    \\<le> weight_spmf (exec_gpv oracle2 (c r2) s2')\n  weight_spmf (exec_gpv oracle2 (c r2) s2') \\<le> 1\n  \\<I> \\<turnstile>g c r2 \\<surd>\n  X s1 s2 \\<Longrightarrow>\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle2 (c r2) s2') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (map_spmf fst (exec_until_bad' (c r2) s1' s2'))\n      (exec_gpv oracle1 (c r2) s1'))", "by(simp_all add: pgen_lossless_gpv_def weight_gpv_def step.IH)"], ["proof (state)\nthis:\n  bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (c r2) s2') = 1\n  \\<not> bad2 s2' \\<Longrightarrow>\n  ord_spmf (=) (map_spmf fst (exec_until_bad' (c r2) s1' s2'))\n   (exec_gpv oracle1 (c r2) s1')\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf fst\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle1 (?c3 ?r2.3) ?s1'3)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf fst\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle1 (?c3 ?r2.3) ?s1'3)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf fst\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle1 (?c3 ?r2.3) ?s1'3)\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "using False step.prems(1)"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf fst\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle1 (?c3 ?r2.3) ?s1'3)\n  \\<not> bad2 s2\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf fst\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle1 gpv s1)", "by(rewrite in \"ord_spmf _ _ \\<hole>\" exec_gpv.simps)\n              (fastforce simp add: split_def bind_map_spmf map_spmf_bind_spmf oracle1 WT_gpv_OutD[OF step.prems(3)] intro!: ord_spmf_bind_reflI split!: generat.split dest: 3)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf fst\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle1 gpv s1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf fst\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle1 gpv s1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf fst\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2))\n   (exec_gpv oracle1 gpv s1)\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle1 gpv s1)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "show \"ord_spmf (=) (exec_gpv oracle1 gpv s1) (map_spmf fst ?pq)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle1 gpv s1)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "using * bad WT_gpv lossless"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle1 gpv s1)\n     (map_spmf fst\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "proof(induction arbitrary: gpv s1 s2 rule: exec_gpv_fixp_induct_strong)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xa))\n             (map_spmf fst\n               (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1\n                 bad1 oracle2 bad2 x xa xb)))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 3. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xa))\n             (map_spmf fst\n               (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1\n                 bad1 oracle2 bad2 x xa xb)))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 3. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xaa.\n            (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n            bad1 xa = bad2 xaa \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xa))\n             (map_spmf fst\n               (exec_until_bad\n                 (\\<lambda>a.\n                     case a of (a, b) \\<Rightarrow> joint_oracle a b)\n                 oracle1 bad1 oracle2 bad2 x xa xaa)))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>f.\n       \\<forall>x xa xaa.\n          (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n          bad1 xa = bad2 xaa \\<longrightarrow>\n          \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n          plossless_gpv \\<I> x \\<longrightarrow>\n          ord_spmf (=) (f (x, xa))\n           (map_spmf fst\n             (exec_until_bad\n               (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n               oracle1 bad1 oracle2 bad2 x xa xaa)))\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case bottom"], ["proof (state)\nthis:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (return_pmf None)\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (return_pmf None)\n   (map_spmf fst\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case (step exec_gpv')"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle1 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s1.1)\n                     (map_spmf fst\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                              (map_spmf fst\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                oracle1 s1 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf fst\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle1 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s1.1)\n                     (map_spmf fst\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv", "show ?case"], ["proof (prove)\nusing this:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle1 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s1.1)\n                     (map_spmf fst\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s1))\n       (\\<lambda>out c.\n           oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "proof(cases \"bad2 s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "case True"], ["proof (state)\nthis:\n  bad2 s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  bad2 s2", "have \"weight_spmf (exec_gpv oracle2 gpv s2) = 1\""], ["proof (prove)\nusing this:\n  bad2 s2\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle2 gpv s2) = 1", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky2 lossless2, of s1 gpv s2]\n              step.prems weight_spmf_le_1[of \"exec_gpv oracle2 gpv s2\"]"], ["proof (prove)\nusing this:\n  bad2 s2\n  \\<lbrakk>bad1 s1;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1 s\\<rbrakk>\n      \\<Longrightarrow> bad2 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1 s\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g gpv \\<surd>; bad2 s2 \\<and> X_bad s1 s2\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> gpv\n                    \\<le> weight_spmf (exec_gpv oracle2 gpv s2)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n  weight_spmf (exec_gpv oracle2 gpv s2) \\<le> 1\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle2 gpv s2) = 1", "by(simp add: pgen_lossless_gpv_def weight_gpv_def)"], ["proof (state)\nthis:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s1))\n       (\\<lambda>out c.\n           oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "using True"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle2 gpv s2) = 1\n  bad2 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s1))\n       (\\<lambda>out c.\n           oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by(rewrite exec_until_bad.simps; rewrite exec_gpv.simps)\n              (clarsimp intro!: ord_spmf_bind_reflI split!: generat.split simp add: step.hyps)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s1))\n     (\\<lambda>out c.\n         oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf fst\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "case False"], ["proof (state)\nthis:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "hence \"\\<not> bad1 s1\""], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "using step.prems(2)"], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n  bad1 s1 = bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "by simp"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "moreover"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "{"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "fix out c r1 s1' r2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "assume IO: \"IO out c \\<in> set_spmf (the_gpv gpv)\"\n              and joint: \"((r1, s1'), (r2, s2')) \\<in> set_spmf (joint_oracle s1 s2 out)\""], ["proof (state)\nthis:\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  ((r1, s1'), r2, s2') \\<in> set_spmf (joint_oracle s1 s2 out)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "from step.prems(3) IO"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)", "have out: \"out \\<in> outs_\\<I> \\<I>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n\ngoal (1 subgoal):\n 1. out \\<in> outs_\\<I> \\<I>", "by(rule WT_gpvD)"], ["proof (state)\nthis:\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "from setD[OF _ out joint] step.prems(1) False"], ["proof (chain)\npicking this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2", "have 1: \"(r1, s1') \\<in> set_spmf (oracle1 s1 out)\"\n              and 2: \"(r2, s2') \\<in> set_spmf (oracle2 s2 out)\""], ["proof (prove)\nusing this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "by simp_all"], ["proof (state)\nthis:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "hence r1: \"r1 \\<in> responses_\\<I> \\<I> out\" and r2: \"r2 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "using WT_oracle1 WT_oracle2 out"], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "by(blast dest: WT_calleeD)+"], ["proof (state)\nthis:\n  r1 \\<in> responses_\\<I> \\<I> out\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "have *: \"plossless_gpv \\<I> (c r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r2)", "using step.prems(4) IO r2 step.prems(3)"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> gpv\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r2 \\<in> responses_\\<I> \\<I> out\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r2)", "by(rule plossless_gpv_ContD)"], ["proof (state)\nthis:\n  plossless_gpv \\<I> (c r2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  plossless_gpv \\<I> (c r2)", "have \"bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (c r2) s2') = 1\" \n              and \"\\<not> bad2 s2' \\<Longrightarrow> ord_spmf (=) (exec_gpv' (c r2) s1') (map_spmf fst (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1 oracle2 bad2 (c r2) s1' s2'))\""], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r2)\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle2 (c r2) s2') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (exec_gpv' (c r2) s1')\n      (map_spmf fst\n        (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n          oracle2 bad2 (c r2) s1' s2')))", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky2 lossless2, of s1' \"c r2\" s2'] \n                weight_spmf_le_1[of \"exec_gpv oracle2 (c r2) s2'\"] WT_gpv_ContD[OF step.prems(3) IO r2]\n                3[OF joint _ out] step.prems(1) False"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r2)\n  \\<lbrakk>bad1 s1';\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1' s\\<rbrakk>\n      \\<Longrightarrow> bad2 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad2 s \\<and> X_bad s1' s\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g c r2 \\<surd>; bad2 s2' \\<and> X_bad s1' s2'\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> (c r2)\n                    \\<le> weight_spmf (exec_gpv oracle2 (c r2) s2')\n  weight_spmf (exec_gpv oracle2 (c r2) s2') \\<le> 1\n  \\<I> \\<turnstile>g c r2 \\<surd>\n  X s1 s2 \\<Longrightarrow>\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle2 (c r2) s2') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (exec_gpv' (c r2) s1')\n      (map_spmf fst\n        (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n          oracle2 bad2 (c r2) s1' s2')))", "by(simp_all add: pgen_lossless_gpv_def weight_gpv_def step.IH)"], ["proof (state)\nthis:\n  bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (c r2) s2') = 1\n  \\<not> bad2 s2' \\<Longrightarrow>\n  ord_spmf (=) (exec_gpv' (c r2) s1')\n   (map_spmf fst\n     (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n       oracle2 bad2 (c r2) s1' s2'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s1'3)\n                     (map_spmf fst\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle1 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s1)\n                           (map_spmf fst\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             oracle1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf fst\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s1'3)\n                     (map_spmf fst\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s1'3)\n                     (map_spmf fst\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s1))\n       (\\<lambda>out c.\n           oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "using False step.prems(1)"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s1'3)\n                     (map_spmf fst\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n  \\<not> bad2 s2\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s1))\n       (\\<lambda>out c.\n           oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf fst\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by(rewrite exec_until_bad.simps)\n              (fastforce simp add: map_spmf_bind_spmf WT_gpv_OutD[OF step.prems(3)] oracle1 bind_map_spmf step.hyps intro!: ord_spmf_bind_reflI split!: generat.split dest: 3)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s1))\n     (\\<lambda>out c.\n         oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf fst\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s1))\n     (\\<lambda>out c.\n         oracle1 s1 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf fst\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv oracle1 gpv s1)\n   (map_spmf fst\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_spmf fst\n   (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n     oracle2 bad2 gpv s1 s2) =\n  exec_gpv oracle1 gpv s1\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> set_spmf\n              (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2)\n                oracle1 bad1 oracle2 bad2 gpv s1 s2) \\<Longrightarrow>\n       (case x of\n        (a, s1') \\<Rightarrow>\n          \\<lambda>(b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n        y\n 2. map_spmf snd\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2) =\n    exec_gpv oracle2 gpv s2", "show \"map_spmf snd ?pq = exec_gpv oracle2 gpv s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf snd\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2) =\n    exec_gpv oracle2 gpv s2", "proof(rule spmf.leq_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle2 gpv s2)\n 2. ord_spmf (=) (exec_gpv oracle2 gpv s2)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "show \"ord_spmf (=) (map_spmf snd ?pq) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle2 gpv s2)", "using * bad WT_gpv lossless"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))\n     (exec_gpv oracle2 gpv s2)", "proof(induction arbitrary: s1 s2 gpv rule: exec_until_bad_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf snd (f ((xb, x), xa)))\n                 (exec_gpv oracle2 xb xa)))\n 2. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf snd (return_pmf None))\n                          (exec_gpv oracle2 gpv s2)\n 3. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf snd (f ((xb, x), xa)))\n                 (exec_gpv oracle2 xb xa)))\n 2. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf snd (return_pmf None))\n                          (exec_gpv oracle2 gpv s2)\n 3. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa.\n            (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n            bad1 x = bad2 xa \\<longrightarrow>\n            (\\<forall>xb.\n                \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n                plossless_gpv \\<I> xb \\<longrightarrow>\n                ord_spmf (=) (map_spmf snd (f ((xb, x), xa)))\n                 (exec_gpv oracle2 xb xa)))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>f.\n       \\<forall>x xa.\n          (if bad2 xa then X_bad x xa else X x xa) \\<longrightarrow>\n          bad1 x = bad2 xa \\<longrightarrow>\n          (\\<forall>xb.\n              \\<I> \\<turnstile>g xb \\<surd> \\<longrightarrow>\n              plossless_gpv \\<I> xb \\<longrightarrow>\n              ord_spmf (=) (map_spmf snd (f ((xb, x), xa)))\n               (exec_gpv oracle2 xb xa)))\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf snd (return_pmf None))\n                          (exec_gpv oracle2 gpv s2)\n 2. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "case bottom"], ["proof (state)\nthis:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2 gpv.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (map_spmf snd (return_pmf None))\n                          (exec_gpv oracle2 gpv s2)\n 2. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (return_pmf None)) (exec_gpv oracle2 gpv s2)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (return_pmf None)) (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "case (step exec_until_bad')"], ["proof (state)\nthis:\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf snd (exec_until_bad' ?gpv1 ?s1.1 ?s2.1))\n                     (exec_gpv oracle2 ?gpv1 ?s2.1)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' s1 s2 gpv.\n       \\<lbrakk>\\<And>s1 s2 gpv.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n                    plossless_gpv \\<I> gpv\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf snd (exec_until_bad' gpv s1 s2)) (exec_gpv oracle2 gpv s2);\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if bad1 s1 \\<or> bad2 s2\n                             then pair_spmf (exec_gpv oracle1 gpv s1)\n                                   (exec_gpv oracle2 gpv s2)\n                             else the_gpv gpv \\<bind>\n                                  case_generat\n                                   (\\<lambda>x.\n return_spmf ((x, s1), x, s2))\n                                   (\\<lambda>out f.\n (case (s1, s2) of (x, xa) \\<Rightarrow> joint_oracle x xa) out \\<bind>\n (\\<lambda>((x, s1'), y, s2').\n     if bad1 s1' \\<or> bad2 s2'\n     then pair_spmf (exec_gpv oracle1 (f x) s1')\n           (exec_gpv oracle2 (f y) s2')\n     else exec_until_bad' (f x) s1' s2'))))\n                          (exec_gpv oracle2 gpv s2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "proof(cases \"bad2 s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "case True"], ["proof (state)\nthis:\n  bad2 s2\n\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "then"], ["proof (chain)\npicking this:\n  bad2 s2", "have \"weight_spmf (exec_gpv oracle1 gpv s1) = 1\""], ["proof (prove)\nusing this:\n  bad2 s2\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle1 gpv s1) = 1", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky1 lossless1, of s2 gpv s1]\n              step.prems weight_spmf_le_1[of \"exec_gpv oracle1 gpv s1\"]"], ["proof (prove)\nusing this:\n  bad2 s2\n  \\<lbrakk>bad2 s2;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2\\<rbrakk>\n      \\<Longrightarrow> bad1 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g gpv \\<surd>; bad1 s1 \\<and> X_bad s1 s2\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> gpv\n                    \\<le> weight_spmf (exec_gpv oracle1 gpv s1)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n  weight_spmf (exec_gpv oracle1 gpv s1) \\<le> 1\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle1 gpv s1) = 1", "by(simp add: pgen_lossless_gpv_def weight_gpv_def)"], ["proof (state)\nthis:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n\ngoal (2 subgoals):\n 1. bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)\n 2. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "then"], ["proof (chain)\npicking this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "using True"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n  bad2 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "case False"], ["proof (state)\nthis:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "hence \"\\<not> bad1 s1\""], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "using step.prems(2)"], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n  bad1 s1 = bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "by simp"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "{"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "fix out c r1 s1' r2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "assume IO: \"IO out c \\<in> set_spmf (the_gpv gpv)\"\n              and joint: \"((r1, s1'), (r2, s2')) \\<in> set_spmf (joint_oracle s1 s2 out)\""], ["proof (state)\nthis:\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  ((r1, s1'), r2, s2') \\<in> set_spmf (joint_oracle s1 s2 out)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "from step.prems(3) IO"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)", "have out: \"out \\<in> outs_\\<I> \\<I>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n\ngoal (1 subgoal):\n 1. out \\<in> outs_\\<I> \\<I>", "by(rule WT_gpvD)"], ["proof (state)\nthis:\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "from setD[OF _ out joint] step.prems(1) False"], ["proof (chain)\npicking this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2", "have 1: \"(r1, s1') \\<in> set_spmf (oracle1 s1 out)\"\n              and 2: \"(r2, s2') \\<in> set_spmf (oracle2 s2 out)\""], ["proof (prove)\nusing this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "by simp_all"], ["proof (state)\nthis:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "hence r1: \"r1 \\<in> responses_\\<I> \\<I> out\" and r2: \"r2 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "using WT_oracle1 WT_oracle2 out"], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "by(blast dest: WT_calleeD)+"], ["proof (state)\nthis:\n  r1 \\<in> responses_\\<I> \\<I> out\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "have *: \"plossless_gpv \\<I> (c r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r1)", "using step.prems(4) IO r1 step.prems(3)"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> gpv\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r1 \\<in> responses_\\<I> \\<I> out\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r1)", "by(rule plossless_gpv_ContD)"], ["proof (state)\nthis:\n  plossless_gpv \\<I> (c r1)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "then"], ["proof (chain)\npicking this:\n  plossless_gpv \\<I> (c r1)", "have \"bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (c r1) s1') = 1\"\n              and \"\\<not> bad2 s2' \\<Longrightarrow> ord_spmf (=) (map_spmf snd (exec_until_bad' (c r2) s1' s2')) (exec_gpv oracle2 (c r2) s2')\""], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r1)\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle1 (c r1) s1') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (map_spmf snd (exec_until_bad' (c r2) s1' s2'))\n      (exec_gpv oracle2 (c r2) s2'))", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky1 lossless1, of s2' \"c r1\" s1'] \n                weight_spmf_le_1[of \"exec_gpv oracle1 (c r1) s1'\"] WT_gpv_ContD[OF step.prems(3) IO r1]\n                3[OF joint _ out] step.prems(1) False"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r1)\n  \\<lbrakk>bad2 s2';\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2'\\<rbrakk>\n      \\<Longrightarrow> bad1 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2'\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g c r1 \\<surd>; bad1 s1' \\<and> X_bad s1' s2'\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> (c r1)\n                    \\<le> weight_spmf (exec_gpv oracle1 (c r1) s1')\n  weight_spmf (exec_gpv oracle1 (c r1) s1') \\<le> 1\n  \\<I> \\<turnstile>g c r1 \\<surd>\n  X s1 s2 \\<Longrightarrow>\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle1 (c r1) s1') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (map_spmf snd (exec_until_bad' (c r2) s1' s2'))\n      (exec_gpv oracle2 (c r2) s2'))", "by(simp_all add: pgen_lossless_gpv_def weight_gpv_def step.IH)"], ["proof (state)\nthis:\n  bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (c r1) s1') = 1\n  \\<not> bad2 s2' \\<Longrightarrow>\n  ord_spmf (=) (map_spmf snd (exec_until_bad' (c r2) s1' s2'))\n   (exec_gpv oracle2 (c r2) s2')\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf snd\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3)\n\ngoal (1 subgoal):\n 1. \\<not> bad2 s2 \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf snd\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf snd\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3)\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "using False step.prems(1)"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf snd\n                       (exec_until_bad' (?c3 ?r2.3) ?s1'3 ?s2'3))\n                     (exec_gpv oracle2 (?c3 ?r2.3) ?s2'3)\n  \\<not> bad2 s2\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if bad1 s1 \\<or> bad2 s2\n        then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n        else the_gpv gpv \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n                 | IO out f \\<Rightarrow>\n                     (case (s1, s2) of\n                      (a, b) \\<Rightarrow> joint_oracle a b)\n                      out \\<bind>\n                     (\\<lambda>((x, s1'), y, s2').\n                         if bad1 s1' \\<or> bad2 s2'\n                         then pair_spmf (exec_gpv oracle1 (f x) s1')\n                               (exec_gpv oracle2 (f y) s2')\n                         else exec_until_bad' (f x) s1' s2'))))\n     (exec_gpv oracle2 gpv s2)", "by(rewrite in \"ord_spmf _ _ \\<hole>\" exec_gpv.simps)\n              (fastforce simp add: split_def bind_map_spmf map_spmf_bind_spmf oracle2 WT_gpv_OutD[OF step.prems(3)] intro!: ord_spmf_bind_reflI split!: generat.split dest: 3)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle2 gpv s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad' (f x) s1' s2'))))\n   (exec_gpv oracle2 gpv s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2))\n   (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle2 gpv s2)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "show \"ord_spmf (=) (exec_gpv oracle2 gpv s2) (map_spmf snd ?pq)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle2 gpv s2)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "using * bad WT_gpv lossless"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (exec_gpv oracle2 gpv s2)\n     (map_spmf snd\n       (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n         oracle2 bad2 gpv s1 s2))", "proof(induction arbitrary: gpv s1 s2 rule: exec_gpv_fixp_induct_strong)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xb))\n             (map_spmf snd\n               (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1\n                 bad1 oracle2 bad2 x xa xb)))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 3. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xb))\n             (map_spmf snd\n               (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1\n                 bad1 oracle2 bad2 x xa xb)))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 3. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xaa.\n            (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n            bad1 xa = bad2 xaa \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            plossless_gpv \\<I> x \\<longrightarrow>\n            ord_spmf (=) (f (x, xaa))\n             (map_spmf snd\n               (exec_until_bad\n                 (\\<lambda>a.\n                     case a of (a, b) \\<Rightarrow> joint_oracle a b)\n                 oracle1 bad1 oracle2 bad2 x xa xaa)))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>f.\n       \\<forall>x xa xaa.\n          (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n          bad1 xa = bad2 xaa \\<longrightarrow>\n          \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n          plossless_gpv \\<I> x \\<longrightarrow>\n          ord_spmf (=) (f (x, xaa))\n           (map_spmf snd\n             (exec_until_bad\n               (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n               oracle1 bad1 oracle2 bad2 x xa xaa)))\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case bottom"], ["proof (state)\nthis:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=) (return_pmf None)\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (return_pmf None)\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (return_pmf None)\n   (map_spmf snd\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "case (step exec_gpv')"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle2 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s2.1)\n                     (map_spmf snd\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s1 s2.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n        \\<And>gpv s1 s2.\n           \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n            bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n            plossless_gpv \\<I> gpv\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                              (map_spmf snd\n                                (exec_until_bad\n                                  (\\<lambda>(x, y). joint_oracle x y)\n                                  oracle1 bad1 oracle2 bad2 gpv s1 s2));\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s2))\n                            (\\<lambda>out c.\n                                oracle2 s2 out \\<bind>\n                                (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                          (map_spmf snd\n                            (exec_until_bad\n                              (\\<lambda>(x, y). joint_oracle x y) oracle1\n                              bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle2 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s2.1)\n                     (map_spmf snd\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv", "show ?case"], ["proof (prove)\nusing this:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1) (exec_gpv oracle2 ?c1 ?s1)\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>;\n   plossless_gpv \\<I> ?gpv1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' ?gpv1 ?s2.1)\n                     (map_spmf snd\n                       (exec_until_bad\n                         (\\<lambda>a.\n                             case a of\n                             (a, b) \\<Rightarrow> joint_oracle a b)\n                         oracle1 bad1 oracle2 bad2 ?gpv1 ?s1.1 ?s2.1))\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s2))\n       (\\<lambda>out c.\n           oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "proof(cases \"bad2 s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "case True"], ["proof (state)\nthis:\n  bad2 s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  bad2 s2", "have \"weight_spmf (exec_gpv oracle1 gpv s1) = 1\""], ["proof (prove)\nusing this:\n  bad2 s2\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle1 gpv s1) = 1", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky1 lossless1, of s2 gpv s1]\n              step.prems weight_spmf_le_1[of \"exec_gpv oracle1 gpv s1\"]"], ["proof (prove)\nusing this:\n  bad2 s2\n  \\<lbrakk>bad2 s2;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2\\<rbrakk>\n      \\<Longrightarrow> bad1 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g gpv \\<surd>; bad1 s1 \\<and> X_bad s1 s2\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> gpv\n                    \\<le> weight_spmf (exec_gpv oracle1 gpv s1)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n  plossless_gpv \\<I> gpv\n  weight_spmf (exec_gpv oracle1 gpv s1) \\<le> 1\n\ngoal (1 subgoal):\n 1. weight_spmf (exec_gpv oracle1 gpv s1) = 1", "by(simp add: pgen_lossless_gpv_def weight_gpv_def)"], ["proof (state)\nthis:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))\n 2. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s2))\n       (\\<lambda>out c.\n           oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "using True"], ["proof (prove)\nusing this:\n  weight_spmf (exec_gpv oracle1 gpv s1) = 1\n  bad2 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s2))\n       (\\<lambda>out c.\n           oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by(rewrite exec_until_bad.simps; subst (2) exec_gpv.simps)\n              (clarsimp intro!: ord_spmf_bind_reflI split!: generat.split simp add: step.hyps)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s2))\n     (\\<lambda>out c.\n         oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf snd\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "case False"], ["proof (state)\nthis:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "hence \"\\<not> bad1 s1\""], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "using step.prems(2)"], ["proof (prove)\nusing this:\n  \\<not> bad2 s2\n  bad1 s1 = bad2 s2\n\ngoal (1 subgoal):\n 1. \\<not> bad1 s1", "by simp"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "moreover"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "{"], ["proof (state)\nthis:\n  \\<not> bad1 s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "fix out c r1 s1' r2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "assume IO: \"IO out c \\<in> set_spmf (the_gpv gpv)\"\n              and joint: \"((r1, s1'), (r2, s2')) \\<in> set_spmf (joint_oracle s1 s2 out)\""], ["proof (state)\nthis:\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  ((r1, s1'), r2, s2') \\<in> set_spmf (joint_oracle s1 s2 out)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "from step.prems(3) IO"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)", "have out: \"out \\<in> outs_\\<I> \\<I>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n\ngoal (1 subgoal):\n 1. out \\<in> outs_\\<I> \\<I>", "by(rule WT_gpvD)"], ["proof (state)\nthis:\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "from setD[OF _ out joint] step.prems(1) False"], ["proof (chain)\npicking this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2", "have 1: \"(r1, s1') \\<in> set_spmf (oracle1 s1 out)\"\n              and 2: \"(r2, s2') \\<in> set_spmf (oracle2 s2 out)\""], ["proof (prove)\nusing this:\n  X s1 s2 \\<Longrightarrow>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "by simp_all"], ["proof (state)\nthis:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "hence r1: \"r1 \\<in> responses_\\<I> \\<I> out\" and r2: \"r2 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "using WT_oracle1 WT_oracle2 out"], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out &&& r2 \\<in> responses_\\<I> \\<I> out", "by(blast dest: WT_calleeD)+"], ["proof (state)\nthis:\n  r1 \\<in> responses_\\<I> \\<I> out\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "have *: \"plossless_gpv \\<I> (c r1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r1)", "using step.prems(4) IO r1 step.prems(3)"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> gpv\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r1 \\<in> responses_\\<I> \\<I> out\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. plossless_gpv \\<I> (c r1)", "by(rule plossless_gpv_ContD)"], ["proof (state)\nthis:\n  plossless_gpv \\<I> (c r1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "then"], ["proof (chain)\npicking this:\n  plossless_gpv \\<I> (c r1)", "have \"bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (c r1) s1') = 1\" \n              and \"\\<not> bad2 s2' \\<Longrightarrow> ord_spmf (=) (exec_gpv' (c r2) s2') (map_spmf snd (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1 oracle2 bad2 (c r2) s1' s2'))\""], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r1)\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle1 (c r1) s1') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (exec_gpv' (c r2) s2')\n      (map_spmf snd\n        (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n          oracle2 bad2 (c r2) s1' s2')))", "using callee_invariant_on.weight_exec_gpv[OF bad_sticky1 lossless1, of s2' \"c r1\" s1'] \n                weight_spmf_le_1[of \"exec_gpv oracle1 (c r1) s1'\"] WT_gpv_ContD[OF step.prems(3) IO r1]\n                3[OF joint _ out] step.prems(1) False"], ["proof (prove)\nusing this:\n  plossless_gpv \\<I> (c r1)\n  \\<lbrakk>bad2 s2';\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2'\\<rbrakk>\n      \\<Longrightarrow> bad1 s;\n   \\<And>s x.\n      \\<lbrakk>x \\<in> outs_\\<I> \\<I>; bad1 s \\<and> X_bad s s2'\\<rbrakk>\n      \\<Longrightarrow> x \\<in> outs_\\<I> \\<I>;\n   \\<I> \\<turnstile>g c r1 \\<surd>; bad1 s1' \\<and> X_bad s1' s2'\\<rbrakk>\n  \\<Longrightarrow> weight_gpv \\<I> (c r1)\n                    \\<le> weight_spmf (exec_gpv oracle1 (c r1) s1')\n  weight_spmf (exec_gpv oracle1 (c r1) s1') \\<le> 1\n  \\<I> \\<turnstile>g c r1 \\<surd>\n  X s1 s2 \\<Longrightarrow>\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  \\<not> bad2 s2\n\ngoal (1 subgoal):\n 1. (bad2 s2' \\<Longrightarrow>\n     weight_spmf (exec_gpv oracle1 (c r1) s1') = 1) &&&\n    (\\<not> bad2 s2' \\<Longrightarrow>\n     ord_spmf (=) (exec_gpv' (c r2) s2')\n      (map_spmf snd\n        (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n          oracle2 bad2 (c r2) s1' s2')))", "by(simp_all add: pgen_lossless_gpv_def step.IH weight_gpv_def)"], ["proof (state)\nthis:\n  bad2 s2' \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (c r1) s1') = 1\n  \\<not> bad2 s2' \\<Longrightarrow>\n  ord_spmf (=) (exec_gpv' (c r2) s2')\n   (map_spmf snd\n     (exec_until_bad (\\<lambda>(x, y). joint_oracle x y) oracle1 bad1\n       oracle2 bad2 (c r2) s1' s2'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s2'3)\n                     (map_spmf snd\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>c s. ord_spmf (=) (exec_gpv' c s) (exec_gpv oracle2 c s);\n     \\<And>s2 s1 gpv.\n        \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n         bad1 s1 = bad2 s2; \\<I> \\<turnstile>g gpv \\<surd>;\n         plossless_gpv \\<I> gpv\\<rbrakk>\n        \\<Longrightarrow> ord_spmf (=) (exec_gpv' gpv s2)\n                           (map_spmf snd\n                             (exec_until_bad\n                               (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow> joint_oracle a b)\n                               oracle1 bad1 oracle2 bad2 gpv s1 s2));\n     if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n     \\<I> \\<turnstile>g gpv \\<surd>; plossless_gpv \\<I> gpv;\n     \\<not> bad2 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s2))\n                         (\\<lambda>out c.\n                             oracle2 s2 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)))\n                       (map_spmf snd\n                         (exec_until_bad\n                           (\\<lambda>a.\n                               case a of\n                               (a, b) \\<Rightarrow> joint_oracle a b)\n                           oracle1 bad1 oracle2 bad2 gpv s1 s2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s2'3)\n                     (map_spmf snd\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s2'3)\n                     (map_spmf snd\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s2))\n       (\\<lambda>out c.\n           oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "using False step.prems(1)"], ["proof (prove)\nusing this:\n  \\<not> bad1 s1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> weight_spmf (exec_gpv oracle1 (?c3 ?r1.3) ?s1'3) = 1\n  \\<lbrakk>IO ?out3 ?c3 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.3, ?s1'3), ?r2.3, ?s2'3) \\<in> set_spmf (joint_oracle s1 s2 ?out3);\n   \\<not> bad2 ?s2'3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=) (exec_gpv' (?c3 ?r2.3) ?s2'3)\n                     (map_spmf snd\n                       (exec_until_bad (\\<lambda>(x, y). joint_oracle x y)\n                         oracle1 bad1 oracle2 bad2 (?c3 ?r2.3) ?s1'3 ?s2'3))\n  \\<not> bad2 s2\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, s2))\n       (\\<lambda>out c.\n           oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n     (map_spmf snd\n       (exec_until_bad\n         (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b)\n         oracle1 bad1 oracle2 bad2 gpv s1 s2))", "by(rewrite exec_until_bad.simps)\n              (fastforce simp add: map_spmf_bind_spmf WT_gpv_OutD[OF step.prems(3)] oracle2 bind_map_spmf step.hyps intro!: ord_spmf_bind_reflI split!: generat.split dest: 3)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s2))\n     (\\<lambda>out c.\n         oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf snd\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, s2))\n     (\\<lambda>out c.\n         oracle2 s2 out \\<bind> (\\<lambda>(x, y). exec_gpv' (c x) y)))\n   (map_spmf snd\n     (exec_until_bad\n       (\\<lambda>a. case a of (a, b) \\<Rightarrow> joint_oracle a b) oracle1\n       bad1 oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv oracle2 gpv s2)\n   (map_spmf snd\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_spmf snd\n   (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n     oracle2 bad2 gpv s1 s2) =\n  exec_gpv oracle2 gpv s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> set_spmf\n              (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2)\n                oracle1 bad1 oracle2 bad2 gpv s1 s2) \\<Longrightarrow>\n       (case x of\n        (a, s1') \\<Rightarrow>\n          \\<lambda>(b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n        y", "have \"set_spmf ?pq \\<subseteq> {(as1, bs2). ?R' as1 bs2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2)\n    \\<subseteq> {(as1, bs2).\n                 (case as1 of\n                  (a, s1') \\<Rightarrow>\n                    \\<lambda>(b, s2').\n                       bad1 s1' = bad2 s2' \\<and>\n                       (if bad2 s2' then X_bad s1' s2'\n                        else a = b \\<and> X s1' s2'))\n                  bs2}", "using * bad WT_gpv"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. set_spmf\n     (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n       oracle2 bad2 gpv s1 s2)\n    \\<subseteq> {(as1, bs2).\n                 (case as1 of\n                  (a, s1') \\<Rightarrow>\n                    \\<lambda>(b, s2').\n                       bad1 s1' = bad2 s2' \\<and>\n                       (if bad2 s2' then X_bad s1' s2'\n                        else a = b \\<and> X s1' s2'))\n                  bs2}", "proof(induction arbitrary: gpv s1 s2 rule: exec_until_bad_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            set_spmf (f ((x, xa), xb))\n            \\<subseteq> {((a, s1'), b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2')})\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf (return_pmf None)\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}\n 3. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xb.\n            (if bad2 xb then X_bad xa xb else X xa xb) \\<longrightarrow>\n            bad1 xa = bad2 xb \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            set_spmf (f ((x, xa), xb))\n            \\<subseteq> {((a, s1'), b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2')})\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf (return_pmf None)\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}\n 3. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>f.\n         \\<forall>x xa xaa.\n            (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n            bad1 xa = bad2 xaa \\<longrightarrow>\n            \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n            set_spmf (f ((x, xa), xaa))\n            \\<subseteq> {a. case a of\n                            (a, b) \\<Rightarrow>\n                              (case a of\n                               (a, s1') \\<Rightarrow>\n                                 \\<lambda>b.\n                                    case b of\n                                    (b, s2') \\<Rightarrow>\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n                               b})", "by(intro cont_intro ccpo_class.admissible_leI)"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>f.\n       \\<forall>x xa xaa.\n          (if bad2 xaa then X_bad xa xaa else X xa xaa) \\<longrightarrow>\n          bad1 xa = bad2 xaa \\<longrightarrow>\n          \\<I> \\<turnstile>g x \\<surd> \\<longrightarrow>\n          set_spmf (f ((x, xa), xaa))\n          \\<subseteq> {a. case a of\n                          (a, b) \\<Rightarrow>\n                            (case a of\n                             (a, s1') \\<Rightarrow>\n                               \\<lambda>b.\n                                  case b of\n                                  (b, s2') \\<Rightarrow>\n                                    bad1 s1' = bad2 s2' \\<and>\n                                    (if bad2 s2' then X_bad s1' s2'\n                                     else a = b \\<and> X s1' s2'))\n                             b})\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf (return_pmf None)\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}\n 2. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "case bottom"], ["proof (state)\nthis:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (2 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf (return_pmf None)\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}\n 2. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf (return_pmf None)\n    \\<subseteq> {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (case a of\n                       (a, s1') \\<Rightarrow>\n                         \\<lambda>b.\n                            case b of\n                            (b, s2') \\<Rightarrow>\n                              bad1 s1' = bad2 s2' \\<and>\n                              (if bad2 s2' then X_bad s1' s2'\n                               else a = b \\<and> X s1' s2'))\n                       b}", "by simp"], ["proof (state)\nthis:\n  set_spmf (return_pmf None)\n  \\<subseteq> {a. case a of\n                  (a, b) \\<Rightarrow>\n                    (case a of\n                     (a, s1') \\<Rightarrow>\n                       \\<lambda>b.\n                          case b of\n                          (b, s2') \\<Rightarrow>\n                            bad1 s1' = bad2 s2' \\<and>\n                            (if bad2 s2' then X_bad s1' s2'\n                             else a = b \\<and> X s1' s2'))\n                     b}\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "case step"], ["proof (state)\nthis:\n  \\<lbrakk>if bad2 ?s2.1 then X_bad ?s1.1 ?s2.1 else X ?s1.1 ?s2.1;\n   bad1 ?s1.1 = bad2 ?s2.1; \\<I> \\<turnstile>g ?gpv1 \\<surd>\\<rbrakk>\n  \\<Longrightarrow> set_spmf (exec_until_bad'_ ?gpv1 ?s1.1 ?s2.1)\n                    \\<subseteq> {a. case a of\n                                    (a, b) \\<Rightarrow>\n(case a of\n (a, s1') \\<Rightarrow>\n   \\<lambda>b.\n      case b of\n      (b, s2') \\<Rightarrow>\n        bad1 s1' = bad2 s2' \\<and>\n        (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n b}\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "have switch: \"set_spmf (exec_gpv oracle1 (c r1) s1') \\<times> set_spmf (exec_gpv oracle2 (c r2) s2')\n            \\<subseteq> {((a, s1'), b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}\"\n        if \"\\<not> bad1 s1\" \"\\<I> \\<turnstile>g gpv \\<surd>\" \"\\<not> bad2 s2\" and X: \"X s1 s2\" and out: \"IO out c \\<in> set_spmf (the_gpv gpv)\"\n        and joint: \"((r1, s1'), (r2, s2')) \\<in> set_spmf (joint_oracle s1 s2 out)\" \n        and bad2: \"bad2 s2'\"\n        for out c r1 s1' r2 s2'"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf (exec_gpv oracle1 (c r1) s1') \\<times>\n    set_spmf (exec_gpv oracle2 (c r2) s2')\n    \\<subseteq> {((a, s1'), b, s2').\n                 bad1 s1' = bad2 s2' \\<and>\n                 (if bad2 s2' then X_bad s1' s2'\n                  else a = b \\<and> X s1' s2')}", "proof(clarify; rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "from step.prems(3) out"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)", "have outs: \"out \\<in> outs_\\<I> \\<I>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n\ngoal (1 subgoal):\n 1. out \\<in> outs_\\<I> \\<I>", "by(rule WT_gpv_OutD)"], ["proof (state)\nthis:\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "from bad2 3[OF joint X this]"], ["proof (chain)\npicking this:\n  bad2 s2'\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')", "have bad1: \"bad1 s1' \\<and> X_bad s1' s2'\""], ["proof (prove)\nusing this:\n  bad2 s2'\n  bad1 s1' = bad2 s2' \\<and>\n  (if bad2 s2' then X_bad s1' s2' else r1 = r2 \\<and> X s1' s2')\n\ngoal (1 subgoal):\n 1. bad1 s1' \\<and> X_bad s1' s2'", "by simp_all"], ["proof (state)\nthis:\n  bad1 s1' \\<and> X_bad s1' s2'\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "have s1': \"(r1, s1') \\<in> set_spmf (oracle1 s1 out)\" and s2': \"(r2, s2') \\<in> set_spmf (oracle2 s2 out)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "using setD[OF X outs joint]"], ["proof (prove)\nusing this:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out) \\<and>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (1 subgoal):\n 1. (r1, s1') \\<in> set_spmf (oracle1 s1 out) &&&\n    (r2, s2') \\<in> set_spmf (oracle2 s2 out)", "by simp_all"], ["proof (state)\nthis:\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "have resp: \"r1 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out", "using WT_oracle1 s1' outs"], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  (r1, s1') \\<in> set_spmf (oracle1 s1 out)\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r1 \\<in> responses_\\<I> \\<I> out", "by(rule WT_calleeD)"], ["proof (state)\nthis:\n  r1 \\<in> responses_\\<I> \\<I> out\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "with step.prems(3) out"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r1 \\<in> responses_\\<I> \\<I> out", "have WT1: \"\\<I> \\<turnstile>g c r1 \\<surd>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r1 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>g c r1 \\<surd>", "by(rule WT_gpv_ContD)"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>g c r1 \\<surd>\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "have resp: \"r2 \\<in> responses_\\<I> \\<I> out\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r2 \\<in> responses_\\<I> \\<I> out", "using WT_oracle2 s2' outs"], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  (r2, s2') \\<in> set_spmf (oracle2 s2 out)\n  out \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. r2 \\<in> responses_\\<I> \\<I> out", "by(rule WT_calleeD)"], ["proof (state)\nthis:\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "with step.prems(3) out"], ["proof (chain)\npicking this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r2 \\<in> responses_\\<I> \\<I> out", "have WT2: \"\\<I> \\<turnstile>g c r2 \\<surd>\""], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  IO out c \\<in> set_spmf (the_gpv gpv)\n  r2 \\<in> responses_\\<I> \\<I> out\n\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>g c r2 \\<surd>", "by(rule WT_gpv_ContD)"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>g c r2 \\<surd>\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "fix r1' s1'' r2' s2''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "assume s1'': \"(r1', s1'') \\<in> set_spmf (exec_gpv oracle1 (c r1) s1')\"\n          and s2'': \"(r2', s2'') \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\""], ["proof (state)\nthis:\n  (r1', s1'') \\<in> set_spmf (exec_gpv oracle1 (c r1) s1')\n  (r2', s2'') \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "have *: \"bad1 s1'' \\<and> X_bad s1'' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bad1 s1'' \\<and> X_bad s1'' s2'", "using bad2 s1'' bad1 WT1"], ["proof (prove)\nusing this:\n  bad2 s2'\n  (r1', s1'') \\<in> set_spmf (exec_gpv oracle1 (c r1) s1')\n  bad1 s1' \\<and> X_bad s1' s2'\n  \\<I> \\<turnstile>g c r1 \\<surd>\n\ngoal (1 subgoal):\n 1. bad1 s1'' \\<and> X_bad s1'' s2'", "by(rule callee_invariant_on.exec_gpv_invariant[OF bad_sticky1])"], ["proof (state)\nthis:\n  bad1 s1'' \\<and> X_bad s1'' s2'\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "have \"bad2 s2'' \\<and> X_bad s1'' s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bad2 s2'' \\<and> X_bad s1'' s2''", "using _ s2'' _ WT2"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  (r2', s2'') \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  \\<I> \\<turnstile>g c r2 \\<surd>\n\ngoal (1 subgoal):\n 1. bad2 s2'' \\<and> X_bad s1'' s2''", "by(rule callee_invariant_on.exec_gpv_invariant[OF bad_sticky2])(simp_all add: bad2 *)"], ["proof (state)\nthis:\n  bad2 s2'' \\<and> X_bad s1'' s2''\n\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> bad1 b = bad2 ba\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<in> set_spmf (exec_gpv oracle1 (c r1) s1');\n        (aa, ba) \\<in> set_spmf (exec_gpv oracle2 (c r2) s2')\\<rbrakk>\n       \\<Longrightarrow> if bad2 ba then X_bad b ba\n                         else a = aa \\<and> X b ba", "then"], ["proof (chain)\npicking this:\n  bad2 s2'' \\<and> X_bad s1'' s2''", "show \"bad1 s1'' = bad2 s2''\" \"if bad2 s2'' then X_bad s1'' s2'' else r1' = r2' \\<and> X s1'' s2''\""], ["proof (prove)\nusing this:\n  bad2 s2'' \\<and> X_bad s1'' s2''\n\ngoal (1 subgoal):\n 1. bad1 s1'' = bad2 s2'' &&&\n    if bad2 s2'' then X_bad s1'' s2'' else r1' = r2' \\<and> X s1'' s2''", "using *"], ["proof (prove)\nusing this:\n  bad2 s2'' \\<and> X_bad s1'' s2''\n  bad1 s1'' \\<and> X_bad s1'' s2'\n\ngoal (1 subgoal):\n 1. bad1 s1'' = bad2 s2'' &&&\n    if bad2 s2'' then X_bad s1'' s2'' else r1' = r2' \\<and> X s1'' s2''", "by(simp_all)"], ["proof (state)\nthis:\n  bad1 s1'' = bad2 s2''\n  if bad2 s2'' then X_bad s1'' s2'' else r1' = r2' \\<and> X s1'' s2''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>; \\<not> bad2 s2;\n   X s1 s2; IO ?out1 ?c1 \\<in> set_spmf (the_gpv gpv);\n   ((?r1.1, ?s1'1), ?r2.1, ?s2'1) \\<in> set_spmf (joint_oracle s1 s2 ?out1);\n   bad2 ?s2'1\\<rbrakk>\n  \\<Longrightarrow> set_spmf (exec_gpv oracle1 (?c1 ?r1.1) ?s1'1) \\<times>\n                    set_spmf (exec_gpv oracle2 (?c1 ?r2.1) ?s2'1)\n                    \\<subseteq> {((a, s1'), b, s2').\n                                 bad1 s1' = bad2 s2' \\<and>\n                                 (if bad2 s2' then X_bad s1' s2'\n                                  else a = b \\<and> X s1' s2')}\n\ngoal (1 subgoal):\n 1. \\<And>exec_until_bad' gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>if bad2 s2 then X_bad s1 s2 else X s1 s2;\n                    bad1 s1 = bad2 s2;\n                    \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n                   \\<Longrightarrow> set_spmf (exec_until_bad' gpv s1 s2)\n                                     \\<subseteq> {((a, s1'), b, s2').\n            bad1 s1' = bad2 s2' \\<and>\n            (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')};\n        if bad2 s2 then X_bad s1 s2 else X s1 s2; bad1 s1 = bad2 s2;\n        \\<I> \\<turnstile>g gpv \\<surd>\\<rbrakk>\n       \\<Longrightarrow> set_spmf\n                          (if bad1 s1 \\<or> bad2 s2\n                           then pair_spmf (exec_gpv oracle1 gpv s1)\n                                 (exec_gpv oracle2 gpv s2)\n                           else the_gpv gpv \\<bind>\n                                case_generat\n                                 (\\<lambda>x. return_spmf ((x, s1), x, s2))\n                                 (\\<lambda>out f.\n                                     (case (s1, s2) of\n(x, xa) \\<Rightarrow> joint_oracle x xa)\nout \\<bind>\n                                     (\\<lambda>((x, s1'), y, s2').\n   if bad1 s1' \\<or> bad2 s2'\n   then pair_spmf (exec_gpv oracle1 (f x) s1') (exec_gpv oracle2 (f y) s2')\n   else exec_until_bad' (f x) s1' s2')))\n                         \\<subseteq> {((a, s1'), b, s2').\nbad1 s1' = bad2 s2' \\<and>\n(if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad'_ (f x) s1' s2')))\n    \\<subseteq> {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (case a of\n                       (a, s1') \\<Rightarrow>\n                         \\<lambda>b.\n                            case b of\n                            (b, s2') \\<Rightarrow>\n                              bad1 s1' = bad2 s2' \\<and>\n                              (if bad2 s2' then X_bad s1' s2'\n                               else a = b \\<and> X s1' s2'))\n                       b}", "using step.prems"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. set_spmf\n     (if bad1 s1 \\<or> bad2 s2\n      then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n      else the_gpv gpv \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n               | IO out f \\<Rightarrow>\n                   (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                    out \\<bind>\n                   (\\<lambda>((x, s1'), y, s2').\n                       if bad1 s1' \\<or> bad2 s2'\n                       then pair_spmf (exec_gpv oracle1 (f x) s1')\n                             (exec_gpv oracle2 (f y) s2')\n                       else exec_until_bad'_ (f x) s1' s2')))\n    \\<subseteq> {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (case a of\n                       (a, s1') \\<Rightarrow>\n                         \\<lambda>b.\n                            case b of\n                            (b, s2') \\<Rightarrow>\n                              bad1 s1' = bad2 s2' \\<and>\n                              (if bad2 s2' then X_bad s1' s2'\n                               else a = b \\<and> X s1' s2'))\n                       b}", "apply(clarsimp simp add: bind_UNION step.IH 3 WT_gpv_OutD WT_gpv_ContD del: subsetI intro!: UN_least split: generat.split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>; bad2 s2;\n     X_bad s1 s2\\<rbrakk>\n    \\<Longrightarrow> set_spmf (exec_gpv oracle1 gpv s1) \\<times>\n                      set_spmf (exec_gpv oracle2 gpv s2)\n                      \\<subseteq> {((a, s1'), b, s2').\n                                   (bad2 s2' \\<longrightarrow>\n                                    bad1 s1' \\<and> X_bad s1' s2') \\<and>\n                                   (\\<not> bad2 s2' \\<longrightarrow>\n                                    \\<not> bad1 s1' \\<and>\n                                    a = b \\<and> X s1' s2')}\n 2. \\<And>x21 x22 a b aa ba.\n       \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>;\n        \\<not> bad2 s2; X s1 s2; IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        ((a, b), aa, ba) \\<in> set_spmf (joint_oracle s1 s2 x21)\\<rbrakk>\n       \\<Longrightarrow> (bad2 ba \\<longrightarrow>\n                          set_spmf (exec_gpv oracle1 (x22 a) b) \\<times>\n                          set_spmf (exec_gpv oracle2 (x22 aa) ba)\n                          \\<subseteq> {((a, s1'), b, s2').\n (bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n (\\<not> bad2 s2' \\<longrightarrow>\n  \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')}) \\<and>\n                         (\\<not> bad2 ba \\<longrightarrow>\n                          set_spmf (exec_until_bad'_ (x22 a) b ba)\n                          \\<subseteq> {((a, s1'), b, s2').\n (bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n (\\<not> bad2 s2' \\<longrightarrow>\n  \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>; bad2 s2;\n     X_bad s1 s2\\<rbrakk>\n    \\<Longrightarrow> set_spmf (exec_gpv oracle1 gpv s1) \\<times>\n                      set_spmf (exec_gpv oracle2 gpv s2)\n                      \\<subseteq> {((a, s1'), b, s2').\n                                   (bad2 s2' \\<longrightarrow>\n                                    bad1 s1' \\<and> X_bad s1' s2') \\<and>\n                                   (\\<not> bad2 s2' \\<longrightarrow>\n                                    \\<not> bad1 s1' \\<and>\n                                    a = b \\<and> X s1' s2')}", "by(auto 4 3 dest: callee_invariant_on.exec_gpv_invariant[OF bad_sticky1, rotated] callee_invariant_on.exec_gpv_invariant[OF bad_sticky2, rotated] 3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 a b aa ba.\n       \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>;\n        \\<not> bad2 s2; X s1 s2; IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        ((a, b), aa, ba) \\<in> set_spmf (joint_oracle s1 s2 x21)\\<rbrakk>\n       \\<Longrightarrow> (bad2 ba \\<longrightarrow>\n                          set_spmf (exec_gpv oracle1 (x22 a) b) \\<times>\n                          set_spmf (exec_gpv oracle2 (x22 aa) ba)\n                          \\<subseteq> {((a, s1'), b, s2').\n (bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n (\\<not> bad2 s2' \\<longrightarrow>\n  \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')}) \\<and>\n                         (\\<not> bad2 ba \\<longrightarrow>\n                          set_spmf (exec_until_bad'_ (x22 a) b ba)\n                          \\<subseteq> {((a, s1'), b, s2').\n (bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n (\\<not> bad2 s2' \\<longrightarrow>\n  \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')})", "apply(intro strip conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 a b aa ba.\n       \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>;\n        \\<not> bad2 s2; X s1 s2; IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        ((a, b), aa, ba) \\<in> set_spmf (joint_oracle s1 s2 x21);\n        bad2 ba\\<rbrakk>\n       \\<Longrightarrow> set_spmf (exec_gpv oracle1 (x22 a) b) \\<times>\n                         set_spmf (exec_gpv oracle2 (x22 aa) ba)\n                         \\<subseteq> {((a, s1'), b, s2').\n(bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n(\\<not> bad2 s2' \\<longrightarrow>\n \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')}\n 2. \\<And>x21 x22 a b aa ba.\n       \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>;\n        \\<not> bad2 s2; X s1 s2; IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        ((a, b), aa, ba) \\<in> set_spmf (joint_oracle s1 s2 x21);\n        \\<not> bad2 ba\\<rbrakk>\n       \\<Longrightarrow> set_spmf (exec_until_bad'_ (x22 a) b ba)\n                         \\<subseteq> {((a, s1'), b, s2').\n(bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n(\\<not> bad2 s2' \\<longrightarrow>\n \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>; \\<not> bad2 s2;\n     X s1 s2; IO x21_ x22_ \\<in> set_spmf (the_gpv gpv);\n     ((a_, b_), aa_, ba_) \\<in> set_spmf (joint_oracle s1 s2 x21_);\n     bad2 ba_\\<rbrakk>\n    \\<Longrightarrow> set_spmf (exec_gpv oracle1 (x22_ a_) b_) \\<times>\n                      set_spmf (exec_gpv oracle2 (x22_ aa_) ba_)\n                      \\<subseteq> {((a, s1'), b, s2').\n                                   (bad2 s2' \\<longrightarrow>\n                                    bad1 s1' \\<and> X_bad s1' s2') \\<and>\n                                   (\\<not> bad2 s2' \\<longrightarrow>\n                                    \\<not> bad1 s1' \\<and>\n                                    a = b \\<and> X s1' s2')}", "by(drule (6) switch) auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 a b aa ba.\n       \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>;\n        \\<not> bad2 s2; X s1 s2; IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        ((a, b), aa, ba) \\<in> set_spmf (joint_oracle s1 s2 x21);\n        \\<not> bad2 ba\\<rbrakk>\n       \\<Longrightarrow> set_spmf (exec_until_bad'_ (x22 a) b ba)\n                         \\<subseteq> {((a, s1'), b, s2').\n(bad2 s2' \\<longrightarrow> bad1 s1' \\<and> X_bad s1' s2') \\<and>\n(\\<not> bad2 s2' \\<longrightarrow>\n \\<not> bad1 s1' \\<and> a = b \\<and> X s1' s2')}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bad1 s1; \\<I> \\<turnstile>g gpv \\<surd>; \\<not> bad2 s2;\n     X s1 s2; IO x21_ x22_ \\<in> set_spmf (the_gpv gpv);\n     ((a_, b_), aa_, ba_) \\<in> set_spmf (joint_oracle s1 s2 x21_);\n     \\<not> bad2 ba_\\<rbrakk>\n    \\<Longrightarrow> set_spmf (exec_until_bad'_ (x22_ a_) b_ ba_)\n                      \\<subseteq> {((a, s1'), b, s2').\n                                   (bad2 s2' \\<longrightarrow>\n                                    bad1 s1' \\<and> X_bad s1' s2') \\<and>\n                                   (\\<not> bad2 s2' \\<longrightarrow>\n                                    \\<not> bad1 s1' \\<and>\n                                    a = b \\<and> X s1' s2')}", "by(auto 4 3 intro!: step.IH[THEN order.trans] del: subsetI dest: 3 setD[rotated 2] simp add: WT_gpv_OutD WT_gpv_ContD intro: WT_gpv_ContD intro!: WT_calleeD[OF WT_oracle1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_spmf\n   (if bad1 s1 \\<or> bad2 s2\n    then pair_spmf (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n    else the_gpv gpv \\<bind>\n         (\\<lambda>generat.\n             case generat of\n             Pure x \\<Rightarrow> return_spmf ((x, s1), x, s2)\n             | IO out f \\<Rightarrow>\n                 (case (s1, s2) of (a, b) \\<Rightarrow> joint_oracle a b)\n                  out \\<bind>\n                 (\\<lambda>((x, s1'), y, s2').\n                     if bad1 s1' \\<or> bad2 s2'\n                     then pair_spmf (exec_gpv oracle1 (f x) s1')\n                           (exec_gpv oracle2 (f y) s2')\n                     else exec_until_bad'_ (f x) s1' s2')))\n  \\<subseteq> {a. case a of\n                  (a, b) \\<Rightarrow>\n                    (case a of\n                     (a, s1') \\<Rightarrow>\n                       \\<lambda>b.\n                          case b of\n                          (b, s2') \\<Rightarrow>\n                            bad1 s1' = bad2 s2' \\<and>\n                            (if bad2 s2' then X_bad s1' s2'\n                             else a = b \\<and> X s1' s2'))\n                     b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_spmf\n   (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n     oracle2 bad2 gpv s1 s2)\n  \\<subseteq> {(as1, bs2).\n               (case as1 of\n                (a, s1') \\<Rightarrow>\n                  \\<lambda>(b, s2').\n                     bad1 s1' = bad2 s2' \\<and>\n                     (if bad2 s2' then X_bad s1' s2'\n                      else a = b \\<and> X s1' s2'))\n                bs2}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> set_spmf\n              (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2)\n                oracle1 bad1 oracle2 bad2 gpv s1 s2) \\<Longrightarrow>\n       (case x of\n        (a, s1') \\<Rightarrow>\n          \\<lambda>(b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n        y", "then"], ["proof (chain)\npicking this:\n  set_spmf\n   (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n     oracle2 bad2 gpv s1 s2)\n  \\<subseteq> {(as1, bs2).\n               (case as1 of\n                (a, s1') \\<Rightarrow>\n                  \\<lambda>(b, s2').\n                     bad1 s1' = bad2 s2' \\<and>\n                     (if bad2 s2' then X_bad s1' s2'\n                      else a = b \\<and> X s1' s2'))\n                bs2}", "show \"\\<And>x y. (x, y) \\<in> set_spmf ?pq \\<Longrightarrow> ?R x y\""], ["proof (prove)\nusing this:\n  set_spmf\n   (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1 bad1\n     oracle2 bad2 gpv s1 s2)\n  \\<subseteq> {(as1, bs2).\n               (case as1 of\n                (a, s1') \\<Rightarrow>\n                  \\<lambda>(b, s2').\n                     bad1 s1' = bad2 s2' \\<and>\n                     (if bad2 s2' then X_bad s1' s2'\n                      else a = b \\<and> X s1' s2'))\n                bs2}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> set_spmf\n              (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2)\n                oracle1 bad1 oracle2 bad2 gpv s1 s2) \\<Longrightarrow>\n       (case x of\n        (a, s1') \\<Rightarrow>\n          \\<lambda>(b, s2').\n             bad1 s1' = bad2 s2' \\<and>\n             (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n        y", "by auto"], ["proof (state)\nthis:\n  (?x1, ?y1)\n  \\<in> set_spmf\n         (exec_until_bad (\\<lambda>(s1, s2). joint_oracle s1 s2) oracle1\n           bad1 oracle2 bad2 gpv s1 s2) \\<Longrightarrow>\n  (case ?x1 of\n   (a, s1') \\<Rightarrow>\n     \\<lambda>(b, s2').\n        bad1 s1' = bad2 s2' \\<and>\n        (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   ?y1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_gpv_oracle_bisim_bad':\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\" (* stronger than the invariants above because unconditional *)\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "using assms(1-7) lossless_imp_plossless_gpv[OF lossless WT_gpv] assms(9-)"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n  bad1 s1 = bad2 s2\n  \\<lbrakk>X ?s1.0 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2'))\n                     (oracle1 ?s1.0 ?x) (oracle2 ?s2.0 ?x)\n  bad2 ?s2.0 \\<Longrightarrow>\n  callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 ?s2.0)\n   \\<I>\n  bad1 ?s1.0 \\<Longrightarrow>\n  callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad ?s1.0 s2)\n   \\<I>\n  \\<lbrakk>bad1 ?s1.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle1 ?s1.0 ?x)\n  \\<lbrakk>bad2 ?s2.0; ?x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle2 ?s2.0 ?x)\n  plossless_gpv \\<I> gpv\n  \\<I> \\<turnstile>c oracle1 ?s1.0 \\<surd>\n  \\<I> \\<turnstile>c oracle2 ?s2.0 \\<surd>\n  \\<I> \\<turnstile>g gpv \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "by(rule exec_gpv_oracle_bisim_bad_plossless)"], ["", "lemma exec_gpv_oracle_bisim_bad_invariant:\n  fixes s1 :: 's1 and s2 :: 's2 and X :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> bool\" and I1 :: \"'s1 \\<Rightarrow> bool\" and I2 :: \"'s2 \\<Rightarrow> bool\"\n  and oracle1 :: \"'s1 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's1) spmf\"\n  and oracle2 :: \"'s2 \\<Rightarrow> 'a \\<Rightarrow> ('b \\<times> 's2) spmf\"\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. \\<lbrakk> X s1 s2; x \\<in> outs_\\<I> \\<I>; I1 s1; I2 s2 \\<rbrakk> \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. \\<lbrakk> bad2 s2; I2 s2 \\<rbrakk> \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. \\<lbrakk> bad1 s1; I1 s1 \\<rbrakk> \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. \\<lbrakk> bad1 s1; I1 s1; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. \\<lbrakk> bad2 s2; I2 s2; x \\<in> outs_\\<I> \\<I> \\<rbrakk> \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  and I1: \"callee_invariant_on oracle1 I1 \\<I>\"\n  and I2: \"callee_invariant_on oracle2 I2 \\<I>\"\n  and s1: \"I1 s1\"\n  and s2: \"I2 s2\"\n  shows \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "including lifting_syntax"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "interpret I1: callee_invariant_on oracle1 I1 \\<I>"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant_on oracle1 I1 \\<I>", "by(fact I1)"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "interpret I2: callee_invariant_on oracle2 I2 \\<I>"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant_on oracle2 I2 \\<I>", "by(fact I2)"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "from s1"], ["proof (chain)\npicking this:\n  I1 s1", "have nonempty1: \"{s. I1 s} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  I1 s1\n\ngoal (1 subgoal):\n 1. {s. I1 s} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  {s. I1 s} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "{"], ["proof (state)\nthis:\n  {s. I1 s} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "assume \"\\<exists>(Rep1 :: 's1' \\<Rightarrow> 's1) Abs1. type_definition Rep1 Abs1 {s. I1 s}\"\n      and \"\\<exists>(Rep2 :: 's2' \\<Rightarrow> 's2) Abs2. type_definition Rep2 Abs2 {s. I2 s}\""], ["proof (state)\nthis:\n  \\<exists>Rep1 Abs1. type_definition Rep1 Abs1 {s. I1 s}\n  \\<exists>Rep2 Abs2. type_definition Rep2 Abs2 {s. I2 s}\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>Rep1 Abs1. type_definition Rep1 Abs1 {s. I1 s}\n  \\<exists>Rep2 Abs2. type_definition Rep2 Abs2 {s. I2 s}", "obtain Rep1 :: \"'s1' \\<Rightarrow> 's1\" and Abs1 and Rep2 :: \"'s2' \\<Rightarrow> 's2\" and Abs2\n      where td1: \"type_definition Rep1 Abs1 {s. I1 s}\" and td2: \"type_definition Rep2 Abs2 {s. I2 s}\""], ["proof (prove)\nusing this:\n  \\<exists>Rep1 Abs1. type_definition Rep1 Abs1 {s. I1 s}\n  \\<exists>Rep2 Abs2. type_definition Rep2 Abs2 {s. I2 s}\n\ngoal (1 subgoal):\n 1. (\\<And>Rep1 Abs1 Rep2 Abs2.\n        \\<lbrakk>type_definition Rep1 Abs1 {s. I1 s};\n         type_definition Rep2 Abs2 {s. I2 s}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  type_definition Rep1 Abs1 {s. I1 s}\n  type_definition Rep2 Abs2 {s. I2 s}\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "interpret td1: type_definition Rep1 Abs1 \"{s. I1 s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_definition Rep1 Abs1 {s. I1 s}", "by(rule td1)"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "interpret td2: type_definition Rep2 Abs2 \"{s. I2 s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_definition Rep2 Abs2 {s. I2 s}", "by(rule td2)"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define cr1 where \"cr1 \\<equiv> \\<lambda>x y. x = Rep1 y\""], ["proof (state)\nthis:\n  cr1 \\<equiv> \\<lambda>x y. x = Rep1 y\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"bi_unique cr1\" \"right_total cr1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bi_unique cr1 &&& right_total cr1", "using td1 cr1_def"], ["proof (prove)\nusing this:\n  type_definition Rep1 Abs1 {s. I1 s}\n  cr1 \\<equiv> \\<lambda>x y. x = Rep1 y\n\ngoal (1 subgoal):\n 1. bi_unique cr1 &&& right_total cr1", "by(rule typedef_bi_unique typedef_right_total)+"], ["proof (state)\nthis:\n  bi_unique cr1\n  right_total cr1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_domain_rule]: \"Domainp cr1 = I1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp cr1 = I1", "using type_definition_Domainp[OF td1 cr1_def]"], ["proof (prove)\nusing this:\n  Domainp cr1 = (\\<lambda>x. x \\<in> {s. I1 s})\n\ngoal (1 subgoal):\n 1. Domainp cr1 = I1", "by simp"], ["proof (state)\nthis:\n  Domainp cr1 = I1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define cr2 where \"cr2 \\<equiv> \\<lambda>x y. x = Rep2 y\""], ["proof (state)\nthis:\n  cr2 \\<equiv> \\<lambda>x y. x = Rep2 y\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"bi_unique cr2\" \"right_total cr2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bi_unique cr2 &&& right_total cr2", "using td2 cr2_def"], ["proof (prove)\nusing this:\n  type_definition Rep2 Abs2 {s. I2 s}\n  cr2 \\<equiv> \\<lambda>x y. x = Rep2 y\n\ngoal (1 subgoal):\n 1. bi_unique cr2 &&& right_total cr2", "by(rule typedef_bi_unique typedef_right_total)+"], ["proof (state)\nthis:\n  bi_unique cr2\n  right_total cr2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_domain_rule]: \"Domainp cr2 = I2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp cr2 = I2", "using type_definition_Domainp[OF td2 cr2_def]"], ["proof (prove)\nusing this:\n  Domainp cr2 = (\\<lambda>x. x \\<in> {s. I2 s})\n\ngoal (1 subgoal):\n 1. Domainp cr2 = I2", "by simp"], ["proof (state)\nthis:\n  Domainp cr2 = I2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "let ?C = \"eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define oracle1' where \"oracle1' \\<equiv> (Rep1 ---> id ---> map_spmf (map_prod id Abs1)) oracle1\""], ["proof (state)\nthis:\n  oracle1' \\<equiv> (Rep1 ---> id ---> map_spmf (map_prod id Abs1)) oracle1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr1 ===> ?C ===> rel_spmf (rel_prod (=) cr1)) oracle1 oracle1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr1 ===>\n     eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n     rel_spmf (rel_prod (=) cr1))\n     oracle1 oracle1'", "by(auto simp add: oracle1'_def rel_fun_def cr1_def spmf_rel_map prod.rel_map td1.Abs_inverse eq_onp_def intro!: rel_spmf_reflI intro: td1.Rep[simplified] dest: I1.callee_invariant)"], ["proof (state)\nthis:\n  (cr1 ===>\n   eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n   rel_spmf (rel_prod (=) cr1))\n   oracle1 oracle1'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define oracle2' where \"oracle2' \\<equiv> (Rep2 ---> id ---> map_spmf (map_prod id Abs2)) oracle2\""], ["proof (state)\nthis:\n  oracle2' \\<equiv> (Rep2 ---> id ---> map_spmf (map_prod id Abs2)) oracle2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr2 ===> ?C ===> rel_spmf (rel_prod (=) cr2)) oracle2 oracle2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr2 ===>\n     eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n     rel_spmf (rel_prod (=) cr2))\n     oracle2 oracle2'", "by(auto simp add: oracle2'_def rel_fun_def cr2_def spmf_rel_map prod.rel_map td2.Abs_inverse eq_onp_def intro!: rel_spmf_reflI intro: td2.Rep[simplified] dest: I2.callee_invariant)"], ["proof (state)\nthis:\n  (cr2 ===>\n   eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n   rel_spmf (rel_prod (=) cr2))\n   oracle2 oracle2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define s1' where \"s1' \\<equiv> Abs1 s1\""], ["proof (state)\nthis:\n  s1' \\<equiv> Abs1 s1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"cr1 s1 s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cr1 s1 s1'", "using s1"], ["proof (prove)\nusing this:\n  I1 s1\n\ngoal (1 subgoal):\n 1. cr1 s1 s1'", "by(simp add: cr1_def s1'_def td1.Abs_inverse)"], ["proof (state)\nthis:\n  cr1 s1 s1'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define s2' where \"s2' \\<equiv> Abs2 s2\""], ["proof (state)\nthis:\n  s2' \\<equiv> Abs2 s2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"cr2 s2 s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cr2 s2 s2'", "using s2"], ["proof (prove)\nusing this:\n  I2 s2\n\ngoal (1 subgoal):\n 1. cr2 s2 s2'", "by(simp add: cr2_def s2'_def td2.Abs_inverse)"], ["proof (state)\nthis:\n  cr2 s2 s2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define bad1' where \"bad1' \\<equiv> (Rep1 ---> id) bad1\""], ["proof (state)\nthis:\n  bad1' \\<equiv> (Rep1 ---> id) bad1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr1 ===> (=)) bad1 bad1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr1 ===> (=)) bad1 bad1'", "by(simp add: rel_fun_def bad1'_def cr1_def)"], ["proof (state)\nthis:\n  (cr1 ===> (=)) bad1 bad1'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define bad2' where \"bad2' \\<equiv> (Rep2 ---> id) bad2\""], ["proof (state)\nthis:\n  bad2' \\<equiv> (Rep2 ---> id) bad2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr2 ===> (=)) bad2 bad2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr2 ===> (=)) bad2 bad2'", "by(simp add: rel_fun_def bad2'_def cr2_def)"], ["proof (state)\nthis:\n  (cr2 ===> (=)) bad2 bad2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define X' where \"X' \\<equiv> (Rep1 ---> Rep2 ---> id) X\""], ["proof (state)\nthis:\n  X' \\<equiv> (Rep1 ---> Rep2 ---> id) X\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr1 ===> cr2 ===> (=)) X X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr1 ===> cr2 ===> (=)) X X'", "by(simp add: rel_fun_def X'_def cr1_def cr2_def)"], ["proof (state)\nthis:\n  (cr1 ===> cr2 ===> (=)) X X'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define X_bad' where \"X_bad' \\<equiv> (Rep1 ---> Rep2 ---> id) X_bad\""], ["proof (state)\nthis:\n  X_bad' \\<equiv> (Rep1 ---> Rep2 ---> id) X_bad\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"(cr1 ===> cr2 ===> (=)) X_bad X_bad'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr1 ===> cr2 ===> (=)) X_bad X_bad'", "by(simp add: rel_fun_def X_bad'_def cr1_def cr2_def)"], ["proof (state)\nthis:\n  (cr1 ===> cr2 ===> (=)) X_bad X_bad'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "define gpv' where \"gpv' \\<equiv> restrict_gpv \\<I> gpv\""], ["proof (state)\nthis:\n  gpv' \\<equiv> restrict_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"rel_gpv (=) ?C gpv' gpv'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_gpv (=) (eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>)) gpv' gpv'", "by(fold eq_onp_top_eq_eq)(auto simp add: gpv.rel_eq_onp eq_onp_same_args pred_gpv_def gpv'_def dest: in_outs'_restrict_gpvD)"], ["proof (state)\nthis:\n  rel_gpv (=) (eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>)) gpv' gpv'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"if bad2' s2' then X_bad' s1' s2' else X' s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if bad2' s2' then X_bad' s1' s2' else X' s1' s2'", "using *"], ["proof (prove)\nusing this:\n  if bad2 s2 then X_bad s1 s2 else X s1 s2\n\ngoal (1 subgoal):\n 1. if bad2' s2' then X_bad' s1' s2' else X' s1' s2'", "by transfer"], ["proof (state)\nthis:\n  if bad2' s2' then X_bad' s1' s2' else X' s1' s2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  if bad2' s2' then X_bad' s1' s2' else X' s1' s2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"bad1' s1' \\<longleftrightarrow> bad2' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bad1' s1' = bad2' s2'", "using bad"], ["proof (prove)\nusing this:\n  bad1 s1 = bad2 s2\n\ngoal (1 subgoal):\n 1. bad1' s1' = bad2' s2'", "by transfer"], ["proof (state)\nthis:\n  bad1' s1' = bad2' s2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  bad1' s1' = bad2' s2'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have x: \"?C x x\" if \"x \\<in> outs_\\<I> \\<I>\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) x x", "using that"], ["proof (prove)\nusing this:\n  x \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) x x", "by(simp add: eq_onp_def)"], ["proof (state)\nthis:\n  ?x1 \\<in> outs_\\<I> \\<I> \\<Longrightarrow>\n  eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ?x1 ?x1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"rel_spmf (\\<lambda>(a, s1') (b, s2'). (bad1' s1' \\<longleftrightarrow> bad2' s2') \\<and> (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2')) (oracle1' s1 x) (oracle2' s2 x)\"\n      if \"X' s1 s2\" and \"x \\<in> outs_\\<I> \\<I>\" for s1 s2 x"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1' s1' = bad2' s2' \\<and>\n         (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n     (oracle1' s1 x) (oracle2' s2 x)", "using that(1)"], ["proof (prove)\nusing this:\n  X' s1 s2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1' s1' = bad2' s2' \\<and>\n         (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n     (oracle1' s1 x) (oracle2' s2 x)", "supply that(2)[THEN x, transfer_rule]"], ["proof (prove)\nusing this:\n  X' s1 s2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1' s1' = bad2' s2' \\<and>\n         (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n     (oracle1' s1 x) (oracle2' s2 x)", "by(transfer)(rule bisim[OF _ that(2)])"], ["proof (state)\nthis:\n  \\<lbrakk>X' ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1' s1' = bad2' s2' \\<and>\n                         (if bad2' s2' then X_bad' s1' s2'\n                          else a = b \\<and> X' s1' s2'))\n                     (oracle1' ?s1.1 ?x1) (oracle2' ?s2.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>X' ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1' s1' = bad2' s2' \\<and>\n                         (if bad2' s2' then X_bad' s1' s2'\n                          else a = b \\<and> X' s1' s2'))\n                     (oracle1' ?s1.1 ?x1) (oracle2' ?s2.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"rel_\\<I> ?C (=) \\<I> \\<I>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_\\<I> (eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>)) (=) \\<I> \\<I>", "by(rule rel_\\<I>I)(auto simp add: set_relator_eq_onp eq_onp_same_args rel_set_eq dest: eq_onp_to_eq)"], ["proof (state)\nthis:\n  rel_\\<I> (eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>)) (=) \\<I> \\<I>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"callee_invariant_on oracle1' (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 s2) \\<I>\" if \"bad2' s2\" for s2"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant_on oracle1' (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 s2)\n     \\<I>", "using that"], ["proof (prove)\nusing this:\n  bad2' s2\n\ngoal (1 subgoal):\n 1. callee_invariant_on oracle1' (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 s2)\n     \\<I>", "unfolding callee_invariant_on_alt_def"], ["proof (prove)\nusing this:\n  bad2' s2\n\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>{s1. bad1' s1 \\<and> X_bad' s1 s2}.\n        \\<forall>x\\<in>outs_\\<I> \\<I>.\n           \\<forall>(y, s1)\\<in>set_spmf (oracle1' s x).\n              bad1' s1 \\<and> X_bad' s1 s2) \\<and>\n    (\\<forall>s\\<in>{s1. bad1' s1 \\<and> X_bad' s1 s2}. \\<I> \\<turnstile>c\n        oracle1' s \\<surd>)", "apply(transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s2.\n       \\<lbrakk>I2 s2; bad2 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<in>{x.\n    (bad1 x \\<and> X_bad x s2) \\<and> I1 x}.\n                             \\<forall>x\\<in>outs_\\<I> \\<I>.\n                                \\<forall>(y, s1)\\<in>set_spmf (oracle1 s x).\n                                   bad1 s1 \\<and> X_bad s1 s2) \\<and>\n                         (\\<forall>s\\<in>{x.\n    (bad1 x \\<and> X_bad x s2) \\<and> I1 x}.\n                             \\<I> \\<turnstile>c oracle1 s \\<surd>)", "using bad_sticky1[unfolded callee_invariant_on_alt_def]"], ["proof (prove)\nusing this:\n  \\<lbrakk>bad2 ?s2.0; I2 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>s\\<in>{s1. bad1 s1 \\<and> X_bad s1 ?s2.0}.\n                        \\<forall>x\\<in>outs_\\<I> \\<I>.\n                           \\<forall>(y, s1)\\<in>set_spmf (oracle1 s x).\n                              bad1 s1 \\<and> X_bad s1 ?s2.0) \\<and>\n                    (\\<forall>s\\<in>{s1. bad1 s1 \\<and> X_bad s1 ?s2.0}.\n                        \\<I> \\<turnstile>c oracle1 s \\<surd>)\n\ngoal (1 subgoal):\n 1. \\<And>s2.\n       \\<lbrakk>I2 s2; bad2 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<in>{x.\n    (bad1 x \\<and> X_bad x s2) \\<and> I1 x}.\n                             \\<forall>x\\<in>outs_\\<I> \\<I>.\n                                \\<forall>(y, s1)\\<in>set_spmf (oracle1 s x).\n                                   bad1 s1 \\<and> X_bad s1 s2) \\<and>\n                         (\\<forall>s\\<in>{x.\n    (bad1 x \\<and> X_bad x s2) \\<and> I1 x}.\n                             \\<I> \\<turnstile>c oracle1 s \\<surd>)", "by blast"], ["proof (state)\nthis:\n  bad2' ?s2.1 \\<Longrightarrow>\n  callee_invariant_on oracle1'\n   (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 ?s2.1) \\<I>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  bad2' ?s2.1 \\<Longrightarrow>\n  callee_invariant_on oracle1'\n   (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 ?s2.1) \\<I>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"callee_invariant_on oracle2' (\\<lambda>s2. bad2' s2 \\<and> X_bad' s1 s2) \\<I>\" if \"bad1' s1\" for s1"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant_on oracle2' (\\<lambda>s2. bad2' s2 \\<and> X_bad' s1 s2)\n     \\<I>", "using that"], ["proof (prove)\nusing this:\n  bad1' s1\n\ngoal (1 subgoal):\n 1. callee_invariant_on oracle2' (\\<lambda>s2. bad2' s2 \\<and> X_bad' s1 s2)\n     \\<I>", "unfolding callee_invariant_on_alt_def"], ["proof (prove)\nusing this:\n  bad1' s1\n\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>{s2. bad2' s2 \\<and> X_bad' s1 s2}.\n        \\<forall>x\\<in>outs_\\<I> \\<I>.\n           \\<forall>(y, s2)\\<in>set_spmf (oracle2' s x).\n              bad2' s2 \\<and> X_bad' s1 s2) \\<and>\n    (\\<forall>s\\<in>{s2. bad2' s2 \\<and> X_bad' s1 s2}. \\<I> \\<turnstile>c\n        oracle2' s \\<surd>)", "apply(transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1.\n       \\<lbrakk>I1 s1; bad1 s1\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<in>{x.\n    (bad2 x \\<and> X_bad s1 x) \\<and> I2 x}.\n                             \\<forall>x\\<in>outs_\\<I> \\<I>.\n                                \\<forall>(y, s2)\\<in>set_spmf (oracle2 s x).\n                                   bad2 s2 \\<and> X_bad s1 s2) \\<and>\n                         (\\<forall>s\\<in>{x.\n    (bad2 x \\<and> X_bad s1 x) \\<and> I2 x}.\n                             \\<I> \\<turnstile>c oracle2 s \\<surd>)", "using bad_sticky2[unfolded callee_invariant_on_alt_def]"], ["proof (prove)\nusing this:\n  \\<lbrakk>bad1 ?s1.0; I1 ?s1.0\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>s\\<in>{s2. bad2 s2 \\<and> X_bad ?s1.0 s2}.\n                        \\<forall>x\\<in>outs_\\<I> \\<I>.\n                           \\<forall>(y, s2)\\<in>set_spmf (oracle2 s x).\n                              bad2 s2 \\<and> X_bad ?s1.0 s2) \\<and>\n                    (\\<forall>s\\<in>{s2. bad2 s2 \\<and> X_bad ?s1.0 s2}.\n                        \\<I> \\<turnstile>c oracle2 s \\<surd>)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       \\<lbrakk>I1 s1; bad1 s1\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<in>{x.\n    (bad2 x \\<and> X_bad s1 x) \\<and> I2 x}.\n                             \\<forall>x\\<in>outs_\\<I> \\<I>.\n                                \\<forall>(y, s2)\\<in>set_spmf (oracle2 s x).\n                                   bad2 s2 \\<and> X_bad s1 s2) \\<and>\n                         (\\<forall>s\\<in>{x.\n    (bad2 x \\<and> X_bad s1 x) \\<and> I2 x}.\n                             \\<I> \\<turnstile>c oracle2 s \\<surd>)", "by blast"], ["proof (state)\nthis:\n  bad1' ?s1.1 \\<Longrightarrow>\n  callee_invariant_on oracle2'\n   (\\<lambda>s2. bad2' s2 \\<and> X_bad' ?s1.1 s2) \\<I>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  bad1' ?s1.1 \\<Longrightarrow>\n  callee_invariant_on oracle2'\n   (\\<lambda>s2. bad2' s2 \\<and> X_bad' ?s1.1 s2) \\<I>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"lossless_spmf (oracle1' s1 x)\" if \"bad1' s1\" \"x \\<in> outs_\\<I> \\<I>\" for s1 x"], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (oracle1' s1 x)", "using that"], ["proof (prove)\nusing this:\n  bad1' s1\n  x \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. lossless_spmf (oracle1' s1 x)", "supply that(2)[THEN x, transfer_rule]"], ["proof (prove)\nusing this:\n  bad1' s1\n  x \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. lossless_spmf (oracle1' s1 x)", "by transfer(rule lossless1)"], ["proof (state)\nthis:\n  \\<lbrakk>bad1' ?s1.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle1' ?s1.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>bad1' ?s1.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle1' ?s1.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"lossless_spmf (oracle2' s2 x)\" if \"bad2' s2\" \"x \\<in> outs_\\<I> \\<I>\" for s2 x"], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (oracle2' s2 x)", "using that"], ["proof (prove)\nusing this:\n  bad2' s2\n  x \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. lossless_spmf (oracle2' s2 x)", "supply that(2)[THEN x, transfer_rule]"], ["proof (prove)\nusing this:\n  bad2' s2\n  x \\<in> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. lossless_spmf (oracle2' s2 x)", "by transfer(rule lossless2)"], ["proof (state)\nthis:\n  \\<lbrakk>bad2' ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle2' ?s2.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>bad2' ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle2' ?s2.1 ?x1)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"lossless_gpv \\<I> gpv'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_gpv \\<I> gpv'", "using WT_gpv lossless"], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  lossless_gpv \\<I> gpv\n\ngoal (1 subgoal):\n 1. lossless_gpv \\<I> gpv'", "by(simp add: gpv'_def lossless_restrict_gpvI)"], ["proof (state)\nthis:\n  lossless_gpv \\<I> gpv'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  lossless_gpv \\<I> gpv'\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"\\<I> \\<turnstile>c oracle1' s1 \\<surd>\" for s1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>c oracle1' s1 \\<surd>", "using I1.WT_callee"], ["proof (prove)\nusing this:\n  I1 ?s \\<Longrightarrow> \\<I> \\<turnstile>c oracle1 ?s \\<surd>\n\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>c oracle1' s1 \\<surd>", "by transfer"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>c oracle1' ?s1.1 \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>c oracle1' ?s1.1 \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"\\<I> \\<turnstile>c oracle2' s2 \\<surd>\" for s2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>c oracle2' s2 \\<surd>", "using I2.WT_callee"], ["proof (prove)\nusing this:\n  I2 ?s \\<Longrightarrow> \\<I> \\<turnstile>c oracle2 ?s \\<surd>\n\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>c oracle2' s2 \\<surd>", "by transfer"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>c oracle2' ?s2.1 \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "moreover"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>c oracle2' ?s2.1 \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"\\<I> \\<turnstile>g gpv' \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>g gpv' \\<surd>", "by(simp add: gpv'_def)"], ["proof (state)\nthis:\n  \\<I> \\<turnstile>g gpv' \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "ultimately"], ["proof (chain)\npicking this:\n  if bad2' s2' then X_bad' s1' s2' else X' s1' s2'\n  bad1' s1' = bad2' s2'\n  \\<lbrakk>X' ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1' s1' = bad2' s2' \\<and>\n                         (if bad2' s2' then X_bad' s1' s2'\n                          else a = b \\<and> X' s1' s2'))\n                     (oracle1' ?s1.1 ?x1) (oracle2' ?s2.1 ?x1)\n  bad2' ?s2.1 \\<Longrightarrow>\n  callee_invariant_on oracle1'\n   (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 ?s2.1) \\<I>\n  bad1' ?s1.1 \\<Longrightarrow>\n  callee_invariant_on oracle2'\n   (\\<lambda>s2. bad2' s2 \\<and> X_bad' ?s1.1 s2) \\<I>\n  \\<lbrakk>bad1' ?s1.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle1' ?s1.1 ?x1)\n  \\<lbrakk>bad2' ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle2' ?s2.1 ?x1)\n  lossless_gpv \\<I> gpv'\n  \\<I> \\<turnstile>c oracle1' ?s1.1 \\<surd>\n  \\<I> \\<turnstile>c oracle2' ?s2.1 \\<surd>\n  \\<I> \\<turnstile>g gpv' \\<surd>", "have **: \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1' s1' = bad2' s2' \\<and> (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2')) (exec_gpv oracle1' gpv' s1') (exec_gpv oracle2' gpv' s2')\""], ["proof (prove)\nusing this:\n  if bad2' s2' then X_bad' s1' s2' else X' s1' s2'\n  bad1' s1' = bad2' s2'\n  \\<lbrakk>X' ?s1.1 ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1' s1' = bad2' s2' \\<and>\n                         (if bad2' s2' then X_bad' s1' s2'\n                          else a = b \\<and> X' s1' s2'))\n                     (oracle1' ?s1.1 ?x1) (oracle2' ?s2.1 ?x1)\n  bad2' ?s2.1 \\<Longrightarrow>\n  callee_invariant_on oracle1'\n   (\\<lambda>s1. bad1' s1 \\<and> X_bad' s1 ?s2.1) \\<I>\n  bad1' ?s1.1 \\<Longrightarrow>\n  callee_invariant_on oracle2'\n   (\\<lambda>s2. bad2' s2 \\<and> X_bad' ?s1.1 s2) \\<I>\n  \\<lbrakk>bad1' ?s1.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle1' ?s1.1 ?x1)\n  \\<lbrakk>bad2' ?s2.1; ?x1 \\<in> outs_\\<I> \\<I>\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf (oracle2' ?s2.1 ?x1)\n  lossless_gpv \\<I> gpv'\n  \\<I> \\<turnstile>c oracle1' ?s1.1 \\<surd>\n  \\<I> \\<turnstile>c oracle2' ?s2.1 \\<surd>\n  \\<I> \\<turnstile>g gpv' \\<surd>\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1' s1' = bad2' s2' \\<and>\n         (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n     (exec_gpv oracle1' gpv' s1') (exec_gpv oracle2' gpv' s2')", "by(rule exec_gpv_oracle_bisim_bad')"], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1' s1' = bad2' s2' \\<and>\n       (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n   (exec_gpv oracle1' gpv' s1') (exec_gpv oracle2' gpv' s2')\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have [transfer_rule]: \"((=) ===> ?C ===> rel_spmf (rel_prod (=) (=))) oracle2 oracle2\"\n      \"((=) ===> ?C ===> rel_spmf (rel_prod (=) (=))) oracle1 oracle1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===>\n     eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n     rel_spmf (rel_prod (=) (=)))\n     oracle2 oracle2 &&&\n    ((=) ===>\n     eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n     rel_spmf (rel_prod (=) (=)))\n     oracle1 oracle1", "by(simp_all add: rel_fun_def eq_onp_def prod.rel_eq)"], ["proof (state)\nthis:\n  ((=) ===>\n   eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n   rel_spmf (rel_prod (=) (=)))\n   oracle2 oracle2\n  ((=) ===>\n   eq_onp (\\<lambda>out. out \\<in> outs_\\<I> \\<I>) ===>\n   rel_spmf (rel_prod (=) (=)))\n   oracle1 oracle1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "note [transfer_rule] = bi_unique_eq_onp bi_unique_eq"], ["proof (state)\nthis:\n  bi_unique (eq_onp ?P)\n  bi_unique (=)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "from **"], ["proof (chain)\npicking this:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1' s1' = bad2' s2' \\<and>\n       (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n   (exec_gpv oracle1' gpv' s1') (exec_gpv oracle2' gpv' s2')", "have \"rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (exec_gpv oracle1 gpv' s1) (exec_gpv oracle2 gpv' s2)\""], ["proof (prove)\nusing this:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1' s1' = bad2' s2' \\<and>\n       (if bad2' s2' then X_bad' s1' s2' else a = b \\<and> X' s1' s2'))\n   (exec_gpv oracle1' gpv' s1') (exec_gpv oracle2' gpv' s2')\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv' s1) (exec_gpv oracle2 gpv' s2)", "by(transfer)"], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv' s1) (exec_gpv oracle2 gpv' s2)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "also"], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv' s1) (exec_gpv oracle2 gpv' s2)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"exec_gpv oracle1 gpv' s1 = exec_gpv oracle1 gpv s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv oracle1 gpv' s1 = exec_gpv oracle1 gpv s1", "unfolding gpv'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv oracle1 (restrict_gpv \\<I> gpv) s1 = exec_gpv oracle1 gpv s1", "using WT_gpv s1"], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  I1 s1\n\ngoal (1 subgoal):\n 1. exec_gpv oracle1 (restrict_gpv \\<I> gpv) s1 = exec_gpv oracle1 gpv s1", "by(rule I1.exec_gpv_restrict_gpv_invariant)"], ["proof (state)\nthis:\n  exec_gpv oracle1 gpv' s1 = exec_gpv oracle1 gpv s1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "also"], ["proof (state)\nthis:\n  exec_gpv oracle1 gpv' s1 = exec_gpv oracle1 gpv s1\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have \"exec_gpv oracle2 gpv' s2 = exec_gpv oracle2 gpv s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv oracle2 gpv' s2 = exec_gpv oracle2 gpv s2", "unfolding gpv'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv oracle2 (restrict_gpv \\<I> gpv) s2 = exec_gpv oracle2 gpv s2", "using WT_gpv s2"], ["proof (prove)\nusing this:\n  \\<I> \\<turnstile>g gpv \\<surd>\n  I2 s2\n\ngoal (1 subgoal):\n 1. exec_gpv oracle2 (restrict_gpv \\<I> gpv) s2 = exec_gpv oracle2 gpv s2", "by(rule I2.exec_gpv_restrict_gpv_invariant)"], ["proof (state)\nthis:\n  exec_gpv oracle2 gpv' s2 = exec_gpv oracle2 gpv s2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "finally"], ["proof (chain)\npicking this:\n  rel_spmf\n   (\\<lambda>a.\n       case a of\n       (a, s1') \\<Rightarrow>\n         \\<lambda>b.\n            case b of\n            (b, s2') \\<Rightarrow>\n              bad1 s1' = bad2 s2' \\<and>\n              (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "have ?thesis"], ["proof (prove)\nusing this:\n  rel_spmf\n   (\\<lambda>a.\n       case a of\n       (a, s1') \\<Rightarrow>\n         \\<lambda>b.\n            case b of\n            (b, s2') \\<Rightarrow>\n              bad1 s1' = bad2 s2' \\<and>\n              (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "."], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>Rep1 Abs1. type_definition Rep1 Abs1 {s. I1 s};\n   \\<exists>Rep2 Abs2. type_definition Rep2 Abs2 {s. I2 s}\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2'))\n                     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "from this[cancel_type_definition, OF nonempty1, cancel_type_definition] s2"], ["proof (chain)\npicking this:\n  {s. I2 s} \\<noteq> {} \\<Longrightarrow>\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n  I2 s2", "show ?thesis"], ["proof (prove)\nusing this:\n  {s. I2 s} \\<noteq> {} \\<Longrightarrow>\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n  I2 s2\n\ngoal (1 subgoal):\n 1. rel_spmf\n     (\\<lambda>(a, s1') (b, s2').\n         bad1 s1' = bad2 s2' \\<and>\n         (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "by blast"], ["proof (state)\nthis:\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2'))\n   (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_gpv_oracle_bisim_bad:\n  assumes *: \"if bad2 s2 then X_bad s1 s2 else X s1 s2\"\n  and bad: \"bad1 s1 = bad2 s2\"\n  and bisim: \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (if bad2 s2' then X_bad s1' s2' else a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and bad_sticky1: \"\\<And>s2. bad2 s2 \\<Longrightarrow> callee_invariant_on oracle1 (\\<lambda>s1. bad1 s1 \\<and> X_bad s1 s2) \\<I>\"\n  and bad_sticky2: \"\\<And>s1. bad1 s1 \\<Longrightarrow> callee_invariant_on oracle2 (\\<lambda>s2. bad2 s2 \\<and> X_bad s1 s2) \\<I>\"\n  and lossless1: \"\\<And>s1 x. bad1 s1 \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and lossless2: \"\\<And>s2 x. bad2 s2 \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and lossless: \"lossless_gpv \\<I> gpv\"\n  and WT_oracle1: \"\\<And>s1. \\<I> \\<turnstile>c oracle1 s1 \\<surd>\"\n  and WT_oracle2: \"\\<And>s2. \\<I> \\<turnstile>c oracle2 s2 \\<surd>\"\n  and WT_gpv: \"\\<I> \\<turnstile>g gpv \\<surd>\"\n  and R: \"\\<And>a s1 b s2. \\<lbrakk> bad1 s1 = bad2 s2; \\<not> bad2 s2 \\<Longrightarrow> a = b \\<and> X s1 s2; bad2 s2 \\<Longrightarrow> X_bad s1 s2 \\<rbrakk> \\<Longrightarrow> R (a, s1) (b, s2)\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "using exec_gpv_oracle_bisim_bad'[OF * bad bisim bad_sticky1 bad_sticky2 lossless1 lossless2 lossless WT_oracle1 WT_oracle2 WT_gpv]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>s1 s2 x.\n              \\<lbrakk>X s1 s2; x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n              \\<Longrightarrow> X s1 s2;\n   \\<And>s2. bad2 s2 \\<Longrightarrow> bad2 s2;\n   \\<And>s1. bad1 s1 \\<Longrightarrow> bad1 s1;\n   \\<And>s1 x.\n      \\<lbrakk>bad1 s1; x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n      \\<Longrightarrow> bad1 s1;\n   \\<And>s2 x.\n      \\<lbrakk>bad2 s2; x \\<in> outs_\\<I> \\<I>\\<rbrakk>\n      \\<Longrightarrow> bad2 s2\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (\\<lambda>(a, s1') (b, s2').\n                         bad1 s1' = bad2 s2' \\<and>\n                         (if bad2 s2' then X_bad s1' s2'\n                          else a = b \\<and> X s1' s2'))\n                     (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\n\ngoal (1 subgoal):\n 1. rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "by(rule rel_spmf_mono)(auto intro: R)"], ["", "lemma exec_gpv_oracle_bisim_bad_full:\n  assumes \"X s1 s2\"\n  and \"bad1 s1 = bad2 s2\"\n  and \"\\<And>s1 s2 x. X s1 s2 \\<Longrightarrow> rel_spmf (\\<lambda>(a, s1') (b, s2'). bad1 s1' = bad2 s2' \\<and> (\\<not> bad2 s2' \\<longrightarrow> a = b \\<and> X s1' s2')) (oracle1 s1 x) (oracle2 s2 x)\"\n  and \"callee_invariant oracle1 bad1\"\n  and \"callee_invariant oracle2 bad2\"\n  and \"\\<And>s1 x. bad1 s1 \\<Longrightarrow> lossless_spmf (oracle1 s1 x)\"\n  and \"\\<And>s2 x. bad2 s2 \\<Longrightarrow> lossless_spmf (oracle2 s2 x)\"\n  and \"lossless_gpv \\<I>_full gpv\"\n  and R: \"\\<And>a s1 b s2. \\<lbrakk> bad1 s1 = bad2 s2; \\<not> bad2 s2 \\<Longrightarrow> a = b \\<and> X s1 s2 \\<rbrakk> \\<Longrightarrow> R (a, s1) (b, s2)\"\n  shows \"rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "using assms"], ["proof (prove)\nusing this:\n  X s1 s2\n  bad1 s1 = bad2 s2\n  X ?s1.0 ?s2.0 \\<Longrightarrow>\n  rel_spmf\n   (\\<lambda>(a, s1') (b, s2').\n       bad1 s1' = bad2 s2' \\<and>\n       (\\<not> bad2 s2' \\<longrightarrow> a = b \\<and> X s1' s2'))\n   (oracle1 ?s1.0 ?x) (oracle2 ?s2.0 ?x)\n  callee_invariant oracle1 bad1\n  callee_invariant oracle2 bad2\n  bad1 ?s1.0 \\<Longrightarrow> lossless_spmf (oracle1 ?s1.0 ?x)\n  bad2 ?s2.0 \\<Longrightarrow> lossless_spmf (oracle2 ?s2.0 ?x)\n  lossless_gpv \\<I>_full gpv\n  \\<lbrakk>bad1 ?s1.0 = bad2 ?s2.0;\n   \\<not> bad2 ?s2.0 \\<Longrightarrow> ?a = ?b \\<and> X ?s1.0 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> R (?a, ?s1.0) (?b, ?s2.0)\n\ngoal (1 subgoal):\n 1. rel_spmf R (exec_gpv oracle1 gpv s1) (exec_gpv oracle2 gpv s2)", "by(intro exec_gpv_oracle_bisim_bad[of bad2 s2 \"\\<lambda>_ _. True\" s1 X bad1 oracle1 oracle2 \\<I>_full gpv R])(auto intro: rel_spmf_mono)"], ["", "lemma max_enn2ereal: \"max (enn2ereal x) (enn2ereal y) = enn2ereal (max x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (enn2ereal x) (enn2ereal y) = enn2ereal (max x y)", "including ennreal.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (enn2ereal x) (enn2ereal y) = enn2ereal (max x y)", "unfolding max_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if enn2ereal x \\<le> enn2ereal y then enn2ereal y else enn2ereal x) =\n    enn2ereal (if x \\<le> y then y else x)", "by transfer simp"], ["", "lemma identical_until_bad:\n  assumes bad_eq: \"map_spmf bad p = map_spmf bad q\"\n  and not_bad: \"measure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p)) (A \\<times> {False}) = measure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q)) (A \\<times> {False})\"\n  shows \"\\<bar>measure (measure_spmf (map_spmf f p)) A - measure (measure_spmf (map_spmf f q)) A\\<bar> \\<le> spmf (map_spmf bad p) True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<bar>enn2ereal (measure (measure_spmf (map_spmf f p)) A) - enn2ereal (measure (measure_spmf (map_spmf f q)) A)\\<bar> = \n    \\<bar>enn2ereal (\\<integral>\\<^sup>+ x. indicator A (f x) \\<partial>measure_spmf p) - enn2ereal (\\<integral>\\<^sup>+ x. indicator A (f x) \\<partial>measure_spmf q)\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal\n           (ennreal\n             (Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A)) -\n          enn2ereal\n           (ennreal\n             (Sigma_Algebra.measure (measure_spmf (map_spmf f q))\n               A))\\<bar> =\n    \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf q)\\<bar>", "unfolding measure_spmf.emeasure_eq_measure[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal (emeasure (measure_spmf (map_spmf f p)) A) -\n          enn2ereal (emeasure (measure_spmf (map_spmf f q)) A)\\<bar> =\n    \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf q)\\<bar>", "by(simp add: nn_integral_indicator[symmetric] indicator_vimage[abs_def] o_def)"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (ennreal (Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A)) -\n        enn2ereal\n         (ennreal\n           (Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A))\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (ennreal (Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A)) -\n        enn2ereal\n         (ennreal\n           (Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A))\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> =\n    \\<bar>enn2ereal (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False}) (f x, bad x) + indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf p) -\n     enn2ereal (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False}) (f x, bad x) + indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf q)\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator A (f x)\n                               \\<partial>measure_spmf q)\\<bar> =\n    \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                    (f x, bad x) +\n                                   indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                    (f x, bad x) +\n                                   indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar>", "by(intro arg_cong[where f=abs] arg_cong2[where f=\"(-)\"] arg_cong[where f=enn2ereal] nn_integral_cong)(simp_all split: split_indicator)"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator A (f x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> = \n    \\<bar>enn2ereal (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p)) (A \\<times> {False}) + (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf p)) -\n     enn2ereal (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q)) (A \\<times> {False}) + (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf q))\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                    (f x, bad x) +\n                                   indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                    (f x, bad x) +\n                                   indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar> =\n    \\<bar>enn2ereal\n           (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n             (A \\<times> {False}) +\n            \\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n             (A \\<times> {False}) +\n            \\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar>", "by(subst (1 2) nn_integral_add)(simp_all add: indicator_vimage[abs_def] o_def nn_integral_indicator[symmetric])"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {False})\n                                  (f x, bad x) +\n                                 indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> = \\<bar>enn2ereal (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf p) - enn2ereal (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x) \\<partial>measure_spmf q)\\<bar>\"\n    (is \"_ = \\<bar>?x - ?y\\<bar>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal\n           (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n             (A \\<times> {False}) +\n            \\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n             (A \\<times> {False}) +\n            \\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar> =\n    \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar>", "by(simp add: measure_spmf.emeasure_eq_measure not_bad plus_ennreal.rep_eq ereal_diff_add_eq_diff_diff_swap ereal_diff_add_assoc2 ereal_add_uminus_conv_diff)"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) p))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (emeasure (measure_spmf (map_spmf (\\<lambda>x. (f x, bad x)) q))\n           (A \\<times> {False}) +\n          \\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar> =\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> \\<le> max ?x ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q)\\<bar>\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "proof(rule ereal_abs_leI)"], ["proof (state)\ngoal (2 subgoals):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))\n 2. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "have \"?x - ?y \\<le> ?x - 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf p) -\n          0", "by(rule ereal_minus_mono)(simp_all)"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q)\n  \\<le> enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        0\n\ngoal (2 subgoals):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))\n 2. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "also"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q)\n  \\<le> enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        0\n\ngoal (2 subgoals):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))\n 2. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "have \"\\<dots> \\<le> max ?x ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    0\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "by simp"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  0\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (2 subgoals):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))\n 2. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "finally"], ["proof (chain)\npicking this:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q)\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))", "show \"?x - ?y \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q)\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "."], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q)\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "have \"- (?x - ?y) = ?y - ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q)) =\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p)", "by(rule ereal_minus_diff_eq)(simp_all add: measure_spmf.nn_integral_indicator_neq_top)"], ["proof (state)\nthis:\n  - (enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf p) -\n     enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf q)) =\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p)\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "also"], ["proof (state)\nthis:\n  - (enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf p) -\n     enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf q)) =\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p)\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "have \"\\<dots> \\<le> ?y - 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q) -\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf p)\n    \\<le> enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q) -\n          0", "by(rule ereal_minus_mono)(simp_all)"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p)\n  \\<le> enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q) -\n        0\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "also"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q) -\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf p)\n  \\<le> enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q) -\n        0\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "have \"\\<dots> \\<le> max ?x ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q) -\n    0\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "by simp"], ["proof (state)\nthis:\n  enn2ereal\n   (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                       \\<partial>measure_spmf q) -\n  0\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "finally"], ["proof (chain)\npicking this:\n  - (enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf p) -\n     enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf q))\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))", "show \"- (?x - ?y) \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  - (enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf p) -\n     enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf q))\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. - (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p) -\n       enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf q))\n    \\<le> max (enn2ereal\n                (\\<integral>\\<^sup>+ x.\nindicator (A \\<times> {True}) (f x, bad x)\n                                    \\<partial>measure_spmf p))\n           (enn2ereal\n             (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n(f x, bad x)\n                                 \\<partial>measure_spmf q))", "."], ["proof (state)\nthis:\n  - (enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf p) -\n     enn2ereal\n      (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                          \\<partial>measure_spmf q))\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  \\<bar>enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf p) -\n        enn2ereal\n         (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                             \\<partial>measure_spmf q)\\<bar>\n  \\<le> max (enn2ereal\n              (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n (f x, bad x)\n                                  \\<partial>measure_spmf p))\n         (enn2ereal\n           (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True})\n                                    (f x, bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> \\<le> enn2ereal (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x) \\<partial>measure_spmf p) (\\<integral>\\<^sup>+ x. indicator {True} (bad x) \\<partial>measure_spmf q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (enn2ereal\n          (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                              \\<partial>measure_spmf p))\n     (enn2ereal\n       (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                           \\<partial>measure_spmf q))\n    \\<le> enn2ereal\n           (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                                    \\<partial>measure_spmf p)\n             (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                                 \\<partial>measure_spmf q))", "unfolding max_enn2ereal less_eq_ennreal.rep_eq[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p)\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q)\n    \\<le> max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                                  \\<partial>measure_spmf p)\n           (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                               \\<partial>measure_spmf q)", "by(intro max.mono nn_integral_mono)(simp_all split: split_indicator)"], ["proof (state)\nthis:\n  max (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p))\n   (enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q))\n  \\<le> enn2ereal\n         (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                                  \\<partial>measure_spmf p)\n           (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "also"], ["proof (state)\nthis:\n  max (enn2ereal\n        (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                            \\<partial>measure_spmf p))\n   (enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator (A \\<times> {True}) (f x, bad x)\n                         \\<partial>measure_spmf q))\n  \\<le> enn2ereal\n         (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                                  \\<partial>measure_spmf p)\n           (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                               \\<partial>measure_spmf q))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "have \"\\<dots> = enn2ereal (spmf (map_spmf bad p) True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enn2ereal\n     (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                              \\<partial>measure_spmf p)\n       (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                           \\<partial>measure_spmf q)) =\n    enn2ereal (ennreal (spmf (map_spmf bad p) True))", "using arg_cong2[where f=spmf, OF bad_eq refl, of True, THEN arg_cong[where f=ennreal]]"], ["proof (prove)\nusing this:\n  ennreal (spmf (map_spmf bad p) True) =\n  ennreal (spmf (map_spmf bad q) True)\n\ngoal (1 subgoal):\n 1. enn2ereal\n     (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                              \\<partial>measure_spmf p)\n       (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                           \\<partial>measure_spmf q)) =\n    enn2ereal (ennreal (spmf (map_spmf bad p) True))", "unfolding ennreal_spmf_map_conv_nn_integral indicator_vimage[abs_def]"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ x. indicator {True} (bad x) \\<partial>measure_spmf p =\n  \\<integral>\\<^sup>+ x. indicator {True} (bad x) \\<partial>measure_spmf q\n\ngoal (1 subgoal):\n 1. enn2ereal\n     (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                              \\<partial>measure_spmf p)\n       (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                           \\<partial>measure_spmf q)) =\n    enn2ereal\n     (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                         \\<partial>measure_spmf p)", "by simp"], ["proof (state)\nthis:\n  enn2ereal\n   (max (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                            \\<partial>measure_spmf p)\n     (\\<integral>\\<^sup>+ x. indicator {True} (bad x)\n                         \\<partial>measure_spmf q)) =\n  enn2ereal (ennreal (spmf (map_spmf bad p) True))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "finally"], ["proof (chain)\npicking this:\n  \\<bar>enn2ereal\n         (ennreal (Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A)) -\n        enn2ereal\n         (ennreal\n           (Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A))\\<bar>\n  \\<le> enn2ereal (ennreal (spmf (map_spmf bad p) True))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>enn2ereal\n         (ennreal (Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A)) -\n        enn2ereal\n         (ennreal\n           (Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A))\\<bar>\n  \\<le> enn2ereal (ennreal (spmf (map_spmf bad p) True))\n\ngoal (1 subgoal):\n 1. \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n          Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n    \\<le> spmf (map_spmf bad p) True", "by simp"], ["proof (state)\nthis:\n  \\<bar>Sigma_Algebra.measure (measure_spmf (map_spmf f p)) A -\n        Sigma_Algebra.measure (measure_spmf (map_spmf f q)) A\\<bar>\n  \\<le> spmf (map_spmf bad p) True\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in callee_invariant_on) exec_gpv_bind_materialize:\n  fixes f :: \"'s \\<Rightarrow> 'r spmf\"\n  and g :: \"'x \\<times> 's \\<Rightarrow> 'r \\<Rightarrow> 'y spmf\"\n  and s :: \"'s\"\n  defines \"exec_gpv2 \\<equiv> exec_gpv\"\n  assumes cond: \"\\<And>s x y s'. \\<lbrakk> (y, s') \\<in> set_spmf (callee s x); I s \\<rbrakk> \\<Longrightarrow> f s = f s'\"\n  and \\<I>: \"\\<I> = \\<I>_full\" (* TODO: generalize *)\n  shows \"bind_spmf (exec_gpv callee gpv s) (\\<lambda>as. bind_spmf (f (snd as)) (g as)) =\n    exec_gpv2 (\\<lambda>(r, s) x. bind_spmf (callee s x) (\\<lambda>(y, s'). if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, (Some r, s'))) (f s') else return_spmf (y, (r, s')))) gpv (None, s)\n    \\<bind> (\\<lambda>(a, r, s). case r of None \\<Rightarrow> bind_spmf (f s) (g (a, s)) | Some r' \\<Rightarrow> g (a, s) r')\"\n    (is \"?lhs = ?rhs\" is \"_ = bind_spmf (exec_gpv2 ?callee2 _ _) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "define exec_gpv1 :: \"('a, 'b, 's option \\<times> 's) callee \\<Rightarrow> ('x, 'a, 'b) gpv \\<Rightarrow> _\"\n    where [simp]: \"exec_gpv1 = exec_gpv\""], ["proof (state)\nthis:\n  exec_gpv1 = exec_gpv\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "let ?X = \"\\<lambda>s (ss, s'). s = s'\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "let ?callee = \"\\<lambda>(ss, s) x. map_spmf (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s')) (callee s x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "let ?track = \"exec_gpv1 ?callee gpv (None, s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "have \"rel_spmf (rel_prod (=) ?X) (exec_gpv callee gpv s) ?track\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (=) (\\<lambda>s (ss, s'). s = s'))\n     (exec_gpv callee gpv s)\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s))", "unfolding exec_gpv1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (=) (\\<lambda>s (ss, s'). s = s'))\n     (exec_gpv callee gpv s)\n     (exec_gpv\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s))", "by(rule exec_gpv_oracle_bisim[where X=\"?X\"])(auto simp add: spmf_rel_map intro!: rel_spmf_reflI)"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (=) (\\<lambda>s (ss, s'). s = s'))\n   (exec_gpv callee gpv s)\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "hence \"exec_gpv callee gpv s = map_spmf (\\<lambda>(a, ss, s). (a, s)) ?track\""], ["proof (prove)\nusing this:\n  rel_spmf (rel_prod (=) (\\<lambda>s (ss, s'). s = s'))\n   (exec_gpv callee gpv s)\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s =\n    map_spmf (\\<lambda>(a, ss, s). (a, s))\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s))", "by(auto simp add: spmf_rel_eq[symmetric] spmf_rel_map elim: rel_spmf_mono)"], ["proof (state)\nthis:\n  exec_gpv callee gpv s =\n  map_spmf (\\<lambda>(a, ss, s). (a, s))\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "hence \"?lhs = bind_spmf ?track (\\<lambda>(a, s'', s'). bind_spmf (f s') (g (a, s')))\""], ["proof (prove)\nusing this:\n  exec_gpv callee gpv s =\n  map_spmf (\\<lambda>(a, ss, s). (a, s))\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s'))", "by(simp add: bind_map_spmf o_def split_def)"], ["proof (state)\nthis:\n  exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s'))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "also"], ["proof (state)\nthis:\n  exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s'))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "let ?inv = \"\\<lambda>(ss, s). case ss of None \\<Rightarrow> True | Some s' \\<Rightarrow> f s = f s' \\<and> I s' \\<and> I s\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "interpret inv: callee_invariant_on \"?callee\" \"?inv\" \\<I>"], ["proof (prove)\ngoal (1 subgoal):\n 1. callee_invariant_on\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     (\\<lambda>(ss, s).\n         case ss of None \\<Rightarrow> True\n         | Some s' \\<Rightarrow> f s = f s' \\<and> I s' \\<and> I s)\n     \\<I>", "by unfold_locales(auto 4 4 split: option.split if_split_asm dest: cond callee_invariant simp add: \\<I>)"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "have \"bind_spmf ?track (\\<lambda>(a, s'', s'). bind_spmf (f s') (g (a, s'))) =\n    bind_spmf ?track (\\<lambda>(a, ss', s'). bind_spmf (f (case ss' of None \\<Rightarrow> s' | Some s'' \\<Rightarrow> s'')) (g (a, s')))\"\n    (is \"_ = ?rhs'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s')) =\n    exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, ss', s').\n        f (case ss' of None \\<Rightarrow> s'\n           | Some s'' \\<Rightarrow> s'') \\<bind>\n        g (a, s'))", "by(rule bind_spmf_cong[OF refl])(auto dest!: inv.exec_gpv_invariant split: option.split_asm simp add: \\<I>)"], ["proof (state)\nthis:\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s')) =\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, ss', s').\n      f (case ss' of None \\<Rightarrow> s'\n         | Some s'' \\<Rightarrow> s'') \\<bind>\n      g (a, s'))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "also"], ["proof (state)\nthis:\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, s'', s'). f s' \\<bind> g (a, s')) =\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, ss', s').\n      f (case ss' of None \\<Rightarrow> s'\n         | Some s'' \\<Rightarrow> s'') \\<bind>\n      g (a, s'))\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "have track_Some: \"exec_gpv ?callee gpv (Some ss, s) = map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)\"\n    for s ss :: 's and gpv :: \"('x, 'a, 'b) gpv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)", "let ?X = \"\\<lambda>(ss', s') s. s = s' \\<and> ss' = Some ss\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)", "have \"rel_spmf (rel_prod (=) ?X) (exec_gpv ?callee gpv (Some ss, s)) (exec_gpv callee gpv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf\n     (rel_prod (=) (\\<lambda>(ss', s') s. s = s' \\<and> ss' = Some ss))\n     (exec_gpv\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (Some ss, s))\n     (exec_gpv callee gpv s)", "by(rule exec_gpv_oracle_bisim[where X=\"?X\"])(auto simp add: spmf_rel_map intro!: rel_spmf_reflI)"], ["proof (state)\nthis:\n  rel_spmf\n   (rel_prod (=) (\\<lambda>(ss', s') s. s = s' \\<and> ss' = Some ss))\n   (exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s))\n   (exec_gpv callee gpv s)\n\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  rel_spmf\n   (rel_prod (=) (\\<lambda>(ss', s') s. s = s' \\<and> ss' = Some ss))\n   (exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s))\n   (exec_gpv callee gpv s)\n\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (Some ss, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)", "by(auto simp add: spmf_rel_eq[symmetric] spmf_rel_map elim: rel_spmf_mono)"], ["proof (state)\nthis:\n  exec_gpv\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (Some ss, s) =\n  map_spmf (\\<lambda>(a, s). (a, Some ss, s)) (exec_gpv callee gpv s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exec_gpv\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   ?gpv1 (Some ?ss1, ?s1) =\n  map_spmf (\\<lambda>(a, s). (a, Some ?ss1, s)) (exec_gpv callee ?gpv1 ?s1)\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "have sample_Some: \"exec_gpv ?callee2 gpv (Some r, s) = map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)\" \n    for s :: 's and r :: 'r and gpv :: \"('x, 'a, 'b) gpv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)", "let ?X = \"\\<lambda>(r', s') s. s' = s \\<and> r' = Some r\""], ["proof (state)\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)", "have \"rel_spmf (rel_prod (=) ?X) (exec_gpv ?callee2 gpv (Some r, s)) (exec_gpv callee gpv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (=) (\\<lambda>(r', s') s. s' = s \\<and> r' = Some r))\n     (exec_gpv\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (Some r, s))\n     (exec_gpv callee gpv s)", "by(rule exec_gpv_oracle_bisim[where X=\"?X\"])(auto simp add: spmf_rel_map map_spmf_conv_bind_spmf[symmetric] split_def intro!: rel_spmf_reflI)"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (=) (\\<lambda>(r', s') s. s' = s \\<and> r' = Some r))\n   (exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s))\n   (exec_gpv callee gpv s)\n\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)", "then"], ["proof (chain)\npicking this:\n  rel_spmf (rel_prod (=) (\\<lambda>(r', s') s. s' = s \\<and> r' = Some r))\n   (exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s))\n   (exec_gpv callee gpv s)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_spmf (rel_prod (=) (\\<lambda>(r', s') s. s' = s \\<and> r' = Some r))\n   (exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s))\n   (exec_gpv callee gpv s)\n\ngoal (1 subgoal):\n 1. exec_gpv\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (Some r, s) =\n    map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)", "by(auto simp add: spmf_rel_eq[symmetric] spmf_rel_map elim: rel_spmf_mono)"], ["proof (state)\nthis:\n  exec_gpv\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   gpv (Some r, s) =\n  map_spmf (\\<lambda>(a, s). (a, Some r, s)) (exec_gpv callee gpv s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exec_gpv\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   ?gpv1 (Some ?r1, ?s1) =\n  map_spmf (\\<lambda>(a, s). (a, Some ?r1, s)) (exec_gpv callee ?gpv1 ?s1)\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "have \"?rhs' = ?rhs\"\n    \\<comment> \\<open>Actually, parallel fixpoint induction should be used here, but then we cannot use the\n      facts @{thm [source] track_Some} and @{thm [source] sample_Some} because fixpoint induction\n      replaces @{const exec_gpv} with approximations. So we do two separate fixpoint inductions\n      instead and jump from the approximation to the fixpoint when the state has been found.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, ss', s').\n        f (case ss' of None \\<Rightarrow> s'\n           | Some s'' \\<Rightarrow> s'') \\<bind>\n        g (a, s')) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "proof(rule spmf.leq_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_spmf (=)\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))\n 2. ord_spmf (=)\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))", "show \"ord_spmf (=) ?rhs' ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))", "unfolding exec_gpv1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (exec_gpv\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))", "proof(induction arbitrary: gpv s rule: exec_gpv_fixp_induct_strong)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>(a, ss', s').\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s')))\n             (exec_gpv2\n               (\\<lambda>(r, s) x.\n                   callee s x \\<bind>\n                   (\\<lambda>(y, s').\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n               x (None, xa) \\<bind>\n              (\\<lambda>(a, r, s).\n                  case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                  | Some x \\<Rightarrow> g (a, s) x)))\n 2. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n        (exec_gpv2\n          (\\<lambda>(r, s) x.\n              callee s x \\<bind>\n              (\\<lambda>(y, s').\n                  if I s' \\<and> r = None\n                  then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                  else return_spmf (y, r, s')))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n 3. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>(a, ss', s').\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s')))\n             (exec_gpv2\n               (\\<lambda>(r, s) x.\n                   callee s x \\<bind>\n                   (\\<lambda>(y, s').\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n               x (None, xa) \\<bind>\n              (\\<lambda>(a, r, s).\n                  case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                  | Some x \\<Rightarrow> g (a, s) x)))\n 2. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n        (exec_gpv2\n          (\\<lambda>(r, s) x.\n              callee s x \\<bind>\n              (\\<lambda>(y, s').\n                  if I s' \\<and> r = None\n                  then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                  else return_spmf (y, r, s')))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n 3. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (a, ss', s') \\<Rightarrow>\n                    f (case ss' of None \\<Rightarrow> s'\n                       | Some s'' \\<Rightarrow> s'') \\<bind>\n                    g (a, s')))\n             (exec_gpv2\n               (\\<lambda>a.\n                   case a of\n                   (r, s) \\<Rightarrow>\n                     \\<lambda>x.\n                        callee s x \\<bind>\n                        (\\<lambda>a.\n                            case a of\n                            (y, s') \\<Rightarrow>\n                              if I s' \\<and> r = None\n                              then map_spmf (\\<lambda>r. (y, Some r, s'))\n                                    (f s')\n                              else return_spmf (y, r, s')))\n               x (None, xa) \\<bind>\n              (\\<lambda>a.\n                  case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                  | (a, Some b, s) \\<Rightarrow> g (a, s) b)))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>fa.\n       \\<forall>x xa.\n          ord_spmf (=)\n           (fa (x, None, xa) \\<bind>\n            (\\<lambda>a.\n                case a of\n                (a, ss', s') \\<Rightarrow>\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s')))\n           (exec_gpv2\n             (\\<lambda>a.\n                 case a of\n                 (r, s) \\<Rightarrow>\n                   \\<lambda>x.\n                      callee s x \\<bind>\n                      (\\<lambda>a.\n                          case a of\n                          (y, s') \\<Rightarrow>\n                            if I s' \\<and> r = None\n                            then map_spmf (\\<lambda>r. (y, Some r, s'))\n                                  (f s')\n                            else return_spmf (y, r, s')))\n             x (None, xa) \\<bind>\n            (\\<lambda>a.\n                case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                | (a, Some b, s) \\<Rightarrow> g (a, s) b)))\n\ngoal (2 subgoals):\n 1. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n        (exec_gpv2\n          (\\<lambda>(r, s) x.\n              callee s x \\<bind>\n              (\\<lambda>(y, s').\n                  if I s' \\<and> r = None\n                  then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                  else return_spmf (y, r, s')))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n 2. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n        (exec_gpv2\n          (\\<lambda>(r, s) x.\n              callee s x \\<bind>\n              (\\<lambda>(y, s').\n                  if I s' \\<and> r = None\n                  then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                  else return_spmf (y, r, s')))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n 2. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (return_pmf None \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))\n     (exec_gpv2\n       (\\<lambda>a.\n           case a of\n           (r, s) \\<Rightarrow>\n             \\<lambda>x.\n                callee s x \\<bind>\n                (\\<lambda>a.\n                    case a of\n                    (y, s') \\<Rightarrow>\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (return_pmf None \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n   (exec_gpv2\n     (\\<lambda>a.\n         case a of\n         (r, s) \\<Rightarrow>\n           \\<lambda>x.\n              callee s x \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (y, s') \\<Rightarrow>\n                    if I s' \\<and> r = None\n                    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                    else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "case (step exec_gpv')"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1)\n   (exec_gpv\n     (\\<lambda>a.\n         case a of\n         (ss, s) \\<Rightarrow>\n           \\<lambda>x.\n              map_spmf\n               (\\<lambda>a.\n                   case a of\n                   (y, s') \\<Rightarrow>\n                     (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n     ?c1 ?s1)\n  ord_spmf (=)\n   (exec_gpv' ?gpv1 (None, ?s1) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n   (exec_gpv2\n     (\\<lambda>a.\n         case a of\n         (r, s) \\<Rightarrow>\n           \\<lambda>x.\n              callee s x \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (y, s') \\<Rightarrow>\n                    if I s' \\<and> r = None\n                    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                    else return_spmf (y, r, s')))\n     ?gpv1 (None, ?s1) \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (ss, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               map_spmf\n                                (\\<lambda>a.\n                                    case a of\n                                    (y, s') \\<Rightarrow>\n(y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                (callee s x))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\n            (exec_gpv2\n              (\\<lambda>(r, s) x.\n                  callee s x \\<bind>\n                  (\\<lambda>(y, s').\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (ss, s) \\<Rightarrow>\n                                   \\<lambda>x.\nmap_spmf\n (\\<lambda>(y, s'). (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n (callee s x))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          (exec_gpv2\n                            (\\<lambda>(r, s) x.\n                                callee s x \\<bind>\n                                (\\<lambda>(y, s').\n                                    if I s' \\<and> r = None\n                                    then map_spmf\n    (\\<lambda>r. (y, Some r, s')) (f s')\n                                    else return_spmf (y, r, s')))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (ss, s) \\<Rightarrow>\n              \\<lambda>x.\n                 map_spmf\n                  (\\<lambda>a.\n                      case a of\n                      (y, s') \\<Rightarrow>\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                  (callee s x))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))\n     (exec_gpv2\n       (\\<lambda>a.\n           case a of\n           (r, s) \\<Rightarrow>\n             \\<lambda>x.\n                callee s x \\<bind>\n                (\\<lambda>a.\n                    case a of\n                    (y, s') \\<Rightarrow>\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))", "unfolding exec_gpv2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (ss, s) \\<Rightarrow>\n              \\<lambda>x.\n                 map_spmf\n                  (\\<lambda>a.\n                      case a of\n                      (y, s') \\<Rightarrow>\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                  (callee s x))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))\n     (exec_gpv\n       (\\<lambda>a.\n           case a of\n           (r, s) \\<Rightarrow>\n             \\<lambda>x.\n                callee s x \\<bind>\n                (\\<lambda>a.\n                    case a of\n                    (y, s') \\<Rightarrow>\n                      if I s' \\<and> r = None\n                      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                      else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))", "apply(rewrite in \"ord_spmf _ _ \\<hole>\" exec_gpv.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (ss, s) \\<Rightarrow>\n              \\<lambda>x.\n                 map_spmf\n                  (\\<lambda>a.\n                      case a of\n                      (y, s') \\<Rightarrow>\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                  (callee s x))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (r, s) \\<Rightarrow>\n              \\<lambda>x.\n                 callee s x \\<bind>\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n            out \\<bind>\n           (\\<lambda>(x, y).\n               exec_gpv\n                (\\<lambda>a.\n                    case a of\n                    (r, s) \\<Rightarrow>\n                      \\<lambda>x.\n                         callee s x \\<bind>\n                         (\\<lambda>a.\n                             case a of\n                             (y, s') \\<Rightarrow>\n                               if I s' \\<and> r = None\n                               then map_spmf (\\<lambda>r. (y, Some r, s'))\n                                     (f s')\n                               else return_spmf (y, r, s')))\n                (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))", "apply(clarsimp split: generat.split simp add: bind_map_spmf intro!: ord_spmf_bind_reflI split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 a b.\n       \\<lbrakk>IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        (a, b) \\<in> set_spmf (callee s x21)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (exec_gpv' (x22 a)\n                            (if I b then Some b else None, b) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))\n                          ((if I b\n                            then map_spmf (\\<lambda>r. (a, Some r, b)) (f b)\n                            else return_spmf (a, None, b)) \\<bind>\n                           (\\<lambda>y.\n                               (case y of\n                                (x, xa) \\<Rightarrow>\n                                  exec_gpv\n                                   (\\<lambda>(r, s) x.\n callee s x \\<bind>\n (\\<lambda>(y, s').\n     if I s' \\<and> r = None\n     then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n     else return_spmf (y, r, s')))\n                                   (x22 x) xa) \\<bind>\n                               (\\<lambda>(a, r, s).\n                                   case r of\n                                   None \\<Rightarrow> f s \\<bind> g (a, s)\n                                   | Some x \\<Rightarrow> g (a, s) x)))", "subgoal for out rpv ret s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out)\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply(cases \"I s'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       (map_spmf (\\<lambda>r. (ret, Some r, s'))\n                         (f s') \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply(rule spmf.leq_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ?y2\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=) ?y2\n                       (map_spmf (\\<lambda>r. (ret, Some r, s'))\n                         (f s') \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply(rule ord_spmf_bindI[OF step.hyps])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s'; x = y\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (case x of\n                           (a, ss', s') \\<Rightarrow>\n                             f (case ss' of None \\<Rightarrow> s'\n                                | Some s'' \\<Rightarrow> s'') \\<bind>\n                             g (a, s'))\n                          (?g5 y)\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv\n                         (\\<lambda>a.\n                             case a of\n                             (ss, s) \\<Rightarrow>\n                               \\<lambda>x.\n                                  map_spmf\n                                   (\\<lambda>a.\n case a of\n (y, s') \\<Rightarrow>\n   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                   (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        ?g5)\n                       (map_spmf (\\<lambda>r. (ret, Some r, s'))\n                         (f s') \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply hypsubst"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (case y of\n                           (a, ss', s') \\<Rightarrow>\n                             f (case ss' of None \\<Rightarrow> s'\n                                | Some s'' \\<Rightarrow> s'') \\<bind>\n                             g (a, s'))\n                          (?g5 y)\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv\n                         (\\<lambda>a.\n                             case a of\n                             (ss, s) \\<Rightarrow>\n                               \\<lambda>x.\n                                  map_spmf\n                                   (\\<lambda>a.\n case a of\n (y, s') \\<Rightarrow>\n   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                   (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        ?g5)\n                       (map_spmf (\\<lambda>r. (ret, Some r, s'))\n                         (f s') \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply(rule spmf.leq_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv\n                         (\\<lambda>a.\n                             case a of\n                             (ss, s) \\<Rightarrow>\n                               \\<lambda>x.\n                                  map_spmf\n                                   (\\<lambda>a.\n case a of\n (y, s') \\<Rightarrow>\n   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                   (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>y.\n                            case y of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))\n                       (map_spmf (\\<lambda>r. (ret, Some r, s'))\n                         (f s') \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply(simp add: track_Some sample_Some bind_map_spmf o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>x.\n                            case case x of\n                                 (a, s) \\<Rightarrow> (a, Some s', s) of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv callee (rpv ret) s' \\<bind>\n                            (\\<lambda>xa.\n                                case case xa of\n                                     (a, s) \\<Rightarrow> (a, Some x, s) of\n                                (a, None, s) \\<Rightarrow>\n                                  f s \\<bind> g (a, s)\n                                | (a, Some x, s) \\<Rightarrow> g (a, s) x)))", "apply(subst bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>x.\n                            case case x of\n                                 (a, s) \\<Rightarrow> (a, Some s', s) of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>y.\n                            f s' \\<bind>\n                            (\\<lambda>x.\n                                case case y of\n                                     (a, s) \\<Rightarrow> (a, Some x, s) of\n                                (a, None, s) \\<Rightarrow>\n                                  f s \\<bind> g (a, s)\n                                | (a, Some x, s) \\<Rightarrow> g (a, s) x)))", "apply(simp add: split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv\n                                (\\<lambda>(r, s) x.\n                                    callee s x \\<bind>\n                                    (\\<lambda>(y, s').\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                                (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n                       (exec_gpv\n                         (\\<lambda>(r, s) x.\n                             callee s x \\<bind>\n                             (\\<lambda>(y, s').\n                                 if I s' \\<and> r = None\n                                 then map_spmf (\\<lambda>r. (y, Some r, s'))\n (f s')\n                                 else return_spmf (y, r, s')))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, r, s).\n                            case r of\n                            None \\<Rightarrow> f s \\<bind> g (a, s)\n                            | Some x \\<Rightarrow> g (a, s) x))", "apply(rule step.IH[THEN spmf.leq_trans])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv2\n                         (\\<lambda>a.\n                             case a of\n                             (r, s) \\<Rightarrow>\n                               \\<lambda>x.\n                                  callee s x \\<bind>\n                                  (\\<lambda>a.\ncase a of\n(y, s') \\<Rightarrow>\n  if I s' \\<and> r = None then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n  else return_spmf (y, r, s')))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>a.\n                            case a of\n                            (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                            | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n                       (exec_gpv\n                         (\\<lambda>(r, s) x.\n                             callee s x \\<bind>\n                             (\\<lambda>(y, s').\n                                 if I s' \\<and> r = None\n                                 then map_spmf (\\<lambda>r. (y, Some r, s'))\n (f s')\n                                 else return_spmf (y, r, s')))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, r, s).\n                            case r of\n                            None \\<Rightarrow> f s \\<bind> g (a, s)\n                            | Some x \\<Rightarrow> g (a, s) x))", "apply(simp add: split_def exec_gpv2_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, None, s))\n     (\\<lambda>out c.\n         (case (None, s) of\n          (ss, s) \\<Rightarrow>\n            \\<lambda>x.\n               map_spmf\n                (\\<lambda>a.\n                    case a of\n                    (y, s') \\<Rightarrow>\n                      (y, if I s' \\<and> ss = None then Some s' else ss,\n                       s'))\n                (callee s x))\n          out \\<bind>\n         (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n   (exec_gpv2\n     (\\<lambda>a.\n         case a of\n         (r, s) \\<Rightarrow>\n           \\<lambda>x.\n              callee s x \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (y, s') \\<Rightarrow>\n                    if I s' \\<and> r = None\n                    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                    else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, ss', s').\n        f (case ss' of None \\<Rightarrow> s'\n           | Some s'' \\<Rightarrow> s'') \\<bind>\n        g (a, s')))\n   (exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r'))\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))", "show \"ord_spmf (=) ?rhs ?rhs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (exec_gpv2\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))", "unfolding exec_gpv2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (exec_gpv\n       (\\<lambda>(r, s) x.\n           callee s x \\<bind>\n           (\\<lambda>(y, s').\n               if I s' \\<and> r = None\n               then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n               else return_spmf (y, r, s')))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, r, s).\n          case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n          | Some r' \\<Rightarrow> g (a, s) r'))\n     (exec_gpv1\n       (\\<lambda>(ss, s) x.\n           map_spmf\n            (\\<lambda>(y, s').\n                (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n            (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>(a, ss', s').\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))", "proof(induction arbitrary: gpv s rule: exec_gpv_fixp_induct_strong)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>(a, r, s).\n                  case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                  | Some x \\<Rightarrow> g (a, s) x))\n             (exec_gpv1\n               (\\<lambda>(ss, s) x.\n                   map_spmf\n                    (\\<lambda>(y, s').\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                    (callee s x))\n               x (None, xa) \\<bind>\n              (\\<lambda>(a, ss', s').\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s'))))\n 2. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n        (exec_gpv1\n          (\\<lambda>(ss, s) x.\n              map_spmf\n               (\\<lambda>(y, s').\n                   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n 3. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>(a, r, s).\n                  case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                  | Some x \\<Rightarrow> g (a, s) x))\n             (exec_gpv1\n               (\\<lambda>(ss, s) x.\n                   map_spmf\n                    (\\<lambda>(y, s').\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                    (callee s x))\n               x (None, xa) \\<bind>\n              (\\<lambda>(a, ss', s').\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s'))))\n 2. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n        (exec_gpv1\n          (\\<lambda>(ss, s) x.\n              map_spmf\n               (\\<lambda>(y, s').\n                   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n 3. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>fa.\n         \\<forall>x xa.\n            ord_spmf (=)\n             (fa (x, None, xa) \\<bind>\n              (\\<lambda>a.\n                  case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                  | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n             (exec_gpv1\n               (\\<lambda>a.\n                   case a of\n                   (ss, s) \\<Rightarrow>\n                     \\<lambda>x.\n                        map_spmf\n                         (\\<lambda>a.\n                             case a of\n                             (y, s') \\<Rightarrow>\n                               (y, if I s' \\<and> ss = None then Some s'\n                                   else ss,\n                                s'))\n                         (callee s x))\n               x (None, xa) \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (a, ss', s') \\<Rightarrow>\n                    f (case ss' of None \\<Rightarrow> s'\n                       | Some s'' \\<Rightarrow> s'') \\<bind>\n                    g (a, s'))))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>fa.\n       \\<forall>x xa.\n          ord_spmf (=)\n           (fa (x, None, xa) \\<bind>\n            (\\<lambda>a.\n                case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n           (exec_gpv1\n             (\\<lambda>a.\n                 case a of\n                 (ss, s) \\<Rightarrow>\n                   \\<lambda>x.\n                      map_spmf\n                       (\\<lambda>a.\n                           case a of\n                           (y, s') \\<Rightarrow>\n                             (y, if I s' \\<and> ss = None then Some s'\n                                 else ss,\n                              s'))\n                       (callee s x))\n             x (None, xa) \\<bind>\n            (\\<lambda>a.\n                case a of\n                (a, ss', s') \\<Rightarrow>\n                  f (case ss' of None \\<Rightarrow> s'\n                     | Some s'' \\<Rightarrow> s'') \\<bind>\n                  g (a, s'))))\n\ngoal (2 subgoals):\n 1. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n        (exec_gpv1\n          (\\<lambda>(ss, s) x.\n              map_spmf\n               (\\<lambda>(y, s').\n                   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n 2. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>gpv s.\n       ord_spmf (=)\n        (return_pmf None \\<bind>\n         (\\<lambda>(a, r, s).\n             case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n             | Some x \\<Rightarrow> g (a, s) x))\n        (exec_gpv1\n          (\\<lambda>(ss, s) x.\n              map_spmf\n               (\\<lambda>(y, s').\n                   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n          gpv (None, s) \\<bind>\n         (\\<lambda>(a, ss', s').\n             f (case ss' of None \\<Rightarrow> s'\n                | Some s'' \\<Rightarrow> s'') \\<bind>\n             g (a, s')))\n 2. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (return_pmf None \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n     (exec_gpv1\n       (\\<lambda>a.\n           case a of\n           (ss, s) \\<Rightarrow>\n             \\<lambda>x.\n                map_spmf\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                 (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (return_pmf None \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n   (exec_gpv1\n     (\\<lambda>a.\n         case a of\n         (ss, s) \\<Rightarrow>\n           \\<lambda>x.\n              map_spmf\n               (\\<lambda>a.\n                   case a of\n                   (y, s') \\<Rightarrow>\n                     (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "case (step exec_gpv')"], ["proof (state)\nthis:\n  ord_spmf (=) (exec_gpv' ?c1 ?s1)\n   (exec_gpv\n     (\\<lambda>a.\n         case a of\n         (r, s) \\<Rightarrow>\n           \\<lambda>x.\n              callee s x \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (y, s') \\<Rightarrow>\n                    if I s' \\<and> r = None\n                    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                    else return_spmf (y, r, s')))\n     ?c1 ?s1)\n  ord_spmf (=)\n   (exec_gpv' ?gpv1 (None, ?s1) \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n   (exec_gpv1\n     (\\<lambda>a.\n         case a of\n         (ss, s) \\<Rightarrow>\n           \\<lambda>x.\n              map_spmf\n               (\\<lambda>a.\n                   case a of\n                   (y, s') \\<Rightarrow>\n                     (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n     ?gpv1 (None, ?s1) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n\ngoal (1 subgoal):\n 1. \\<And>exec_gpv' gpv s.\n       \\<lbrakk>\\<And>c s.\n                   ord_spmf (=) (exec_gpv' c s)\n                    (exec_gpv\n                      (\\<lambda>a.\n                          case a of\n                          (r, s) \\<Rightarrow>\n                            \\<lambda>x.\n                               callee s x \\<bind>\n                               (\\<lambda>a.\n                                   case a of\n                                   (y, s') \\<Rightarrow>\n                                     if I s' \\<and> r = None\n                                     then map_spmf\n     (\\<lambda>r. (y, Some r, s')) (f s')\n                                     else return_spmf (y, r, s')))\n                      c s);\n        \\<And>gpv s.\n           ord_spmf (=)\n            (exec_gpv' gpv (None, s) \\<bind>\n             (\\<lambda>(a, r, s).\n                 case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n                 | Some x \\<Rightarrow> g (a, s) x))\n            (exec_gpv1\n              (\\<lambda>(ss, s) x.\n                  map_spmf\n                   (\\<lambda>(y, s').\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                   (callee s x))\n              gpv (None, s) \\<bind>\n             (\\<lambda>(a, ss', s').\n                 f (case ss' of None \\<Rightarrow> s'\n                    | Some s'' \\<Rightarrow> s'') \\<bind>\n                 g (a, s')))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (the_gpv gpv \\<bind>\n                           case_generat\n                            (\\<lambda>x. return_spmf (x, None, s))\n                            (\\<lambda>out c.\n                                (case (None, s) of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>(y, s').\n    if I s' \\<and> r = None\n    then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n    else return_spmf (y, r, s')))\n                                 out \\<bind>\n                                (\\<lambda>(x, y).\n                                    exec_gpv' (c x) y)) \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (exec_gpv1\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            gpv (None, s) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (r, s) \\<Rightarrow>\n              \\<lambda>x.\n                 callee s x \\<bind>\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n     (exec_gpv1\n       (\\<lambda>a.\n           case a of\n           (ss, s) \\<Rightarrow>\n             \\<lambda>x.\n                map_spmf\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                 (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))", "unfolding exec_gpv1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (r, s) \\<Rightarrow>\n              \\<lambda>x.\n                 callee s x \\<bind>\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n     (exec_gpv\n       (\\<lambda>a.\n           case a of\n           (ss, s) \\<Rightarrow>\n             \\<lambda>x.\n                map_spmf\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       (y, if I s' \\<and> ss = None then Some s' else ss,\n                        s'))\n                 (callee s x))\n       gpv (None, s) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))", "apply(rewrite in \"ord_spmf _ _ \\<hole>\" exec_gpv.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (r, s) \\<Rightarrow>\n              \\<lambda>x.\n                 callee s x \\<bind>\n                 (\\<lambda>a.\n                     case a of\n                     (y, s') \\<Rightarrow>\n                       if I s' \\<and> r = None\n                       then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                       else return_spmf (y, r, s')))\n            out \\<bind>\n           (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n          | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n     (the_gpv gpv \\<bind>\n      case_generat (\\<lambda>x. return_spmf (x, None, s))\n       (\\<lambda>out c.\n           (case (None, s) of\n            (ss, s) \\<Rightarrow>\n              \\<lambda>x.\n                 map_spmf\n                  (\\<lambda>a.\n                      case a of\n                      (y, s') \\<Rightarrow>\n                        (y, if I s' \\<and> ss = None then Some s' else ss,\n                         s'))\n                  (callee s x))\n            out \\<bind>\n           (\\<lambda>(x, y).\n               exec_gpv\n                (\\<lambda>a.\n                    case a of\n                    (ss, s) \\<Rightarrow>\n                      \\<lambda>x.\n                         map_spmf\n                          (\\<lambda>a.\n                              case a of\n                              (y, s') \\<Rightarrow>\n                                (y, if I s' \\<and> ss = None then Some s'\n                                    else ss,\n                                 s'))\n                          (callee s x))\n                (c x) y)) \\<bind>\n      (\\<lambda>a.\n          case a of\n          (a, ss', s') \\<Rightarrow>\n            f (case ss' of None \\<Rightarrow> s'\n               | Some s'' \\<Rightarrow> s'') \\<bind>\n            g (a, s')))", "apply(clarsimp split: generat.split simp add: bind_map_spmf intro!: ord_spmf_bind_reflI split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 a b.\n       \\<lbrakk>IO x21 x22 \\<in> set_spmf (the_gpv gpv);\n        (a, b) \\<in> set_spmf (callee s x21)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          ((if I b\n                            then map_spmf (\\<lambda>r. (a, Some r, b)) (f b)\n                            else return_spmf (a, None, b)) \\<bind>\n                           (\\<lambda>y.\n                               (case y of\n                                (x, xa) \\<Rightarrow>\n                                  exec_gpv' (x22 x) xa) \\<bind>\n                               (\\<lambda>(a, r, s).\n                                   case r of\n                                   None \\<Rightarrow> f s \\<bind> g (a, s)\n                                   | Some x \\<Rightarrow> g (a, s) x)))\n                          (exec_gpv\n                            (\\<lambda>(ss, s) x.\n                                map_spmf\n                                 (\\<lambda>(y, s').\n                                     (y,\nif I s' \\<and> ss = None then Some s' else ss, s'))\n                                 (callee s x))\n                            (x22 a)\n                            (if I b then Some b else None, b) \\<bind>\n                           (\\<lambda>(a, ss', s').\n                               f (case ss' of None \\<Rightarrow> s'\n                                  | Some s'' \\<Rightarrow> s'') \\<bind>\n                               g (a, s')))", "subgoal for out rpv ret s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out)\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(cases \"I s'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(simp add: bind_map_spmf o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv' (rpv ret) (Some x, s') \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule spmf.leq_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv' (rpv ret) (Some x, s') \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       ?y2\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=) ?y2\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule ord_spmf_bind_reflI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s';\n        x \\<in> set_spmf (f s')\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (exec_gpv' (rpv ret) (Some x, s') \\<bind>\n                           (\\<lambda>(a, r, s).\n                               case r of\n                               None \\<Rightarrow> f s \\<bind> g (a, s)\n                               | Some x \\<Rightarrow> g (a, s) x))\n                          (?g5 x)\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=) (f s' \\<bind> ?g5)\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule ord_spmf_bindI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s';\n        x \\<in> set_spmf (f s')\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (?R7 x) (exec_gpv' (rpv ret) (Some x, s'))\n                          (?q7 x)\n 2. \\<And>x xa y.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s';\n        x \\<in> set_spmf (f s'); ?R7 x xa y\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (case xa of\n                           (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                           | (a, Some x, s) \\<Rightarrow> g (a, s) x)\n                          (?g7 x y)\n 3. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind> (\\<lambda>x. ?q7 x \\<bind> ?g7 x))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule step.hyps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s';\n        x \\<in> set_spmf (f s'); xa = y\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (case xa of\n                           (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                           | (a, Some x, s) \\<Rightarrow> g (a, s) x)\n                          (?g7 x y)\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv\n                             (\\<lambda>a.\n                                 case a of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>a.\n    case a of\n    (y, s') \\<Rightarrow>\n      if I s' \\<and> r = None\n      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n      else return_spmf (y, r, s')))\n                             (rpv ret) (Some x, s') \\<bind>\n                            ?g7 x))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply hypsubst"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y.\n       \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n        (ret, s') \\<in> set_spmf (callee s out); I s';\n        x \\<in> set_spmf (f s')\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (case y of\n                           (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n                           | (a, Some x, s) \\<Rightarrow> g (a, s) x)\n                          (?g7 x y)\n 2. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv\n                             (\\<lambda>a.\n                                 case a of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>a.\n    case a of\n    (y, s') \\<Rightarrow>\n      if I s' \\<and> r = None\n      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n      else return_spmf (y, r, s')))\n                             (rpv ret) (Some x, s') \\<bind>\n                            ?g7 x))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule spmf.leq_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv\n                             (\\<lambda>a.\n                                 case a of\n                                 (r, s) \\<Rightarrow>\n                                   \\<lambda>x.\ncallee s x \\<bind>\n(\\<lambda>a.\n    case a of\n    (y, s') \\<Rightarrow>\n      if I s' \\<and> r = None\n      then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n      else return_spmf (y, r, s')))\n                             (rpv ret) (Some x, s') \\<bind>\n                            (\\<lambda>y.\n                                case y of\n                                (a, None, s) \\<Rightarrow>\n                                  f s \\<bind> g (a, s)\n                                | (a, Some x, s) \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (Some s', s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(simp add: track_Some sample_Some bind_map_spmf o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (f s' \\<bind>\n                        (\\<lambda>x.\n                            exec_gpv callee (rpv ret) s' \\<bind>\n                            (\\<lambda>xa.\n                                case case xa of\n                                     (a, s) \\<Rightarrow> (a, Some x, s) of\n                                (a, None, s) \\<Rightarrow>\n                                  f s \\<bind> g (a, s)\n                                | (a, Some x, s) \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>x.\n                            case case x of\n                                 (a, s) \\<Rightarrow> (a, Some s', s) of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))", "apply(subst bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>y.\n                            f s' \\<bind>\n                            (\\<lambda>x.\n                                case case y of\n                                     (a, s) \\<Rightarrow> (a, Some x, s) of\n                                (a, None, s) \\<Rightarrow>\n                                  f s \\<bind> g (a, s)\n                                | (a, Some x, s) \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv callee (rpv ret) s' \\<bind>\n                        (\\<lambda>x.\n                            case case x of\n                                 (a, s) \\<Rightarrow> (a, Some s', s) of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))", "apply(simp add: split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       ((if I s'\n                         then map_spmf (\\<lambda>r. (ret, Some r, s'))\n                               (f s')\n                         else return_spmf (ret, None, s')) \\<bind>\n                        (\\<lambda>y.\n                            (case y of\n                             (x, xa) \\<Rightarrow>\n                               exec_gpv' (rpv x) xa) \\<bind>\n                            (\\<lambda>(a, r, s).\n                                case r of\n                                None \\<Rightarrow> f s \\<bind> g (a, s)\n                                | Some x \\<Rightarrow> g (a, s) x)))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret)\n                         (if I s' then Some s' else None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv' (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, r, s).\n                            case r of\n                            None \\<Rightarrow> f s \\<bind> g (a, s)\n                            | Some x \\<Rightarrow> g (a, s) x))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(rule step.IH[THEN spmf.leq_trans])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IO out rpv \\<in> set_spmf (the_gpv gpv);\n     (ret, s') \\<in> set_spmf (callee s out); \\<not> I s'\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (exec_gpv1\n                         (\\<lambda>a.\n                             case a of\n                             (ss, s) \\<Rightarrow>\n                               \\<lambda>x.\n                                  map_spmf\n                                   (\\<lambda>a.\n case a of\n (y, s') \\<Rightarrow>\n   (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n                                   (callee s x))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>a.\n                            case a of\n                            (a, ss', s') \\<Rightarrow>\n                              f (case ss' of None \\<Rightarrow> s'\n                                 | Some s'' \\<Rightarrow> s'') \\<bind>\n                              g (a, s')))\n                       (exec_gpv\n                         (\\<lambda>(ss, s) x.\n                             map_spmf\n                              (\\<lambda>(y, s').\n                                  (y, if I s' \\<and> ss = None then Some s'\nelse ss,\n                                   s'))\n                              (callee s x))\n                         (rpv ret) (None, s') \\<bind>\n                        (\\<lambda>(a, ss', s').\n                            f (case ss' of None \\<Rightarrow> s'\n                               | Some s'' \\<Rightarrow> s'') \\<bind>\n                            g (a, s')))", "apply(simp add: split_def exec_gpv2_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (the_gpv gpv \\<bind>\n    case_generat (\\<lambda>x. return_spmf (x, None, s))\n     (\\<lambda>out c.\n         (case (None, s) of\n          (r, s) \\<Rightarrow>\n            \\<lambda>x.\n               callee s x \\<bind>\n               (\\<lambda>a.\n                   case a of\n                   (y, s') \\<Rightarrow>\n                     if I s' \\<and> r = None\n                     then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n                     else return_spmf (y, r, s')))\n          out \\<bind>\n         (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<bind>\n    (\\<lambda>a.\n        case a of (a, None, s) \\<Rightarrow> f s \\<bind> g (a, s)\n        | (a, Some b, s) \\<Rightarrow> g (a, s) b))\n   (exec_gpv1\n     (\\<lambda>a.\n         case a of\n         (ss, s) \\<Rightarrow>\n           \\<lambda>x.\n              map_spmf\n               (\\<lambda>a.\n                   case a of\n                   (y, s') \\<Rightarrow>\n                     (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n               (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (a, ss', s') \\<Rightarrow>\n          f (case ss' of None \\<Rightarrow> s'\n             | Some s'' \\<Rightarrow> s'') \\<bind>\n          g (a, s')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r'))\n   (exec_gpv1\n     (\\<lambda>(ss, s) x.\n         map_spmf\n          (\\<lambda>(y, s').\n              (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n          (callee s x))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, ss', s').\n        f (case ss' of None \\<Rightarrow> s'\n           | Some s'' \\<Rightarrow> s'') \\<bind>\n        g (a, s')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exec_gpv1\n   (\\<lambda>(ss, s) x.\n       map_spmf\n        (\\<lambda>(y, s').\n            (y, if I s' \\<and> ss = None then Some s' else ss, s'))\n        (callee s x))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, ss', s').\n      f (case ss' of None \\<Rightarrow> s'\n         | Some s'' \\<Rightarrow> s'') \\<bind>\n      g (a, s')) =\n  exec_gpv2\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, r, s).\n      case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n      | Some r' \\<Rightarrow> g (a, s) r')\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "finally"], ["proof (chain)\npicking this:\n  exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n  exec_gpv2\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, r, s).\n      case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n      | Some r' \\<Rightarrow> g (a, s) r')", "show ?thesis"], ["proof (prove)\nusing this:\n  exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n  exec_gpv2\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, r, s).\n      case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n      | Some r' \\<Rightarrow> g (a, s) r')\n\ngoal (1 subgoal):\n 1. exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n    exec_gpv2\n     (\\<lambda>(r, s) x.\n         callee s x \\<bind>\n         (\\<lambda>(y, s').\n             if I s' \\<and> r = None\n             then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n             else return_spmf (y, r, s')))\n     gpv (None, s) \\<bind>\n    (\\<lambda>(a, r, s).\n        case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n        | Some r' \\<Rightarrow> g (a, s) r')", "."], ["proof (state)\nthis:\n  exec_gpv callee gpv s \\<bind> (\\<lambda>as. f (snd as) \\<bind> g as) =\n  exec_gpv2\n   (\\<lambda>(r, s) x.\n       callee s x \\<bind>\n       (\\<lambda>(y, s').\n           if I s' \\<and> r = None\n           then map_spmf (\\<lambda>r. (y, Some r, s')) (f s')\n           else return_spmf (y, r, s')))\n   gpv (None, s) \\<bind>\n  (\\<lambda>(a, r, s).\n      case r of None \\<Rightarrow> f s \\<bind> g (a, s)\n      | Some r' \\<Rightarrow> g (a, s) r')\n\ngoal:\nNo subgoals!", "qed"], ["", "primcorec gpv_stop :: \"('a, 'c, 'r) gpv \\<Rightarrow> ('a option, 'c, 'r option) gpv\"\nwhere\n  \"the_gpv (gpv_stop gpv) = \n   map_spmf (map_generat Some id (\\<lambda>rpv input. case input of None \\<Rightarrow> Done None | Some input' \\<Rightarrow> gpv_stop (rpv input'))) \n     (the_gpv gpv)\""], ["", "lemma gpv_stop_Done [simp]: \"gpv_stop (Done x) = Done (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop (Generative_Probabilistic_Value.Done x) =\n    Generative_Probabilistic_Value.Done (Some x)", "by(rule gpv.expand) simp"], ["", "lemma gpv_stop_Fail [simp]: \"gpv_stop Fail = Fail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop Fail = Fail", "by(rule gpv.expand) simp"], ["", "lemma gpv_stop_Pause [simp]: \"gpv_stop (Pause out rpv) = Pause out (\\<lambda>input. case input of None \\<Rightarrow> Done None | Some input' \\<Rightarrow> gpv_stop (rpv input'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop (Generative_Probabilistic_Value.Pause out rpv) =\n    Generative_Probabilistic_Value.Pause out\n     (\\<lambda>input.\n         case input of\n         None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n         | Some input' \\<Rightarrow> gpv_stop (rpv input'))", "by(rule gpv.expand) simp"], ["", "lemma gpv_stop_lift_spmf [simp]: \"gpv_stop (lift_spmf p) = lift_spmf (map_spmf Some p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop (lift_spmf p) = lift_spmf (map_spmf Some p)", "by(rule gpv.expand)(simp add: spmf.map_comp o_def)"], ["", "lemma gpv_stop_bind [simp]:\n  \"gpv_stop (bind_gpv gpv f) = bind_gpv (gpv_stop gpv) (\\<lambda>x. case x of None \\<Rightarrow> Done None | Some x' \\<Rightarrow> gpv_stop (f x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop (gpv \\<bind> f) =\n    gpv_stop gpv \\<bind>\n    (\\<lambda>x.\n        case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some x' \\<Rightarrow> gpv_stop (f x'))", "apply(coinduction arbitrary: gpv rule: gpv.coinduct_strong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gpva.\n       rel_spmf\n        (rel_generat (=) (=)\n          (rel_fun (=)\n            (\\<lambda>gpv gpv'.\n                (\\<exists>gpva.\n                    gpv = gpv_stop (gpva \\<bind> f) \\<and>\n                    gpv' =\n                    gpv_stop gpva \\<bind>\n                    case_option (Generative_Probabilistic_Value.Done None)\n                     (\\<lambda>x'. gpv_stop (f x'))) \\<or>\n                gpv = gpv')))\n        (the_gpv (gpv_stop (gpva \\<bind> f)))\n        (the_gpv\n          (gpv_stop gpva \\<bind>\n           case_option (Generative_Probabilistic_Value.Done None)\n            (\\<lambda>x'. gpv_stop (f x'))))", "apply(auto 4 3 simp add: spmf_rel_map map_spmf_bind_spmf o_def bind_map_spmf bind_gpv.sel generat.rel_map simp del: bind_gpv_sel' intro!: rel_spmf_bind_reflI generat.rel_refl_strong rel_spmf_reflI rel_funI split!: generat.split option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context includes lifting_syntax begin"], ["", "lemma gpv_stop_parametric':\n  notes [transfer_rule] = the_gpv_parametric' the_gpv_parametric' Done_parametric' corec_gpv_parametric'\n  shows \"(rel_gpv'' A C R ===> rel_gpv'' (rel_option A) C (rel_option R)) gpv_stop gpv_stop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_gpv'' A C R ===> rel_gpv'' (rel_option A) C (rel_option R))\n     gpv_stop gpv_stop", "unfolding gpv_stop_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_gpv'' A C R ===> rel_gpv'' (rel_option A) C (rel_option R))\n     (corec_gpv\n       (\\<lambda>gpv.\n           map_spmf\n            (map_generat Some id\n              (\\<lambda>uu input.\n                  case input of\n                  None \\<Rightarrow>\n                    Inl (Generative_Probabilistic_Value.Done None)\n                  | Some input' \\<Rightarrow> Inr (uu input')))\n            (the_gpv gpv)))\n     (corec_gpv\n       (\\<lambda>gpv.\n           map_spmf\n            (map_generat Some id\n              (\\<lambda>uu input.\n                  case input of\n                  None \\<Rightarrow>\n                    Inl (Generative_Probabilistic_Value.Done None)\n                  | Some input' \\<Rightarrow> Inr (uu input')))\n            (the_gpv gpv)))", "by transfer_prover"], ["", "lemma gpv_stop_parametric [transfer_rule]:\n  shows \"(rel_gpv A C ===> rel_gpv (rel_option A) C) gpv_stop gpv_stop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_gpv A C ===> rel_gpv (rel_option A) C) gpv_stop gpv_stop", "unfolding gpv_stop_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_gpv A C ===> rel_gpv (rel_option A) C)\n     (corec_gpv\n       (\\<lambda>gpv.\n           map_spmf\n            (map_generat Some id\n              (\\<lambda>uu input.\n                  case input of\n                  None \\<Rightarrow>\n                    Inl (Generative_Probabilistic_Value.Done None)\n                  | Some input' \\<Rightarrow> Inr (uu input')))\n            (the_gpv gpv)))\n     (corec_gpv\n       (\\<lambda>gpv.\n           map_spmf\n            (map_generat Some id\n              (\\<lambda>uu input.\n                  case input of\n                  None \\<Rightarrow>\n                    Inl (Generative_Probabilistic_Value.Done None)\n                  | Some input' \\<Rightarrow> Inr (uu input')))\n            (the_gpv gpv)))", "by transfer_prover"], ["", "lemma gpv_stop_transfer:\n  \"(rel_gpv'' A B C ===> rel_gpv'' (pcr_Some A) B (pcr_Some C)) (\\<lambda>x. x) gpv_stop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_gpv'' A B C ===> rel_gpv'' (pcr_Some A) B (pcr_Some C))\n     (\\<lambda>x. x) gpv_stop", "apply(rule rel_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       rel_gpv'' A B C x y \\<Longrightarrow>\n       rel_gpv'' (pcr_Some A) B (pcr_Some C) x (gpv_stop y)", "subgoal for gpv gpv'"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_gpv'' A B C gpv gpv' \\<Longrightarrow>\n    rel_gpv'' (pcr_Some A) B (pcr_Some C) gpv (gpv_stop gpv')", "apply(coinduction arbitrary: gpv gpv')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gpva__ gpv'a__.\n       rel_gpv'' A B C gpva__ gpv'a__ \\<Longrightarrow>\n       rel_spmf\n        (rel_generat (pcr_Some A) B\n          (pcr_Some C ===>\n           (\\<lambda>gpv gpv'.\n               (\\<exists>gpva__ gpv'a__.\n                   gpv = gpva__ \\<and>\n                   gpv' = gpv_stop gpv'a__ \\<and>\n                   rel_gpv'' A B C gpva__ gpv'a__) \\<or>\n               rel_gpv'' (pcr_Some A) B (pcr_Some C) gpv gpv')))\n        (the_gpv gpva__) (the_gpv (gpv_stop gpv'a__))", "apply(drule rel_gpv''D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gpva__ gpv'a__.\n       rel_spmf (rel_generat A B (C ===> rel_gpv'' A B C)) (the_gpv gpva__)\n        (the_gpv gpv'a__) \\<Longrightarrow>\n       rel_spmf\n        (rel_generat (pcr_Some A) B\n          (pcr_Some C ===>\n           (\\<lambda>gpv gpv'.\n               (\\<exists>gpva__ gpv'a__.\n                   gpv = gpva__ \\<and>\n                   gpv' = gpv_stop gpv'a__ \\<and>\n                   rel_gpv'' A B C gpva__ gpv'a__) \\<or>\n               rel_gpv'' (pcr_Some A) B (pcr_Some C) gpv gpv')))\n        (the_gpv gpva__) (the_gpv (gpv_stop gpv'a__))", "apply(auto simp add: spmf_rel_map generat.rel_map rel_fun_def elim!: pcr_SomeE generat.rel_mono_strong rel_spmf_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma gpv_stop_map' [simp]:\n  \"gpv_stop (map_gpv' f g h gpv) = map_gpv' (map_option f) g (map_option h) (gpv_stop gpv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gpv_stop (map_gpv' f g h gpv) =\n    map_gpv' (map_option f) g (map_option h) (gpv_stop gpv)", "apply(coinduction arbitrary: gpv rule: gpv.coinduct_strong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>gpva.\n       rel_spmf\n        (rel_generat (=) (=)\n          (rel_fun (=)\n            (\\<lambda>gpv gpv'.\n                (\\<exists>gpva.\n                    gpv = gpv_stop (map_gpv' f g h gpva) \\<and>\n                    gpv' =\n                    map_gpv' (map_option f) g (map_option h)\n                     (gpv_stop gpva)) \\<or>\n                gpv = gpv')))\n        (the_gpv (gpv_stop (map_gpv' f g h gpva)))\n        (the_gpv (map_gpv' (map_option f) g (map_option h) (gpv_stop gpva)))", "apply(auto 4 3 simp add: spmf_rel_map generat.rel_map intro!: rel_spmf_reflI generat.rel_refl_strong split!: option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma interaction_bound_gpv_stop [simp]:\n  \"interaction_bound consider (gpv_stop gpv) = interaction_bound consider gpv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interaction_bound consider (gpv_stop gpv) =\n    interaction_bound consider gpv", "proof(induction arbitrary: gpv rule: parallel_fixp_induct_strong_1_1[OF complete_lattice_partial_function_definitions complete_lattice_partial_function_definitions interaction_bound.mono interaction_bound.mono interaction_bound_def interaction_bound_def, case_names adm bottom step])"], ["proof (state)\ngoal (3 subgoals):\n 1. ccpo.admissible (prod_lub lfp.lub_fun lfp.lub_fun)\n     (rel_prod lfp.le_fun lfp.le_fun)\n     (\\<lambda>x. \\<forall>xa. fst x (gpv_stop xa) = snd x xa)\n 2. \\<And>gpv. \\<Squnion> {} = \\<Squnion> {}\n 3. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. ccpo.admissible (prod_lub lfp.lub_fun lfp.lub_fun)\n     (rel_prod lfp.le_fun lfp.le_fun)\n     (\\<lambda>x. \\<forall>xa. fst x (gpv_stop xa) = snd x xa)\n 2. \\<And>gpv. \\<Squnion> {} = \\<Squnion> {}\n 3. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccpo.admissible (prod_lub lfp.lub_fun lfp.lub_fun)\n     (rel_prod lfp.le_fun lfp.le_fun)\n     (\\<lambda>x. \\<forall>xa. fst x (gpv_stop xa) = snd x xa)", "by simp"], ["proof (state)\nthis:\n  ccpo.admissible (prod_lub lfp.lub_fun lfp.lub_fun)\n   (rel_prod lfp.le_fun lfp.le_fun)\n   (\\<lambda>x. \\<forall>xa. fst x (gpv_stop xa) = snd x xa)\n\ngoal (2 subgoals):\n 1. \\<And>gpv. \\<Squnion> {} = \\<Squnion> {}\n 2. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>gpv. \\<Squnion> {} = \\<Squnion> {}\n 2. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {} = \\<Squnion> {}", "by simp"], ["proof (state)\nthis:\n  \\<Squnion> {} = \\<Squnion> {}\n\ngoal (1 subgoal):\n 1. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "case (step interaction_bound' interaction_bound'')"], ["proof (state)\nthis:\n  interaction_bound' ?x \\<le> interaction_bound consider ?x\n  interaction_bound'' ?y \\<le> interaction_bound consider ?y\n  interaction_bound' (gpv_stop ?gpv) = interaction_bound'' ?gpv\n\ngoal (1 subgoal):\n 1. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "have \"(SUP x. interaction_bound' (case x of None \\<Rightarrow> Done None | Some input \\<Rightarrow> gpv_stop (c input))) =\n        (SUP input. interaction_bound'' (c input))\" (is \"?lhs = ?rhs\" is \"(SUP x. ?f x) = _\")\n    if \"IO out c \\<in> set_spmf (the_gpv gpv)\" for out c"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "have \"?lhs = sup (interaction_bound' (Done None)) (\\<Squnion>x. ?f (Some x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    interaction_bound' (Generative_Probabilistic_Value.Done None) \\<squnion>\n    (\\<Squnion>x.\n        interaction_bound'\n         (case Some x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input)))", "by (simp add: UNIV_option_conv image_comp)"], ["proof (state)\nthis:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  interaction_bound' (Generative_Probabilistic_Value.Done None) \\<squnion>\n  (\\<Squnion>x.\n      interaction_bound'\n       (case Some x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input)))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "also"], ["proof (state)\nthis:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  interaction_bound' (Generative_Probabilistic_Value.Done None) \\<squnion>\n  (\\<Squnion>x.\n      interaction_bound'\n       (case Some x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input)))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "have \"interaction_bound' (Done None) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interaction_bound' (Generative_Probabilistic_Value.Done None) = 0", "using step.hyps(1)[of \"Done None\"]"], ["proof (prove)\nusing this:\n  interaction_bound' (Generative_Probabilistic_Value.Done None)\n  \\<le> interaction_bound consider\n         (Generative_Probabilistic_Value.Done None)\n\ngoal (1 subgoal):\n 1. interaction_bound' (Generative_Probabilistic_Value.Done None) = 0", "by simp"], ["proof (state)\nthis:\n  interaction_bound' (Generative_Probabilistic_Value.Done None) = 0\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "also"], ["proof (state)\nthis:\n  interaction_bound' (Generative_Probabilistic_Value.Done None) = 0\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "have \"(\\<Squnion>x. ?f (Some x)) = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case Some x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "by (simp add: step.IH)"], ["proof (state)\nthis:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case Some x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  (\\<Squnion>input. interaction_bound'' (c input))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "finally"], ["proof (chain)\npicking this:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  0 \\<squnion> (\\<Squnion>input. interaction_bound'' (c input))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  0 \\<squnion> (\\<Squnion>input. interaction_bound'' (c input))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x.\n        interaction_bound'\n         (case x of\n          None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n          | Some input \\<Rightarrow> gpv_stop (c input))) =\n    (\\<Squnion>input. interaction_bound'' (c input))", "by (simp add: bot_enat_def [symmetric])"], ["proof (state)\nthis:\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (c input))) =\n  (\\<Squnion>input. interaction_bound'' (c input))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  IO ?out ?c \\<in> set_spmf (the_gpv gpv) \\<Longrightarrow>\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (?c input))) =\n  (\\<Squnion>input. interaction_bound'' (?c input))\n\ngoal (1 subgoal):\n 1. \\<And>f' g' gpv.\n       \\<lbrakk>\\<And>x. f' x \\<le> interaction_bound consider x;\n        \\<And>y. g' y \\<le> interaction_bound consider y;\n        \\<And>gpv. f' (gpv_stop gpv) = g' gpv\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. f' (c input))\n    else \\<Squnion>input. f' (c input)) `\n                                     set_spmf (the_gpv (gpv_stop gpv))) =\n                         \\<Squnion> (case_generat (\\<lambda>x. 0)\n(\\<lambda>out c.\n    if consider out then eSuc (\\<Squnion>input. g' (c input))\n    else \\<Squnion>input. g' (c input)) `\n                                     set_spmf (the_gpv gpv))", "then"], ["proof (chain)\npicking this:\n  IO ?out ?c \\<in> set_spmf (the_gpv gpv) \\<Longrightarrow>\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (?c input))) =\n  (\\<Squnion>input. interaction_bound'' (?c input))", "show ?case"], ["proof (prove)\nusing this:\n  IO ?out ?c \\<in> set_spmf (the_gpv gpv) \\<Longrightarrow>\n  (\\<Squnion>x.\n      interaction_bound'\n       (case x of\n        None \\<Rightarrow> Generative_Probabilistic_Value.Done None\n        | Some input \\<Rightarrow> gpv_stop (?c input))) =\n  (\\<Squnion>input. interaction_bound'' (?c input))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>generat\\<in>set_spmf (the_gpv (gpv_stop gpv)).\n        case generat of Pure x \\<Rightarrow> 0\n        | IO out c \\<Rightarrow>\n            if consider out\n            then eSuc (\\<Squnion>input. interaction_bound' (c input))\n            else \\<Squnion>input. interaction_bound' (c input)) =\n    (\\<Squnion>generat\\<in>set_spmf (the_gpv gpv).\n        case generat of Pure x \\<Rightarrow> 0\n        | IO out c \\<Rightarrow>\n            if consider out\n            then eSuc (\\<Squnion>input. interaction_bound'' (c input))\n            else \\<Squnion>input. interaction_bound'' (c input))", "by (auto simp add: case_map_generat o_def image_comp cong del: generat.case_cong_weak if_weak_cong intro!: SUP_cong split: generat.split)"], ["proof (state)\nthis:\n  (\\<Squnion>generat\\<in>set_spmf (the_gpv (gpv_stop gpv)).\n      case generat of Pure x \\<Rightarrow> 0\n      | IO out c \\<Rightarrow>\n          if consider out\n          then eSuc (\\<Squnion>input. interaction_bound' (c input))\n          else \\<Squnion>input. interaction_bound' (c input)) =\n  (\\<Squnion>generat\\<in>set_spmf (the_gpv gpv).\n      case generat of Pure x \\<Rightarrow> 0\n      | IO out c \\<Rightarrow>\n          if consider out\n          then eSuc (\\<Squnion>input. interaction_bound'' (c input))\n          else \\<Squnion>input. interaction_bound'' (c input))\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation exec_gpv_stop :: \"('s \\<Rightarrow> 'c \\<Rightarrow> ('r option \\<times> 's) spmf) \\<Rightarrow> ('a, 'c, 'r) gpv \\<Rightarrow> 's \\<Rightarrow> ('a option \\<times> 's) spmf\"\nwhere \"exec_gpv_stop callee gpv \\<equiv> exec_gpv callee (gpv_stop gpv)\""], ["", "abbreviation inline_stop :: \"('s \\<Rightarrow> 'c \\<Rightarrow> ('r option \\<times> 's, 'c', 'r') gpv) \\<Rightarrow> ('a, 'c, 'r) gpv \\<Rightarrow> 's \\<Rightarrow> ('a option \\<times> 's, 'c', 'r') gpv\"\nwhere \"inline_stop callee gpv \\<equiv> inline callee (gpv_stop gpv)\""], ["", "context\n  fixes joint_oracle :: \"'s1 \\<Rightarrow> 's2 \\<Rightarrow> 'c \\<Rightarrow> (('r option \\<times> 's1) option \\<times> ('r option \\<times> 's2) option) pmf\"\n  and callee1 :: \"'s1 \\<Rightarrow> 'c \\<Rightarrow> ('r option \\<times> 's1) spmf\"\n  notes [[function_internals]]\nbegin"], ["", "partial_function (spmf) exec_until_stop :: \"('a option, 'c, 'r) gpv \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool \\<Rightarrow> ('a option \\<times> 's1 \\<times> 's2) spmf\"\nwhere\n  \"exec_until_stop gpv s1 s2 b =\n  (if b then \n     bind_spmf (the_gpv gpv) (\\<lambda>generat. case generat of\n       Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n     | IO out rpv \\<Rightarrow> bind_pmf (joint_oracle s1 s2 out) (\\<lambda>(a, b).\n         case a of None \\<Rightarrow> return_pmf None\n         | Some (r1, s1') \\<Rightarrow> (case b of None \\<Rightarrow> undefined | Some (r2, s2') \\<Rightarrow>\n           (case (r1, r2) of (None, None) \\<Rightarrow> exec_until_stop (Done None) s1' s2' True\n             | (Some r1', Some r2') \\<Rightarrow> exec_until_stop (rpv r1') s1' s2' True\n             | (None, Some r2') \\<Rightarrow> exec_until_stop (Done None) s1' s2' True\n             | (Some r1', None) \\<Rightarrow> exec_until_stop (rpv r1') s1' s2' False))))\n   else\n     bind_spmf (the_gpv gpv) (\\<lambda>generat. case generat of\n       Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n     | IO out rpv \\<Rightarrow> bind_spmf (callee1 s1 out) (\\<lambda>(r1, s1').\n         case r1 of None \\<Rightarrow> exec_until_stop (Done None) s1' s2 False\n           | Some r1' \\<Rightarrow> exec_until_stop (rpv r1') s1' s2 False)))\""], ["", "end"], ["", "lemma ord_spmf_exec_gpv_stop: (* TODO: generalize ord_spmf to support different type variables *)\n  fixes callee1 :: \"('c, 'r option, 's) callee\"\n  and callee2 :: \"('c, 'r option, 's) callee\"\n  and S :: \"'s \\<Rightarrow> 's \\<Rightarrow> bool\"\n  and gpv :: \"('a, 'c, 'r) gpv\"\n  assumes bisim:\n    \"\\<And>s1 s2 x. \\<lbrakk> S s1 s2; \\<not> stop s2 \\<rbrakk> \\<Longrightarrow> \n    ord_spmf (\\<lambda>(r1, s1') (r2, s2'). le_option r2 r1 \\<and> S s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None \\<longleftrightarrow> stop s2'))\n      (callee1 s1 x) (callee2 s2 x)\"\n  and init: \"S s1 s2\"\n  and go: \"\\<not> stop s2\"\n  and sticking: \"\\<And>s1 s2 x y s1'. \\<lbrakk> (y, s1') \\<in> set_spmf (callee1 s1 x); S s1 s2; stop s2 \\<rbrakk> \\<Longrightarrow> S s1' s2\"\n  shows \"ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "let ?R = \"\\<lambda>(r1, s1') (r2, s2'). le_option r2 r1 \\<and> S s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None \\<longleftrightarrow> stop s2')\""], ["proof (state)\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "obtain joint :: \"'s \\<Rightarrow> 's \\<Rightarrow> 'c \\<Rightarrow> (('r option \\<times> 's) option \\<times> ('r option \\<times> 's) option) pmf\"\n    where j1: \"map_pmf fst (joint s1 s2 x) = callee1 s1 x\"\n    and j2: \"map_pmf snd (joint s1 s2 x) = callee2 s2 x\"\n    and rel [rule_format, rotated -1]: \"\\<forall>(a, b) \\<in> set_pmf (joint s1 s2 x). ord_option ?R a b\"\n    if \"S s1 s2\" \"\\<not> stop s2\" for x s1 s2"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>joint.\n        \\<lbrakk>\\<And>x s1 s2.\n                    \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n                    \\<Longrightarrow> map_pmf fst (joint s1 s2 x) =\ncallee1 s1 x;\n         \\<And>x s1 s2.\n            \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n            \\<Longrightarrow> map_pmf snd (joint s1 s2 x) = callee2 s2 x;\n         \\<And>x s1 s2.\n            \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n            \\<Longrightarrow> \\<forall>(a, b)\\<in>set_pmf (joint s1 s2 x).\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bisim"], ["proof (prove)\nusing this:\n  \\<lbrakk>S ?s1.0 ?s2.0; \\<not> stop ?s2.0\\<rbrakk>\n  \\<Longrightarrow> ord_spmf\n                     (\\<lambda>(r1, s1') (r2, s2').\n                         le_option r2 r1 \\<and>\n                         S s1' s2' \\<and>\n                         (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                     (callee1 ?s1.0 ?x) (callee2 ?s2.0 ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>joint.\n        \\<lbrakk>\\<And>x s1 s2.\n                    \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n                    \\<Longrightarrow> map_pmf fst (joint s1 s2 x) =\ncallee1 s1 x;\n         \\<And>x s1 s2.\n            \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n            \\<Longrightarrow> map_pmf snd (joint s1 s2 x) = callee2 s2 x;\n         \\<And>x s1 s2.\n            \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n            \\<Longrightarrow> \\<forall>(a, b)\\<in>set_pmf (joint s1 s2 x).\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply atomize_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> ord_spmf\n                           (\\<lambda>a.\n                               case a of\n                               (r1, s1') \\<Rightarrow>\n                                 \\<lambda>a.\n                                    case a of\n                                    (r2, s2') \\<Rightarrow>\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                           (callee1 s1 x) (callee2 s2 x)) \\<Longrightarrow>\n    \\<exists>joint.\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           map_pmf fst (joint s1 s2 x) = callee1 s1 x) \\<and>\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           map_pmf snd (joint s1 s2 x) = callee2 s2 x) \\<and>\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           (\\<forall>(x, y)\\<in>set_pmf (joint s1 s2 x).\n               ord_option\n                (\\<lambda>(r1, s1') (r2, s2').\n                    le_option r2 r1 \\<and>\n                    S s1' s2' \\<and>\n                    (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                x y))", "apply(subst (asm) rel_pmf.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>pq.\n                             (\\<forall>x xa.\n                                 (x, xa) \\<in> set_pmf pq \\<longrightarrow>\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  x xa) \\<and>\n                             map_pmf fst pq = callee1 s1 x \\<and>\n                             map_pmf snd pq =\n                             callee2 s2 x) \\<Longrightarrow>\n    \\<exists>joint.\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           map_pmf fst (joint s1 s2 x) = callee1 s1 x) \\<and>\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           map_pmf snd (joint s1 s2 x) = callee2 s2 x) \\<and>\n       (\\<forall>x s1 s2.\n           S s1 s2 \\<longrightarrow>\n           \\<not> stop s2 \\<longrightarrow>\n           (\\<forall>(x, y)\\<in>set_pmf (joint s1 s2 x).\n               ord_option\n                (\\<lambda>(r1, s1') (r2, s2').\n                    le_option r2 r1 \\<and>\n                    S s1' s2' \\<and>\n                    (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                x y))", "apply(unfold rel_spmf_simps all_conj_distrib[symmetric] all_simps(6) imp_conjR[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>pq.\n                             (\\<forall>x xa.\n                                 (x, xa) \\<in> set_pmf pq \\<longrightarrow>\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  x xa) \\<and>\n                             map_pmf fst pq = callee1 s1 x \\<and>\n                             map_pmf snd pq =\n                             callee2 s2 x) \\<Longrightarrow>\n    \\<exists>joint.\n       \\<forall>x xa xb.\n          S xa xb \\<longrightarrow>\n          \\<not> stop xb \\<longrightarrow>\n          map_pmf fst (joint xa xb x) = callee1 xa x \\<and>\n          map_pmf snd (joint xa xb x) = callee2 xb x \\<and>\n          (\\<forall>(x, y)\\<in>set_pmf (joint xa xb x).\n              ord_option\n               (\\<lambda>(r1, s1') (r2, s2').\n                   le_option r2 r1 \\<and>\n                   S s1' s2' \\<and>\n                   (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n               x y)", "apply(subst all_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>pq.\n                             (\\<forall>x xa.\n                                 (x, xa) \\<in> set_pmf pq \\<longrightarrow>\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  x xa) \\<and>\n                             map_pmf fst pq = callee1 s1 x \\<and>\n                             map_pmf snd pq =\n                             callee2 s2 x) \\<Longrightarrow>\n    \\<exists>joint.\n       \\<forall>y x xa.\n          S y xa \\<longrightarrow>\n          \\<not> stop xa \\<longrightarrow>\n          map_pmf fst (joint y xa x) = callee1 y x \\<and>\n          map_pmf snd (joint y xa x) = callee2 xa x \\<and>\n          (\\<forall>(x, y)\\<in>set_pmf (joint y xa x).\n              ord_option\n               (\\<lambda>(r1, s1') (r2, s2').\n                   le_option r2 r1 \\<and>\n                   S s1' s2' \\<and>\n                   (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n               x y)", "apply(subst (2) all_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>pq.\n                             (\\<forall>x xa.\n                                 (x, xa) \\<in> set_pmf pq \\<longrightarrow>\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  x xa) \\<and>\n                             map_pmf fst pq = callee1 s1 x \\<and>\n                             map_pmf snd pq =\n                             callee2 s2 x) \\<Longrightarrow>\n    \\<exists>joint.\n       \\<forall>y ya x.\n          S y ya \\<longrightarrow>\n          \\<not> stop ya \\<longrightarrow>\n          map_pmf fst (joint y ya x) = callee1 y x \\<and>\n          map_pmf snd (joint y ya x) = callee2 ya x \\<and>\n          (\\<forall>(x, y)\\<in>set_pmf (joint y ya x).\n              ord_option\n               (\\<lambda>(r1, s1') (r2, s2').\n                   le_option r2 r1 \\<and>\n                   S s1' s2' \\<and>\n                   (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n               x y)", "apply(subst choice_iff[symmetric] ex_simps(6))+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 x.\n        \\<lbrakk>S s1 s2; \\<not> stop s2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>pq.\n                             (\\<forall>x xa.\n                                 (x, xa) \\<in> set_pmf pq \\<longrightarrow>\n                                 ord_option\n                                  (\\<lambda>(r1, s1') (r2, s2').\nle_option r2 r1 \\<and>\nS s1' s2' \\<and> (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                                  x xa) \\<and>\n                             map_pmf fst pq = callee1 s1 x \\<and>\n                             map_pmf snd pq =\n                             callee2 s2 x) \\<Longrightarrow>\n    \\<forall>x xa xb.\n       S x xa \\<longrightarrow>\n       \\<not> stop xa \\<longrightarrow>\n       (\\<exists>xc.\n           map_pmf fst xc = callee1 x xb \\<and>\n           map_pmf snd xc = callee2 xa xb \\<and>\n           (\\<forall>(x, y)\\<in>set_pmf xc.\n               ord_option\n                (\\<lambda>(r1, s1') (r2, s2').\n                    le_option r2 r1 \\<and>\n                    S s1' s2' \\<and>\n                    (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                x y))", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>S ?s1.1 ?s2.1; \\<not> stop ?s2.1\\<rbrakk>\n  \\<Longrightarrow> map_pmf fst (joint ?s1.1 ?s2.1 ?x1) = callee1 ?s1.1 ?x1\n  \\<lbrakk>S ?s1.1 ?s2.1; \\<not> stop ?s2.1\\<rbrakk>\n  \\<Longrightarrow> map_pmf snd (joint ?s1.1 ?s2.1 ?x1) = callee2 ?s2.1 ?x1\n  \\<lbrakk>?xa \\<in> set_pmf (joint ?s1.0 ?s2.0 ?x); S ?s1.0 ?s2.0;\n   \\<not> stop ?s2.0\\<rbrakk>\n  \\<Longrightarrow> case ?xa of\n                    (x, xa) \\<Rightarrow>\n                      ord_option\n                       (\\<lambda>(r1, s1') (r2, s2').\n                           le_option r2 r1 \\<and>\n                           S s1' s2' \\<and>\n                           (r2 = None \\<and> r1 \\<noteq> None) = stop s2')\n                       x xa\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "note [simp del] = top_apply conversep_iff id_apply"], ["proof (state)\nthis:\n  \\<top> ?x = \\<top>\n  ?r\\<inverse>\\<inverse> ?a ?b = ?r ?b ?a\n  id ?x = ?x\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "have \"\\<not> stop s2 \\<Longrightarrow> rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (exec_gpv_stop callee1 gpv s1) (map_spmf (\\<lambda>(x, s1, s2). (x, s2)) (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\"\n    and \"rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (exec_gpv callee1 (Done None :: ('a option, 'c, 'r option) gpv) s1) (map_spmf (\\<lambda>(x, s1, s2). (x, s2)) (exec_until_stop joint callee1 (Done None :: ('a option, 'c, 'r) gpv) s1 s2 b))\"\n    and \"stop s2 \\<Longrightarrow> rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (exec_gpv_stop callee1 gpv s1) (map_spmf (\\<lambda>(x, s1, y). (x, y)) (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False))\"\n    for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> stop s2 \\<Longrightarrow>\n     rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n      (exec_gpv_stop callee1 gpv s1)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2\n          True))) &&&\n    rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv callee1 (Generative_Probabilistic_Value.Done None) s1)\n     (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n       (exec_until_stop joint callee1\n         (Generative_Probabilistic_Value.Done None) s1 s2 b)) &&&\n    (stop s2 \\<Longrightarrow>\n     rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n      (exec_gpv_stop callee1 gpv s1)\n      (map_spmf (\\<lambda>(x, s1, y). (x, y))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False)))", "using init"], ["proof (prove)\nusing this:\n  S s1 s2\n\ngoal (1 subgoal):\n 1. (\\<not> stop s2 \\<Longrightarrow>\n     rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n      (exec_gpv_stop callee1 gpv s1)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2\n          True))) &&&\n    rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv callee1 (Generative_Probabilistic_Value.Done None) s1)\n     (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n       (exec_until_stop joint callee1\n         (Generative_Probabilistic_Value.Done None) s1 s2 b)) &&&\n    (stop s2 \\<Longrightarrow>\n     rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n      (exec_gpv_stop callee1 gpv s1)\n      (map_spmf (\\<lambda>(x, s1, y). (x, y))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False)))", "proof(induction arbitrary: gpv s1 s2 b rule: parallel_fixp_induct_2_4[OF partial_function_definitions_spmf partial_function_definitions_spmf exec_gpv.mono exec_until_stop.mono exec_gpv_def exec_until_stop_def, unfolded lub_spmf_empty, case_names adm bottom step])"], ["proof (state)\ngoal (7 subgoals):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x.\n         (\\<forall>xa xb xc.\n             \\<not> stop xc \\<longrightarrow>\n             S xb xc \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xb)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xb xc\n                  True))) \\<and>\n         (\\<forall>xa xb.\n             S xa xb \\<longrightarrow>\n             (\\<forall>xc.\n                 rel_spmf\n                  (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                  (curry (fst x) (Generative_Probabilistic_Value.Done None)\n                    xa)\n                  (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                    (curry (curry (curry (snd x)))\n                      (Generative_Probabilistic_Value.Done None) xa xb\n                      xc)))) \\<and>\n         (\\<forall>xa xb xc.\n             stop xc \\<longrightarrow>\n             S xb xc \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xb)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xb xc\n                  False))))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 4. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 7. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x.\n         (\\<forall>xa xb xc.\n             \\<not> stop xc \\<longrightarrow>\n             S xb xc \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xb)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xb xc\n                  True))) \\<and>\n         (\\<forall>xa xb.\n             S xa xb \\<longrightarrow>\n             (\\<forall>xc.\n                 rel_spmf\n                  (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                  (curry (fst x) (Generative_Probabilistic_Value.Done None)\n                    xa)\n                  (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                    (curry (curry (curry (snd x)))\n                      (Generative_Probabilistic_Value.Done None) xa xb\n                      xc)))) \\<and>\n         (\\<forall>xa xb xc.\n             stop xc \\<longrightarrow>\n             S xb xc \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xb)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xb xc\n                  False))))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 4. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 7. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x.\n         (\\<forall>xa xaa xaaa.\n             \\<not> stop xaaa \\<longrightarrow>\n             S xaa xaaa \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xaa)\n              (map_spmf\n                (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                  True))) \\<and>\n         (\\<forall>xa xaa.\n             S xa xaa \\<longrightarrow>\n             (\\<forall>xaaa.\n                 rel_spmf\n                  (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                  (curry (fst x) (Generative_Probabilistic_Value.Done None)\n                    xa)\n                  (map_spmf\n                    (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                    (curry (curry (curry (snd x)))\n                      (Generative_Probabilistic_Value.Done None) xa xaa\n                      xaaa)))) \\<and>\n         (\\<forall>xa xaa xaaa.\n             stop xaaa \\<longrightarrow>\n             S xaa xaaa \\<longrightarrow>\n             rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n              (curry (fst x) (gpv_stop xa) xaa)\n              (map_spmf\n                (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                  False))))", "by simp"], ["proof (state)\nthis:\n  ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n   (rel_prod spmf.le_fun spmf.le_fun)\n   (\\<lambda>x.\n       (\\<forall>xa xaa xaaa.\n           \\<not> stop xaaa \\<longrightarrow>\n           S xaa xaaa \\<longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (curry (fst x) (gpv_stop xa) xaa)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                True))) \\<and>\n       (\\<forall>xa xaa.\n           S xa xaa \\<longrightarrow>\n           (\\<forall>xaaa.\n               rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                (curry (fst x) (Generative_Probabilistic_Value.Done None)\n                  xa)\n                (map_spmf\n                  (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                  (curry (curry (curry (snd x)))\n                    (Generative_Probabilistic_Value.Done None) xa xaa\n                    xaaa)))) \\<and>\n       (\\<forall>xa xaa xaaa.\n           stop xaaa \\<longrightarrow>\n           S xaa xaaa \\<longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (curry (fst x) (gpv_stop xa) xaa)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                False))))\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "{"], ["proof (state)\nthis:\n  ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n   (rel_prod spmf.le_fun spmf.le_fun)\n   (\\<lambda>x.\n       (\\<forall>xa xaa xaaa.\n           \\<not> stop xaaa \\<longrightarrow>\n           S xaa xaaa \\<longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (curry (fst x) (gpv_stop xa) xaa)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                True))) \\<and>\n       (\\<forall>xa xaa.\n           S xa xaa \\<longrightarrow>\n           (\\<forall>xaaa.\n               rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                (curry (fst x) (Generative_Probabilistic_Value.Done None)\n                  xa)\n                (map_spmf\n                  (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                  (curry (curry (curry (snd x)))\n                    (Generative_Probabilistic_Value.Done None) xa xaa\n                    xaaa)))) \\<and>\n       (\\<forall>xa xaa xaaa.\n           stop xaaa \\<longrightarrow>\n           S xaa xaaa \\<longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (curry (fst x) (gpv_stop xa) xaa)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry (snd x))) (map_gpv Some id xa) xaa xaaa\n                False))))\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case 1"], ["proof (state)\nthis:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 6. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (return_pmf None)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))", "by simp"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (return_pmf None)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (return_pmf None)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (return_pmf None)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case 2"], ["proof (state)\nthis:\n  S s1 s2\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n        (return_pmf None)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 5. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (return_pmf None)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))", "by simp"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (return_pmf None)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "}"], ["proof (state)\nthis:\n  S ?s1a3 ?s2a3 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (return_pmf None)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "{"], ["proof (state)\nthis:\n  S ?s1a3 ?s2a3 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (return_pmf None)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case 3"], ["proof (state)\nthis:\n  stop s2\n  S s1 s2\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (return_pmf None)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 4. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (return_pmf None)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))", "by simp"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (return_pmf None)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n\ngoal (3 subgoals):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (return_pmf None)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n\ngoal (3 subgoals):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case (step exec_gpv' exec_until_stop')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (exec_gpv' (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         True))\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv' (Generative_Probabilistic_Value.Done None) ?s1.1)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (exec_until_stop' (Generative_Probabilistic_Value.Done None) ?s1.1\n       ?s2.1 ?b1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (exec_gpv' (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         False))\n\ngoal (3 subgoals):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case step: 1"], ["proof (state)\nthis:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (3 subgoals):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 3. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (the_gpv (gpv_stop gpv) \\<bind>\n      (\\<lambda>a.\n          case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n          | IO out c \\<Rightarrow>\n              callee1 s1 out \\<bind>\n              (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if True\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))", "using step.prems"], ["proof (prove)\nusing this:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (the_gpv (gpv_stop gpv) \\<bind>\n      (\\<lambda>a.\n          case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n          | IO out c \\<Rightarrow>\n              callee1 s1 out \\<bind>\n              (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if True\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))", "apply(rewrite gpv_stop.sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> rel_spmf\n                       (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                       (map_spmf\n                         (map_generat Some id\n                           (\\<lambda>rpv input.\n                               case input of\n                               None \\<Rightarrow>\n                                 Generative_Probabilistic_Value.Done None\n                               | Some input' \\<Rightarrow>\n                                   gpv_stop (rpv input')))\n                         (the_gpv gpv) \\<bind>\n                        (\\<lambda>a.\n                            case a of\n                            Pure x \\<Rightarrow> return_spmf (x, s1)\n                            | IO out c \\<Rightarrow>\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>a.\n                                    case a of\n                                    (x, y) \\<Rightarrow>\nexec_gpv' (c x) y)))\n                       (map_spmf\n                         (\\<lambda>a.\n                             case a of (x, s1, b) \\<Rightarrow> (x, b))\n                         (if True\n                          then the_gpv (map_gpv Some id gpv) \\<bind>\n                               (\\<lambda>generat.\n                                   case generat of\n                                   Pure x \\<Rightarrow>\n                                     return_spmf (x, s1, s2)\n                                   | IO out rpv \\<Rightarrow>\n joint s1 s2 out \\<bind>\n (\\<lambda>a.\n     case a of (None, b) \\<Rightarrow> return_pmf None\n     | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n         case (r1, r2) of\n         (None, None) \\<Rightarrow>\n           exec_until_stop' (Generative_Probabilistic_Value.Done None) s1'\n            s2' True\n         | (None, _) \\<Rightarrow>\n             exec_until_stop' (Generative_Probabilistic_Value.Done None) s1'\n              s2' True\n         | (Some r1', None) \\<Rightarrow>\n             exec_until_stop' (rpv r1') s1' s2' False\n         | (Some r1', Some r2') \\<Rightarrow>\n             exec_until_stop' (rpv r1') s1' s2' True))\n                          else the_gpv (map_gpv Some id gpv) \\<bind>\n                               (\\<lambda>generat.\n                                   case generat of\n                                   Pure x \\<Rightarrow>\n                                     return_spmf (None, s1, s2)\n                                   | IO out rpv \\<Rightarrow>\n callee1 s1 out \\<bind>\n (\\<lambda>a.\n     case a of\n     (None, s1') \\<Rightarrow>\n       exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2\n        False\n     | (Some r1', s1') \\<Rightarrow>\n         exec_until_stop' (rpv r1') s1' s2 False))))", "apply(simp add: map_spmf_bind_spmf bind_map_spmf gpv.map_sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> rel_spmf\n                       (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             callee1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<circ>\n                        map_generat Some id\n                         (\\<lambda>rpv.\n                             case_option\n                              (Generative_Probabilistic_Value.Done None)\n                              (\\<lambda>input'. gpv_stop (rpv input'))))\n                       (the_gpv gpv \\<bind>\n                        map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                        (case_generat (\\<lambda>x. return_spmf (x, s1, s2))\n                          (\\<lambda>out rpv.\n                              joint s1 s2 out \\<bind>\n                              (\\<lambda>(a, b).\n                                  case a of\n                                  None \\<Rightarrow> return_pmf None\n                                  | Some (r1, s1') \\<Rightarrow>\ncase b of\nSome (r2, s2') \\<Rightarrow>\n  case (r1, r2) of\n  (None, None) \\<Rightarrow>\n    exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2' True\n  | (None, _) \\<Rightarrow>\n      exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n       True\n  | (Some r1', None) \\<Rightarrow> exec_until_stop' (rpv r1') s1' s2' False\n  | (Some r1', Some r2') \\<Rightarrow>\n      exec_until_stop' (rpv r1') s1' s2' True)) \\<circ>\n                         map_generat Some id ((\\<circ>) (map_gpv Some id))))", "apply(rule rel_spmf_bind_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        x \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          ((case_generat (\\<lambda>x. return_spmf (x, s1))\n                             (\\<lambda>out c.\n                                 callee1 s1 out \\<bind>\n                                 (\\<lambda>(x, y).\n                                     exec_gpv' (c x) y)) \\<circ>\n                            map_generat Some id\n                             (\\<lambda>rpv.\n                                 case_option\n                                  (Generative_Probabilistic_Value.Done None)\n                                  (\\<lambda>input'. gpv_stop (rpv input'))))\n                            x)\n                          ((map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                            (case_generat\n                              (\\<lambda>x. return_spmf (x, s1, s2))\n                              (\\<lambda>out rpv.\n                                  joint s1 s2 out \\<bind>\n                                  (\\<lambda>(a, b).\ncase a of None \\<Rightarrow> return_pmf None\n| Some (r1, s1') \\<Rightarrow>\n    case b of\n    Some (r2, s2') \\<Rightarrow>\n      case (r1, r2) of\n      (None, None) \\<Rightarrow>\n        exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n         True\n      | (None, _) \\<Rightarrow>\n          exec_until_stop' (Generative_Probabilistic_Value.Done None) s1'\n           s2' True\n      | (Some r1', None) \\<Rightarrow>\n          exec_until_stop' (rpv r1') s1' s2' False\n      | (Some r1', Some r2') \\<Rightarrow>\n          exec_until_stop' (rpv r1') s1' s2' True)) \\<circ>\n                             map_generat Some id\n                              ((\\<circ>) (map_gpv Some id))))\n                            x)", "apply(clarsimp split!: generat.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (callee1 s1 (id out') \\<bind>\n                           (\\<lambda>(x, y).\n                               exec_gpv'\n                                (case x of\n                                 None \\<Rightarrow>\n                                   Generative_Probabilistic_Value.Done None\n                                 | Some input' \\<Rightarrow>\n                                     gpv_stop (c' input'))\n                                y))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (joint s1 s2 (id out') \\<bind>\n                             (\\<lambda>(a, b).\n                                 case a of\n                                 None \\<Rightarrow> return_pmf None\n                                 | Some (r1, s1') \\<Rightarrow>\n                                     case b of\n                                     Some (r2, s2') \\<Rightarrow>\n case r1 of\n None \\<Rightarrow>\n   case r2 of\n   None \\<Rightarrow>\n     exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n      True\n   | _ \\<Rightarrow>\n       exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n        True\n | Some r1' \\<Rightarrow>\n     case r2 of\n     None \\<Rightarrow>\n       exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' False\n     | Some r2' \\<Rightarrow>\n         exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' True)))", "apply(rewrite j1[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (map_pmf fst (joint s1 s2 (id out')) \\<bind>\n                           (\\<lambda>(x, y).\n                               exec_gpv'\n                                (case x of\n                                 None \\<Rightarrow>\n                                   Generative_Probabilistic_Value.Done None\n                                 | Some input' \\<Rightarrow>\n                                     gpv_stop (c' input'))\n                                y))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (joint s1 s2 (id out') \\<bind>\n                             (\\<lambda>(a, b).\n                                 case a of\n                                 None \\<Rightarrow> return_pmf None\n                                 | Some (r1, s1') \\<Rightarrow>\n                                     case b of\n                                     Some (r2, s2') \\<Rightarrow>\n case r1 of\n None \\<Rightarrow>\n   case r2 of\n   None \\<Rightarrow>\n     exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n      True\n   | _ \\<Rightarrow>\n       exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n        True\n | Some r1' \\<Rightarrow>\n     case r2 of\n     None \\<Rightarrow>\n       exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' False\n     | Some r2' \\<Rightarrow>\n         exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' True)))", "apply(rewrite bind_spmf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (map_pmf fst (joint s1 s2 (id out')) \\<bind>\n                           (\\<lambda>a.\n                               case a of None \\<Rightarrow> return_pmf None\n                               | Some (x, xa) \\<Rightarrow>\n                                   exec_gpv'\n                                    (case x of\n                                     None \\<Rightarrow>\n Generative_Probabilistic_Value.Done None\n                                     | Some input' \\<Rightarrow>\n   gpv_stop (c' input'))\n                                    xa))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (joint s1 s2 (id out') \\<bind>\n                             (\\<lambda>(a, b).\n                                 case a of\n                                 None \\<Rightarrow> return_pmf None\n                                 | Some (r1, s1') \\<Rightarrow>\n                                     case b of\n                                     Some (r2, s2') \\<Rightarrow>\n case r1 of\n None \\<Rightarrow>\n   case r2 of\n   None \\<Rightarrow>\n     exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n      True\n   | _ \\<Rightarrow>\n       exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n        True\n | Some r1' \\<Rightarrow>\n     case r2 of\n     None \\<Rightarrow>\n       exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' False\n     | Some r2' \\<Rightarrow>\n         exec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' True)))", "apply(auto 4 3 split!: option.split dest: rel intro: step.IH intro!: rel_pmf_bind_reflI simp add: map_bind_pmf bind_map_pmf)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (the_gpv (gpv_stop gpv) \\<bind>\n    (\\<lambda>a.\n        case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n        | IO out c \\<Rightarrow>\n            callee1 s1 out \\<bind>\n            (\\<lambda>a. case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if True\n      then the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             exec_until_stop'\n                              (Generative_Probabilistic_Value.Done None) s1'\n                              s2' True\n                           | (None, _) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' True))\n      else the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         exec_until_stop'\n                          (Generative_Probabilistic_Value.Done None) s1' s2\n                          False\n                       | (Some r1', s1') \\<Rightarrow>\n                           exec_until_stop' (rpv r1') s1' s2 False))))\n\ngoal (2 subgoals):\n 1. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case step"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (f_ (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (g_ (map_gpv Some id ?gpv1) ?s1.1 ?s2.1 True))\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (f_ (Generative_Probabilistic_Value.Done None) ?s1.1)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (g_ (Generative_Probabilistic_Value.Done None) ?s1.1 ?s2.1 ?b1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (f_ (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (g_ (map_gpv Some id ?gpv1) ?s1.1 ?s2.1 False))\n\ngoal (2 subgoals):\n 1. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case 2"], ["proof (state)\nthis:\n  S s1 s2\n\ngoal (2 subgoals):\n 1. \\<And>f g s1 s2 b.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv\n                            (Generative_Probabilistic_Value.Done\n                              None) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if b\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))\n 2. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "then"], ["proof (chain)\npicking this:\n  S s1 s2", "show ?case"], ["proof (prove)\nusing this:\n  S s1 s2\n\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n      (\\<lambda>a.\n          case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n          | IO out c \\<Rightarrow>\n              callee1 s1 out \\<bind>\n              (\\<lambda>a. case a of (x, y) \\<Rightarrow> f_ (c x) y)))\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if b\n        then the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               g_ (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 g_ (Generative_Probabilistic_Value.Done\nNone)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 g_ (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 g_ (rpv r1') s1' s2' True))\n        else the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           g_ (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             g_ (rpv r1') s1' s2 False))))", "by(simp add: conversep_iff)"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n    (\\<lambda>a.\n        case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n        | IO out c \\<Rightarrow>\n            callee1 s1 out \\<bind>\n            (\\<lambda>a. case a of (x, y) \\<Rightarrow> f_ (c x) y)))\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if b\n      then the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             g_ (Generative_Probabilistic_Value.Done None)\n                              s1' s2' True\n                           | (None, _) \\<Rightarrow>\n                               g_ (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               g_ (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               g_ (rpv r1') s1' s2' True))\n      else the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         g_ (Generative_Probabilistic_Value.Done None) s1'\n                          s2 False\n                       | (Some r1', s1') \\<Rightarrow>\n                           g_ (rpv r1') s1' s2 False))))\n\ngoal (1 subgoal):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case (step exec_gpv' exec_until_stop')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (exec_gpv' (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         True))\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv' (Generative_Probabilistic_Value.Done None) ?s1.1)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (exec_until_stop' (Generative_Probabilistic_Value.Done None) ?s1.1\n       ?s2.1 ?b1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> rel_spmf\n                     (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                     (exec_gpv' (gpv_stop ?gpv1) ?s1.1)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         False))\n\ngoal (1 subgoal):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "case step: 3"], ["proof (state)\nthis:\n  stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>f g gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> rel_spmf\n(rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) (f (gpv_stop gpv) s1)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (g (map_gpv Some id gpv) s1 s2 True));\n        \\<And>s1 s2 b.\n           S s1 s2 \\<Longrightarrow>\n           rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n            (f (Generative_Probabilistic_Value.Done None) s1)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (g (Generative_Probabilistic_Value.Done None) s1 s2 b));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> rel_spmf\n                              (rel_prod\n                                (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                              (f (gpv_stop gpv) s1)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (g (map_gpv Some id gpv) s1 s2 False));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (the_gpv (gpv_stop gpv) \\<bind>\n                           case_generat (\\<lambda>x. return_spmf (x, s1))\n                            (\\<lambda>out c.\n                                callee1 s1 out \\<bind>\n                                (\\<lambda>(x, y). f (c x) y)))\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, b).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case b of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               g (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> g (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> g (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       g (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> g (rpv r1') s1' s2 False))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (the_gpv (gpv_stop gpv) \\<bind>\n      (\\<lambda>a.\n          case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n          | IO out c \\<Rightarrow>\n              callee1 s1 out \\<bind>\n              (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if False\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))", "using step.prems"], ["proof (prove)\nusing this:\n  stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (the_gpv (gpv_stop gpv) \\<bind>\n      (\\<lambda>a.\n          case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n          | IO out c \\<Rightarrow>\n              callee1 s1 out \\<bind>\n              (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if False\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))", "apply(simp add: map_spmf_bind_spmf bind_map_spmf gpv.map_sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> rel_spmf\n                       (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n                       (the_gpv gpv \\<bind>\n                        case_generat (\\<lambda>x. return_spmf (x, s1))\n                         (\\<lambda>out c.\n                             callee1 s1 out \\<bind>\n                             (\\<lambda>(x, y). exec_gpv' (c x) y)) \\<circ>\n                        map_generat Some id\n                         (\\<lambda>rpv.\n                             case_option\n                              (Generative_Probabilistic_Value.Done None)\n                              (\\<lambda>input'. gpv_stop (rpv input'))))\n                       (the_gpv gpv \\<bind>\n                        map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                        (case_generat\n                          (\\<lambda>x. return_spmf (None, s1, s2))\n                          (\\<lambda>out rpv.\n                              callee1 s1 out \\<bind>\n                              (\\<lambda>(r1, s1').\n                                  case r1 of\n                                  None \\<Rightarrow>\n                                    exec_until_stop'\n                                     (Generative_Probabilistic_Value.Done\n None)\n                                     s1' s2 False\n                                  | Some r1' \\<Rightarrow>\nexec_until_stop' (rpv r1') s1' s2 False)) \\<circ>\n                         map_generat Some id ((\\<circ>) (map_gpv Some id))))", "apply(rule rel_spmf_bind_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>stop s2; S s1 s2; x \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          ((case_generat (\\<lambda>x. return_spmf (x, s1))\n                             (\\<lambda>out c.\n                                 callee1 s1 out \\<bind>\n                                 (\\<lambda>(x, y).\n                                     exec_gpv' (c x) y)) \\<circ>\n                            map_generat Some id\n                             (\\<lambda>rpv.\n                                 case_option\n                                  (Generative_Probabilistic_Value.Done None)\n                                  (\\<lambda>input'. gpv_stop (rpv input'))))\n                            x)\n                          ((map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                            (case_generat\n                              (\\<lambda>x. return_spmf (None, s1, s2))\n                              (\\<lambda>out rpv.\n                                  callee1 s1 out \\<bind>\n                                  (\\<lambda>(r1, s1').\ncase r1 of\nNone \\<Rightarrow>\n  exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2 False\n| Some r1' \\<Rightarrow> exec_until_stop' (rpv r1') s1' s2 False)) \\<circ>\n                             map_generat Some id\n                              ((\\<circ>) (map_gpv Some id))))\n                            x)", "apply(clarsimp simp add: map_spmf_bind_spmf split!: generat.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (callee1 s1 (id out') \\<bind>\n                           (\\<lambda>(x, y).\n                               exec_gpv'\n                                (case x of\n                                 None \\<Rightarrow>\n                                   Generative_Probabilistic_Value.Done None\n                                 | Some input' \\<Rightarrow>\n                                     gpv_stop (c' input'))\n                                y))\n                          (callee1 s1 (id out') \\<bind>\n                           map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                           (\\<lambda>(r1, s1').\n                               case r1 of\n                               None \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2 False\n                               | Some r1' \\<Rightarrow>\n                                   exec_until_stop'\n                                    ((map_gpv Some id \\<circ> c') r1') s1'\n                                    s2 False))", "apply(rule rel_spmf_bind_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' x.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        x \\<in> set_spmf (callee1 s1 (id out'))\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (case x of\n                           (x, xa) \\<Rightarrow>\n                             exec_gpv'\n                              (case x of\n                               None \\<Rightarrow>\n                                 Generative_Probabilistic_Value.Done None\n                               | Some input' \\<Rightarrow>\n                                   gpv_stop (c' input'))\n                              xa)\n                          ((map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                            (\\<lambda>(r1, s1').\n                                case r1 of\n                                None \\<Rightarrow>\n                                  exec_until_stop'\n                                   (Generative_Probabilistic_Value.Done\n                                     None)\n                                   s1' s2 False\n                                | Some r1' \\<Rightarrow>\n                                    exec_until_stop'\n                                     ((map_gpv Some id \\<circ> c') r1') s1'\n                                     s2 False))\n                            x)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' a b.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        (a, b) \\<in> set_spmf (callee1 s1 (id out'))\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (exec_gpv'\n                            (case a of\n                             None \\<Rightarrow>\n                               Generative_Probabilistic_Value.Done None\n                             | Some input' \\<Rightarrow>\n                                 gpv_stop (c' input'))\n                            b)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case a of\n                             None \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None) b\n                                s2 False\n                             | Some r1' \\<Rightarrow>\n                                 exec_until_stop'\n                                  ((map_gpv Some id \\<circ> c') r1') b s2\n                                  False))", "apply(drule (2) sticking)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' a b.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        S b s2\\<rbrakk>\n       \\<Longrightarrow> rel_spmf\n                          (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse>\n                            S)\n                          (exec_gpv'\n                            (case a of\n                             None \\<Rightarrow>\n                               Generative_Probabilistic_Value.Done None\n                             | Some input' \\<Rightarrow>\n                                 gpv_stop (c' input'))\n                            b)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case a of\n                             None \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None) b\n                                s2 False\n                             | Some r1' \\<Rightarrow>\n                                 exec_until_stop'\n                                  ((map_gpv Some id \\<circ> c') r1') b s2\n                                  False))", "apply(auto split!: option.split intro: step.IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (the_gpv (gpv_stop gpv) \\<bind>\n    (\\<lambda>a.\n        case a of Pure x \\<Rightarrow> return_spmf (x, s1)\n        | IO out c \\<Rightarrow>\n            callee1 s1 out \\<bind>\n            (\\<lambda>a. case a of (x, y) \\<Rightarrow> exec_gpv' (c x) y)))\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if False\n      then the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             exec_until_stop'\n                              (Generative_Probabilistic_Value.Done None) s1'\n                              s2' True\n                           | (None, _) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' True))\n      else the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         exec_until_stop'\n                          (Generative_Probabilistic_Value.Done None) s1' s2\n                          False\n                       | (Some r1', s1') \\<Rightarrow>\n                           exec_until_stop' (rpv r1') s1' s2 False))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> stop s2 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv_stop callee1 gpv s1)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv callee1 (Generative_Probabilistic_Value.Done None) s1)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1\n       (Generative_Probabilistic_Value.Done None) s1 s2 ?b1))\n  stop s2 \\<Longrightarrow>\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv_stop callee1 gpv s1)\n   (map_spmf (\\<lambda>(x, s1, y). (x, y))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False))\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "note this(1)[OF go]"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv_stop callee1 gpv s1)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "also"], ["proof (state)\nthis:\n  rel_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv_stop callee1 gpv s1)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "have \"\\<not> stop s2 \\<Longrightarrow> ord_spmf (=) (map_spmf (\\<lambda>(x, s1, s2). (x, s2)) (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True)) (exec_gpv_stop callee2 gpv s2)\"\n    and \"ord_spmf (=) (map_spmf (\\<lambda>(x, s1, y). (x, y)) (exec_until_stop joint callee1 (Done None :: ('a option, 'c, 'r) gpv) s1 s2 b)) (return_spmf (None, s2))\"\n    and \"stop s2 \\<Longrightarrow> ord_spmf (=) (map_spmf (\\<lambda>(x, s1, s2). (x, s2)) (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False)) (return_spmf (None, s2))\"\n    for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> stop s2 \\<Longrightarrow>\n     ord_spmf (=)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n      (exec_gpv_stop callee2 gpv s2)) &&&\n    ord_spmf (=)\n     (map_spmf (\\<lambda>(x, s1, y). (x, y))\n       (exec_until_stop joint callee1\n         (Generative_Probabilistic_Value.Done None) s1 s2 b))\n     (return_spmf (None, s2)) &&&\n    (stop s2 \\<Longrightarrow>\n     ord_spmf (=)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False))\n      (return_spmf (None, s2)))", "using init"], ["proof (prove)\nusing this:\n  S s1 s2\n\ngoal (1 subgoal):\n 1. (\\<not> stop s2 \\<Longrightarrow>\n     ord_spmf (=)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n      (exec_gpv_stop callee2 gpv s2)) &&&\n    ord_spmf (=)\n     (map_spmf (\\<lambda>(x, s1, y). (x, y))\n       (exec_until_stop joint callee1\n         (Generative_Probabilistic_Value.Done None) s1 s2 b))\n     (return_spmf (None, s2)) &&&\n    (stop s2 \\<Longrightarrow>\n     ord_spmf (=)\n      (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n        (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False))\n      (return_spmf (None, s2)))", "proof(induction arbitrary: gpv s1 s2 b rule: exec_until_stop.fixp_induct[case_names adm bottom step])"], ["proof (state)\ngoal (7 subgoals):\n 1. spmf.admissible\n     (\\<lambda>exec_until_stop.\n         (\\<forall>x xa xb.\n             \\<not> stop xb \\<longrightarrow>\n             S xa xb \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xb True))\n              (exec_gpv_stop callee2 x xb)) \\<and>\n         (\\<forall>x xa.\n             S x xa \\<longrightarrow>\n             (\\<forall>xb.\n                 ord_spmf (=)\n                  (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                    (curry (curry (curry exec_until_stop))\n                      (Generative_Probabilistic_Value.Done None) x xa xb))\n                  (return_spmf (None, xa)))) \\<and>\n         (\\<forall>x xa xb.\n             stop xb \\<longrightarrow>\n             S xa xb \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xb False))\n              (return_spmf (None, xb))))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 4. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 6. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 7. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. spmf.admissible\n     (\\<lambda>exec_until_stop.\n         (\\<forall>x xa xb.\n             \\<not> stop xb \\<longrightarrow>\n             S xa xb \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xb True))\n              (exec_gpv_stop callee2 x xb)) \\<and>\n         (\\<forall>x xa.\n             S x xa \\<longrightarrow>\n             (\\<forall>xb.\n                 ord_spmf (=)\n                  (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                    (curry (curry (curry exec_until_stop))\n                      (Generative_Probabilistic_Value.Done None) x xa xb))\n                  (return_spmf (None, xa)))) \\<and>\n         (\\<forall>x xa xb.\n             stop xb \\<longrightarrow>\n             S xa xb \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xb False))\n              (return_spmf (None, xb))))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 4. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 6. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 7. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>exec_until_stop.\n         (\\<forall>x xa xaa.\n             \\<not> stop xaa \\<longrightarrow>\n             S xa xaa \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf\n                (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xaa True))\n              (exec_gpv_stop callee2 x xaa)) \\<and>\n         (\\<forall>x xa.\n             S x xa \\<longrightarrow>\n             (\\<forall>xaa.\n                 ord_spmf (=)\n                  (map_spmf\n                    (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                    (curry (curry (curry exec_until_stop))\n                      (Generative_Probabilistic_Value.Done None) x xa xaa))\n                  (return_spmf (None, xa)))) \\<and>\n         (\\<forall>x xa xaa.\n             stop xaa \\<longrightarrow>\n             S xa xaa \\<longrightarrow>\n             ord_spmf (=)\n              (map_spmf\n                (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                (curry (curry (curry exec_until_stop)) (map_gpv Some id x)\n                  xa xaa False))\n              (return_spmf (None, xaa))))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>exec_until_stop.\n       (\\<forall>x xa xaa.\n           \\<not> stop xaa \\<longrightarrow>\n           S xa xaa \\<longrightarrow>\n           ord_spmf (=)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry exec_until_stop)) (map_gpv Some id x) xa\n                xaa True))\n            (exec_gpv_stop callee2 x xaa)) \\<and>\n       (\\<forall>x xa.\n           S x xa \\<longrightarrow>\n           (\\<forall>xaa.\n               ord_spmf (=)\n                (map_spmf\n                  (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                  (curry (curry (curry exec_until_stop))\n                    (Generative_Probabilistic_Value.Done None) x xa xaa))\n                (return_spmf (None, xa)))) \\<and>\n       (\\<forall>x xa xaa.\n           stop xaa \\<longrightarrow>\n           S xa xaa \\<longrightarrow>\n           ord_spmf (=)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry exec_until_stop)) (map_gpv Some id x) xa\n                xaa False))\n            (return_spmf (None, xaa))))\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 5. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 6. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "{"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>exec_until_stop.\n       (\\<forall>x xa xaa.\n           \\<not> stop xaa \\<longrightarrow>\n           S xa xaa \\<longrightarrow>\n           ord_spmf (=)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry exec_until_stop)) (map_gpv Some id x) xa\n                xaa True))\n            (exec_gpv_stop callee2 x xaa)) \\<and>\n       (\\<forall>x xa.\n           S x xa \\<longrightarrow>\n           (\\<forall>xaa.\n               ord_spmf (=)\n                (map_spmf\n                  (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n                  (curry (curry (curry exec_until_stop))\n                    (Generative_Probabilistic_Value.Done None) x xa xaa))\n                (return_spmf (None, xa)))) \\<and>\n       (\\<forall>x xa xaa.\n           stop xaa \\<longrightarrow>\n           S xa xaa \\<longrightarrow>\n           ord_spmf (=)\n            (map_spmf\n              (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n              (curry (curry (curry exec_until_stop)) (map_gpv Some id x) xa\n                xaa False))\n            (return_spmf (None, xaa))))\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 5. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 6. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 5. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 6. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case 1"], ["proof (state)\nthis:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (6 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 3. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 5. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 6. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))\n     (exec_gpv_stop callee2 gpv s2)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n   (exec_gpv_stop callee2 gpv s2)\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 4. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n                     (exec_gpv_stop callee2 ?gpva3 ?s2a3)\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 4. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n                     (exec_gpv_stop callee2 ?gpva3 ?s2a3)\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 4. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 4. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case 2"], ["proof (state)\nthis:\n  S s1 s2\n\ngoal (5 subgoals):\n 1. \\<And>s1 s2 b.\n       S s1 s2 \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf (\\<lambda>(x, s1, y). (x, y)) (return_pmf None))\n        (return_spmf (None, s2))\n 2. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 4. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 5. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))\n     (return_spmf (None, s2))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n   (return_spmf (None, s2))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "}"], ["proof (state)\nthis:\n  S ?s1a3 ?s2a3 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n   (return_spmf (None, ?s2a3))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "{"], ["proof (state)\nthis:\n  S ?s1a3 ?s2a3 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n   (return_spmf (None, ?s2a3))\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case 3"], ["proof (state)\nthis:\n  stop s2\n  S s1 s2\n\ngoal (4 subgoals):\n 1. \\<And>gpv s1 s2.\n       \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (return_pmf None))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 3. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 4. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (return_pmf None))\n     (return_spmf (None, s2))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (return_pmf None))\n   (return_spmf (None, s2))\n\ngoal (3 subgoals):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>stop ?s2a3; S ?s1a3 ?s2a3\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (return_pmf None))\n                     (return_spmf (None, ?s2a3))\n\ngoal (3 subgoals):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case (step exec_until_stop')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         True))\n                     (exec_gpv_stop callee2 ?gpv1 ?s2.1)\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (exec_until_stop' (Generative_Probabilistic_Value.Done None) ?s1.1\n       ?s2.1 ?b1))\n   (return_spmf (None, ?s2.1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         False))\n                     (return_spmf (None, ?s2.1))\n\ngoal (3 subgoals):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case step: 1"], ["proof (state)\nthis:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (3 subgoals):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        \\<not> stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if True\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (exec_gpv_stop callee2 gpv s2)\n 2. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 3. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if True\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))\n     (exec_gpv_stop callee2 gpv s2)", "using step.prems"], ["proof (prove)\nusing this:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if True\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))\n     (exec_gpv_stop callee2 gpv s2)", "using [[show_variants]]"], ["proof (prove)\nusing this:\n  \\<not> stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if True\n        then bind_spmf (the_gpv (map_gpv Some id gpv))\n              (\\<lambda>generat.\n                  case generat of\n                  Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                  | IO out rpv \\<Rightarrow>\n                      bind_pmf (joint s1 s2 out)\n                       (\\<lambda>a.\n                           case a of (None, b) \\<Rightarrow> return_pmf None\n                           | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                               case (r1, r2) of\n                               (None, None) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                               | (None, _) \\<Rightarrow>\n                                   exec_until_stop'\n                                    (Generative_Probabilistic_Value.Done\nNone)\n                                    s1' s2' True\n                               | (Some r1', None) \\<Rightarrow>\n                                   exec_until_stop' (rpv r1') s1' s2' False\n                               | (Some r1', Some r2') \\<Rightarrow>\n                                   exec_until_stop' (rpv r1') s1' s2' True))\n        else bind_spmf (the_gpv (map_gpv Some id gpv))\n              (\\<lambda>generat.\n                  case generat of\n                  Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                  | IO out rpv \\<Rightarrow>\n                      bind_spmf (callee1 s1 out)\n                       (\\<lambda>a.\n                           case a of\n                           (None, s1') \\<Rightarrow>\n                             exec_until_stop'\n                              (Generative_Probabilistic_Value.Done None) s1'\n                              s2 False\n                           | (Some r1', s1') \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2 False))))\n     (exec_gpv_stop callee2 gpv s2)", "apply(rewrite exec_gpv.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (map_spmf\n                         (\\<lambda>a.\n                             case a of (x, s1, b) \\<Rightarrow> (x, b))\n                         (if True\n                          then bind_spmf (the_gpv (map_gpv Some id gpv))\n                                (\\<lambda>generat.\n                                    case generat of\n                                    Pure x \\<Rightarrow>\nreturn_spmf (x, s1, s2)\n                                    | IO out rpv \\<Rightarrow>\n  bind_pmf (joint s1 s2 out)\n   (\\<lambda>a.\n       case a of (None, b) \\<Rightarrow> return_pmf None\n       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             exec_until_stop' (Generative_Probabilistic_Value.Done None) s1'\n              s2' True\n           | (None, _) \\<Rightarrow>\n               exec_until_stop' (Generative_Probabilistic_Value.Done None)\n                s1' s2' True\n           | (Some r1', None) \\<Rightarrow>\n               exec_until_stop' (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow>\n               exec_until_stop' (rpv r1') s1' s2' True))\n                          else bind_spmf (the_gpv (map_gpv Some id gpv))\n                                (\\<lambda>generat.\n                                    case generat of\n                                    Pure x \\<Rightarrow>\nreturn_spmf (None, s1, s2)\n                                    | IO out rpv \\<Rightarrow>\n  bind_spmf (callee1 s1 out)\n   (\\<lambda>a.\n       case a of\n       (None, s1') \\<Rightarrow>\n         exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2\n          False\n       | (Some r1', s1') \\<Rightarrow>\n           exec_until_stop' (rpv r1') s1' s2 False))))\n                       (bind_spmf (the_gpv (gpv_stop gpv))\n                         (case_generat (\\<lambda>x. return_spmf (x, s2))\n                           (\\<lambda>out c.\n                               bind_spmf (callee2 s2 out)\n                                (\\<lambda>(x, y).\n                                    exec_gpv callee2 (c x) y))))", "apply(simp add: map_spmf_bind_spmf bind_map_spmf gpv.map_sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (bind_spmf (the_gpv gpv)\n                         (map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                          (case_generat\n                            (\\<lambda>x. return_spmf (x, s1, s2))\n                            (\\<lambda>out rpv.\n                                bind_pmf (joint s1 s2 out)\n                                 (\\<lambda>(a, b).\n                                     case a of\n                                     None \\<Rightarrow> return_pmf None\n                                     | Some (r1, s1') \\<Rightarrow>\n   case b of\n   Some (r2, s2') \\<Rightarrow>\n     case (r1, r2) of\n     (None, None) \\<Rightarrow>\n       exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n        True\n     | (None, _) \\<Rightarrow>\n         exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n          True\n     | (Some r1', None) \\<Rightarrow>\n         exec_until_stop' (rpv r1') s1' s2' False\n     | (Some r1', Some r2') \\<Rightarrow>\n         exec_until_stop' (rpv r1') s1' s2' True)) \\<circ>\n                           map_generat Some id\n                            ((\\<circ>) (map_gpv Some id)))))\n                       (bind_spmf (the_gpv gpv)\n                         (case_generat (\\<lambda>x. return_spmf (x, s2))\n                           (\\<lambda>out c.\n                               bind_spmf (callee2 s2 out)\n                                (\\<lambda>(x, y).\n                                    exec_gpv callee2 (c x) y)) \\<circ>\n                          map_generat Some id\n                           (\\<lambda>rpv.\n                               case_option\n                                (Generative_Probabilistic_Value.Done None)\n                                (\\<lambda>input'. gpv_stop (rpv input')))))", "apply(rule ord_spmf_bind_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        x \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          ((map_spmf (\\<lambda>(x, s1, y). (x, y)) \\<circ>\n                            (case_generat\n                              (\\<lambda>x. return_spmf (x, s1, s2))\n                              (\\<lambda>out rpv.\n                                  bind_pmf (joint s1 s2 out)\n                                   (\\<lambda>(a, b).\n case a of None \\<Rightarrow> return_pmf None\n | Some (r1, s1') \\<Rightarrow>\n     case b of\n     Some (r2, s2') \\<Rightarrow>\n       case (r1, r2) of\n       (None, None) \\<Rightarrow>\n         exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2'\n          True\n       | (None, _) \\<Rightarrow>\n           exec_until_stop' (Generative_Probabilistic_Value.Done None) s1'\n            s2' True\n       | (Some r1', None) \\<Rightarrow>\n           exec_until_stop' (rpv r1') s1' s2' False\n       | (Some r1', Some r2') \\<Rightarrow>\n           exec_until_stop' (rpv r1') s1' s2' True)) \\<circ>\n                             map_generat Some id\n                              ((\\<circ>) (map_gpv Some id))))\n                            x)\n                          ((case_generat (\\<lambda>x. return_spmf (x, s2))\n                             (\\<lambda>out c.\n                                 bind_spmf (callee2 s2 out)\n                                  (\\<lambda>(x, y).\nexec_gpv callee2 (c x) y)) \\<circ>\n                            map_generat Some id\n                             (\\<lambda>rpv.\n                                 case_option\n                                  (Generative_Probabilistic_Value.Done None)\n                                  (\\<lambda>input'. gpv_stop (rpv input'))))\n                            x)", "apply(clarsimp split!: generat.split simp add: map_bind_pmf bind_spmf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (bind_pmf (joint s1 s2 (id out'))\n                            (\\<lambda>x.\n                                map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                 (case x of\n                                  (None, b) \\<Rightarrow> return_pmf None\n                                  | (Some (None, s1'),\n                                     Some (None, s2')) \\<Rightarrow>\nexec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2' True\n                                  | (Some (None, s1'),\n                                     Some (_, s2')) \\<Rightarrow>\nexec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2' True\n                                  | (Some (Some r1', s1'),\n                                     Some (None, s2')) \\<Rightarrow>\nexec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' False\n                                  | (Some (Some r1', s1'),\n                                     Some (Some r2', s2')) \\<Rightarrow>\nexec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' True)))\n                          (bind_pmf (callee2 s2 (id out'))\n                            (case_option (return_pmf None)\n                              (\\<lambda>(x, y).\n                                  exec_gpv callee2\n                                   (case x of\n                                    None \\<Rightarrow>\nGenerative_Probabilistic_Value.Done None\n                                    | Some input' \\<Rightarrow>\n  gpv_stop (c' input'))\n                                   y)))", "apply(rewrite j2[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>\\<not> stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (bind_pmf (joint s1 s2 (id out'))\n                            (\\<lambda>x.\n                                map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                 (case x of\n                                  (None, b) \\<Rightarrow> return_pmf None\n                                  | (Some (None, s1'),\n                                     Some (None, s2')) \\<Rightarrow>\nexec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2' True\n                                  | (Some (None, s1'),\n                                     Some (_, s2')) \\<Rightarrow>\nexec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2' True\n                                  | (Some (Some r1', s1'),\n                                     Some (None, s2')) \\<Rightarrow>\nexec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' False\n                                  | (Some (Some r1', s1'),\n                                     Some (Some r2', s2')) \\<Rightarrow>\nexec_until_stop' ((map_gpv Some id \\<circ> c') r1') s1' s2' True)))\n                          (bind_pmf (map_pmf snd (joint s1 s2 (id out')))\n                            (case_option (return_pmf None)\n                              (\\<lambda>(x, y).\n                                  exec_gpv callee2\n                                   (case x of\n                                    None \\<Rightarrow>\nGenerative_Probabilistic_Value.Done None\n                                    | Some input' \\<Rightarrow>\n  gpv_stop (c' input'))\n                                   y)))", "apply(auto 4 3 split!: option.split dest: rel intro: step.IH intro!: rel_pmf_bind_reflI simp add: bind_map_pmf)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if True\n      then the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             exec_until_stop'\n                              (Generative_Probabilistic_Value.Done None) s1'\n                              s2' True\n                           | (None, _) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' True))\n      else the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         exec_until_stop'\n                          (Generative_Probabilistic_Value.Done None) s1' s2\n                          False\n                       | (Some r1', s1') \\<Rightarrow>\n                           exec_until_stop' (rpv r1') s1' s2 False))))\n   (exec_gpv_stop callee2 gpv s2)\n\ngoal (2 subgoals):\n 1. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case step"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (b_ (map_gpv Some id ?gpv1) ?s1.1 ?s2.1 True))\n                     (exec_gpv_stop callee2 ?gpv1 ?s2.1)\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (b_ (Generative_Probabilistic_Value.Done None) ?s1.1 ?s2.1 ?b1))\n   (return_spmf (None, ?s2.1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (b_ (map_gpv Some id ?gpv1) ?s1.1 ?s2.1 False))\n                     (return_spmf (None, ?s2.1))\n\ngoal (2 subgoals):\n 1. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case 2"], ["proof (state)\nthis:\n  S s1 s2\n\ngoal (2 subgoals):\n 1. \\<And>b s1 s2 ba.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if ba\n                             then the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv\n                                   (Generative_Probabilistic_Value.Done\n                                     None) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))\n 2. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "thus ?case"], ["proof (prove)\nusing this:\n  S s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if b\n        then the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               b_ (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 b_ (Generative_Probabilistic_Value.Done\nNone)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 b_ (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 b_ (rpv r1') s1' s2' True))\n        else the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           b_ (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             b_ (rpv r1') s1' s2 False))))\n     (return_spmf (None, s2))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if b\n      then the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             b_ (Generative_Probabilistic_Value.Done None)\n                              s1' s2' True\n                           | (None, _) \\<Rightarrow>\n                               b_ (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               b_ (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               b_ (rpv r1') s1' s2' True))\n      else the_gpv (Generative_Probabilistic_Value.Done None) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         b_ (Generative_Probabilistic_Value.Done None) s1'\n                          s2 False\n                       | (Some r1', s1') \\<Rightarrow>\n                           b_ (rpv r1') s1' s2 False))))\n   (return_spmf (None, s2))\n\ngoal (1 subgoal):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case (step exec_until_stop')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         True))\n                     (exec_gpv_stop callee2 ?gpv1 ?s2.1)\n  S ?s1.1 ?s2.1 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (exec_until_stop' (Generative_Probabilistic_Value.Done None) ?s1.1\n       ?s2.1 ?b1))\n   (return_spmf (None, ?s2.1))\n  \\<lbrakk>stop ?s2.1; S ?s1.1 ?s2.1\\<rbrakk>\n  \\<Longrightarrow> ord_spmf (=)\n                     (map_spmf\n                       (\\<lambda>a.\n                           case a of (x, s1, b) \\<Rightarrow> (x, b))\n                       (exec_until_stop' (map_gpv Some id ?gpv1) ?s1.1 ?s2.1\n                         False))\n                     (return_spmf (None, ?s2.1))\n\ngoal (1 subgoal):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "case 3"], ["proof (state)\nthis:\n  stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>b gpv s1 s2.\n       \\<lbrakk>\\<And>gpv s1 s2.\n                   \\<lbrakk>\\<not> stop s2; S s1 s2\\<rbrakk>\n                   \\<Longrightarrow> ord_spmf (=)\n(map_spmf (\\<lambda>(x, s1, y). (x, y))\n  (b (map_gpv Some id gpv) s1 s2 True))\n(exec_gpv_stop callee2 gpv s2);\n        \\<And>s1 s2 ba.\n           S s1 s2 \\<Longrightarrow>\n           ord_spmf (=)\n            (map_spmf (\\<lambda>(x, s1, y). (x, y))\n              (b (Generative_Probabilistic_Value.Done None) s1 s2 ba))\n            (return_spmf (None, s2));\n        \\<And>gpv s1 s2.\n           \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n           \\<Longrightarrow> ord_spmf (=)\n                              (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (b (map_gpv Some id gpv) s1 s2 False))\n                              (return_spmf (None, s2));\n        stop s2; S s1 s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (if False\n                             then the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (x, s1, s2))\n                                   (\\<lambda>out rpv.\n joint s1 s2 out \\<bind>\n (\\<lambda>(a, ba).\n     case a of None \\<Rightarrow> return_pmf None\n     | Some (r1, s1') \\<Rightarrow>\n         case ba of\n         Some (r2, s2') \\<Rightarrow>\n           case (r1, r2) of\n           (None, None) \\<Rightarrow>\n             b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (None, _) \\<Rightarrow>\n               b (Generative_Probabilistic_Value.Done None) s1' s2' True\n           | (Some r1', None) \\<Rightarrow> b (rpv r1') s1' s2' False\n           | (Some r1', Some r2') \\<Rightarrow> b (rpv r1') s1' s2' True))\n                             else the_gpv (map_gpv Some id gpv) \\<bind>\n                                  case_generat\n                                   (\\<lambda>x. return_spmf (None, s1, s2))\n                                   (\\<lambda>out rpv.\n callee1 s1 out \\<bind>\n (\\<lambda>(r1, s1').\n     case r1 of\n     None \\<Rightarrow>\n       b (Generative_Probabilistic_Value.Done None) s1' s2 False\n     | Some r1' \\<Rightarrow> b (rpv r1') s1' s2 False))))\n                          (return_spmf (None, s2))", "thus ?case"], ["proof (prove)\nusing this:\n  stop s2\n  S s1 s2\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n       (if False\n        then the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     joint s1 s2 out \\<bind>\n                     (\\<lambda>a.\n                         case a of (None, b) \\<Rightarrow> return_pmf None\n                         | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                             case (r1, r2) of\n                             (None, None) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                             | (None, _) \\<Rightarrow>\n                                 exec_until_stop'\n                                  (Generative_Probabilistic_Value.Done None)\n                                  s1' s2' True\n                             | (Some r1', None) \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' False\n                             | (Some r1', Some r2') \\<Rightarrow>\n                                 exec_until_stop' (rpv r1') s1' s2' True))\n        else the_gpv (map_gpv Some id gpv) \\<bind>\n             (\\<lambda>generat.\n                 case generat of\n                 Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                 | IO out rpv \\<Rightarrow>\n                     callee1 s1 out \\<bind>\n                     (\\<lambda>a.\n                         case a of\n                         (None, s1') \\<Rightarrow>\n                           exec_until_stop'\n                            (Generative_Probabilistic_Value.Done None) s1'\n                            s2 False\n                         | (Some r1', s1') \\<Rightarrow>\n                             exec_until_stop' (rpv r1') s1' s2 False))))\n     (return_spmf (None, s2))", "apply(simp add: map_spmf_bind_spmf o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stop s2; S s1 s2\\<rbrakk>\n    \\<Longrightarrow> ord_spmf (=)\n                       (the_gpv (map_gpv Some id gpv) \\<bind>\n                        (\\<lambda>x.\n                            map_spmf (\\<lambda>(x, s1, y). (x, y))\n                             (case x of\n                              Pure x \\<Rightarrow>\n                                return_spmf (None, s1, s2)\n                              | IO out rpv \\<Rightarrow>\n                                  callee1 s1 out \\<bind>\n                                  (\\<lambda>(r1, s1').\ncase r1 of\nNone \\<Rightarrow>\n  exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2 False\n| Some r1' \\<Rightarrow> exec_until_stop' (rpv r1') s1' s2 False))))\n                       (return_spmf (None, s2))", "apply(rule ord_spmf_bind_spmfI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>stop s2; S s1 s2;\n        x \\<in> set_spmf (the_gpv (map_gpv Some id gpv))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case x of\n                             Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n                             | IO out rpv \\<Rightarrow>\n                                 callee1 s1 out \\<bind>\n                                 (\\<lambda>(r1, s1').\n                                     case r1 of\n                                     None \\<Rightarrow>\n exec_until_stop' (Generative_Probabilistic_Value.Done None) s1' s2 False\n                                     | Some r1' \\<Rightarrow>\n   exec_until_stop' (rpv r1') s1' s2 False)))\n                          (return_spmf (None, s2))", "apply(clarsimp split!: generat.split simp add: map_spmf_bind_spmf o_def gpv.map_sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c'.\n       \\<lbrakk>stop s2; S s1 s2;\n        IO out' c' \\<in> set_spmf (the_gpv gpv)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (callee1 s1 (id out') \\<bind>\n                           (\\<lambda>x.\n                               map_spmf (\\<lambda>(x, s1, y). (x, y))\n                                (case x of\n                                 (None, s1') \\<Rightarrow>\n                                   exec_until_stop'\n                                    (Generative_Probabilistic_Value.Done\nNone)\n                                    s1' s2 False\n                                 | (Some r1', s1') \\<Rightarrow>\n                                     exec_until_stop'\n(map_gpv Some id (c' r1')) s1' s2 False)))\n                          (return_spmf (None, s2))", "apply(rule ord_spmf_bind_spmfI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' x.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        x \\<in> set_spmf (callee1 s1 (id out'))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case x of\n                             (None, s1') \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2 False\n                             | (Some r1', s1') \\<Rightarrow>\n                                 exec_until_stop' (map_gpv Some id (c' r1'))\n                                  s1' s2 False))\n                          (return_spmf (None, s2))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' a b.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        (a, b) \\<in> set_spmf (callee1 s1 (id out'))\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case a of\n                             None \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None) b\n                                s2 False\n                             | Some r1' \\<Rightarrow>\n                                 exec_until_stop' (map_gpv Some id (c' r1'))\n                                  b s2 False))\n                          (return_spmf (None, s2))", "apply(drule (2) sticking)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out' c' a b.\n       \\<lbrakk>stop s2; S s1 s2; IO out' c' \\<in> set_spmf (the_gpv gpv);\n        S b s2\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf (\\<lambda>(x, s1, y). (x, y))\n                            (case a of\n                             None \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None) b\n                                s2 False\n                             | Some r1' \\<Rightarrow>\n                                 exec_until_stop' (map_gpv Some id (c' r1'))\n                                  b s2 False))\n                          (return_spmf (None, s2))", "apply(clarsimp split!: option.split simp add: step.IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>a. case a of (x, s1, b) \\<Rightarrow> (x, b))\n     (if False\n      then the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of Pure x \\<Rightarrow> return_spmf (x, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   joint s1 s2 out \\<bind>\n                   (\\<lambda>a.\n                       case a of (None, b) \\<Rightarrow> return_pmf None\n                       | (Some (r1, s1'), Some (r2, s2')) \\<Rightarrow>\n                           case (r1, r2) of\n                           (None, None) \\<Rightarrow>\n                             exec_until_stop'\n                              (Generative_Probabilistic_Value.Done None) s1'\n                              s2' True\n                           | (None, _) \\<Rightarrow>\n                               exec_until_stop'\n                                (Generative_Probabilistic_Value.Done None)\n                                s1' s2' True\n                           | (Some r1', None) \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' False\n                           | (Some r1', Some r2') \\<Rightarrow>\n                               exec_until_stop' (rpv r1') s1' s2' True))\n      else the_gpv (map_gpv Some id gpv) \\<bind>\n           (\\<lambda>generat.\n               case generat of\n               Pure x \\<Rightarrow> return_spmf (None, s1, s2)\n               | IO out rpv \\<Rightarrow>\n                   callee1 s1 out \\<bind>\n                   (\\<lambda>a.\n                       case a of\n                       (None, s1') \\<Rightarrow>\n                         exec_until_stop'\n                          (Generative_Probabilistic_Value.Done None) s1' s2\n                          False\n                       | (Some r1', s1') \\<Rightarrow>\n                           exec_until_stop' (rpv r1') s1' s2 False))))\n   (return_spmf (None, s2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> stop s2 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n   (exec_gpv_stop callee2 gpv s2)\n  ord_spmf (=)\n   (map_spmf (\\<lambda>(x, s1, y). (x, y))\n     (exec_until_stop joint callee1\n       (Generative_Probabilistic_Value.Done None) s1 s2 ?b1))\n   (return_spmf (None, s2))\n  stop s2 \\<Longrightarrow>\n  ord_spmf (=)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 False))\n   (return_spmf (None, s2))\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "note this(1)[OF go]"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf (\\<lambda>(x, s1, s2). (x, s2))\n     (exec_until_stop joint callee1 (map_gpv Some id gpv) s1 s2 True))\n   (exec_gpv_stop callee2 gpv s2)\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "finally"], ["proof (chain)\npicking this:\n  rel_pmf\n   (rel_option (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) OO\n    le_option)\n   (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_pmf\n   (rel_option (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S) OO\n    le_option)\n   (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)\n\ngoal (1 subgoal):\n 1. ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n     (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)", "by(rule rel_pmf_mono)(auto elim!: option.rel_cases)"], ["proof (state)\nthis:\n  ord_spmf (rel_prod (ord_option \\<top>)\\<inverse>\\<inverse> S)\n   (exec_gpv_stop callee1 gpv s1) (exec_gpv_stop callee2 gpv s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}