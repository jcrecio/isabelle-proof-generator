{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptHOL/GPV_Applicative.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptHOL", "problem_names": ["lemma ap_gpv_id: \"pure_gpv (\\<lambda>x. x) \\<diamondop> x = x\"", "lemma ap_gpv_comp: \"pure_gpv (\\<circ>) \\<diamondop> u \\<diamondop> v \\<diamondop> w = u \\<diamondop> (v \\<diamondop> w)\"", "lemma ap_gpv_homo: \"pure_gpv f \\<diamondop> pure_gpv x = pure_gpv (f x)\"", "lemma ap_gpv_interchange: \"u \\<diamondop> pure_gpv x = pure_gpv (\\<lambda>f. f x) \\<diamondop> u\"", "lemma map_conv_ap_gpv: \"map_gpv f (\\<lambda>x. x) gpv = pure_gpv f \\<diamondop> gpv\"", "lemma exec_gpv_ap:\n  \"exec_gpv callee (f \\<diamondop> x) \\<sigma> = \n   exec_gpv callee f \\<sigma> \\<bind> (\\<lambda>(f', \\<sigma>'). pure_spmf (\\<lambda>(x', \\<sigma>''). (f' x', \\<sigma>'')) \\<diamondop> exec_gpv callee x \\<sigma>')\"", "lemma exec_gpv_ap_pure [simp]:\n  \"exec_gpv callee (pure_gpv f \\<diamondop> x) \\<sigma> = pure_spmf (apfst f) \\<diamondop> exec_gpv callee x \\<sigma>\""], "translations": [["", "lemma ap_gpv_id: \"pure_gpv (\\<lambda>x. x) \\<diamondop> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Generative_Probabilistic_Value.Done (\\<lambda>x. x) \\<diamondop> x = x", "by(simp add: ap_gpv_def)"], ["", "lemma ap_gpv_comp: \"pure_gpv (\\<circ>) \\<diamondop> u \\<diamondop> v \\<diamondop> w = u \\<diamondop> (v \\<diamondop> w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Generative_Probabilistic_Value.Done (\\<circ>) \\<diamondop>\n    u \\<diamondop>\n    v \\<diamondop>\n    w =\n    u \\<diamondop> (v \\<diamondop> w)", "by(simp add: ap_gpv_def bind_gpv_assoc)"], ["", "lemma ap_gpv_homo: \"pure_gpv f \\<diamondop> pure_gpv x = pure_gpv (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Generative_Probabilistic_Value.Done f \\<diamondop>\n    Generative_Probabilistic_Value.Done x =\n    Generative_Probabilistic_Value.Done (f x)", "by(simp add: ap_gpv_def)"], ["", "lemma ap_gpv_interchange: \"u \\<diamondop> pure_gpv x = pure_gpv (\\<lambda>f. f x) \\<diamondop> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<diamondop> Generative_Probabilistic_Value.Done x =\n    Generative_Probabilistic_Value.Done (\\<lambda>f. f x) \\<diamondop> u", "by(simp add: ap_gpv_def)"], ["", "applicative gpv\nfor\n  pure: pure_gpv\n  ap: ap_gpv"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x.\n       Generative_Probabilistic_Value.Done f \\<diamondop>\n       Generative_Probabilistic_Value.Done x =\n       Generative_Probabilistic_Value.Done (f x)\n 2. \\<And>g f x.\n       Generative_Probabilistic_Value.Done\n        (\\<lambda>g f x. g (f x)) \\<diamondop>\n       g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x.\n       Generative_Probabilistic_Value.Done (\\<lambda>x. x) \\<diamondop> x =\n       x\n 4. \\<And>f x.\n       f \\<diamondop> Generative_Probabilistic_Value.Done x =\n       Generative_Probabilistic_Value.Done (\\<lambda>f. f x) \\<diamondop> f", "by(rule ap_gpv_id ap_gpv_comp[unfolded o_def[abs_def]] ap_gpv_homo ap_gpv_interchange)+"], ["", "lemma map_conv_ap_gpv: \"map_gpv f (\\<lambda>x. x) gpv = pure_gpv f \\<diamondop> gpv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_gpv f (\\<lambda>x. x) gpv =\n    Generative_Probabilistic_Value.Done f \\<diamondop> gpv", "by(simp add: ap_gpv_def map_gpv_conv_bind)"], ["", "lemma exec_gpv_ap:\n  \"exec_gpv callee (f \\<diamondop> x) \\<sigma> = \n   exec_gpv callee f \\<sigma> \\<bind> (\\<lambda>(f', \\<sigma>'). pure_spmf (\\<lambda>(x', \\<sigma>''). (f' x', \\<sigma>'')) \\<diamondop> exec_gpv callee x \\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv callee (f \\<diamondop> x) \\<sigma> =\n    exec_gpv callee f \\<sigma> \\<bind>\n    (\\<lambda>(f', \\<sigma>').\n        return_spmf\n         (\\<lambda>(x', \\<sigma>''). (f' x', \\<sigma>'')) \\<diamondop>\n        exec_gpv callee x \\<sigma>')", "by(simp add: ap_gpv_def exec_gpv_bind ap_spmf_conv_bind split_def)"], ["", "lemma exec_gpv_ap_pure [simp]:\n  \"exec_gpv callee (pure_gpv f \\<diamondop> x) \\<sigma> = pure_spmf (apfst f) \\<diamondop> exec_gpv callee x \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv callee (Generative_Probabilistic_Value.Done f \\<diamondop> x)\n     \\<sigma> =\n    return_spmf (apfst f) \\<diamondop> exec_gpv callee x \\<sigma>", "by(simp add: exec_gpv_ap apfst_def map_prod_def)"], ["", "end"], ["", "end"]]}