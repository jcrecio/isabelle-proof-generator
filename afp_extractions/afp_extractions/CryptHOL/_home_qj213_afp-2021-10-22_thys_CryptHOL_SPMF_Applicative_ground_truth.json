{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptHOL/SPMF_Applicative.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptHOL", "problem_names": ["lemma ap_spmf_conv_bind: \"ap_spmf f x = bind_spmf f (\\<lambda>f. bind_spmf x (\\<lambda>x. return_spmf (f x)))\"", "lemma ap_spmf_id: \"pure_spmf (\\<lambda>x. x) \\<diamondop> x = x\"", "lemma ap_spmf_comp: \"pure_spmf (\\<circ>) \\<diamondop> u \\<diamondop> v \\<diamondop> w = u \\<diamondop> (v \\<diamondop> w)\"", "lemma ap_spmf_homo: \"pure_spmf f \\<diamondop> pure_spmf x = pure_spmf (f x)\"", "lemma ap_spmf_interchange: \"u \\<diamondop> pure_spmf x = pure_spmf (\\<lambda>f. f x) \\<diamondop> u\"", "lemma ap_spmf_C: \"return_spmf (\\<lambda>f x y. f y x) \\<diamondop> f \\<diamondop> x \\<diamondop> y = f \\<diamondop> y \\<diamondop> x\"", "lemma set_ap_spmf [simp]: \"set_spmf (p \\<diamondop> q) = set_spmf p \\<diamondop> set_spmf q\"", "lemma bind_ap_spmf: \"bind_spmf (p \\<diamondop> x) f = bind_spmf p (\\<lambda>p. x \\<bind> (\\<lambda>x. f (p x)))\"", "lemma bind_pmf_ap_return_spmf [simp]: \"bind_pmf (ap_spmf (return_spmf f) p) g = bind_pmf p (g \\<circ> map_option f)\"", "lemma map_spmf_conv_ap [applicative_unfold]: \"map_spmf f p = return_spmf f \\<diamondop> p\""], "translations": [["", "lemma ap_spmf_conv_bind: \"ap_spmf f x = bind_spmf f (\\<lambda>f. bind_spmf x (\\<lambda>x. return_spmf (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_spmf f x =\n    f \\<bind> (\\<lambda>f. x \\<bind> (\\<lambda>x. return_spmf (f x)))", "by(simp add: ap_spmf_def map_spmf_conv_bind_spmf pair_spmf_alt_def)"], ["", "adhoc_overloading Applicative.ap ap_spmf"], ["", "context includes applicative_syntax begin"], ["", "lemma ap_spmf_id: \"pure_spmf (\\<lambda>x. x) \\<diamondop> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_spmf (\\<lambda>x. x) \\<diamondop> x = x", "by(simp add: ap_spmf_def pair_spmf_return_spmf1 spmf.map_comp o_def)"], ["", "lemma ap_spmf_comp: \"pure_spmf (\\<circ>) \\<diamondop> u \\<diamondop> v \\<diamondop> w = u \\<diamondop> (v \\<diamondop> w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_spmf (\\<circ>) \\<diamondop> u \\<diamondop> v \\<diamondop> w =\n    u \\<diamondop> (v \\<diamondop> w)", "by(simp add: ap_spmf_def pair_spmf_return_spmf1 pair_map_spmf1 pair_map_spmf2 spmf.map_comp o_def split_def pair_pair_spmf)"], ["", "lemma ap_spmf_homo: \"pure_spmf f \\<diamondop> pure_spmf x = pure_spmf (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_spmf f \\<diamondop> return_spmf x = return_spmf (f x)", "by(simp add: ap_spmf_def pair_spmf_return_spmf1)"], ["", "lemma ap_spmf_interchange: \"u \\<diamondop> pure_spmf x = pure_spmf (\\<lambda>f. f x) \\<diamondop> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<diamondop> return_spmf x =\n    return_spmf (\\<lambda>f. f x) \\<diamondop> u", "by(simp add: ap_spmf_def pair_spmf_return_spmf1 pair_spmf_return_spmf2 spmf.map_comp o_def)"], ["", "lemma ap_spmf_C: \"return_spmf (\\<lambda>f x y. f y x) \\<diamondop> f \\<diamondop> x \\<diamondop> y = f \\<diamondop> y \\<diamondop> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_spmf (\\<lambda>f x y. f y x) \\<diamondop> f \\<diamondop>\n    x \\<diamondop>\n    y =\n    f \\<diamondop> y \\<diamondop> x", "apply(simp add: ap_spmf_def pair_map_spmf1 spmf.map_comp pair_spmf_return_spmf1 pair_pair_spmf o_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf (\\<lambda>x. fst x (snd (snd x)) (fst (snd x)))\n     (pair_spmf f (pair_spmf x y)) =\n    map_spmf (\\<lambda>x. fst x (fst (snd x)) (snd (snd x)))\n     (pair_spmf f (pair_spmf y x))", "apply(subst (2) pair_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf (\\<lambda>x. fst x (snd (snd x)) (fst (snd x)))\n     (pair_spmf f (map_spmf (\\<lambda>(y, x). (x, y)) (pair_spmf y x))) =\n    map_spmf (\\<lambda>x. fst x (fst (snd x)) (snd (snd x)))\n     (pair_spmf f (pair_spmf y x))", "apply(simp add: pair_map_spmf2 spmf.map_comp o_def split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "applicative spmf (C)\nfor\n  pure: pure_spmf\n  ap: ap_spmf"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x. return_spmf f \\<diamondop> return_spmf x = return_spmf (f x)\n 2. \\<And>g f x.\n       return_spmf (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>f x y.\n       return_spmf (\\<lambda>f x y. f y x) \\<diamondop> f \\<diamondop>\n       x \\<diamondop>\n       y =\n       f \\<diamondop> y \\<diamondop> x\n 4. \\<And>x. return_spmf (\\<lambda>x. x) \\<diamondop> x = x", "by(rule ap_spmf_id ap_spmf_comp[unfolded o_def[abs_def]] ap_spmf_homo ap_spmf_interchange ap_spmf_C)+"], ["", "lemma set_ap_spmf [simp]: \"set_spmf (p \\<diamondop> q) = set_spmf p \\<diamondop> set_spmf q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf (p \\<diamondop> q) = set_spmf p \\<diamondop> set_spmf q", "by(auto simp add: ap_spmf_def ap_set_def)"], ["", "lemma bind_ap_spmf: \"bind_spmf (p \\<diamondop> x) f = bind_spmf p (\\<lambda>p. x \\<bind> (\\<lambda>x. f (p x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<diamondop> x \\<bind> f =\n    p \\<bind> (\\<lambda>p. x \\<bind> (\\<lambda>x. f (p x)))", "by(simp add: ap_spmf_conv_bind)"], ["", "lemma bind_pmf_ap_return_spmf [simp]: \"bind_pmf (ap_spmf (return_spmf f) p) g = bind_pmf p (g \\<circ> map_option f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_spmf f \\<diamondop> p \\<bind> g =\n    p \\<bind> g \\<circ> map_option f", "by(auto simp add: ap_spmf_conv_bind bind_spmf_def bind_return_pmf bind_assoc_pmf intro: bind_pmf_cong split: option.split)"], ["", "lemma map_spmf_conv_ap [applicative_unfold]: \"map_spmf f p = return_spmf f \\<diamondop> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf f p = return_spmf f \\<diamondop> p", "by(simp add: map_spmf_conv_bind_spmf ap_spmf_conv_bind)"], ["", "end"], ["", "end"]]}