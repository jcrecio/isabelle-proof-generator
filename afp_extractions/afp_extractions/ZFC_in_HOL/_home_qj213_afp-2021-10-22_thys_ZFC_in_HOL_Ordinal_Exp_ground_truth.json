{"file_name": "/home/qj213/afp-2021-10-22/thys/ZFC_in_HOL/Ordinal_Exp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ZFC_in_HOL", "problem_names": ["lemma oexp_0_right [simp]: \"\\<alpha>\\<up>0 = 1\"", "lemma oexp_succ [simp]: \"Ord \\<beta> \\<Longrightarrow> \\<alpha>\\<up>(succ \\<beta>) = \\<alpha>\\<up>\\<beta> * \\<alpha>\"", "lemma oexp_Limit: \"Limit \\<beta> \\<Longrightarrow> \\<alpha>\\<up>\\<beta> = (if \\<alpha>=0 then 0 else SUP \\<xi> \\<in> elts \\<beta>. \\<alpha>\\<up>\\<xi>)\"", "lemma oexp_1_right [simp]: \"\\<alpha>\\<up>1 = \\<alpha>\"", "lemma oexp_1 [simp]: \"Ord \\<alpha> \\<Longrightarrow> 1\\<up>\\<alpha> = 1\"", "lemma oexp_0 [simp]: \"Ord \\<alpha> \\<Longrightarrow> 0\\<up>\\<alpha> = (if \\<alpha> = 0 then 1 else 0)\"", "lemma oexp_eq_0_iff [simp]:\n  assumes \"Ord \\<beta>\" shows \"\\<alpha>\\<up>\\<beta> = 0 \\<longleftrightarrow> \\<alpha>=0 \\<and> \\<beta>\\<noteq>0\"", "lemma oexp_gt_0_iff [simp]:\n  assumes \"Ord \\<beta>\" shows \"\\<alpha>\\<up>\\<beta> > 0 \\<longleftrightarrow> \\<alpha>>0 \\<or> \\<beta>=0\"", "lemma ord_of_nat_oexp: \"ord_of_nat (m^n) = ord_of_nat m\\<up>ord_of_nat n\"", "lemma omega_closed_oexp [intro]:\n  assumes \"\\<alpha> \\<in> elts \\<omega>\" \"\\<beta> \\<in> elts \\<omega>\" shows \"\\<alpha>\\<up>\\<beta> \\<in> elts \\<omega>\"", "lemma Ord_oexp [simp]:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" shows \"Ord (\\<alpha>\\<up>\\<beta>)\"", "lemma le_oexp:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" \"\\<beta> \\<noteq> 0\" shows \"\\<alpha> \\<le> \\<alpha>\\<up>\\<beta>\"", "lemma le_oexp':\n  assumes \"Ord \\<alpha>\" \"1 < \\<alpha>\" \"Ord \\<beta>\" shows \"\\<beta> \\<le> \\<alpha>\\<up>\\<beta>\"", "lemma oexp_Limit_le:\n  assumes \"\\<beta> < \\<gamma>\" \"Limit \\<gamma>\" \"Ord \\<beta>\" \"\\<alpha> > 0\" shows \"\\<alpha>\\<up>\\<beta> \\<le> \\<alpha>\\<up>\\<gamma>\"", "lemma \\<omega>_oexp_iff [simp]: \"\\<lbrakk>Ord \\<alpha>; Ord \\<beta>\\<rbrakk> \\<Longrightarrow> \\<omega>\\<up>\\<alpha> = \\<omega>\\<up>\\<beta> \\<longleftrightarrow> \\<alpha>=\\<beta>\"", "lemma Limit_oexp:\n  assumes \"Limit \\<gamma>\" \"Ord \\<alpha>\" \"\\<alpha> > 1\" shows \"Limit (\\<alpha>\\<up>\\<gamma>)\"", "lemma oexp_mono:\n  assumes \\<alpha>: \"Ord \\<alpha>\" \"\\<alpha> \\<noteq> 0\" and \\<beta>: \"Ord \\<beta>\" \"\\<gamma> \\<sqsubseteq> \\<beta>\" shows \"\\<alpha>\\<up>\\<gamma> \\<le> \\<alpha>\\<up>\\<beta>\"", "lemma oexp_mono_le:\n  assumes \"\\<gamma> \\<le> \\<beta>\" \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>\\<gamma> \\<le> \\<alpha>\\<up>\\<beta>\"", "lemma oexp_sup:\n  assumes \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>(\\<beta> \\<squnion> \\<gamma>) = \\<alpha>\\<up>\\<beta> \\<squnion> \\<alpha>\\<up>\\<gamma>\"", "lemma oexp_Sup:\n  assumes \\<alpha>: \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" and X: \"X \\<subseteq> ON\" \"small X\" \"X \\<noteq> {}\" shows \"\\<alpha>\\<up>\\<Squnion> X = \\<Squnion> ((\\<up>) \\<alpha> ` X)\"", "lemma omega_le_Limit:\n  assumes \"Limit \\<mu>\" shows \"\\<omega> \\<le> \\<mu>\"", "lemma finite_omega_power [simp]:\n  assumes \"1 < n\" \"n \\<in> elts \\<omega>\" shows \"n\\<up>\\<omega> = \\<omega>\"", "lemma Limit_omega_oexp:\n  assumes \"Ord \\<delta>\" \"\\<delta> \\<noteq> 0\"\n  shows \"Limit (\\<omega>\\<up>\\<delta>)\"", "lemma oexp_mult_commute:\n  fixes j::nat\n  assumes \"Ord \\<alpha>\"\n  shows \"(\\<alpha> \\<up> j) * \\<alpha> = \\<alpha> * (\\<alpha> \\<up> j)\"", "lemma oexp_\\<omega>_Limit: \"Limit \\<beta> \\<Longrightarrow> \\<omega>\\<up>\\<beta> = (SUP \\<xi> \\<in> elts \\<beta>. \\<omega>\\<up>\\<xi>)\"", "lemma \\<omega>_power_succ_gtr: \"Ord \\<alpha> \\<Longrightarrow> \\<omega> \\<up> \\<alpha> * ord_of_nat n < \\<omega> \\<up> succ \\<alpha>\"", "lemma countable_oexp:\n  assumes \\<nu>: \"\\<alpha> \\<in> elts \\<omega>1\" \n  shows \"\\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\""], "translations": [["", "lemma oexp_0_right [simp]: \"\\<alpha>\\<up>0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> 0 = 1", "by (simp add: def_transrec [OF oexp_def])"], ["", "lemma oexp_succ [simp]: \"Ord \\<beta> \\<Longrightarrow> \\<alpha>\\<up>(succ \\<beta>) = \\<alpha>\\<up>\\<beta> * \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<beta> \\<Longrightarrow>\n    \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta> =\n    \\<alpha> \\<up> \\<beta> * \\<alpha>", "by (simp add: def_transrec [OF oexp_def])"], ["", "lemma oexp_Limit: \"Limit \\<beta> \\<Longrightarrow> \\<alpha>\\<up>\\<beta> = (if \\<alpha>=0 then 0 else SUP \\<xi> \\<in> elts \\<beta>. \\<alpha>\\<up>\\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit \\<beta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> =\n    (if \\<alpha> = 0 then 0\n     else \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<beta>))", "by (auto simp: def_transrec [OF oexp_def, of _ \\<beta>])"], ["", "lemma oexp_1_right [simp]: \"\\<alpha>\\<up>1 = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> 1 = \\<alpha>", "using one_V_def oexp_succ"], ["proof (prove)\nusing this:\n  1 \\<equiv> ZFC_in_HOL.succ 0\n  Ord ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ZFC_in_HOL.succ ?\\<beta> =\n  ?\\<alpha> \\<up> ?\\<beta> * ?\\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> 1 = \\<alpha>", "by fastforce"], ["", "lemma oexp_1 [simp]: \"Ord \\<alpha> \\<Longrightarrow> 1\\<up>\\<alpha> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<alpha> \\<Longrightarrow> 1 \\<up> \\<alpha> = 1", "by (induction rule: Ord_induct3) (use Limit_def oexp_Limit in auto)"], ["", "lemma oexp_0 [simp]: \"Ord \\<alpha> \\<Longrightarrow> 0\\<up>\\<alpha> = (if \\<alpha> = 0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<alpha> \\<Longrightarrow>\n    0 \\<up> \\<alpha> = (if \\<alpha> = 0 then 1 else 0)", "by (induction rule: Ord_induct3) (use Limit_def oexp_Limit in auto)"], ["", "lemma oexp_eq_0_iff [simp]:\n  assumes \"Ord \\<beta>\" shows \"\\<alpha>\\<up>\\<beta> = 0 \\<longleftrightarrow> \\<alpha>=0 \\<and> \\<beta>\\<noteq>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> \\<up> \\<beta> = 0) = (\\<alpha> = 0 \\<and> \\<beta> \\<noteq> 0)", "using \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<alpha> \\<up> \\<beta> = 0) = (\\<alpha> = 0 \\<and> \\<beta> \\<noteq> 0)", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<alpha> \\<up> 0 = 0) = (\\<alpha> = 0 \\<and> 0 \\<noteq> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        (\\<alpha> \\<up> \\<alpha>' = 0) =\n        (\\<alpha> = 0 \\<and> \\<alpha>' \\<noteq> 0)\\<rbrakk>\n       \\<Longrightarrow> (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>' = 0) =\n                         (\\<alpha> = 0 \\<and>\n                          ZFC_in_HOL.succ \\<alpha>' \\<noteq> 0)\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           (\\<alpha> \\<up> \\<xi> = 0) =\n           (\\<alpha> = 0 \\<and> \\<xi> \\<noteq> 0)\\<rbrakk>\n       \\<Longrightarrow> (\\<alpha> \\<up>\n                          (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) =\n                          0) =\n                         (\\<alpha> = 0 \\<and>\n                          (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  (\\<alpha> \\<up> ?\\<xi> = 0) = (\\<alpha> = 0 \\<and> ?\\<xi> \\<noteq> 0)\n\ngoal (3 subgoals):\n 1. (\\<alpha> \\<up> 0 = 0) = (\\<alpha> = 0 \\<and> 0 \\<noteq> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        (\\<alpha> \\<up> \\<alpha>' = 0) =\n        (\\<alpha> = 0 \\<and> \\<alpha>' \\<noteq> 0)\\<rbrakk>\n       \\<Longrightarrow> (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>' = 0) =\n                         (\\<alpha> = 0 \\<and>\n                          ZFC_in_HOL.succ \\<alpha>' \\<noteq> 0)\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           (\\<alpha> \\<up> \\<xi> = 0) =\n           (\\<alpha> = 0 \\<and> \\<xi> \\<noteq> 0)\\<rbrakk>\n       \\<Longrightarrow> (\\<alpha> \\<up>\n                          (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) =\n                          0) =\n                         (\\<alpha> = 0 \\<and>\n                          (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0)", "then"], ["proof (chain)\npicking this:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  (\\<alpha> \\<up> ?\\<xi> = 0) = (\\<alpha> = 0 \\<and> ?\\<xi> \\<noteq> 0)", "show ?case"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  (\\<alpha> \\<up> ?\\<xi> = 0) = (\\<alpha> = 0 \\<and> ?\\<xi> \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. (\\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) = 0) =\n    (\\<alpha> = 0 \\<and> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0)", "using Limit_def oexp_Limit"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  (\\<alpha> \\<up> ?\\<xi> = 0) = (\\<alpha> = 0 \\<and> ?\\<xi> \\<noteq> 0)\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n\ngoal (1 subgoal):\n 1. (\\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) = 0) =\n    (\\<alpha> = 0 \\<and> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  (\\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) = 0) =\n  (\\<alpha> = 0 \\<and> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0)\n\ngoal (2 subgoals):\n 1. (\\<alpha> \\<up> 0 = 0) = (\\<alpha> = 0 \\<and> 0 \\<noteq> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        (\\<alpha> \\<up> \\<alpha>' = 0) =\n        (\\<alpha> = 0 \\<and> \\<alpha>' \\<noteq> 0)\\<rbrakk>\n       \\<Longrightarrow> (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>' = 0) =\n                         (\\<alpha> = 0 \\<and>\n                          ZFC_in_HOL.succ \\<alpha>' \\<noteq> 0)", "qed auto"], ["", "lemma oexp_gt_0_iff [simp]:\n  assumes \"Ord \\<beta>\" shows \"\\<alpha>\\<up>\\<beta> > 0 \\<longleftrightarrow> \\<alpha>>0 \\<or> \\<beta>=0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < \\<alpha> \\<up> \\<beta>) = (0 < \\<alpha> \\<or> \\<beta> = 0)", "by (simp add: assms less_V_def)"], ["", "lemma ord_of_nat_oexp: \"ord_of_nat (m^n) = ord_of_nat m\\<up>ord_of_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_of_nat (m ^ n) = ord_of_nat m \\<up> ord_of_nat n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_of_nat (m ^ 0) = ord_of_nat m \\<up> ord_of_nat 0\n 2. \\<And>n.\n       ord_of_nat (m ^ n) =\n       ord_of_nat m \\<up> ord_of_nat n \\<Longrightarrow>\n       ord_of_nat (m ^ Suc n) = ord_of_nat m \\<up> ord_of_nat (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  ord_of_nat (m ^ n) = ord_of_nat m \\<up> ord_of_nat n\n\ngoal (2 subgoals):\n 1. ord_of_nat (m ^ 0) = ord_of_nat m \\<up> ord_of_nat 0\n 2. \\<And>n.\n       ord_of_nat (m ^ n) =\n       ord_of_nat m \\<up> ord_of_nat n \\<Longrightarrow>\n       ord_of_nat (m ^ Suc n) = ord_of_nat m \\<up> ord_of_nat (Suc n)", "then"], ["proof (chain)\npicking this:\n  ord_of_nat (m ^ n) = ord_of_nat m \\<up> ord_of_nat n", "show ?case"], ["proof (prove)\nusing this:\n  ord_of_nat (m ^ n) = ord_of_nat m \\<up> ord_of_nat n\n\ngoal (1 subgoal):\n 1. ord_of_nat (m ^ Suc n) = ord_of_nat m \\<up> ord_of_nat (Suc n)", "by (simp add: mult.commute [of m]) (simp add: ord_of_nat_mult)"], ["proof (state)\nthis:\n  ord_of_nat (m ^ Suc n) = ord_of_nat m \\<up> ord_of_nat (Suc n)\n\ngoal (1 subgoal):\n 1. ord_of_nat (m ^ 0) = ord_of_nat m \\<up> ord_of_nat 0", "qed auto"], ["", "lemma omega_closed_oexp [intro]:\n  assumes \"\\<alpha> \\<in> elts \\<omega>\" \"\\<beta> \\<in> elts \\<omega>\" shows \"\\<alpha>\\<up>\\<beta> \\<in> elts \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>", "obtain m n where \"\\<alpha> = ord_of_nat m\" \"\\<beta> = ord_of_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>\\<alpha> = ord_of_nat m; \\<beta> = ord_of_nat n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms elts_\\<omega>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in> elts \\<omega>\n  \\<beta> \\<in> elts \\<omega>\n  elts \\<omega> = {\\<alpha>. \\<exists>n. \\<alpha> = ord_of_nat n}\n\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>\\<alpha> = ord_of_nat m; \\<beta> = ord_of_nat n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<alpha> = ord_of_nat m\n  \\<beta> = ord_of_nat n\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<alpha> = ord_of_nat m\n  \\<beta> = ord_of_nat n", "have \"\\<alpha>\\<up>\\<beta> = ord_of_nat (m^n)\""], ["proof (prove)\nusing this:\n  \\<alpha> = ord_of_nat m\n  \\<beta> = ord_of_nat n\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> = ord_of_nat (m ^ n)", "by (simp add: ord_of_nat_oexp)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> = ord_of_nat (m ^ n)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> = ord_of_nat (m ^ n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> = ord_of_nat (m ^ n)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>", "by (simp add: \\<omega>_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> \\<in> elts \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Ord_oexp [simp]:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" shows \"Ord (\\<alpha>\\<up>\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<beta>)", "using \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<beta>)", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. Ord (\\<alpha> \\<up> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>'; Ord (\\<alpha> \\<up> \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> Ord (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>')\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           Ord (\\<alpha> \\<up> \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> Ord (\\<alpha> \\<up>\n                              (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>))", "case (Limit \\<alpha>)"], ["proof (state)\nthis:\n  Limit \\<alpha>\n  ?\\<xi> \\<in> elts \\<alpha> \\<Longrightarrow> Ord (\\<alpha> \\<up> ?\\<xi>)\n\ngoal (3 subgoals):\n 1. Ord (\\<alpha> \\<up> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>'; Ord (\\<alpha> \\<up> \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> Ord (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>')\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           Ord (\\<alpha> \\<up> \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> Ord (\\<alpha> \\<up>\n                              (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>))", "then"], ["proof (chain)\npicking this:\n  Limit \\<alpha>\n  ?\\<xi> \\<in> elts \\<alpha> \\<Longrightarrow> Ord (\\<alpha> \\<up> ?\\<xi>)", "show ?case"], ["proof (prove)\nusing this:\n  Limit \\<alpha>\n  ?\\<xi> \\<in> elts \\<alpha> \\<Longrightarrow> Ord (\\<alpha> \\<up> ?\\<xi>)\n\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>))", "by (auto simp: oexp_Limit image_iff intro: Ord_Sup)"], ["proof (state)\nthis:\n  Ord (\\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>))\n\ngoal (2 subgoals):\n 1. Ord (\\<alpha> \\<up> 0)\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>'; Ord (\\<alpha> \\<up> \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> Ord (\\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>')", "qed (auto intro: Ord_mult assms)"], ["", "text \\<open>Lemma 3.19\\<close>"], ["", "lemma le_oexp:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" \"\\<beta> \\<noteq> 0\" shows \"\\<alpha> \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> \\<alpha> \\<up> \\<beta>", "using \\<open>Ord \\<beta>\\<close> \\<open>\\<beta> \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> \\<alpha> \\<up> \\<beta>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<noteq> 0 \\<Longrightarrow>\n        \\<alpha> \\<le> \\<alpha> \\<up> \\<alpha>';\n        ZFC_in_HOL.succ \\<alpha>' \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>'; \\<xi> \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<xi>;\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (succ \\<beta>)"], ["proof (state)\nthis:\n  Ord \\<beta>\n  \\<beta> \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<beta>\n  ZFC_in_HOL.succ \\<beta> \\<noteq> 0\n\ngoal (3 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<noteq> 0 \\<Longrightarrow>\n        \\<alpha> \\<le> \\<alpha> \\<up> \\<alpha>';\n        ZFC_in_HOL.succ \\<alpha>' \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>'; \\<xi> \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<xi>;\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Ord \\<beta>\n  \\<beta> \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<beta>\n  ZFC_in_HOL.succ \\<beta> \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  \\<beta> \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<beta>\n  ZFC_in_HOL.succ \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>", "by simp (metis \\<open>Ord \\<alpha>\\<close> le_0 le_mult mult.left_neutral oexp_0_right order_refl order_trans)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>'; \\<xi> \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<xi>;\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>'; \\<xi> \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<xi>;\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; ?\\<xi> \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> ?\\<xi>\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>'; \\<xi> \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> \\<xi>;\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<alpha>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; ?\\<xi> \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> ?\\<xi>\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; ?\\<xi> \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> ?\\<xi>\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "by (metis Limit_def Limit_eq_Sup_self ZFC_in_HOL.Sup_upper eq_iff image_eqI image_ident oexp_1_right oexp_Limit replacement small_elts one_V_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> 0 \\<Longrightarrow> \\<alpha> \\<le> \\<alpha> \\<up> 0", "qed auto"], ["", "text \\<open>Lemma 3.20\\<close>"], ["", "lemma le_oexp':\n  assumes \"Ord \\<alpha>\" \"1 < \\<alpha>\" \"Ord \\<beta>\" shows \"\\<beta> \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "proof (cases \"\\<beta> = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow> \\<beta> \\<le> \\<alpha> \\<up> \\<beta>\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "case True"], ["proof (state)\nthis:\n  \\<beta> = 0\n\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow> \\<beta> \\<le> \\<alpha> \\<up> \\<beta>\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "then"], ["proof (chain)\npicking this:\n  \\<beta> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> = 0\n\ngoal (1 subgoal):\n 1. \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "by auto"], ["proof (state)\nthis:\n  \\<beta> \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "case False"], ["proof (state)\nthis:\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "using \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<le> \\<alpha> \\<up> \\<beta>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. 0 \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> \\<alpha> \\<up> 0", "by auto"], ["proof (state)\nthis:\n  0 \\<le> \\<alpha> \\<up> 0\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (succ \\<gamma>)"], ["proof (state)\nthis:\n  Ord \\<gamma>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Ord \\<gamma>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>", "have \"\\<alpha>\\<up>\\<gamma> * 1 < \\<alpha>\\<up>\\<gamma> * \\<alpha>\""], ["proof (prove)\nusing this:\n  Ord \\<gamma>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>", "using \\<open>Ord \\<alpha>\\<close> \\<open>1 < \\<alpha>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<gamma>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>\n  Ord \\<alpha>\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>", "by (metis le_mult less_V_def mult.right_neutral mult_cancellation not_less_0 oexp_eq_0_iff succ.hyps)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>", "have \" \\<gamma> < \\<alpha>\\<up>succ \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>", "using succ.IH succ.hyps"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<gamma> * 1 < \\<alpha> \\<up> \\<gamma> * \\<alpha>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha>' \\<le> \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ \\<alpha>'\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>", "show ?case"], ["proof (prove)\nusing this:\n  \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<gamma> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>", "using False \\<open>Ord \\<alpha>\\<close> \\<open>1 < \\<alpha>\\<close> succ"], ["proof (prove)\nusing this:\n  \\<gamma> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>\n  \\<beta> \\<noteq> 0\n  Ord \\<alpha>\n  1 < \\<alpha>\n  Ord \\<gamma>\n  \\<gamma> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<gamma> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>", "by (metis Ord_mem_iff_lt Ord_oexp Ord_succ elts_succ insert_subset less_eq_V_def less_imp_le)"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ \\<gamma> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  ?\\<xi> \\<le> \\<alpha> \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<xi> \\<le> \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "with False \\<open>1 < \\<alpha>\\<close>"], ["proof (chain)\npicking this:\n  \\<beta> \\<noteq> 0\n  1 < \\<alpha>\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  ?\\<xi> \\<le> \\<alpha> \\<up> ?\\<xi>", "show ?case"], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> 0\n  1 < \\<alpha>\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  ?\\<xi> \\<le> \\<alpha> \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n    \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "by (force simp: Limit_def oexp_Limit intro: elts_succ)"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n  \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<beta> \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oexp_Limit_le:\n  assumes \"\\<beta> < \\<gamma>\" \"Limit \\<gamma>\" \"Ord \\<beta>\" \"\\<alpha> > 0\" shows \"\\<alpha>\\<up>\\<beta> \\<le> \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "have \"Ord \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<gamma>", "using Limit_def assms(2)"], ["proof (prove)\nusing this:\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  Limit \\<gamma>\n\ngoal (1 subgoal):\n 1. Ord \\<gamma>", "by blast"], ["proof (state)\nthis:\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "with assms"], ["proof (chain)\npicking this:\n  \\<beta> < \\<gamma>\n  Limit \\<gamma>\n  Ord \\<beta>\n  0 < \\<alpha>\n  Ord \\<gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> < \\<gamma>\n  Limit \\<gamma>\n  Ord \\<beta>\n  0 < \\<alpha>\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "using Ord_mem_iff_lt ZFC_in_HOL.Sup_upper oexp_Limit"], ["proof (prove)\nusing this:\n  \\<beta> < \\<gamma>\n  Limit \\<gamma>\n  Ord \\<beta>\n  0 < \\<alpha>\n  Ord \\<gamma>\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  \\<lbrakk>?x \\<in> ?A; small ?A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<le> \\<Squnion> ?A\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition oexp_less:\n  assumes \\<beta>: \"\\<beta> \\<in> elts \\<gamma>\" and \"Ord \\<gamma>\" and \\<alpha>: \"\\<alpha> > 1\" \"Ord \\<alpha>\" shows \"\\<alpha>\\<up>\\<beta> < \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "obtain \"\\<beta> < \\<gamma>\" \"Ord \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<beta> < \\<gamma>; Ord \\<beta>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ord_in_Ord OrdmemD assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  \\<beta> \\<in> elts \\<gamma>\n  Ord \\<gamma>\n  1 < \\<alpha>\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<beta> < \\<gamma>; Ord \\<beta>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<beta> < \\<gamma>\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "have gt0: \"\\<alpha>\\<up>\\<beta> > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<alpha> \\<up> \\<beta>", "using \\<open>Ord \\<beta>\\<close> \\<alpha> dual_order.order_iff_strict"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  1 < \\<alpha>\n  Ord \\<alpha>\n  (?b \\<le> ?a) = (?b < ?a \\<or> ?a = ?b)\n\ngoal (1 subgoal):\n 1. 0 < \\<alpha> \\<up> \\<beta>", "by auto"], ["proof (state)\nthis:\n  0 < \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "using \\<open>Ord \\<gamma>\\<close> \\<beta>"], ["proof (prove)\nusing this:\n  Ord \\<gamma>\n  \\<beta> \\<in> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<beta> \\<in> elts 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case 0"], ["proof (state)\nthis:\n  \\<beta> \\<in> elts 0\n\ngoal (3 subgoals):\n 1. \\<beta> \\<in> elts 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> elts 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<beta> \\<in> elts 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> 0", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> 0\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (succ \\<delta>)"], ["proof (state)\nthis:\n  Ord \\<delta>\n  \\<beta> \\<in> elts \\<delta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<delta>\n  \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<delta>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Ord \\<delta>\n  \\<beta> \\<in> elts \\<delta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<delta>\n  \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<delta>)", "consider \"\\<beta> = \\<delta>\" | \"\\<beta> < \\<delta>\""], ["proof (prove)\nusing this:\n  Ord \\<delta>\n  \\<beta> \\<in> elts \\<delta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<delta>\n  \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> = \\<delta> \\<Longrightarrow> thesis;\n     \\<beta> < \\<delta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using OrdmemD elts_succ"], ["proof (prove)\nusing this:\n  Ord \\<delta>\n  \\<beta> \\<in> elts \\<delta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<delta>\n  \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<delta>)\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  elts (ZFC_in_HOL.succ ?x) = insert ?x (elts ?x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> = \\<delta> \\<Longrightarrow> thesis;\n     \\<beta> < \\<delta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<beta> = \\<delta> \\<Longrightarrow> ?thesis;\n   \\<beta> < \\<delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<beta> \\<in> elts \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<alpha>';\n        \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<alpha>')\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<beta> = \\<delta> \\<Longrightarrow> ?thesis;\n   \\<beta> < \\<delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<beta> = \\<delta> \\<Longrightarrow> ?thesis;\n   \\<beta> < \\<delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> = \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n 2. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "case 1"], ["proof (state)\nthis:\n  \\<beta> = \\<delta>\n\ngoal (2 subgoals):\n 1. \\<beta> = \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n 2. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "then"], ["proof (chain)\npicking this:\n  \\<beta> = \\<delta>", "have \"(\\<alpha>\\<up>\\<beta>) * 1 < (\\<alpha>\\<up>\\<delta>) * \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<beta> = \\<delta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>", "using Ord_1 Ord_oexp \\<alpha> gt0 mult_cancel_less_iff succ.hyps"], ["proof (prove)\nusing this:\n  \\<beta> = \\<delta>\n  Ord 1\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Ord (?\\<alpha> \\<up> ?\\<beta>)\n  1 < \\<alpha>\n  Ord \\<alpha>\n  0 < \\<alpha> \\<up> \\<beta>\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>; Ord ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> (?\\<alpha> * ?\\<beta> < ?\\<alpha> * ?\\<gamma>) =\n                    (?\\<beta> < ?\\<gamma> \\<and> 0 < ?\\<alpha>)\n  Ord \\<delta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>", "by metis"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<beta> = \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n 2. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "by (simp add: succ.hyps)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n\ngoal (1 subgoal):\n 1. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "case 2"], ["proof (state)\nthis:\n  \\<beta> < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "then"], ["proof (chain)\npicking this:\n  \\<beta> < \\<delta>", "have \"(\\<alpha>\\<up>\\<delta>) * 1 < (\\<alpha>\\<up>\\<delta>) * \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<beta> < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<delta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>", "by (meson Ord_1 Ord_mem_iff_lt Ord_oexp \\<open>Ord \\<beta>\\<close> \\<alpha> gt0 less_trans mult_cancel_less_iff succ)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<delta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<beta> < \\<delta> \\<Longrightarrow>\n    \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "with 2"], ["proof (chain)\npicking this:\n  \\<beta> < \\<delta>\n  \\<alpha> \\<up> \\<delta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> < \\<delta>\n  \\<alpha> \\<up> \\<delta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "using Ord_mem_iff_lt \\<open>Ord \\<beta>\\<close> succ"], ["proof (prove)\nusing this:\n  \\<beta> < \\<delta>\n  \\<alpha> \\<up> \\<delta> * 1 < \\<alpha> \\<up> \\<delta> * \\<alpha>\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  Ord \\<beta>\n  Ord \\<delta>\n  \\<beta> \\<in> elts \\<delta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<delta>\n  \\<beta> \\<in> elts (ZFC_in_HOL.succ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ZFC_in_HOL.succ \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<gamma>)"], ["proof (state)\nthis:\n  Limit \\<gamma>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<gamma>; \\<beta> \\<in> elts ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ?\\<xi>\n  \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Limit \\<gamma>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<gamma>; \\<beta> \\<in> elts ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ?\\<xi>\n  \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)", "obtain \"Ord \\<gamma>\" \"succ \\<beta> < \\<gamma>\""], ["proof (prove)\nusing this:\n  Limit \\<gamma>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<gamma>; \\<beta> \\<in> elts ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ?\\<xi>\n  \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord \\<gamma>; ZFC_in_HOL.succ \\<beta> < \\<gamma>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Limit_def Ord_in_Ord OrdmemD assms"], ["proof (prove)\nusing this:\n  Limit \\<gamma>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<gamma>; \\<beta> \\<in> elts ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> ?\\<xi>\n  \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  \\<beta> \\<in> elts \\<gamma>\n  Ord \\<gamma>\n  1 < \\<alpha>\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord \\<gamma>; ZFC_in_HOL.succ \\<beta> < \\<gamma>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ord \\<gamma>\n  ZFC_in_HOL.succ \\<beta> < \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<alpha>\\<up>\\<beta> = (\\<alpha>\\<up>\\<beta>) * 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> = \\<alpha> \\<up> \\<beta> * 1", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> = \\<alpha> \\<up> \\<beta> * 1\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> = \\<alpha> \\<up> \\<beta> * 1\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> < (\\<alpha>\\<up>\\<beta>) * \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<beta> * \\<alpha>", "using Ord_oexp \\<open>Ord \\<beta>\\<close> assms gt0 mult_cancel_less_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Ord (?\\<alpha> \\<up> ?\\<beta>)\n  Ord \\<beta>\n  \\<beta> \\<in> elts \\<gamma>\n  Ord \\<gamma>\n  1 < \\<alpha>\n  Ord \\<alpha>\n  0 < \\<alpha> \\<up> \\<beta>\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>; Ord ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> (?\\<alpha> * ?\\<beta> < ?\\<alpha> * ?\\<gamma>) =\n                    (?\\<beta> < ?\\<gamma> \\<and> 0 < ?\\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<beta> * \\<alpha>", "by blast"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<beta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * 1 < \\<alpha> \\<up> \\<beta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = \\<alpha>\\<up>succ \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * \\<alpha> =\n    \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>", "by (simp add: \\<open>Ord \\<beta>\\<close>)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * \\<alpha> = \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * \\<alpha> = \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> \\<le> (SUP \\<xi> \\<in> elts \\<gamma>. \\<alpha>\\<up>\\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n    \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n    \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "have \"succ \\<beta> \\<in> elts \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta> \\<in> elts \\<gamma>", "using Limit.hyps Limit.prems Limit_def"], ["proof (prove)\nusing this:\n  Limit \\<gamma>\n  \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta> \\<in> elts \\<gamma>", "by auto"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ \\<beta> \\<in> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n    \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  ZFC_in_HOL.succ \\<beta> \\<in> elts \\<gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ \\<beta> \\<in> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n    \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "by (simp add: ZFC_in_HOL.Sup_upper)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n  \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n  \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "finally"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "have \"\\<alpha>\\<up>\\<beta> < (SUP \\<xi> \\<in> elts \\<gamma>. \\<alpha>\\<up>\\<xi>)\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "."], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<beta> \\<in> elts \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<xi>;\n        \\<beta> \\<in> elts (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<beta>\n                         < \\<alpha> \\<up>\n                           (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta>\n    < \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)", "using Limit.hyps oexp_Limit \\<open>\\<alpha> > 1\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> < \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<gamma>)\n  Limit \\<gamma>\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta>\n    < \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta>\n  < \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<gamma>. \\<xi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary oexp_less_iff:\n  assumes \"\\<alpha> > 0\" \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>\\<beta> < \\<alpha>\\<up>\\<gamma> \\<longleftrightarrow> \\<beta> \\<in> elts \\<gamma> \\<and> \\<alpha> > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>) =\n    (\\<beta> \\<in> elts \\<gamma> \\<and> 1 < \\<alpha>)", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma> \\<Longrightarrow>\n    \\<beta> \\<in> elts \\<gamma>\n 2. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma> \\<Longrightarrow>\n    1 < \\<alpha>\n 3. \\<lbrakk>\\<beta> \\<in> elts \\<gamma>; 1 < \\<alpha>\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "show \"\\<beta> \\<in> elts \\<gamma>\" \"1 < \\<alpha>\"\n    if \"\\<alpha>\\<up>\\<beta> < \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> elts \\<gamma> &&& 1 < \\<alpha>", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> \\<in> elts \\<gamma>\n 2. 1 < \\<alpha>", "show \"\\<alpha> > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < \\<alpha>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < \\<alpha> \\<Longrightarrow> False", "assume \"\\<not> \\<alpha> > 1\""], ["proof (state)\nthis:\n  \\<not> 1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<not> 1 < \\<alpha> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> 1 < \\<alpha>", "consider \"\\<alpha>=0\" | \"\\<alpha>=1\""], ["proof (prove)\nusing this:\n  \\<not> 1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> = 0 \\<Longrightarrow> thesis;\n     \\<alpha> = 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using \\<open>Ord \\<alpha>\\<close> less_V_def mem_0_Ord"], ["proof (prove)\nusing this:\n  \\<not> 1 < \\<alpha>\n  Ord \\<alpha>\n  ?x < ?y \\<equiv> ?x \\<le> ?y \\<and> ?x \\<noteq> ?y\n  \\<lbrakk>Ord ?k; ?k \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 \\<in> elts ?k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> = 0 \\<Longrightarrow> thesis;\n     \\<alpha> = 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>\\<alpha> = 0 \\<Longrightarrow> ?thesis;\n   \\<alpha> = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> 1 < \\<alpha> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<alpha> = 0 \\<Longrightarrow> ?thesis;\n   \\<alpha> = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<alpha> = 0 \\<Longrightarrow> ?thesis;\n   \\<alpha> = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. False", "by cases (use that \\<open>\\<alpha> > 0\\<close> \\<open>Ord \\<beta>\\<close> \\<open>Ord \\<gamma>\\<close> in \\<open>auto split: if_split_asm\\<close>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<in> elts \\<gamma>", "show \\<beta>: \"\\<beta> \\<in> elts \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> elts \\<gamma>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> elts \\<gamma> \\<Longrightarrow> False", "assume \"\\<beta> \\<notin> elts \\<gamma>\""], ["proof (state)\nthis:\n  \\<beta> \\<notin> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> elts \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<notin> elts \\<gamma>", "have \"\\<gamma> \\<le> \\<beta>\""], ["proof (prove)\nusing this:\n  \\<beta> \\<notin> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<le> \\<beta>", "by (meson Ord_linear_le Ord_mem_iff_lt assms less_le_not_le)"], ["proof (state)\nthis:\n  \\<gamma> \\<le> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> elts \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<le> \\<beta>", "consider \"\\<gamma> = \\<beta>\" | \"\\<gamma> < \\<beta>\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<le> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> = \\<beta> \\<Longrightarrow> thesis;\n     \\<gamma> < \\<beta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using less_V_def"], ["proof (prove)\nusing this:\n  \\<gamma> \\<le> \\<beta>\n  ?x < ?y \\<equiv> ?x \\<le> ?y \\<and> ?x \\<noteq> ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma> = \\<beta> \\<Longrightarrow> thesis;\n     \\<gamma> < \\<beta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<gamma> = \\<beta> \\<Longrightarrow> ?thesis;\n   \\<gamma> < \\<beta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> elts \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<gamma> = \\<beta> \\<Longrightarrow> ?thesis;\n   \\<gamma> < \\<beta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<gamma> = \\<beta> \\<Longrightarrow> ?thesis;\n   \\<gamma> < \\<beta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<gamma> = \\<beta> \\<Longrightarrow> False\n 2. \\<gamma> < \\<beta> \\<Longrightarrow> False", "case 1"], ["proof (state)\nthis:\n  \\<gamma> = \\<beta>\n\ngoal (2 subgoals):\n 1. \\<gamma> = \\<beta> \\<Longrightarrow> False\n 2. \\<gamma> < \\<beta> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<gamma> = \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<gamma> = \\<beta>\n\ngoal (1 subgoal):\n 1. False", "using that"], ["proof (prove)\nusing this:\n  \\<gamma> = \\<beta>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<gamma> < \\<beta> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> < \\<beta> \\<Longrightarrow> False", "case 2"], ["proof (state)\nthis:\n  \\<gamma> < \\<beta>\n\ngoal (1 subgoal):\n 1. \\<gamma> < \\<beta> \\<Longrightarrow> False", "with \\<open>\\<alpha> > 1\\<close>"], ["proof (chain)\npicking this:\n  1 < \\<alpha>\n  \\<gamma> < \\<beta>", "have \"\\<alpha>\\<up>\\<gamma> < \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\nusing this:\n  1 < \\<alpha>\n  \\<gamma> < \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> < \\<alpha> \\<up> \\<beta>", "by (simp add: Ord_mem_iff_lt assms oexp_less)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma> < \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<gamma> < \\<beta> \\<Longrightarrow> False", "with that"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>\n  \\<alpha> \\<up> \\<gamma> < \\<alpha> \\<up> \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>\n  \\<alpha> \\<up> \\<gamma> < \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<beta> \\<in> elts \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma> \\<Longrightarrow>\n  \\<beta> \\<in> elts \\<gamma>\n  \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma> \\<Longrightarrow>\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> elts \\<gamma>; 1 < \\<alpha>\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "show \"\\<alpha>\\<up>\\<beta> < \\<alpha>\\<up>\\<gamma>\" if \"\\<beta> \\<in> elts \\<gamma>\" \"1 < \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "using that"], ["proof (prove)\nusing this:\n  \\<beta> \\<in> elts \\<gamma>\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>", "by (simp add: assms oexp_less)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<beta> \\<in> elts \\<gamma>; 1 < \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<beta> < \\<alpha> \\<up> \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<omega>_oexp_iff [simp]: \"\\<lbrakk>Ord \\<alpha>; Ord \\<beta>\\<rbrakk> \\<Longrightarrow> \\<omega>\\<up>\\<alpha> = \\<omega>\\<up>\\<beta> \\<longleftrightarrow> \\<alpha>=\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord \\<alpha>; Ord \\<beta>\\<rbrakk>\n    \\<Longrightarrow> (\\<omega> \\<up> \\<alpha> = \\<omega> \\<up> \\<beta>) =\n                      (\\<alpha> = \\<beta>)", "by (metis Ord_\\<omega> Ord_linear \\<omega>_gt1 less_irrefl oexp_less)"], ["", "lemma Limit_oexp:\n  assumes \"Limit \\<gamma>\" \"Ord \\<alpha>\" \"\\<alpha> > 1\" shows \"Limit (\\<alpha>\\<up>\\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit (\\<alpha> \\<up> \\<gamma>)", "unfolding Limit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<gamma>) \\<and>\n    0 \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<and>\n    (\\<forall>y.\n        y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<longrightarrow>\n        ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>))", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. Ord (\\<alpha> \\<up> \\<gamma>)\n 2. 0 \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n 3. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "show O\\<alpha>\\<gamma>: \"Ord (\\<alpha>\\<up>\\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<gamma>)", "using Limit_def Ord_oexp \\<open>Limit \\<gamma>\\<close> assms(2)"], ["proof (prove)\nusing this:\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Ord (?\\<alpha> \\<up> ?\\<beta>)\n  Limit \\<gamma>\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  Ord (\\<alpha> \\<up> \\<gamma>)\n\ngoal (2 subgoals):\n 1. 0 \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n 2. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "show 0: \"0 \\<in> elts (\\<alpha>\\<up>\\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "using Limit_def oexp_Limit \\<open>Limit \\<gamma>\\<close> \\<open>\\<alpha> > 1\\<close>"], ["proof (prove)\nusing this:\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n  Limit \\<gamma>\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. 0 \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "by fastforce"], ["proof (state)\nthis:\n  0 \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"Ord \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<gamma>", "using Limit_def \\<open>Limit \\<gamma>\\<close>"], ["proof (prove)\nusing this:\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  Limit \\<gamma>\n\ngoal (1 subgoal):\n 1. Ord \\<gamma>", "by blast"], ["proof (state)\nthis:\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "assume x: \"x \\<in> elts (\\<alpha>\\<up>\\<gamma>)\""], ["proof (state)\nthis:\n  x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "with \\<open>Limit \\<gamma>\\<close> \\<open>\\<alpha> > 1\\<close>"], ["proof (chain)\npicking this:\n  Limit \\<gamma>\n  1 < \\<alpha>\n  x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "obtain \\<beta> where \"\\<beta> < \\<gamma>\" \"Ord \\<beta>\" \"Ord x\" and x\\<beta>: \"x \\<in> elts (\\<alpha>\\<up>\\<beta>)\""], ["proof (prove)\nusing this:\n  Limit \\<gamma>\n  1 < \\<alpha>\n  x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<lbrakk>\\<beta> < \\<gamma>; Ord \\<beta>; Ord x;\n         x \\<in> elts (\\<alpha> \\<up> \\<beta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (simp add: oexp_Limit split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<beta>.\n                \\<lbrakk>\\<beta> < \\<gamma>; Ord \\<beta>; Ord x;\n                 x \\<in> elts (\\<alpha> \\<up> \\<beta>)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     Limit \\<gamma>; 1 < \\<alpha>; \\<alpha> \\<noteq> 0;\n     \\<exists>xa\\<in>elts \\<gamma>.\n        x \\<in> elts (\\<alpha> \\<up> xa)\\<rbrakk>\n    \\<Longrightarrow> thesis", "using Ord_in_Ord OrdmemD \\<open>Ord \\<gamma>\\<close> O\\<alpha>\\<gamma> x"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  Ord \\<gamma>\n  Ord (\\<alpha> \\<up> \\<gamma>)\n  x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<beta>.\n                \\<lbrakk>\\<beta> < \\<gamma>; Ord \\<beta>; Ord x;\n                 x \\<in> elts (\\<alpha> \\<up> \\<beta>)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     Limit \\<gamma>; 1 < \\<alpha>; \\<alpha> \\<noteq> 0;\n     \\<exists>xa\\<in>elts \\<gamma>.\n        x \\<in> elts (\\<alpha> \\<up> xa)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<beta> < \\<gamma>\n  Ord \\<beta>\n  Ord x\n  x \\<in> elts (\\<alpha> \\<up> \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  \\<beta> < \\<gamma>\n  Ord \\<beta>\n  Ord x\n  x \\<in> elts (\\<alpha> \\<up> \\<beta>)", "have O\\<alpha>\\<beta>: \"Ord (\\<alpha>\\<up>\\<beta>)\""], ["proof (prove)\nusing this:\n  \\<beta> < \\<gamma>\n  Ord \\<beta>\n  Ord x\n  x \\<in> elts (\\<alpha> \\<up> \\<beta>)\n\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<beta>)", "using Ord_oexp assms(2)"], ["proof (prove)\nusing this:\n  \\<beta> < \\<gamma>\n  Ord \\<beta>\n  Ord x\n  x \\<in> elts (\\<alpha> \\<up> \\<beta>)\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Ord (?\\<alpha> \\<up> ?\\<beta>)\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. Ord (\\<alpha> \\<up> \\<beta>)", "by blast"], ["proof (state)\nthis:\n  Ord (\\<alpha> \\<up> \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<beta> \\<in> elts \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<in> elts \\<gamma>", "by (simp add: Ord_mem_iff_lt \\<open>Ord \\<beta>\\<close> \\<open>Ord \\<gamma>\\<close> \\<open>\\<beta> < \\<gamma>\\<close>)"], ["proof (state)\nthis:\n  \\<beta> \\<in> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "moreover"], ["proof (state)\nthis:\n  \\<beta> \\<in> elts \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<alpha> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0", "using \\<open>\\<alpha> > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> elts \\<gamma>\n  \\<alpha> \\<noteq> 0", "have \\<alpha>\\<beta>\\<gamma>: \"\\<alpha>\\<up>\\<beta> \\<le> \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\nusing this:\n  \\<beta> \\<in> elts \\<gamma>\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "by (simp add: Sup_upper oexp_Limit \\<open>Limit \\<gamma>\\<close>)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"succ x \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x \\<le> \\<alpha> \\<up> \\<beta>", "by (simp add: OrdmemD O\\<alpha>\\<beta> \\<open>Ord x\\<close> succ_le_iff x\\<beta>)"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  ZFC_in_HOL.succ x \\<le> \\<alpha> \\<up> \\<beta>", "consider \"succ x < \\<alpha>\\<up>\\<beta>\" | \"succ x = \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n             thesis;\n     ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using le_neq_trans"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x \\<le> \\<alpha> \\<up> \\<beta>\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n             thesis;\n     ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n           ?thesis;\n   ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts (\\<alpha> \\<up> \\<gamma>) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n           ?thesis;\n   ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"succ x \\<in> elts (\\<alpha>\\<up>\\<gamma>)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n           ?thesis;\n   ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n 2. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "case 1"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta>\n\ngoal (2 subgoals):\n 1. ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n 2. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "with \\<alpha>\\<beta>\\<gamma>"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "using O\\<alpha>\\<beta> Ord_mem_iff_lt \\<open>Ord x\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<beta>\n  Ord (\\<alpha> \\<up> \\<beta>)\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  Ord x\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "case 2"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta>", "have \"succ \\<beta> < \\<gamma>\""], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta> < \\<gamma>", "using Limit_def OrdmemD \\<open>\\<beta> \\<in> elts \\<gamma>\\<close> assms(1)"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  \\<beta> \\<in> elts \\<gamma>\n  Limit \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta> < \\<gamma>", "by auto"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ \\<beta> < \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have ge1: \"1 \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> \\<alpha> \\<up> \\<beta>", "by (metis \"2\" Ord_0 \\<open>Ord x\\<close> le_0 le_succ_iff one_V_def)"], ["proof (state)\nthis:\n  1 \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"succ x < succ (\\<alpha>\\<up>\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x < ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)", "using \"2\" O\\<alpha>\\<beta> succ_le_iff"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta>\n  Ord (\\<alpha> \\<up> \\<beta>)\n  \\<lbrakk>Ord ?i; Ord ?j\\<rbrakk>\n  \\<Longrightarrow> (ZFC_in_HOL.succ ?i \\<le> ?j) = (?i < ?j)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x < ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)", "by auto"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x < ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "also"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x < ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<dots> \\<le> (\\<alpha>\\<up>\\<beta>) + (\\<alpha>\\<up>\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n    \\<le> \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta>", "using ge1"], ["proof (prove)\nusing this:\n  1 \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n    \\<le> \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta>", "by (simp add: succ_eq_add1)"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n  \\<le> \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "also"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ (\\<alpha> \\<up> \\<beta>)\n  \\<le> \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<dots> = (\\<alpha>\\<up>\\<beta>) * succ (succ 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta> =\n    \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)", "by (simp add: mult_succ)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta> =\n  \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> + \\<alpha> \\<up> \\<beta> =\n  \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<dots> \\<le> (\\<alpha>\\<up>\\<beta>) * \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n    \\<le> \\<alpha> \\<up> \\<beta> * \\<alpha>", "using O\\<alpha>\\<beta> Ord_succ assms(2) assms(3) one_V_def succ_le_iff"], ["proof (prove)\nusing this:\n  Ord (\\<alpha> \\<up> \\<beta>)\n  Ord ?x \\<Longrightarrow> Ord (ZFC_in_HOL.succ ?x)\n  Ord \\<alpha>\n  1 < \\<alpha>\n  1 \\<equiv> ZFC_in_HOL.succ 0\n  \\<lbrakk>Ord ?i; Ord ?j\\<rbrakk>\n  \\<Longrightarrow> (ZFC_in_HOL.succ ?i \\<le> ?j) = (?i < ?j)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n    \\<le> \\<alpha> \\<up> \\<beta> * \\<alpha>", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n  \\<le> \\<alpha> \\<up> \\<beta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * ZFC_in_HOL.succ (ZFC_in_HOL.succ 0)\n  \\<le> \\<alpha> \\<up> \\<beta> * \\<alpha>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<dots> = \\<alpha>\\<up>succ \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<beta> * \\<alpha> =\n    \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>", "by (simp add: \\<open>Ord \\<beta>\\<close>)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * \\<alpha> = \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<beta> * \\<alpha> = \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "have \"\\<dots> \\<le> \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>", "by (meson Limit_def \\<open>\\<beta> \\<in> elts \\<gamma>\\<close> assms dual_order.order_iff_strict oexp_less)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta> \\<le> \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = \\<alpha> \\<up> \\<beta> \\<Longrightarrow>\n    ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "finally"], ["proof (chain)\npicking this:\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ x < \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)", "by (simp add: \"2\" O\\<alpha>\\<beta> O\\<alpha>\\<gamma> Ord_mem_iff_lt)"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x \\<in> elts (\\<alpha> \\<up> \\<gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oexp_mono:\n  assumes \\<alpha>: \"Ord \\<alpha>\" \"\\<alpha> \\<noteq> 0\" and \\<beta>: \"Ord \\<beta>\" \"\\<gamma> \\<sqsubseteq> \\<beta>\" shows \"\\<alpha>\\<up>\\<gamma> \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>", "using \\<beta>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  \\<gamma> \\<sqsubseteq> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<gamma> \\<sqsubseteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<gamma> \\<sqsubseteq> \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<alpha>';\n        \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case 0"], ["proof (state)\nthis:\n  \\<gamma> \\<sqsubseteq> 0\n\ngoal (3 subgoals):\n 1. \\<gamma> \\<sqsubseteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<gamma> \\<sqsubseteq> \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<alpha>';\n        \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<sqsubseteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<gamma> \\<sqsubseteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> 0", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> 0\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<gamma> \\<sqsubseteq> \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<alpha>';\n        \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<gamma> \\<sqsubseteq> \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<alpha>';\n        \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (succ \\<beta>)"], ["proof (state)\nthis:\n  Ord \\<beta>\n  \\<gamma> \\<sqsubseteq> \\<beta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>\n  \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<beta>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<gamma> \\<sqsubseteq> \\<alpha>' \\<Longrightarrow>\n        \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<alpha>';\n        \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "with \\<alpha> le_mult"], ["proof (chain)\npicking this:\n  Ord \\<alpha>\n  \\<alpha> \\<noteq> 0\n  \\<lbrakk>Ord ?\\<beta>; ?\\<beta> \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?\\<alpha> \\<le> ?\\<alpha> * ?\\<beta>\n  Ord \\<beta>\n  \\<gamma> \\<sqsubseteq> \\<beta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>\n  \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<beta>", "show ?case"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  \\<alpha> \\<noteq> 0\n  \\<lbrakk>Ord ?\\<beta>; ?\\<beta> \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?\\<alpha> \\<le> ?\\<alpha> * ?\\<beta>\n  Ord \\<beta>\n  \\<gamma> \\<sqsubseteq> \\<beta> \\<Longrightarrow>\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>\n  \\<gamma> \\<sqsubseteq> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>", "by (auto simp: le_TC_succ)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ZFC_in_HOL.succ \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; \\<gamma> \\<sqsubseteq> ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ?\\<xi>\n  \\<gamma> \\<sqsubseteq> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; \\<gamma> \\<sqsubseteq> ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ?\\<xi>\n  \\<gamma> \\<sqsubseteq> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "have \"\\<alpha>\\<up>\\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)\""], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; \\<gamma> \\<sqsubseteq> ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ?\\<xi>\n  \\<gamma> \\<sqsubseteq> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)", "using Limit.hyps Ord_less_TC_mem \\<open>\\<alpha> \\<noteq> 0\\<close> le_TC_def"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<mu>; \\<gamma> \\<sqsubseteq> ?\\<xi>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> ?\\<xi>\n  \\<gamma> \\<sqsubseteq> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n  Limit \\<mu>\n  \\<lbrakk>Ord ?\\<alpha>; ?\\<beta> \\<sqsubset> ?\\<alpha>\\<rbrakk>\n  \\<Longrightarrow> ?\\<beta> \\<in> elts ?\\<alpha>\n  \\<alpha> \\<noteq> 0\n  ?x \\<sqsubseteq> ?y \\<equiv> ?x \\<sqsubset> ?y \\<or> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)", "by (auto simp: oexp_Limit Limit_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>';\n            \\<gamma> \\<sqsubseteq> \\<xi>\\<rbrakk>\n           \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                             \\<le> \\<alpha> \\<up> \\<xi>;\n        \\<gamma> \\<sqsubseteq>\n        (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<gamma>\n                         \\<le> \\<alpha> \\<up>\n                               (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma>\n    \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "using \\<alpha>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> \\<gamma> \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` elts \\<mu>)\n  Ord \\<alpha>\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma>\n    \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "by (simp add: oexp_Limit Limit.hyps)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<gamma>\n  \\<le> \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oexp_mono_le:\n  assumes \"\\<gamma> \\<le> \\<beta>\" \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>\\<gamma> \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<gamma> \\<le> \\<alpha> \\<up> \\<beta>", "by (simp add: assms oexp_mono vle2 vle_iff_le_Ord)"], ["", "lemma oexp_sup:\n  assumes \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>(\\<beta> \\<squnion> \\<gamma>) = \\<alpha>\\<up>\\<beta> \\<squnion> \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> \\<squnion> \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> \\<squnion> \\<alpha> \\<up> \\<gamma>", "by (metis Ord_linear_le assms oexp_mono_le sup.absorb2 sup.orderE)"], ["", "lemma oexp_Sup:\n  assumes \\<alpha>: \"\\<alpha> \\<noteq> 0\" \"Ord \\<alpha>\" and X: \"X \\<subseteq> ON\" \"small X\" \"X \\<noteq> {}\" shows \"\\<alpha>\\<up>\\<Squnion> X = \\<Squnion> ((\\<up>) \\<alpha> ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X = \\<Squnion> ((\\<up>) \\<alpha> ` X)", "proof (rule order_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. \\<Squnion> ((\\<up>) \\<alpha> ` X) \\<le> \\<alpha> \\<up> \\<Squnion> X", "show \"\\<Squnion> ((\\<up>) \\<alpha> ` X) \\<le> \\<alpha>\\<up>\\<Squnion> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<up>) \\<alpha> ` X) \\<le> \\<alpha> \\<up> \\<Squnion> X", "by (metis ON_imp_Ord Ord_Sup ZFC_in_HOL.Sup_upper assms cSUP_least oexp_mono_le)"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) \\<alpha> ` X) \\<le> \\<alpha> \\<up> \\<Squnion> X\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "have \"Ord (Sup X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<Squnion> X)", "using Ord_Sup X"], ["proof (prove)\nusing this:\n  (\\<And>x. x \\<in> ?X \\<Longrightarrow> Ord x) \\<Longrightarrow>\n  Ord (\\<Squnion> ?X)\n  X \\<subseteq> ON\n  small X\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Ord (\\<Squnion> X)", "by auto"], ["proof (state)\nthis:\n  Ord (\\<Squnion> X)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "then"], ["proof (chain)\npicking this:\n  Ord (\\<Squnion> X)", "show \"\\<alpha>\\<up>\\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\""], ["proof (prove)\nusing this:\n  Ord (\\<Squnion> X)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "proof (cases rule: Ord_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<Squnion> X = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. \\<And>l.\n       \\<lbrakk>Ord l; ZFC_in_HOL.succ l = \\<Squnion> X\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<Squnion> X\n                         \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 3. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "case 0"], ["proof (state)\nthis:\n  \\<Squnion> X = 0\n\ngoal (3 subgoals):\n 1. \\<Squnion> X = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. \\<And>l.\n       \\<lbrakk>Ord l; ZFC_in_HOL.succ l = \\<Squnion> X\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<Squnion> X\n                         \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 3. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "then"], ["proof (chain)\npicking this:\n  \\<Squnion> X = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Squnion> X = 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "using X dual_order.antisym"], ["proof (prove)\nusing this:\n  \\<Squnion> X = 0\n  X \\<subseteq> ON\n  small X\n  X \\<noteq> {}\n  \\<lbrakk>?b \\<le> ?a; ?a \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "by fastforce"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>Ord l; ZFC_in_HOL.succ l = \\<Squnion> X\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<Squnion> X\n                         \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>Ord l; ZFC_in_HOL.succ l = \\<Squnion> X\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<Squnion> X\n                         \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "case (succ \\<beta>)"], ["proof (state)\nthis:\n  Ord \\<beta>\n  ZFC_in_HOL.succ \\<beta> = \\<Squnion> X\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>Ord l; ZFC_in_HOL.succ l = \\<Squnion> X\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up> \\<Squnion> X\n                         \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n 2. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "then"], ["proof (chain)\npicking this:\n  Ord \\<beta>\n  ZFC_in_HOL.succ \\<beta> = \\<Squnion> X", "show ?thesis"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  ZFC_in_HOL.succ \\<beta> = \\<Squnion> X\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "using ZFC_in_HOL.Sup_upper X succ_in_Sup_Ord"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n  ZFC_in_HOL.succ \\<beta> = \\<Squnion> X\n  \\<lbrakk>?x \\<in> ?A; small ?A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<le> \\<Squnion> ?A\n  X \\<subseteq> ON\n  small X\n  X \\<noteq> {}\n  \\<lbrakk>ZFC_in_HOL.succ ?\\<beta> = \\<Squnion> ?A; small ?A;\n   ?A \\<subseteq> ON; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ZFC_in_HOL.succ ?\\<beta> \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n\ngoal (1 subgoal):\n 1. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "case limit"], ["proof (state)\nthis:\n  Limit (\\<Squnion> X)\n\ngoal (1 subgoal):\n 1. Limit (\\<Squnion> X) \\<Longrightarrow>\n    \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)", "proof (clarsimp simp: assms oexp_Limit limit)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb xc.\n       \\<lbrakk>x \\<in> elts (\\<alpha> \\<up> xb); xc \\<in> X;\n        xb \\<in> elts xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>X. x \\<in> elts (\\<alpha> \\<up> xa)", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb xc.\n       \\<lbrakk>x \\<in> elts (\\<alpha> \\<up> xb); xc \\<in> X;\n        xb \\<in> elts xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>X. x \\<in> elts (\\<alpha> \\<up> xa)", "assume x: \"x \\<in> elts (\\<alpha> \\<up> y)\" and \"z \\<in> X\" \"y \\<in> elts z\""], ["proof (state)\nthis:\n  x \\<in> elts (\\<alpha> \\<up> y)\n  z \\<in> X\n  y \\<in> elts z\n\ngoal (1 subgoal):\n 1. \\<And>x xb xc.\n       \\<lbrakk>x \\<in> elts (\\<alpha> \\<up> xb); xc \\<in> X;\n        xb \\<in> elts xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>X. x \\<in> elts (\\<alpha> \\<up> xa)", "then"], ["proof (chain)\npicking this:\n  x \\<in> elts (\\<alpha> \\<up> y)\n  z \\<in> X\n  y \\<in> elts z", "have \"\\<alpha> \\<up> y \\<le> \\<alpha> \\<up> z\""], ["proof (prove)\nusing this:\n  x \\<in> elts (\\<alpha> \\<up> y)\n  z \\<in> X\n  y \\<in> elts z\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> y \\<le> \\<alpha> \\<up> z", "by (meson ON_imp_Ord Ord_in_Ord OrdmemD \\<alpha> \\<open>X \\<subseteq> ON\\<close> le_less oexp_mono_le)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> y \\<le> \\<alpha> \\<up> z\n\ngoal (1 subgoal):\n 1. \\<And>x xb xc.\n       \\<lbrakk>x \\<in> elts (\\<alpha> \\<up> xb); xc \\<in> X;\n        xb \\<in> elts xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>X. x \\<in> elts (\\<alpha> \\<up> xa)", "with x"], ["proof (chain)\npicking this:\n  x \\<in> elts (\\<alpha> \\<up> y)\n  \\<alpha> \\<up> y \\<le> \\<alpha> \\<up> z", "have \"x \\<in> elts (\\<alpha> \\<up> z)\""], ["proof (prove)\nusing this:\n  x \\<in> elts (\\<alpha> \\<up> y)\n  \\<alpha> \\<up> y \\<le> \\<alpha> \\<up> z\n\ngoal (1 subgoal):\n 1. x \\<in> elts (\\<alpha> \\<up> z)", "by blast"], ["proof (state)\nthis:\n  x \\<in> elts (\\<alpha> \\<up> z)\n\ngoal (1 subgoal):\n 1. \\<And>x xb xc.\n       \\<lbrakk>x \\<in> elts (\\<alpha> \\<up> xb); xc \\<in> X;\n        xb \\<in> elts xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>X. x \\<in> elts (\\<alpha> \\<up> xa)", "then"], ["proof (chain)\npicking this:\n  x \\<in> elts (\\<alpha> \\<up> z)", "show \"\\<exists>u\\<in>X. x \\<in> elts (\\<alpha> \\<up> u)\""], ["proof (prove)\nusing this:\n  x \\<in> elts (\\<alpha> \\<up> z)\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>X. x \\<in> elts (\\<alpha> \\<up> u)", "using \\<open>z \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> elts (\\<alpha> \\<up> z)\n  z \\<in> X\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>X. x \\<in> elts (\\<alpha> \\<up> u)", "by blast"], ["proof (state)\nthis:\n  \\<exists>u\\<in>X. x \\<in> elts (\\<alpha> \\<up> u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> X \\<le> \\<Squnion> ((\\<up>) \\<alpha> ` X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma omega_le_Limit:\n  assumes \"Limit \\<mu>\" shows \"\\<omega> \\<le> \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<le> \\<mu>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<omega> \\<Longrightarrow> x \\<in> elts \\<mu>", "fix \\<rho>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<omega> \\<Longrightarrow> x \\<in> elts \\<mu>", "assume \"\\<rho> \\<in> elts \\<omega>\""], ["proof (state)\nthis:\n  \\<rho> \\<in> elts \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<omega> \\<Longrightarrow> x \\<in> elts \\<mu>", "then"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> elts \\<omega>", "obtain n where \"\\<rho> = ord_of_nat n\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> elts \\<omega>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<rho> = ord_of_nat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using elts_\\<omega>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> elts \\<omega>\n  elts \\<omega> = {\\<alpha>. \\<exists>n. \\<alpha> = ord_of_nat n}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<rho> = ord_of_nat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<rho> = ord_of_nat n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<omega> \\<Longrightarrow> x \\<in> elts \\<mu>", "have \"ord_of_nat n \\<in> elts \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_of_nat n \\<in> elts \\<mu>", "by (induction n) (use Limit_def assms in auto)"], ["proof (state)\nthis:\n  ord_of_nat n \\<in> elts \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<omega> \\<Longrightarrow> x \\<in> elts \\<mu>", "then"], ["proof (chain)\npicking this:\n  ord_of_nat n \\<in> elts \\<mu>", "show \"\\<rho> \\<in> elts \\<mu>\""], ["proof (prove)\nusing this:\n  ord_of_nat n \\<in> elts \\<mu>\n\ngoal (1 subgoal):\n 1. \\<rho> \\<in> elts \\<mu>", "using \\<open>\\<rho> = ord_of_nat n\\<close>"], ["proof (prove)\nusing this:\n  ord_of_nat n \\<in> elts \\<mu>\n  \\<rho> = ord_of_nat n\n\ngoal (1 subgoal):\n 1. \\<rho> \\<in> elts \\<mu>", "by auto"], ["proof (state)\nthis:\n  \\<rho> \\<in> elts \\<mu>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_omega_power [simp]:\n  assumes \"1 < n\" \"n \\<in> elts \\<omega>\" shows \"n\\<up>\\<omega> = \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<up> \\<omega> = \\<omega>", "proof (rule order_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<up> \\<omega> \\<le> \\<omega>\n 2. \\<omega> \\<le> n \\<up> \\<omega>", "have \"\\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>) \\<le> \\<omega>\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>) \\<le> \\<omega>", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Squnion> ((\\<up>) (ord_of_nat 0) ` elts \\<omega>) \\<le> \\<omega>\n 2. \\<And>k.\n       \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>)\n       \\<le> \\<omega> \\<Longrightarrow>\n       \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>)\n       \\<le> \\<omega>", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Squnion> ((\\<up>) (ord_of_nat 0) ` elts \\<omega>) \\<le> \\<omega>\n 2. \\<And>k.\n       \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>)\n       \\<le> \\<omega> \\<Longrightarrow>\n       \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>)\n       \\<le> \\<omega>", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<up>) (ord_of_nat 0) ` elts \\<omega>) \\<le> \\<omega>", "by auto"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) (ord_of_nat 0) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>)\n       \\<le> \\<omega> \\<Longrightarrow>\n       \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>)\n       \\<le> \\<omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>)\n       \\<le> \\<omega> \\<Longrightarrow>\n       \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>)\n       \\<le> \\<omega>", "case (Suc k)"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>)\n       \\<le> \\<omega> \\<Longrightarrow>\n       \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>)\n       \\<le> \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>) \\<le> \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  \\<Squnion> ((\\<up>) (ord_of_nat k) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>) \\<le> \\<omega>", "by (metis Ord_\\<omega> OrdmemD Sup_eq_0_iff ZFC_in_HOL.SUP_le_iff le_0 le_less omega_closed_oexp ord_of_nat_\\<omega>)"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) (ord_of_nat (Suc k)) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) (ord_of_nat ?k) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal (2 subgoals):\n 1. n \\<up> \\<omega> \\<le> \\<omega>\n 2. \\<omega> \\<le> n \\<up> \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<Squnion> ((\\<up>) (ord_of_nat ?k) ` elts \\<omega>) \\<le> \\<omega>", "show \"n\\<up>\\<omega> \\<le> \\<omega>\""], ["proof (prove)\nusing this:\n  \\<Squnion> ((\\<up>) (ord_of_nat ?k) ` elts \\<omega>) \\<le> \\<omega>\n\ngoal (1 subgoal):\n 1. n \\<up> \\<omega> \\<le> \\<omega>", "using assms"], ["proof (prove)\nusing this:\n  \\<Squnion> ((\\<up>) (ord_of_nat ?k) ` elts \\<omega>) \\<le> \\<omega>\n  1 < n\n  n \\<in> elts \\<omega>\n\ngoal (1 subgoal):\n 1. n \\<up> \\<omega> \\<le> \\<omega>", "by (simp add: elts_\\<omega> oexp_Limit) metis"], ["proof (state)\nthis:\n  n \\<up> \\<omega> \\<le> \\<omega>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> n \\<up> \\<omega>", "show \"\\<omega> \\<le> n\\<up>\\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<le> n \\<up> \\<omega>", "using Ord_in_Ord assms le_oexp'"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  1 < n\n  n \\<in> elts \\<omega>\n  \\<lbrakk>Ord ?\\<alpha>; 1 < ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?\\<beta> \\<le> ?\\<alpha> \\<up> ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> n \\<up> \\<omega>", "by blast"], ["proof (state)\nthis:\n  \\<omega> \\<le> n \\<up> \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition oexp_add:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>(\\<beta> + \\<gamma>) = \\<alpha>\\<up>\\<beta> * \\<alpha>\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "proof (cases \\<open>\\<alpha> = 0\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>\n 2. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "case True"], ["proof (state)\nthis:\n  \\<alpha> = 0\n\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>\n 2. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<alpha> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> = 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "using assms"], ["proof (prove)\nusing this:\n  \\<alpha> = 0\n  Ord \\<alpha>\n  Ord \\<beta>\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "using \\<open>Ord \\<gamma>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<alpha> \\<up> (\\<beta> + 0) = \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> + \\<alpha>') =\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + ZFC_in_HOL.succ \\<alpha>') =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<alpha> \\<up> (\\<beta> + 0) = \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> + \\<alpha>') =\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + ZFC_in_HOL.succ \\<alpha>') =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + 0) = \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> 0", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + 0) = \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> 0\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> + \\<alpha>') =\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + ZFC_in_HOL.succ \\<alpha>') =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> + \\<alpha>') =\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + ZFC_in_HOL.succ \\<alpha>') =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (succ \\<xi>)"], ["proof (state)\nthis:\n  Ord \\<xi>\n  \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> + \\<alpha>') =\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + ZFC_in_HOL.succ \\<alpha>') =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up> ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Ord \\<xi>\n  \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>", "show ?case"], ["proof (prove)\nusing this:\n  Ord \\<xi>\n  \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + ZFC_in_HOL.succ \\<xi>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> ZFC_in_HOL.succ \\<xi>", "using \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<xi>\n  \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + ZFC_in_HOL.succ \\<xi>) =\n    \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> ZFC_in_HOL.succ \\<xi>", "by (auto simp: plus_V_succ_right mult.assoc)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + ZFC_in_HOL.succ \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> ZFC_in_HOL.succ \\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> + ?\\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<alpha>\\<up>(\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) = (SUP \\<xi>\\<in>elts (\\<beta> + \\<mu>). \\<alpha>\\<up>\\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))", "by (simp add: Limit.hyps oexp_Limit assms False)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = (SUP \\<xi> \\<in> {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}. \\<alpha>\\<up>(\\<beta> + \\<xi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)) =\n    (SUP \\<xi>\\<in>{\\<xi>.\n                    Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n        \\<alpha> \\<up> (\\<beta> + \\<xi>))", "proof (rule Sup_eq_Sup)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n    {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}\n    \\<subseteq> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\n 2. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 3. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "show \"(\\<lambda>\\<xi>. \\<alpha>\\<up>(\\<beta> + \\<xi>)) ` {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>} \\<subseteq> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n    {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}\n    \\<subseteq> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)", "using Limit.hyps Limit_def Ord_mem_iff_lt imageI"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  ?x \\<in> ?A \\<Longrightarrow> ?f ?x \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n    {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}\n    \\<subseteq> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n  {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}\n  \\<subseteq> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\n\ngoal (2 subgoals):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 2. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 2. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "assume \"x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\""], ["proof (state)\nthis:\n  x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\n\ngoal (2 subgoals):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 2. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "then"], ["proof (chain)\npicking this:\n  x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)", "obtain \\<xi> where \\<xi>: \"\\<xi> \\<in> elts (\\<beta> + \\<mu>)\" and x: \"x = \\<alpha>\\<up>\\<xi>\""], ["proof (prove)\nusing this:\n  x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<xi>.\n        \\<lbrakk>\\<xi> \\<in> elts (\\<beta> + \\<mu>);\n         x = \\<alpha> \\<up> \\<xi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<xi> \\<in> elts (\\<beta> + \\<mu>)\n  x = \\<alpha> \\<up> \\<xi>\n\ngoal (2 subgoals):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 2. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "have \"\\<exists>\\<gamma>. Ord \\<gamma> \\<and> \\<gamma> < \\<mu> \\<and> \\<alpha>\\<up>\\<xi> \\<le> \\<alpha>\\<up>(\\<beta> + \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "proof (rule mem_plus_V_E [OF \\<xi>])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<xi> \\<in> elts \\<beta> \\<Longrightarrow>\n    \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n 2. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "assume \"\\<xi> \\<in> elts \\<beta>\""], ["proof (state)\nthis:\n  \\<xi> \\<in> elts \\<beta>\n\ngoal (2 subgoals):\n 1. \\<xi> \\<in> elts \\<beta> \\<Longrightarrow>\n    \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n 2. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "then"], ["proof (chain)\npicking this:\n  \\<xi> \\<in> elts \\<beta>", "have \"\\<alpha>\\<up>\\<xi> \\<le> \\<alpha>\\<up>\\<beta>\""], ["proof (prove)\nusing this:\n  \\<xi> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> \\<beta>", "by (meson arg_subset_TC assms False le_TC_def less_TC_def oexp_mono vsubsetD)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (2 subgoals):\n 1. \\<xi> \\<in> elts \\<beta> \\<Longrightarrow>\n    \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n 2. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "with zero_less_Limit [OF \\<open>Limit \\<mu>\\<close>]"], ["proof (chain)\npicking this:\n  0 < \\<mu>\n  \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> \\<beta>", "show \"\\<exists>\\<gamma>. Ord \\<gamma> \\<and> \\<gamma> < \\<mu> \\<and> \\<alpha>\\<up>\\<xi> \\<le> \\<alpha>\\<up>(\\<beta> + \\<gamma>)\""], ["proof (prove)\nusing this:\n  0 < \\<mu>\n  \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "by force"], ["proof (state)\nthis:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "fix \\<delta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "assume \"\\<delta> \\<in> elts \\<mu>\" and \"\\<xi> = \\<beta> + \\<delta>\""], ["proof (state)\nthis:\n  \\<delta> \\<in> elts \\<mu>\n  \\<xi> = \\<beta> + \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "have \"Ord \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<delta>", "using Limit.hyps Limit_def Ord_in_Ord \\<open>\\<delta> \\<in> elts \\<mu>\\<close>"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<delta> \\<in> elts \\<mu>\n\ngoal (1 subgoal):\n 1. Ord \\<delta>", "by blast"], ["proof (state)\nthis:\n  Ord \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "moreover"], ["proof (state)\nthis:\n  Ord \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "have \"\\<delta> < \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> < \\<mu>", "using Limit.hyps Limit_def OrdmemD \\<open>\\<delta> \\<in> elts \\<mu>\\<close>"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; ?j \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> ?j < ?k\n  \\<delta> \\<in> elts \\<mu>\n\ngoal (1 subgoal):\n 1. \\<delta> < \\<mu>", "by auto"], ["proof (state)\nthis:\n  \\<delta> < \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> elts \\<mu>; \\<xi> = \\<beta> + z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<gamma>.\n                            Ord \\<gamma> \\<and>\n                            \\<gamma> < \\<mu> \\<and>\n                            \\<alpha> \\<up> \\<xi>\n                            \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "ultimately"], ["proof (chain)\npicking this:\n  Ord \\<delta>\n  \\<delta> < \\<mu>", "show \"\\<exists>\\<gamma>. Ord \\<gamma> \\<and> \\<gamma> < \\<mu> \\<and> \\<alpha>\\<up>\\<xi> \\<le> \\<alpha>\\<up>(\\<beta> + \\<gamma>)\""], ["proof (prove)\nusing this:\n  Ord \\<delta>\n  \\<delta> < \\<mu>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "using \\<open>\\<xi> = \\<beta> + \\<delta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<delta>\n  \\<delta> < \\<mu>\n  \\<xi> = \\<beta> + \\<delta>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       Ord \\<gamma> \\<and>\n       \\<gamma> < \\<mu> \\<and>\n       \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n\ngoal (2 subgoals):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))\n 2. \\<And>x.\n       x \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                      {\\<xi>.\n                       Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n          x \\<le> y", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)", "show \"\\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha>\\<up>(\\<beta> + \\<xi>)) ` {\\<xi>. Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}. x \\<le> y\""], ["proof (prove)\nusing this:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                   {\\<xi>.\n                    Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n       x \\<le> y", "using x"], ["proof (prove)\nusing this:\n  \\<exists>\\<gamma>.\n     Ord \\<gamma> \\<and>\n     \\<gamma> < \\<mu> \\<and>\n     \\<alpha> \\<up> \\<xi> \\<le> \\<alpha> \\<up> (\\<beta> + \\<gamma>)\n  x = \\<alpha> \\<up> \\<xi>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                   {\\<xi>.\n                    Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n       x \\<le> y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>(\\<lambda>\\<xi>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) `\n                 {\\<xi>.\n                  Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n     x \\<le> y\n\ngoal (1 subgoal):\n 1. small ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>))", "qed auto"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)) =\n  (SUP \\<xi>\\<in>{\\<xi>.\n                  Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n      \\<alpha> \\<up> (\\<beta> + \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<up>) \\<alpha> ` elts (\\<beta> + \\<mu>)) =\n  (SUP \\<xi>\\<in>{\\<xi>.\n                  Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n      \\<alpha> \\<up> (\\<beta> + \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha>\\<up>(\\<beta> + \\<xi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>{\\<xi>.\n                    Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n        \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n    (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>))", "using \\<open>Limit \\<mu>\\<close>"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>{\\<xi>.\n                    Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n        \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n    (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>))", "by (simp add: Ord_Collect_lt Limit_def)"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>{\\<xi>.\n                  Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n      \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>{\\<xi>.\n                  Ord \\<xi> \\<and> \\<beta> + \\<xi> < \\<beta> + \\<mu>}.\n      \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha>\\<up>\\<beta> * \\<alpha>\\<up>\\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n    (SUP \\<xi>\\<in>elts \\<mu>.\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>)", "using Limit.IH"], ["proof (prove)\nusing this:\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> + ?\\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n    (SUP \\<xi>\\<in>elts \\<mu>.\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>)", "by auto"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> + \\<xi>)) =\n  (SUP \\<xi>\\<in>elts \\<mu>. \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = \\<alpha>\\<up>\\<beta> * \\<alpha>\\<up>(SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>elts \\<mu>.\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>) =\n    \\<alpha> \\<up> \\<beta> *\n    \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "using \\<open>\\<alpha> \\<noteq> 0\\<close> Limit.hyps"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> 0\n  Limit \\<mu>\n\ngoal (1 subgoal):\n 1. (SUP \\<xi>\\<in>elts \\<mu>.\n        \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>) =\n    \\<alpha> \\<up> \\<beta> *\n    \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "by (simp add: image_image oexp_Limit mult_Sup_distrib)"], ["proof (state)\nthis:\n  (SUP \\<xi>\\<in>elts \\<mu>.\n      \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> + \\<xi>) =\n           \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> + (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         \\<alpha> \\<up> \\<beta> *\n                         \\<alpha> \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "finally"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    \\<alpha> \\<up> \\<beta> *\n    \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "."], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> + \\<gamma>) =\n  \\<alpha> \\<up> \\<beta> * \\<alpha> \\<up> \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition oexp_mult:\n  assumes \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord \\<gamma>\" shows \"\\<alpha>\\<up>(\\<beta> * \\<gamma>) = (\\<alpha>\\<up>\\<beta>)\\<up>\\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "proof (cases \"\\<alpha> = 0 \\<or> \\<beta> = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<or> \\<beta> = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>\n 2. \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "case True"], ["proof (state)\nthis:\n  \\<alpha> = 0 \\<or> \\<beta> = 0\n\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<or> \\<beta> = 0 \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>\n 2. \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "then"], ["proof (chain)\npicking this:\n  \\<alpha> = 0 \\<or> \\<beta> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> = 0 \\<or> \\<beta> = 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "by (auto simp: \\<open>Ord \\<beta>\\<close> \\<open>Ord \\<gamma>\\<close>)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "using \\<open>Ord \\<gamma>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<alpha> \\<up> (\\<beta> * 0) = (\\<alpha> \\<up> \\<beta>) \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> * \\<alpha>') =\n        (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * ZFC_in_HOL.succ \\<alpha>') =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<alpha> \\<up> (\\<beta> * 0) = (\\<alpha> \\<up> \\<beta>) \\<up> 0\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> * \\<alpha>') =\n        (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * ZFC_in_HOL.succ \\<alpha>') =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         ZFC_in_HOL.succ \\<alpha>'\n 3. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * 0) = (\\<alpha> \\<up> \\<beta>) \\<up> 0", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * 0) = (\\<alpha> \\<up> \\<beta>) \\<up> 0\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> * \\<alpha>') =\n        (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * ZFC_in_HOL.succ \\<alpha>') =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> * \\<alpha>') =\n        (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * ZFC_in_HOL.succ \\<alpha>') =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case succ"], ["proof (state)\nthis:\n  Ord \\<alpha>_\n  \\<alpha> \\<up> (\\<beta> * \\<alpha>_) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>_\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Ord \\<alpha>';\n        \\<alpha> \\<up> (\\<beta> * \\<alpha>') =\n        (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>'\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * ZFC_in_HOL.succ \\<alpha>') =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         ZFC_in_HOL.succ \\<alpha>'\n 2. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "then"], ["proof (chain)\npicking this:\n  Ord \\<alpha>_\n  \\<alpha> \\<up> (\\<beta> * \\<alpha>_) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>_", "show ?case"], ["proof (prove)\nusing this:\n  Ord \\<alpha>_\n  \\<alpha> \\<up> (\\<beta> * \\<alpha>_) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>_\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * ZFC_in_HOL.succ \\<alpha>_) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> ZFC_in_HOL.succ \\<alpha>_", "using assms"], ["proof (prove)\nusing this:\n  Ord \\<alpha>_\n  \\<alpha> \\<up> (\\<beta> * \\<alpha>_) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<alpha>_\n  Ord \\<alpha>\n  Ord \\<beta>\n  Ord \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * ZFC_in_HOL.succ \\<alpha>_) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> ZFC_in_HOL.succ \\<alpha>_", "by (auto simp: mult_succ oexp_add)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * ZFC_in_HOL.succ \\<alpha>_) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> ZFC_in_HOL.succ \\<alpha>_\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "case (Limit \\<mu>)"], ["proof (state)\nthis:\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> * ?\\<xi>) = (\\<alpha> \\<up> \\<beta>) \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have Lim: \"Limit (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "unfolding Limit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<and>\n    0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<and>\n    (\\<forall>y.\n        y \\<in> elts\n                 (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<longrightarrow>\n        ZFC_in_HOL.succ y\n        \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)))", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n 2. 0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n 3. \\<And>y.\n       y \\<in> elts\n                (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "show \"Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "using Limit.hyps Limit_def Ord_in_Ord \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "by (auto intro: Ord_Sup)"], ["proof (state)\nthis:\n  Ord (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n\ngoal (2 subgoals):\n 1. 0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n 2. \\<And>y.\n       y \\<in> elts\n                (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "have \"succ 0 \\<in> elts \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ 0 \\<in> elts \\<mu>", "using Limit.hyps Limit_def"], ["proof (prove)\nusing this:\n  Limit \\<mu>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ 0 \\<in> elts \\<mu>", "by blast"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ 0 \\<in> elts \\<mu>\n\ngoal (2 subgoals):\n 1. 0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n 2. \\<And>y.\n       y \\<in> elts\n                (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "then"], ["proof (chain)\npicking this:\n  ZFC_in_HOL.succ 0 \\<in> elts \\<mu>", "show \"0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\""], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ 0 \\<in> elts \\<mu>\n\ngoal (1 subgoal):\n 1. 0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "using False \\<open>Ord \\<beta>\\<close> mem_0_Ord"], ["proof (prove)\nusing this:\n  ZFC_in_HOL.succ 0 \\<in> elts \\<mu>\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Ord \\<beta>\n  \\<lbrakk>Ord ?k; ?k \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 \\<in> elts ?k\n\ngoal (1 subgoal):\n 1. 0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "by force"], ["proof (state)\nthis:\n  0 \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> elts\n                (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<Longrightarrow>\n       ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "show \"succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\"\n        if \"y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "using that False Limit.hyps"], ["proof (prove)\nusing this:\n  y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Limit \\<mu>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))", "apply (clarsimp simp: Limit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> elts \\<mu>; y \\<in> elts (\\<beta> * x);\n        \\<alpha> \\<noteq> 0; \\<beta> \\<noteq> 0; Ord \\<mu>;\n        0 \\<in> elts \\<mu>;\n        \\<forall>y.\n           y \\<in> elts \\<mu> \\<longrightarrow>\n           ZFC_in_HOL.succ y \\<in> elts \\<mu>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>elts \\<mu>.\n                            ZFC_in_HOL.succ y \\<in> elts (\\<beta> * x)", "by (metis Ord_in_Ord Ord_linear Ord_mem_iff_lt Ord_mult Ord_succ assms(2) less_V_def mult_cancellation mult_succ not_add_mem_right succ_le_iff succ_ne_self)"], ["proof (state)\nthis:\n  ?y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>)) \\<Longrightarrow>\n  ZFC_in_HOL.succ ?y \\<in> elts (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Limit (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<alpha>\\<up>(\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) = \\<alpha>\\<up>\\<Squnion> ((*) \\<beta> ` elts \\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>)", "by (simp add: mult_Sup_distrib)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = \\<Squnion> (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>) =\n    \\<Squnion>\n     (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))", "using False Lim oexp_Limit"], ["proof (prove)\nusing this:\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Limit (\\<Squnion> ((*) \\<beta> ` elts \\<mu>))\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>) =\n    \\<Squnion>\n     (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))", "by fastforce"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>) =\n  \\<Squnion>\n   (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> \\<Squnion> ((*) \\<beta> ` elts \\<mu>) =\n  \\<Squnion>\n   (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = (SUP x\\<in>elts \\<mu>. \\<alpha>\\<up>(\\<beta> * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion>\n     (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x)) =\n    (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x))", "proof (rule Sup_eq_Sup)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>\n    \\<subseteq> (\\<Union>x\\<in>elts \\<mu>.\n                    (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n 2. small (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n 3. \\<And>x.\n       x \\<in> (\\<Union>x\\<in>elts \\<mu>.\n                   (\\<up>) \\<alpha> ` elts (\\<beta> * x)) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) `\n                      elts \\<mu>.\n          x \\<le> y", "show \"(\\<lambda>x. \\<alpha>\\<up>(\\<beta> * x)) ` elts \\<mu> \\<subseteq> (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>\n    \\<subseteq> (\\<Union>x\\<in>elts \\<mu>.\n                    (\\<up>) \\<alpha> ` elts (\\<beta> * x))", "using \\<open>Ord \\<alpha>\\<close> \\<open>Ord \\<beta>\\<close> False Limit"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  Ord \\<beta>\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> * ?\\<xi>) = (\\<alpha> \\<up> \\<beta>) \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>\n    \\<subseteq> (\\<Union>x\\<in>elts \\<mu>.\n                    (\\<up>) \\<alpha> ` elts (\\<beta> * x))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Ord \\<alpha>; Ord \\<beta>; Limit \\<mu>;\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>;\n        xa \\<in> elts \\<mu>; \\<alpha> \\<noteq> 0;\n        \\<beta> \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>elts \\<mu>.\n                            (\\<alpha> \\<up> \\<beta>) \\<up> xa\n                            \\<in> (\\<up>) \\<alpha> ` elts (\\<beta> * x)", "by (metis Limit_def elts_succ imageI insertI1 mem_0_Ord mult_add_mem_0)"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>\n  \\<subseteq> (\\<Union>x\\<in>elts \\<mu>.\n                  (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n\ngoal (2 subgoals):\n 1. small (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n 2. \\<And>x.\n       x \\<in> (\\<Union>x\\<in>elts \\<mu>.\n                   (\\<up>) \\<alpha> ` elts (\\<beta> * x)) \\<Longrightarrow>\n       \\<exists>y\\<in>(\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) `\n                      elts \\<mu>.\n          x \\<le> y", "show \"\\<exists>y\\<in>(\\<lambda>x. \\<alpha>\\<up>(\\<beta> * x)) ` elts \\<mu>. x \\<le> y\"\n        if \"x \\<in> (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>(\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>.\n       x \\<le> y", "using that \\<open>Ord \\<alpha>\\<close> \\<open>Ord \\<beta>\\<close> False Limit"], ["proof (prove)\nusing this:\n  x \\<in> (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))\n  Ord \\<alpha>\n  Ord \\<beta>\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Limit \\<mu>\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> * ?\\<xi>) = (\\<alpha> \\<up> \\<beta>) \\<up> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>(\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>.\n       x \\<le> y", "by clarsimp (metis Limit_def Ord_in_Ord Ord_mult VWO_TC_le mem_imp_VWO oexp_mono)"], ["proof (state)\nthis:\n  ?x \\<in> (\\<Union>x\\<in>elts \\<mu>.\n               (\\<up>) \\<alpha> ` elts (\\<beta> * x)) \\<Longrightarrow>\n  \\<exists>y\\<in>(\\<lambda>x. \\<alpha> \\<up> (\\<beta> * x)) ` elts \\<mu>.\n     ?x \\<le> y\n\ngoal (1 subgoal):\n 1. small (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x))", "qed auto"], ["proof (state)\nthis:\n  \\<Squnion>\n   (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x)) =\n  (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  \\<Squnion>\n   (\\<Union>x\\<in>elts \\<mu>. (\\<up>) \\<alpha> ` elts (\\<beta> * x)) =\n  (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = \\<Squnion> ((\\<up>) (\\<alpha>\\<up>\\<beta>) ` elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x)) =\n    \\<Squnion>\n     ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n      elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>))", "using Limit.IH Limit.hyps"], ["proof (prove)\nusing this:\n  ?\\<xi> \\<in> elts \\<mu> \\<Longrightarrow>\n  \\<alpha> \\<up> (\\<beta> * ?\\<xi>) = (\\<alpha> \\<up> \\<beta>) \\<up> ?\\<xi>\n  Limit \\<mu>\n\ngoal (1 subgoal):\n 1. (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x)) =\n    \\<Squnion>\n     ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n      elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>))", "by auto"], ["proof (state)\nthis:\n  (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x)) =\n  \\<Squnion>\n   ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n    elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "also"], ["proof (state)\nthis:\n  (SUP x\\<in>elts \\<mu>. \\<alpha> \\<up> (\\<beta> * x)) =\n  \\<Squnion>\n   ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n    elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "have \"\\<dots> = (\\<alpha>\\<up>\\<beta>)\\<up>(SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion>\n     ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n      elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "using False Limit.hyps oexp_Limit \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<alpha> = 0 \\<or> \\<beta> = 0)\n  Limit \\<mu>\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. \\<Squnion>\n     ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n      elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "by auto"], ["proof (state)\nthis:\n  \\<Squnion>\n   ((\\<up>) (\\<alpha> \\<up> \\<beta>) `\n    elts (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>'.\n       \\<lbrakk>Limit \\<alpha>';\n        \\<And>\\<xi>.\n           \\<xi> \\<in> elts \\<alpha>' \\<Longrightarrow>\n           \\<alpha> \\<up> (\\<beta> * \\<xi>) =\n           (\\<alpha> \\<up> \\<beta>) \\<up> \\<xi>\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> \\<up>\n                         (\\<beta> * (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)) =\n                         (\\<alpha> \\<up> \\<beta>) \\<up>\n                         (SUP \\<xi>\\<in>elts \\<alpha>'. \\<xi>)", "finally"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n    (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)", "."], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> (SUP \\<xi>\\<in>elts \\<mu>. \\<xi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (\\<beta> * \\<gamma>) =\n  (\\<alpha> \\<up> \\<beta>) \\<up> \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Limit_omega_oexp:\n  assumes \"Ord \\<delta>\" \"\\<delta> \\<noteq> 0\"\n  shows \"Limit (\\<omega>\\<up>\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "using assms"], ["proof (prove)\nusing this:\n  Ord \\<delta>\n  \\<delta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "proof (cases \\<delta> rule: Ord_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<delta> \\<noteq> 0; \\<delta> = 0\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 3. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "case 0"], ["proof (state)\nthis:\n  \\<delta> = 0\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<delta> \\<noteq> 0; \\<delta> = 0\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 3. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "then"], ["proof (chain)\npicking this:\n  \\<delta> = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> = 0\n\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<delta> = 0\n  \\<delta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "by blast"], ["proof (state)\nthis:\n  Limit (\\<omega> \\<up> \\<delta>)\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "case (succ l)"], ["proof (state)\nthis:\n  Ord l\n  ZFC_in_HOL.succ l = \\<delta>\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "have *: \"succ \\<beta> \\<in> elts (\\<omega>\\<up>l * n + \\<omega>\\<up>l)\"\n    if n: \"n \\<in> elts \\<omega>\" and \\<beta>: \"\\<beta> \\<in> elts (\\<omega>\\<up>l * n)\" for n \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "obtain \"Ord n\" \"Ord \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord n; Ord \\<beta>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Ord_\\<omega> Ord_in_Ord Ord_mult Ord_oexp \\<beta> n succ(1))"], ["proof (state)\nthis:\n  Ord n\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "obtain oo: \"Ord (\\<omega>\\<up>l)\" \"Ord (\\<omega>\\<up>l * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord (\\<omega> \\<up> l); Ord (\\<omega> \\<up> l * n)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: \\<open>Ord n\\<close> succ(1))"], ["proof (state)\nthis:\n  Ord (\\<omega> \\<up> l)\n  Ord (\\<omega> \\<up> l * n)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "moreover"], ["proof (state)\nthis:\n  Ord (\\<omega> \\<up> l)\n  Ord (\\<omega> \\<up> l * n)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "have f4: \"\\<beta> < \\<omega>\\<up>l * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> < \\<omega> \\<up> l * n", "using oo Ord_mem_iff_lt \\<open>Ord \\<beta>\\<close> \\<open>\\<beta> \\<in> elts (\\<omega>\\<up>l * n)\\<close>"], ["proof (prove)\nusing this:\n  Ord (\\<omega> \\<up> l)\n  Ord (\\<omega> \\<up> l * n)\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  Ord \\<beta>\n  \\<beta> \\<in> elts (\\<omega> \\<up> l * n)\n\ngoal (1 subgoal):\n 1. \\<beta> < \\<omega> \\<up> l * n", "by blast"], ["proof (state)\nthis:\n  \\<beta> < \\<omega> \\<up> l * n\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "moreover"], ["proof (state)\nthis:\n  \\<beta> < \\<omega> \\<up> l * n\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "have f5: \"Ord (succ \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (ZFC_in_HOL.succ \\<beta>)", "using \\<open>Ord \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. Ord (ZFC_in_HOL.succ \\<beta>)", "by blast"], ["proof (state)\nthis:\n  Ord (ZFC_in_HOL.succ \\<beta>)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "moreover"], ["proof (state)\nthis:\n  Ord (ZFC_in_HOL.succ \\<beta>)\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "have \"\\<omega>\\<up>l \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<up> l \\<noteq> 0", "using oexp_eq_0_iff omega_nonzero succ(1)"], ["proof (prove)\nusing this:\n  Ord ?\\<beta> \\<Longrightarrow>\n  (?\\<alpha> \\<up> ?\\<beta> = 0) =\n  (?\\<alpha> = 0 \\<and> ?\\<beta> \\<noteq> 0)\n  \\<omega> \\<noteq> 0\n  Ord l\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> l \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  \\<omega> \\<up> l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "ultimately"], ["proof (chain)\npicking this:\n  Ord (\\<omega> \\<up> l)\n  Ord (\\<omega> \\<up> l * n)\n  \\<beta> < \\<omega> \\<up> l * n\n  Ord (ZFC_in_HOL.succ \\<beta>)\n  \\<omega> \\<up> l \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Ord (\\<omega> \\<up> l)\n  Ord (\\<omega> \\<up> l * n)\n  \\<beta> < \\<omega> \\<up> l * n\n  Ord (ZFC_in_HOL.succ \\<beta>)\n  \\<omega> \\<up> l \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ \\<beta>\n    \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)", "by (metis add_less_cancel_left Ord_\\<omega> Ord_add Ord_mem_iff_lt OrdmemD \\<open>Ord \\<beta>\\<close> add.right_neutral dual_order.strict_trans2 oexp_gt_0_iff succ(1) succ_le_iff zero_in_omega)"], ["proof (state)\nthis:\n  ZFC_in_HOL.succ \\<beta>\n  \\<in> elts (\\<omega> \\<up> l * n + \\<omega> \\<up> l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?n \\<in> elts \\<omega>;\n   ?\\<beta> \\<in> elts (\\<omega> \\<up> l * ?n)\\<rbrakk>\n  \\<Longrightarrow> ZFC_in_HOL.succ ?\\<beta>\n                    \\<in> elts (\\<omega> \\<up> l * ?n + \\<omega> \\<up> l)\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<delta> \\<noteq> 0; Ord l;\n        ZFC_in_HOL.succ l = \\<delta>\\<rbrakk>\n       \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)\n 2. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "using succ"], ["proof (prove)\nusing this:\n  Ord l\n  ZFC_in_HOL.succ l = \\<delta>\n\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "apply (clarsimp simp: Limit_def mem_0_Ord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Ord l; \\<delta> = ZFC_in_HOL.succ l;\n        y \\<in> elts (\\<omega> \\<up> l * \\<omega>)\\<rbrakk>\n       \\<Longrightarrow> ZFC_in_HOL.succ y\n                         \\<in> elts (\\<omega> \\<up> l * \\<omega>)", "apply (simp add: mult_Limit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Ord l; \\<delta> = ZFC_in_HOL.succ l;\n        \\<exists>x\\<in>elts \\<omega>.\n           y \\<in> elts (\\<omega> \\<up> l * x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>elts \\<omega>.\n                            ZFC_in_HOL.succ y\n                            \\<in> elts (\\<omega> \\<up> l * x)", "by (metis * mult_succ succ_in_omega)"], ["proof (state)\nthis:\n  Limit (\\<omega> \\<up> \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "case limit"], ["proof (state)\nthis:\n  Limit \\<delta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<delta> \\<noteq> 0; Limit \\<delta>\\<rbrakk>\n    \\<Longrightarrow> Limit (\\<omega> \\<up> \\<delta>)", "then"], ["proof (chain)\npicking this:\n  Limit \\<delta>", "show ?thesis"], ["proof (prove)\nusing this:\n  Limit \\<delta>\n\ngoal (1 subgoal):\n 1. Limit (\\<omega> \\<up> \\<delta>)", "by (metis Limit_oexp Ord_\\<omega> OrdmemD one_V_def succ_in_omega zero_in_omega)"], ["proof (state)\nthis:\n  Limit (\\<omega> \\<up> \\<delta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oexp_mult_commute:\n  fixes j::nat\n  assumes \"Ord \\<alpha>\"\n  shows \"(\\<alpha> \\<up> j) * \\<alpha> = \\<alpha> * (\\<alpha> \\<up> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "have \"(\\<alpha> \\<up> j) * \\<alpha> = \\<alpha> \\<up> (1 + ord_of_nat j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> \\<up> (1 + ord_of_nat j)", "by (simp add: one_V_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> ord_of_nat j * \\<alpha> = \\<alpha> \\<up> (1 + ord_of_nat j)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<up> ord_of_nat j * \\<alpha> = \\<alpha> \\<up> (1 + ord_of_nat j)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "have \"... = \\<alpha> * (\\<alpha> \\<up> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> (1 + ord_of_nat j) =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "by (simp add: assms oexp_add)"], ["proof (state)\nthis:\n  \\<alpha> \\<up> (1 + ord_of_nat j) = \\<alpha> * \\<alpha> \\<up> ord_of_nat j\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "finally"], ["proof (chain)\npicking this:\n  \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n  \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n  \\<alpha> * \\<alpha> \\<up> ord_of_nat j\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n    \\<alpha> * \\<alpha> \\<up> ord_of_nat j", "."], ["proof (state)\nthis:\n  \\<alpha> \\<up> ord_of_nat j * \\<alpha> =\n  \\<alpha> * \\<alpha> \\<up> ord_of_nat j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma oexp_\\<omega>_Limit: \"Limit \\<beta> \\<Longrightarrow> \\<omega>\\<up>\\<beta> = (SUP \\<xi> \\<in> elts \\<beta>. \\<omega>\\<up>\\<xi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Limit \\<beta> \\<Longrightarrow>\n    \\<omega> \\<up> \\<beta> = \\<Squnion> ((\\<up>) \\<omega> ` elts \\<beta>)", "by (simp add: oexp_Limit)"], ["", "lemma \\<omega>_power_succ_gtr: \"Ord \\<alpha> \\<Longrightarrow> \\<omega> \\<up> \\<alpha> * ord_of_nat n < \\<omega> \\<up> succ \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<alpha> \\<Longrightarrow>\n    \\<omega> \\<up> \\<alpha> * ord_of_nat n\n    < \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>", "by (simp add: OrdmemD)"], ["", "lemma countable_oexp:\n  assumes \\<nu>: \"\\<alpha> \\<in> elts \\<omega>1\" \n  shows \"\\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1", "have \"Ord \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<alpha>", "using Ord_\\<omega>1 Ord_in_Ord assms"], ["proof (prove)\nusing this:\n  Ord \\<omega>1\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<alpha> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. Ord \\<alpha>", "by blast"], ["proof (state)\nthis:\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  Ord \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1", "using assms"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  \\<alpha> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1", "proof (induction rule: Ord_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 \\<in> elts \\<omega>1 \\<Longrightarrow>\n    \\<omega> \\<up> 0 \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 3. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "case 0"], ["proof (state)\nthis:\n  0 \\<in> elts \\<omega>1\n\ngoal (3 subgoals):\n 1. 0 \\<in> elts \\<omega>1 \\<Longrightarrow>\n    \\<omega> \\<up> 0 \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 3. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  0 \\<in> elts \\<omega>1", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> 0 \\<in> elts \\<omega>1", "by (simp add: Ord_mem_iff_lt)"], ["proof (state)\nthis:\n  \\<omega> \\<up> 0 \\<in> elts \\<omega>1\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "case (succ \\<alpha>)"], ["proof (state)\nthis:\n  Ord \\<alpha>\n  \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n  \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\n  ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  Ord \\<alpha>\n  \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n  \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\n  ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1", "have \"countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))\""], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n  \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\n  ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))", "by (simp add: succ_in_Limit_iff countable_mult less_\\<omega>1_imp_countable)"], ["proof (state)\nthis:\n  countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Ord \\<alpha>;\n        \\<alpha> \\<in> elts \\<omega>1 \\<Longrightarrow>\n        \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1;\n        ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha>\n                         \\<in> elts \\<omega>1\n 2. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))", "show ?case"], ["proof (prove)\nusing this:\n  countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1", "using Ord_mem_iff_lt countable_iff_less_\\<omega>1 succ.hyps"], ["proof (prove)\nusing this:\n  countable (elts (\\<omega> \\<up> \\<alpha> * \\<omega>))\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  Ord ?\\<alpha> \\<Longrightarrow>\n  countable (elts ?\\<alpha>) = (?\\<alpha> < \\<omega>1)\n  Ord \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1", "by auto"], ["proof (state)\nthis:\n  \\<omega> \\<up> ZFC_in_HOL.succ \\<alpha> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "case (Limit \\<alpha>)"], ["proof (state)\nthis:\n  Limit \\<alpha>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<alpha>; ?\\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n  \\<Longrightarrow> \\<omega> \\<up> ?\\<xi> \\<in> elts \\<omega>1\n  (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "with Ord_\\<omega>1"], ["proof (chain)\npicking this:\n  Ord \\<omega>1\n  Limit \\<alpha>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<alpha>; ?\\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n  \\<Longrightarrow> \\<omega> \\<up> ?\\<xi> \\<in> elts \\<omega>1\n  (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1", "have \"countable (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>))\" \"Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))\""], ["proof (prove)\nusing this:\n  Ord \\<omega>1\n  Limit \\<alpha>\n  \\<lbrakk>?\\<xi> \\<in> elts \\<alpha>; ?\\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n  \\<Longrightarrow> \\<omega> \\<up> ?\\<xi> \\<in> elts \\<omega>1\n  (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. countable\n     (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>)) &&&\n    Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))", "by (force simp: Limit_def intro: Ord_trans less_\\<omega>1_imp_countable)+"], ["proof (state)\nthis:\n  countable\n   (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>))\n  Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  countable\n   (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>))\n  Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))", "have \"\\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1\""], ["proof (prove)\nusing this:\n  countable\n   (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>))\n  Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1", "using Limit.hyps countable_iff_less_\\<omega>1 oexp_Limit"], ["proof (prove)\nusing this:\n  countable\n   (\\<Union>\\<beta>\\<in>elts \\<alpha>. elts (\\<omega> \\<up> \\<beta>))\n  Ord (\\<omega> \\<up> \\<Squnion> (elts \\<alpha>))\n  Limit \\<alpha>\n  Ord ?\\<alpha> \\<Longrightarrow>\n  countable (elts ?\\<alpha>) = (?\\<alpha> < \\<omega>1)\n  Limit ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> \\<up> ?\\<beta> =\n  (if ?\\<alpha> = 0 then 0\n   else \\<Squnion> ((\\<up>) ?\\<alpha> ` elts ?\\<beta>))\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1", "by fastforce"], ["proof (state)\nthis:\n  \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>Limit \\<alpha>;\n        \\<And>\\<xi>.\n           \\<lbrakk>\\<xi> \\<in> elts \\<alpha>;\n            \\<xi> \\<in> elts \\<omega>1\\<rbrakk>\n           \\<Longrightarrow> \\<omega> \\<up> \\<xi> \\<in> elts \\<omega>1;\n        (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\\<rbrakk>\n       \\<Longrightarrow> \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>)\n                         \\<in> elts \\<omega>1", "then"], ["proof (chain)\npicking this:\n  \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1", "show ?case"], ["proof (prove)\nusing this:\n  \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1", "using Limit.hyps Limit_def Ord_mem_iff_lt"], ["proof (prove)\nusing this:\n  \\<omega> \\<up> \\<Squnion> (elts \\<alpha>) < \\<omega>1\n  Limit \\<alpha>\n  Limit ?i \\<equiv>\n  Ord ?i \\<and>\n  0 \\<in> elts ?i \\<and>\n  (\\<forall>y.\n      y \\<in> elts ?i \\<longrightarrow> ZFC_in_HOL.succ y \\<in> elts ?i)\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1", "by auto"], ["proof (state)\nthis:\n  \\<omega> \\<up> (SUP \\<xi>\\<in>elts \\<alpha>. \\<xi>) \\<in> elts \\<omega>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<omega> \\<up> \\<alpha> \\<in> elts \\<omega>1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}