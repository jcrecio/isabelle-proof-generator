{"file_name": "/home/qj213/afp-2021-10-22/thys/Skip_Lists/Pi_pmf.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Skip_Lists", "problem_names": ["lemma pmf_expectation_eq_infsetsum: \"measure_pmf.expectation p f = infsetsum (\\<lambda>x. pmf p x * f x) UNIV\"", "lemma measure_pmf_prob_product:\n  assumes \"countable A\" \"countable B\"\n  shows \"measure_pmf.prob (pair_pmf M N) (A \\<times> B) = measure_pmf.prob M A * measure_pmf.prob N B\"", "lemma pmf_Pi:\n  assumes A: \"finite A\"\n  shows   \"pmf (Pi_pmf A dflt p) f =\n             (if (\\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt) then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\"", "lemma pmf_Pi':\n  assumes \"finite A\" \"\\<And>x. x \\<notin> A \\<Longrightarrow> f x = dflt\"\n  shows   \"pmf (Pi_pmf A dflt p) f = (\\<Prod>x\\<in>A. pmf (p x) (f x))\"", "lemma pmf_Pi_outside:\n  assumes \"finite A\" \"\\<exists>x. x \\<notin> A \\<and> f x \\<noteq> dflt\"\n  shows   \"pmf (Pi_pmf A dflt p) f = 0\"", "lemma pmf_Pi_empty [simp]: \"Pi_pmf {} dflt p = return_pmf (\\<lambda>_. dflt)\"", "lemma set_Pi_pmf_subset: \"finite A \\<Longrightarrow> set_pmf (Pi_pmf A dflt p) \\<subseteq> {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\"", "lemma Pi_pmf_cong [cong]:\n  assumes \"A = A'\" \"dflt = dflt'\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows   \"Pi_pmf A dflt f = Pi_pmf A' dflt' f'\"", "lemma restrict_PiE_dflt: \"(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = PiE A B\"", "lemma dflt_image_PiE: \"(\\<lambda>h x. if x \\<in> A then h x else dflt) ` PiE A B = PiE_dflt A dflt B\"\n  (is \"?f ` ?X = ?Y\")", "lemma finite_PiE_dflt [intro]:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"finite (PiE_dflt A d B)\"", "lemma card_PiE_dflt:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))\"", "lemma PiE_dflt_empty_iff [simp]: \"PiE_dflt A dflt B = {} \\<longleftrightarrow> (\\<exists>x\\<in>A. B x = {})\"", "lemma measure_Pi_pmf_PiE_dflt:\n  assumes [simp]: \"finite A\"\n  shows   \"measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n             (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\"", "lemma set_Pi_pmf_subset':\n  assumes \"finite A\"\n  shows   \"set_pmf (Pi_pmf A dflt p) \\<subseteq> PiE_dflt A dflt (set_pmf \\<circ> p)\"", "lemma Pi_pmf_return_pmf [simp]:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) = return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)\"", "lemma Pi_pmf_return_pmf' [simp]:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A dflt (\\<lambda>_. return_pmf dflt) = return_pmf (\\<lambda>_. dflt)\"", "lemma measure_Pi_pmf_Pi:\n  fixes t::nat\n  assumes [simp]: \"finite A\"\n  shows   \"measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n             (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\" (is \"?lhs = ?rhs\")", "lemma Pi_pmf_bind:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A d (\\<lambda>x. bind_pmf (p x) (q x)) =\n             do {f \\<leftarrow> Pi_pmf A d' p; Pi_pmf A d (\\<lambda>x. q x (f x))}\" (is \"?lhs = ?rhs\")", "lemma Pi_pmf_map:\n  assumes [simp]: \"finite A\" and \"f dflt = dflt'\"\n  shows   \"Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) = map_pmf (\\<lambda>h. f \\<circ> h) (Pi_pmf A dflt g)\"", "lemma Pi_pmf_default_swap:\n  assumes \"finite A\"\n  shows   \"map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt') (Pi_pmf A dflt p) =\n             Pi_pmf A dflt' p\" (is \"?lhs = ?rhs\")", "lemma Pi_pmf_bij_betw:\n  assumes \"finite A\" \"bij_betw h A B\" \"\\<And>x. x \\<notin> A \\<Longrightarrow> h x \\<notin> B\"\n  shows \"Pi_pmf A dflt (\\<lambda>_. f) = map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))\"\n    (is \"?lhs = ?rhs\")", "lemma Pi_pmf_of_set:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\" \"\\<And>x. x \\<in> A \\<Longrightarrow> B x \\<noteq> {}\"\n  shows   \"Pi_pmf A d (\\<lambda>x. pmf_of_set (B x)) = pmf_of_set (PiE_dflt A d B)\" (is \"?lhs = ?rhs\")", "lemma Pi_pmf_insert:\n  assumes \"finite A\" \"x \\<notin> A\"\n  shows   \"Pi_pmf (insert x A) dflt p = map_pmf (\\<lambda>(y,f). f(x:=y)) (pair_pmf (p x) (Pi_pmf A dflt p))\"", "lemma Pi_pmf_insert':\n  assumes \"finite A\"  \"x \\<notin> A\"\n  shows   \"Pi_pmf (insert x A) dflt p =\n             do {y \\<leftarrow> p x; f \\<leftarrow> Pi_pmf A dflt p; return_pmf (f(x := y))}\"", "lemma Pi_pmf_singleton:\n  \"Pi_pmf {x} dflt p = map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)\"", "lemma Pi_pmf_component:\n  assumes \"finite A\"\n  shows   \"map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = (if x \\<in> A then p x else return_pmf dflt)\"", "lemma Pi_pmf_union:\n  assumes \"finite A\" \"finite B\" \"A \\<inter> B = {}\"\n  shows   \"Pi_pmf (A \\<union> B) dflt p =\n             map_pmf (\\<lambda>(f,g) x. if x \\<in> A then f x else g x)\n             (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p))\" (is \"_ = map_pmf (?h A) (?q A)\")", "lemma Pi_pmf_subset:\n  assumes \"finite A\" \"A' \\<subseteq> A\"\n  shows   \"Pi_pmf A' dflt p = map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt) (Pi_pmf A dflt p)\"", "lemma Pi_pmf_subset':\n  fixes f :: \"'a \\<Rightarrow> 'b pmf\"\n  assumes \"finite A\" \"B \\<subseteq> A\" \"\\<And>x. x \\<in> A - B \\<Longrightarrow> f x = return_pmf dflt\"\n  shows \"Pi_pmf A dflt f = Pi_pmf B dflt f\"", "lemma Pi_pmf_if_set:\n  assumes \"finite A\"\n  shows \"Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n           Pi_pmf {x\\<in>A. b x} dflt f\"", "lemma Pi_pmf_if_set':\n  assumes \"finite A\"\n  shows \"Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n         Pi_pmf {x\\<in>A. \\<not>b x} dflt f\"", "lemma Pi_pmf_remove:\n  assumes \"finite A\"\n  shows   \"Pi_pmf (A - {x}) dflt p = map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\"", "lemma pmf_of_set_Pow_conv_bernoulli:\n  assumes \"finite (A :: 'a set)\"\n  shows \"map_pmf (\\<lambda>b. {x\\<in>A. b x}) (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1/2))) = pmf_of_set (Pow A)\"", "lemma binomial_pmf_altdef':\n  fixes A :: \"'a set\"\n  assumes \"finite A\" and \"card A = n\" and p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n             map_pmf (\\<lambda>f. card {x\\<in>A. f x}) (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\" (is \"?lhs = ?rhs\")"], "translations": [["", "lemma pmf_expectation_eq_infsetsum: \"measure_pmf.expectation p f = infsetsum (\\<lambda>x. pmf p x * f x) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation p f = (\\<Sum>\\<^sub>ax. pmf p x * f x)", "unfolding infsetsum_def measure_pmf_eq_density"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>L\n     (density (count_space UNIV) (\\<lambda>x. ennreal (pmf p x))) f =\n    LINT x|count_space UNIV. pmf p x * f x", "by (subst integral_density) simp_all"], ["", "lemma measure_pmf_prob_product:\n  assumes \"countable A\" \"countable B\"\n  shows \"measure_pmf.prob (pair_pmf M N) (A \\<times> B) = measure_pmf.prob M A * measure_pmf.prob N B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "have \"measure_pmf.prob (pair_pmf M N) (A \\<times> B) = (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b)", "by (auto intro!: infsetsum_cong simp add: measure_pmf_conv_infsetsum pmf_pair)"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n  (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n  (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "have \"\\<dots> = measure_pmf.prob M A * measure_pmf.prob N B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "using assms"], ["proof (prove)\nusing this:\n  countable A\n  countable B\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "by (subst infsetsum_product) (auto simp add: measure_pmf_conv_infsetsum)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(a, b)\\<in>A \\<times> B. pmf M a * pmf N b) =\n  measure_pmf.prob M A * measure_pmf.prob N B\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "finally"], ["proof (chain)\npicking this:\n  measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n  measure_pmf.prob M A * measure_pmf.prob N B", "show ?thesis"], ["proof (prove)\nusing this:\n  measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n  measure_pmf.prob M A * measure_pmf.prob N B\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n    measure_pmf.prob M A * measure_pmf.prob N B", "by simp"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf M N) (A \\<times> B) =\n  measure_pmf.prob M A * measure_pmf.prob N B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Definition\\<close>"], ["", "text \\<open>\n  In analogy to @{const PiM}, we define an indexed product of PMFs. In the literature, this\n  is typically called taking a vector of independent random variables. Note that the components\n  do not have to be identically distributed.\n\n  The operation takes an explicit index set \\<^term>\\<open>A :: 'a set\\<close> and a function \\<^term>\\<open>f :: 'a \\<Rightarrow> 'b pmf\\<close>\n  that maps each element from \\<^term>\\<open>A\\<close> to a PMF and defines the product measure\n  $\\bigotimes_{i\\in A} f(i)$ , which is represented as a \\<^typ>\\<open>('a \\<Rightarrow> 'b) pmf\\<close>.\n\n  Note that unlike @{const PiM}, this only works for \\<^emph>\\<open>finite\\<close> index sets. It could\n  be extended to countable sets and beyond, but the construction becomes somewhat more involved.\n\\<close>"], ["", "definition Pi_pmf :: \"'a set \\<Rightarrow> 'b \\<Rightarrow> ('a \\<Rightarrow> 'b pmf) \\<Rightarrow> ('a \\<Rightarrow> 'b) pmf\" where\n  \"Pi_pmf A dflt p =\n     embed_pmf (\\<lambda>f. if (\\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt) then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\""], ["", "text \\<open>\n  A technical subtlety that needs to be addressed is this: Intuitively, the functions in the\n  support of a product distribution have domain \\<open>A\\<close>. However, since HOL is a total logic, these\n  functions must still return \\<^emph>\\<open>some\\<close> value for inputs outside \\<open>A\\<close>. The product measure\n  @{const PiM} simply lets these functions return @{const undefined} in these cases. We chose a\n  different solution here, which is to supply a default value \\<^term>\\<open>dflt :: 'b\\<close> that is returned\n  in these cases.\n\n  As one possible application, one could model the result of \\<open>n\\<close> different independent coin\n  tosses as @{term \"Pi_pmf {0..<n} False (\\<lambda>_. bernoulli_pmf (1 / 2))\"}. This returns a function\n  of type \\<^typ>\\<open>nat \\<Rightarrow> bool\\<close> that maps every natural number below \\<open>n\\<close> to the result of the\n  corresponding coin toss, and every other natural number to \\<^term>\\<open>False\\<close>.\n\\<close>"], ["", "lemma pmf_Pi:\n  assumes A: \"finite A\"\n  shows   \"pmf (Pi_pmf A dflt p) f =\n             (if (\\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt) then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) f =\n    (if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n     then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)", "unfolding Pi_pmf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (embed_pmf\n          (\\<lambda>f.\n              if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n              then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0))\n     f =\n    (if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n     then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)", "proof (rule pmf_embed_pmf, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "define S where \"S = {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\""], ["proof (state)\nthis:\n  S = {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "define B where \"B = (\\<lambda>x. set_pmf (p x))\""], ["proof (state)\nthis:\n  B = (\\<lambda>x. set_pmf (p x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have neutral_left: \"(\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0\"\n    if \"f \\<in> PiE A B - (\\<lambda>f. restrict f A) ` S\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "have \"restrict (\\<lambda>x. if x \\<in> A then f x else dflt) A \\<in> (\\<lambda>f. restrict f A) ` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt)\n    \\<in> (\\<lambda>f. restrict f A) ` S", "by (intro imageI) (auto simp: S_def)"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt)\n  \\<in> (\\<lambda>f. restrict f A) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "also"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt)\n  \\<in> (\\<lambda>f. restrict f A) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "have \"restrict (\\<lambda>x. if x \\<in> A then f x else dflt) A = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt) = f", "using that"], ["proof (prove)\nusing this:\n  f \\<in> Pi\\<^sub>E A B - (\\<lambda>f. restrict f A) ` S\n\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt) = f", "by (auto simp: PiE_def Pi_def extensional_def fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then f x else dflt) = f\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "finally"], ["proof (chain)\npicking this:\n  f \\<in> (\\<lambda>f. restrict f A) ` S", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> (\\<lambda>f. restrict f A) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "using that"], ["proof (prove)\nusing this:\n  f \\<in> (\\<lambda>f. restrict f A) ` S\n  f \\<in> Pi\\<^sub>E A B - (\\<lambda>f. restrict f A) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "by blast"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> Pi\\<^sub>E A B - (\\<lambda>f. restrict f A) ` S \\<Longrightarrow>\n  (\\<Prod>xa\\<in>A. pmf (p xa) (?f xa)) = 0\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have neutral_right: \"(\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0\"\n    if \"f \\<in> (\\<lambda>f. restrict f A) ` S - PiE A B\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "from that"], ["proof (chain)\npicking this:\n  f \\<in> (\\<lambda>f. restrict f A) ` S - Pi\\<^sub>E A B", "obtain f' where f': \"f = restrict f' A\" \"f' \\<in> S\""], ["proof (prove)\nusing this:\n  f \\<in> (\\<lambda>f. restrict f A) ` S - Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>f = restrict f' A; f' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f = restrict f' A\n  f' \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "moreover"], ["proof (state)\nthis:\n  f = restrict f' A\n  f' \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "from this and that"], ["proof (chain)\npicking this:\n  f = restrict f' A\n  f' \\<in> S\n  f \\<in> (\\<lambda>f. restrict f A) ` S - Pi\\<^sub>E A B", "have \"restrict f' A \\<notin> PiE A B\""], ["proof (prove)\nusing this:\n  f = restrict f' A\n  f' \\<in> S\n  f \\<in> (\\<lambda>f. restrict f A) ` S - Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. restrict f' A \\<notin> Pi\\<^sub>E A B", "by simp"], ["proof (state)\nthis:\n  restrict f' A \\<notin> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "then"], ["proof (chain)\npicking this:\n  restrict f' A \\<notin> Pi\\<^sub>E A B", "obtain x where \"x \\<in> A\" \"pmf (p x) (f' x) = 0\""], ["proof (prove)\nusing this:\n  restrict f' A \\<notin> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; pmf (p x) (f' x) = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: B_def set_pmf_eq)"], ["proof (state)\nthis:\n  x \\<in> A\n  pmf (p x) (f' x) = 0\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "with f' and A"], ["proof (chain)\npicking this:\n  f = restrict f' A\n  f' \\<in> S\n  finite A\n  x \\<in> A\n  pmf (p x) (f' x) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f = restrict f' A\n  f' \\<in> S\n  finite A\n  x \\<in> A\n  pmf (p x) (f' x) = 0\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0", "by auto"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> (\\<lambda>f. restrict f A) ` S - Pi\\<^sub>E A B \\<Longrightarrow>\n  (\\<Prod>xa\\<in>A. pmf (p xa) (?f xa)) = 0\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"(\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on PiE A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n    Pi\\<^sub>E A B", "by (intro abs_summable_on_prod_PiE A) (auto simp: B_def)"], ["proof (state)\nthis:\n  (\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n  Pi\\<^sub>E A B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n  Pi\\<^sub>E A B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"?this \\<longleftrightarrow> (\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on (\\<lambda>f. restrict f A) ` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n     Pi\\<^sub>E A B) =\n    ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n     (\\<lambda>f. restrict f A) ` S)", "by (intro abs_summable_on_cong_neutral neutral_left neutral_right) auto"], ["proof (state)\nthis:\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   Pi\\<^sub>E A B) =\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   (\\<lambda>f. restrict f A) ` S)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   Pi\\<^sub>E A B) =\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   (\\<lambda>f. restrict f A) ` S)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n     (\\<lambda>f. restrict f A) ` S) =\n    ((\\<lambda>f.\n         \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on\n     S)", "by (rule abs_summable_on_reindex_iff [symmetric]) (force simp: inj_on_def fun_eq_iff S_def)"], ["proof (state)\nthis:\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   (\\<lambda>f. restrict f A) ` S) =\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on\n   S)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (f x)) abs_summable_on\n   (\\<lambda>f. restrict f A) ` S) =\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on\n   S)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>f. if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n                          abs_summable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>f.\n         \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on\n     S) =\n    ((\\<lambda>f.\n         if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n         then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n     UNIV)", "by (intro abs_summable_on_cong_neutral) (auto simp: S_def)"], ["proof (state)\nthis:\n  ((\\<lambda>f. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) abs_summable_on\n   S) =\n  ((\\<lambda>f.\n       if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n       then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n   UNIV)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>f.\n      if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n      then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n  UNIV", "have summable: \\<dots>"], ["proof (prove)\nusing this:\n  (\\<lambda>f.\n      if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n      then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>f.\n        if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n        then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n    UNIV", "."], ["proof (state)\nthis:\n  (\\<lambda>f.\n      if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n      then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) abs_summable_on\n  UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"1 = (\\<Prod>x\\<in>A. 1::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = (\\<Prod>x\\<in>A. 1)", "by simp"], ["proof (state)\nthis:\n  1 = (\\<Prod>x\\<in>A. 1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  1 = (\\<Prod>x\\<in>A. 1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"(\\<Prod>x\\<in>A. 1) = (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>ay\\<in>B x. pmf (p x) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. 1) = (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. 1) =\n    (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (set_pmf (p x)))", "by (subst infsetsum_pmf_eq_1) auto"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. 1) = (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. 1) = (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"(\\<Prod>x\\<in>A. \\<Sum>\\<^sub>ay\\<in>B x. pmf (p x) y) = (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x)) =\n    (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x))", "by (intro infsetsum_prod_PiE [symmetric] A) (auto simp: B_def)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x)) =\n  (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x)) =\n  (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S. \\<Prod>x\\<in>A. pmf (p x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n    (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n       \\<Prod>x\\<in>A. pmf (p x) (f x))", "using A"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n    (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n       \\<Prod>x\\<in>A. pmf (p x) (f x))", "by (intro infsetsum_cong_neutral neutral_left neutral_right refl)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n     \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n     \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n       \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n    (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x))", "by (rule infsetsum_reindex) (force simp: inj_on_def fun_eq_iff S_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n     \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>(\\<lambda>f. restrict f A) ` S.\n     \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) =\n    (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x))", "by (intro infsetsum_cong) (auto simp: S_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) =\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (restrict f A x)) =\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<Sum>\\<^sub>af. if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n    (\\<Sum>\\<^sub>af.\n       if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n       then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)", "by (intro infsetsum_cong_neutral) (auto simp: S_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af.\n     if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n     then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>af\\<in>S. \\<Prod>x\\<in>A. pmf (p x) (f x)) =\n  (\\<Sum>\\<^sub>af.\n     if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n     then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "have \"ennreal \\<dots> = (\\<integral>\\<^sup>+f. ennreal (if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n                             then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (\\<Sum>\\<^sub>af.\n        if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n        then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) =\n    \\<integral>\\<^sup>+ f. ennreal\n                            (if \\<forall>x.\n                                   x \\<notin> A \\<longrightarrow> f x = dflt\n                             then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n                       \\<partial>count_space UNIV", "by (intro nn_integral_conv_infsetsum [symmetric] summable) (auto simp: prod_nonneg)"], ["proof (state)\nthis:\n  ennreal\n   (\\<Sum>\\<^sub>af.\n      if \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt\n      then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0) =\n  \\<integral>\\<^sup>+ f. ennreal\n                          (if \\<forall>x.\n                                 x \\<notin> A \\<longrightarrow> f x = dflt\n                           then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n                     \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n 2. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "finally"], ["proof (chain)\npicking this:\n  ennreal 1 =\n  \\<integral>\\<^sup>+ f. ennreal\n                          (if \\<forall>x.\n                                 x \\<notin> A \\<longrightarrow> f x = dflt\n                           then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n                     \\<partial>count_space UNIV", "show ?case"], ["proof (prove)\nusing this:\n  ennreal 1 =\n  \\<integral>\\<^sup>+ f. ennreal\n                          (if \\<forall>x.\n                                 x \\<notin> A \\<longrightarrow> f x = dflt\n                           then \\<Prod>x\\<in>A. pmf (p x) (f x) else 0)\n                     \\<partial>count_space UNIV\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (if \\<forall>xa.\n                                   xa \\<notin> A \\<longrightarrow>\n                                   x xa = dflt\n                             then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                       \\<partial>count_space UNIV =\n    1", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (if \\<forall>xa.\n                                 xa \\<notin> A \\<longrightarrow> x xa = dflt\n                           then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 \\<le> (if \\<forall>xa. xa \\<notin> A \\<longrightarrow> x xa = dflt\n                then \\<Prod>xa\\<in>A. pmf (p xa) (x xa) else 0)", "qed (auto simp: prod_nonneg)"], ["", "lemma pmf_Pi':\n  assumes \"finite A\" \"\\<And>x. x \\<notin> A \\<Longrightarrow> f x = dflt\"\n  shows   \"pmf (Pi_pmf A dflt p) f = (\\<Prod>x\\<in>A. pmf (p x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) f = (\\<Prod>x\\<in>A. pmf (p x) (f x))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<notin> A \\<Longrightarrow> f ?x = dflt\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) f = (\\<Prod>x\\<in>A. pmf (p x) (f x))", "by (subst pmf_Pi) auto"], ["", "lemma pmf_Pi_outside:\n  assumes \"finite A\" \"\\<exists>x. x \\<notin> A \\<and> f x \\<noteq> dflt\"\n  shows   \"pmf (Pi_pmf A dflt p) f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) f = 0", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> dflt\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) f = 0", "by (subst pmf_Pi) auto"], ["", "lemma pmf_Pi_empty [simp]: \"Pi_pmf {} dflt p = return_pmf (\\<lambda>_. dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf {} dflt p = return_pmf (\\<lambda>_. dflt)", "by (intro pmf_eqI, subst pmf_Pi) (auto simp: indicator_def)"], ["", "lemma set_Pi_pmf_subset: \"finite A \\<Longrightarrow> set_pmf (Pi_pmf A dflt p) \\<subseteq> {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    set_pmf (Pi_pmf A dflt p)\n    \\<subseteq> {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}", "by (auto simp: set_pmf_eq pmf_Pi)"], ["", "lemma Pi_pmf_cong [cong]:\n  assumes \"A = A'\" \"dflt = dflt'\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows   \"Pi_pmf A dflt f = Pi_pmf A' dflt' f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf A' dflt' f'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf A' dflt' f'", "have \"(\\<lambda>g. \\<Prod>x\\<in>A. pmf (f x) (g x)) = (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f' x) (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f x) (g x)) =\n    (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f' x) (g x))", "by (intro ext prod.cong) (auto simp: assms)"], ["proof (state)\nthis:\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f x) (g x)) =\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f' x) (g x))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf A' dflt' f'", "with assms"], ["proof (chain)\npicking this:\n  A = A'\n  dflt = dflt'\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f x) (g x)) =\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f' x) (g x))", "show ?thesis"], ["proof (prove)\nusing this:\n  A = A'\n  dflt = dflt'\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f x) (g x)) =\n  (\\<lambda>g. \\<Prod>x\\<in>A. pmf (f' x) (g x))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf A' dflt' f'", "by (simp add: Pi_pmf_def cong: if_cong)"], ["proof (state)\nthis:\n  Pi_pmf A dflt f = Pi_pmf A' dflt' f'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Dependent product sets with a default\\<close>"], ["", "text \\<open>\n  The following describes a dependent product of sets where the functions are required to return\n  the default value \\<^term>\\<open>dflt\\<close> outside their domain, in analogy to @{const PiE}, which uses\n  @{const undefined}.\n\\<close>"], ["", "definition PiE_dflt\n  where \"PiE_dflt A dflt B = {f. \\<forall>x. (x \\<in> A \\<longrightarrow> f x \\<in> B x) \\<and> (x \\<notin> A \\<longrightarrow> f x = dflt)}\""], ["", "lemma restrict_PiE_dflt: \"(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = PiE A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = Pi\\<^sub>E A B", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h. restrict h A) `\n               PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> Pi\\<^sub>E A B\n 2. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "fix h"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h. restrict h A) `\n               PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> Pi\\<^sub>E A B\n 2. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "assume \"h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\""], ["proof (state)\nthis:\n  h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h. restrict h A) `\n               PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> Pi\\<^sub>E A B\n 2. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "thus \"h \\<in> PiE A B\""], ["proof (prove)\nusing this:\n  h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. h \\<in> Pi\\<^sub>E A B", "by (auto simp: PiE_dflt_def)"], ["proof (state)\nthis:\n  h \\<in> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "assume h: \"h \\<in> PiE A B\""], ["proof (state)\nthis:\n  h \\<in> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "hence \"restrict (\\<lambda>x. if x \\<in> A then h x else dflt) A \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\""], ["proof (prove)\nusing this:\n  h \\<in> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt)\n    \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "by (intro imageI) (auto simp: PiE_def extensional_def PiE_dflt_def)"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt)\n  \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "also"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt)\n  \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "have \"restrict (\\<lambda>x. if x \\<in> A then h x else dflt) A = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt) = h", "using h"], ["proof (prove)\nusing this:\n  h \\<in> Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt) = h", "by (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x\\<in>A. if x \\<in> A then h x else dflt) = h\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "finally"], ["proof (chain)\npicking this:\n  h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "show \"h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\""], ["proof (prove)\nusing this:\n  h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B", "."], ["proof (state)\nthis:\n  h \\<in> (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dflt_image_PiE: \"(\\<lambda>h x. if x \\<in> A then h x else dflt) ` PiE A B = PiE_dflt A dflt B\"\n  (is \"?f ` ?X = ?Y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B =\n    PiE_dflt A dflt B", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> PiE_dflt A dflt B\n 2. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "fix h"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> PiE_dflt A dflt B\n 2. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "assume \"h \\<in> ?f ` ?X\""], ["proof (state)\nthis:\n  h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B \\<Longrightarrow>\n       x \\<in> PiE_dflt A dflt B\n 2. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "thus \"h \\<in> ?Y\""], ["proof (prove)\nusing this:\n  h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. h \\<in> PiE_dflt A dflt B", "by (auto simp: PiE_dflt_def PiE_def)"], ["proof (state)\nthis:\n  h \\<in> PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "assume h: \"h \\<in> ?Y\""], ["proof (state)\nthis:\n  h \\<in> PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "hence \"?f (restrict h A) \\<in> ?f ` ?X\""], ["proof (prove)\nusing this:\n  h \\<in> PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then restrict h A x else dflt)\n    \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B", "by (intro imageI) (auto simp: PiE_def extensional_def PiE_dflt_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then restrict h A x else dflt)\n  \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then restrict h A x else dflt)\n  \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "have \"?f (restrict h A) = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then restrict h A x else dflt) = h", "using h"], ["proof (prove)\nusing this:\n  h \\<in> PiE_dflt A dflt B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then restrict h A x else dflt) = h", "by (auto simp: fun_eq_iff PiE_dflt_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then restrict h A x else dflt) = h\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> PiE_dflt A dflt B \\<Longrightarrow>\n       x \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) `\n               Pi\\<^sub>E A B", "finally"], ["proof (chain)\npicking this:\n  h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B", "show \"h \\<in> ?f ` ?X\""], ["proof (prove)\nusing this:\n  h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B", "."], ["proof (state)\nthis:\n  h \\<in> (\\<lambda>h x. if x \\<in> A then h x else dflt) ` Pi\\<^sub>E A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_PiE_dflt [intro]:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"finite (PiE_dflt A d B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "have \"PiE_dflt A d B = (\\<lambda>f x. if x \\<in> A then f x else d) ` PiE A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PiE_dflt A d B =\n    (\\<lambda>f x. if x \\<in> A then f x else d) ` Pi\\<^sub>E A B", "by (rule dflt_image_PiE [symmetric])"], ["proof (state)\nthis:\n  PiE_dflt A d B =\n  (\\<lambda>f x. if x \\<in> A then f x else d) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "also"], ["proof (state)\nthis:\n  PiE_dflt A d B =\n  (\\<lambda>f x. if x \\<in> A then f x else d) ` Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "have \"finite \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>f x. if x \\<in> A then f x else d) ` Pi\\<^sub>E A B)", "by (intro finite_imageI finite_PiE assms)"], ["proof (state)\nthis:\n  finite ((\\<lambda>f x. if x \\<in> A then f x else d) ` Pi\\<^sub>E A B)\n\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "finally"], ["proof (chain)\npicking this:\n  finite (PiE_dflt A d B)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (PiE_dflt A d B)\n\ngoal (1 subgoal):\n 1. finite (PiE_dflt A d B)", "."], ["proof (state)\nthis:\n  finite (PiE_dflt A d B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_PiE_dflt:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)", "have \"(\\<Prod>x\\<in>A. card (B x)) = card (PiE A B)\""], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. card (B x)) = card (Pi\\<^sub>E A B)", "by (intro card_PiE [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. card (B x)) = card (Pi\\<^sub>E A B)\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. card (B x)) = card (Pi\\<^sub>E A B)\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "have \"PiE A B = (\\<lambda>f. restrict f A) ` PiE_dflt A d B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>E A B = (\\<lambda>f. restrict f A) ` PiE_dflt A d B", "by (rule restrict_PiE_dflt [symmetric])"], ["proof (state)\nthis:\n  Pi\\<^sub>E A B = (\\<lambda>f. restrict f A) ` PiE_dflt A d B\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "also"], ["proof (state)\nthis:\n  Pi\\<^sub>E A B = (\\<lambda>f. restrict f A) ` PiE_dflt A d B\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "have \"card \\<dots> = card (PiE_dflt A d B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>f. restrict f A) ` PiE_dflt A d B) =\n    card (PiE_dflt A d B)", "by (intro card_image) (force simp: inj_on_def restrict_def fun_eq_iff PiE_dflt_def)"], ["proof (state)\nthis:\n  card ((\\<lambda>f. restrict f A) ` PiE_dflt A d B) = card (PiE_dflt A d B)\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)\n\ngoal (1 subgoal):\n 1. card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))", ".."], ["proof (state)\nthis:\n  card (PiE_dflt A d B) = (\\<Prod>x\\<in>A. card (B x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PiE_dflt_empty_iff [simp]: \"PiE_dflt A dflt B = {} \\<longleftrightarrow> (\\<exists>x\\<in>A. B x = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PiE_dflt A dflt B = {}) = (\\<exists>x\\<in>A. B x = {})", "by (simp add: dflt_image_PiE [symmetric] PiE_eq_empty_iff)"], ["", "text \\<open>\n  The probability of an independent combination of events is precisely the product\n  of the probabilities of each individual event.\n\\<close>"], ["", "lemma measure_Pi_pmf_PiE_dflt:\n  assumes [simp]: \"finite A\"\n  shows   \"measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n             (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "define B' where \"B' = (\\<lambda>x. B x \\<inter> set_pmf (p x))\""], ["proof (state)\nthis:\n  B' = (\\<lambda>x. B x \\<inter> set_pmf (p x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n          (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. pmf (Pi_pmf A dflt p) h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B)", "by (rule measure_pmf_conv_infsetsum)"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"\\<dots> = (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B) =\n    (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x))", "by (intro infsetsum_cong, subst pmf_Pi') (auto simp: PiE_dflt_def)"], ["proof (state)\nthis:\n  infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B) =\n  (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  infsetsum (pmf (Pi_pmf A dflt p)) (PiE_dflt A dflt B) =\n  (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"\\<dots> = (\\<Sum>\\<^sub>ah\\<in>(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B.\n       \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n    (\\<Sum>\\<^sub>ah\\<in>(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B.\n       \\<Prod>x\\<in>A. pmf (p x) (h x))", "by (subst infsetsum_reindex) (force simp: inj_on_def PiE_dflt_def fun_eq_iff)+"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Sum>\\<^sub>ah\\<in>(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B.\n     \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>PiE_dflt A dflt B. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Sum>\\<^sub>ah\\<in>(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B.\n     \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"(\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = PiE A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = Pi\\<^sub>E A B", "by (rule restrict_PiE_dflt)"], ["proof (state)\nthis:\n  (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  (\\<lambda>h. restrict h A) ` PiE_dflt A dflt B = Pi\\<^sub>E A B\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"(\\<Sum>\\<^sub>ah\\<in>PiE A B. \\<Prod>x\\<in>A. pmf (p x) (h x)) = (\\<Sum>\\<^sub>ah\\<in>PiE A B'. \\<Prod>x\\<in>A. pmf (p x) (h x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n    (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x))", "by (intro infsetsum_cong_neutral) (auto simp: B'_def set_pmf_eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"(\\<Sum>\\<^sub>ah\\<in>PiE A B'. \\<Prod>x\\<in>A. pmf (p x) (h x)) = (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n    (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x))", "by (intro infsetsum_prod_PiE) (auto simp: B'_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ah\\<in>Pi\\<^sub>E A B'. \\<Prod>x\\<in>A. pmf (p x) (h x)) =\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"\\<dots> = (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x)) =\n    (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))", "by (intro prod.cong infsetsum_cong_neutral) (auto simp: B'_def set_pmf_eq)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x)) =\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B' x)) =\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"\\<dots> = (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x)) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "by (subst measure_pmf_conv_infsetsum) (rule refl)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. infsetsum (pmf (p x)) (B x)) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "finally"], ["proof (chain)\npicking this:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "show ?thesis"], ["proof (prove)\nusing this:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "."], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_Pi_pmf_subset':\n  assumes \"finite A\"\n  shows   \"set_pmf (Pi_pmf A dflt p) \\<subseteq> PiE_dflt A dflt (set_pmf \\<circ> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (Pi_pmf A dflt p)\n    \\<subseteq> PiE_dflt A dflt (set_pmf \\<circ> p)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. set_pmf (Pi_pmf A dflt p)\n    \\<subseteq> PiE_dflt A dflt (set_pmf \\<circ> p)", "by (auto simp: set_pmf_eq pmf_Pi PiE_dflt_def)"], ["", "lemma Pi_pmf_return_pmf [simp]:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) = return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "have \"set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x))) \\<subseteq>\n          PiE_dflt A dflt (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)))\n    \\<subseteq> PiE_dflt A dflt\n                 (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))", "by (intro set_Pi_pmf_subset' assms)"], ["proof (state)\nthis:\n  set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)))\n  \\<subseteq> PiE_dflt A dflt\n               (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "also"], ["proof (state)\nthis:\n  set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)))\n  \\<subseteq> PiE_dflt A dflt\n               (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "have \"\\<dots> \\<subseteq> {\\<lambda>x. if x \\<in> A then f x else dflt}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PiE_dflt A dflt (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))\n    \\<subseteq> {\\<lambda>x. if x \\<in> A then f x else dflt}", "by (auto simp: PiE_dflt_def)"], ["proof (state)\nthis:\n  PiE_dflt A dflt (set_pmf \\<circ> (\\<lambda>x. return_pmf (f x)))\n  \\<subseteq> {\\<lambda>x. if x \\<in> A then f x else dflt}\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "finally"], ["proof (chain)\npicking this:\n  set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)))\n  \\<subseteq> {\\<lambda>x. if x \\<in> A then f x else dflt}", "show ?thesis"], ["proof (prove)\nusing this:\n  set_pmf (Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)))\n  \\<subseteq> {\\<lambda>x. if x \\<in> A then f x else dflt}\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n    return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)", "by (simp add: set_pmf_subset_singleton)"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. return_pmf (f x)) =\n  return_pmf (\\<lambda>x. if x \\<in> A then f x else dflt)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_return_pmf' [simp]:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A dflt (\\<lambda>_. return_pmf dflt) = return_pmf (\\<lambda>_. dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. return_pmf dflt) =\n    return_pmf (\\<lambda>_. dflt)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. return_pmf dflt) =\n    return_pmf (\\<lambda>_. dflt)", "by simp"], ["", "lemma measure_Pi_pmf_Pi:\n  fixes t::nat\n  assumes [simp]: \"finite A\"\n  shows   \"measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n             (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"?lhs = measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B)", "by (intro measure_prob_cong_0)\n       (auto simp: PiE_dflt_def PiE_def intro!: pmf_Pi_outside)+"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "by (simp add: measure_Pi_pmf_PiE_dflt)"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (PiE_dflt A dflt B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "finally"], ["proof (chain)\npicking this:\n  measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "show ?thesis"], ["proof (prove)\nusing this:\n  measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n    (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))", "by simp"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) (Pi A B) =\n  (\\<Prod>x\\<in>A. measure_pmf.prob (p x) (B x))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Common PMF operations on products\\<close>"], ["", "text \\<open>\n  @{const Pi_pmf} distributes over the `bind' operation in the Giry monad:\n\\<close>"], ["", "lemma Pi_pmf_bind:\n  assumes \"finite A\"\n  shows   \"Pi_pmf A d (\\<lambda>x. bind_pmf (p x) (q x)) =\n             do {f \\<leftarrow> Pi_pmf A d' p; Pi_pmf A d (\\<lambda>x. q x (f x))}\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A d (\\<lambda>x. p x \\<bind> q x) =\n    Pi_pmf A d' p \\<bind> (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x)))", "proof (rule pmf_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) i =\n       pmf (Pi_pmf A d' p \\<bind>\n            (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n        i", "case (1 f)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) i =\n       pmf (Pi_pmf A d' p \\<bind>\n            (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n        i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "proof (cases \"\\<exists>x\\<in>-A. f x \\<noteq> d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "define B where \"B = (\\<lambda>x. set_pmf (p x))\""], ["proof (state)\nthis:\n  B = (\\<lambda>x. set_pmf (p x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have [simp]: \"countable (B x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (B x)", "by (auto simp: B_def)"], ["proof (state)\nthis:\n  countable (B ?x)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "{"], ["proof (state)\nthis:\n  countable (B ?x)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "fix x :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"(\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x", "by (simp add: pmf_abs_summable)"], ["proof (state)\nthis:\n  (\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"norm (pmf (p x) a * 1) \\<ge> norm (pmf (p x) a * pmf (q x a) (f x))\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (pmf (p x) a * pmf (q x a) (f x)) \\<le> norm (pmf (p x) a * 1)", "unfolding norm_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (pmf (p x) a) * norm (pmf (q x a) (f x))\n    \\<le> norm (pmf (p x) a) * norm 1", "by (intro mult_left_mono) (auto simp: pmf_le_1)"], ["proof (state)\nthis:\n  norm (pmf (p x) ?a * pmf (q x ?a) (f x)) \\<le> norm (pmf (p x) ?a * 1)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x\n  norm (pmf (p x) ?a * pmf (q x ?a) (f x)) \\<le> norm (pmf (p x) ?a * 1)", "have \"(\\<lambda>a. pmf (p x) a * pmf (q x a) (f x)) abs_summable_on B x\""], ["proof (prove)\nusing this:\n  (\\<lambda>a. pmf (p x) a * 1) abs_summable_on B x\n  norm (pmf (p x) ?a * pmf (q x ?a) (f x)) \\<le> norm (pmf (p x) ?a * 1)\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. pmf (p x) a * pmf (q x a) (f x)) abs_summable_on B x", "by (rule abs_summable_on_comparison_test)"], ["proof (state)\nthis:\n  (\\<lambda>a. pmf (p x) a * pmf (q x a) (f x)) abs_summable_on B x\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "}"], ["proof (state)\nthis:\n  (\\<lambda>a. pmf (p ?x2) a * pmf (q ?x2 a) (f ?x2)) abs_summable_on B ?x2\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "note summable = this"], ["proof (state)\nthis:\n  (\\<lambda>a. pmf (p ?x2) a * pmf (q ?x2 a) (f ?x2)) abs_summable_on B ?x2\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"pmf ?rhs f = (\\<Sum>\\<^sub>ag. pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f =\n    (\\<Sum>\\<^sub>ag.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))", "by (subst pmf_bind, subst pmf_Pi')\n         (insert assms False, simp_all add: pmf_expectation_eq_infsetsum)"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  (\\<Sum>\\<^sub>ag.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  (\\<Sum>\\<^sub>ag.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n                      pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n    (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n    (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' (\\<lambda>x. set_pmf (p x)).\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n    (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' (\\<lambda>x. set_pmf (p x)).\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))", "by (intro infsetsum_cong_neutral) (auto simp: pmf_Pi PiE_dflt_def set_pmf_eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x)))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n                      (\\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n    (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n    (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))", "by (intro infsetsum_cong) (auto simp: pmf_Pi PiE_dflt_def prod.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     pmf (Pi_pmf A d' p) g * (\\<Prod>x\\<in>A. pmf (q x (g x)) (f x))) =\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = (\\<Sum>\\<^sub>ag\\<in>(\\<lambda>g. restrict g A) ` PiE_dflt A d' B.\n                      (\\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n    (\\<Sum>\\<^sub>ag\\<in>(\\<lambda>g. restrict g A) ` PiE_dflt A d' B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))", "by (subst infsetsum_reindex) (force simp: PiE_dflt_def inj_on_def fun_eq_iff)+"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n  (\\<Sum>\\<^sub>ag\\<in>(\\<lambda>g. restrict g A) ` PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n  (\\<Sum>\\<^sub>ag\\<in>(\\<lambda>g. restrict g A) ` PiE_dflt A d' B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"(\\<lambda>g. restrict g A) ` PiE_dflt A d' B = PiE A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>g. restrict g A) ` PiE_dflt A d' B = Pi\\<^sub>E A B", "by (rule restrict_PiE_dflt)"], ["proof (state)\nthis:\n  (\\<lambda>g. restrict g A) ` PiE_dflt A d' B = Pi\\<^sub>E A B\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<lambda>g. restrict g A) ` PiE_dflt A d' B = Pi\\<^sub>E A B\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"(\\<Sum>\\<^sub>ag\\<in>\\<dots>. (\\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x))) =\n                 (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>Pi\\<^sub>E A B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n    (\\<Prod>x\\<in>A.\n       \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x))", "using assms summable"], ["proof (prove)\nusing this:\n  finite A\n  (\\<lambda>a. pmf (p ?x2) a * pmf (q ?x2 a) (f ?x2)) abs_summable_on B ?x2\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>Pi\\<^sub>E A B.\n       \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n    (\\<Prod>x\\<in>A.\n       \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x))", "by (subst infsetsum_prod_PiE) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>Pi\\<^sub>E A B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n  (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>Pi\\<^sub>E A B.\n     \\<Prod>x\\<in>A. pmf (p x) (g x) * pmf (q x (g x)) (f x)) =\n  (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A.\n       \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x)) =\n    (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x))", "by (intro prod.cong infsetsum_cong_neutral) (auto simp: B_def set_pmf_eq)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A.\n     \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x)) =\n  (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A.\n     \\<Sum>\\<^sub>aa\\<in>B x. pmf (p x) a * pmf (q x a) (f x)) =\n  (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = pmf ?lhs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x)) =\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "using False assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d)\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x)) =\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "by (subst pmf_Pi') (simp_all add: pmf_bind pmf_expectation_eq_infsetsum)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. \\<Sum>\\<^sub>aa. pmf (p x) a * pmf (q x a) (f x)) =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> d) \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "finally"], ["proof (chain)\npicking this:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", ".."], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "case True"], ["proof (state)\nthis:\n  \\<exists>x\\<in>- A. f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"pmf ?rhs f =\n            measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f =\n    measure_pmf.expectation (Pi_pmf A d' p)\n     (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f =\n    measure_pmf.expectation (Pi_pmf A d' p)\n     (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f)", "by (simp add: pmf_bind)"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  measure_pmf.expectation (Pi_pmf A d' p)\n   (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  measure_pmf.expectation (Pi_pmf A d' p)\n   (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (Pi_pmf A d' p)\n     (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f) =\n    measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0)", "using assms True"], ["proof (prove)\nusing this:\n  finite A\n  \\<exists>x\\<in>- A. f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (Pi_pmf A d' p)\n     (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f) =\n    measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0)", "by (intro Bochner_Integration.integral_cong pmf_Pi_outside) auto"], ["proof (state)\nthis:\n  measure_pmf.expectation (Pi_pmf A d' p)\n   (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f) =\n  measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "also"], ["proof (state)\nthis:\n  measure_pmf.expectation (Pi_pmf A d' p)\n   (\\<lambda>x. pmf (Pi_pmf A d (\\<lambda>xa. q xa (x xa))) f) =\n  measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "have \"\\<dots> = pmf ?lhs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0) =\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "using assms True"], ["proof (prove)\nusing this:\n  finite A\n  \\<exists>x\\<in>- A. f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0) =\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "by (subst pmf_Pi_outside) auto"], ["proof (state)\nthis:\n  measure_pmf.expectation (Pi_pmf A d' p) (\\<lambda>x. 0) =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", "finally"], ["proof (chain)\npicking this:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f =\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n    pmf (Pi_pmf A d' p \\<bind>\n         (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n     f", ".."], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. p x \\<bind> q x)) f =\n  pmf (Pi_pmf A d' p \\<bind>\n       (\\<lambda>f. Pi_pmf A d (\\<lambda>x. q x (f x))))\n   f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Analogously any componentwise mapping can be pulled outside the product:\n\\<close>"], ["", "lemma Pi_pmf_map:\n  assumes [simp]: \"finite A\" and \"f dflt = dflt'\"\n  shows   \"Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) = map_pmf (\\<lambda>h. f \\<circ> h) (Pi_pmf A dflt g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "have \"Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n          Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  f dflt = dflt'\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x)))", "by (simp add: map_pmf_def Pi_pmf_bind)"], ["proof (state)\nthis:\n  Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n  Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "also"], ["proof (state)\nthis:\n  Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n  Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "have \"\\<dots> = Pi_pmf A dflt g \\<bind> (\\<lambda>h. return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt'\n     (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x))) =\n    Pi_pmf A dflt g \\<bind>\n    (\\<lambda>h.\n        return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt'))", "by (subst Pi_pmf_bind[where d' = dflt]) auto"], ["proof (state)\nthis:\n  Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x))) =\n  Pi_pmf A dflt g \\<bind>\n  (\\<lambda>h.\n      return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt'))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "also"], ["proof (state)\nthis:\n  Pi_pmf A dflt' (\\<lambda>x. g x \\<bind> (\\<lambda>x. return_pmf (f x))) =\n  Pi_pmf A dflt g \\<bind>\n  (\\<lambda>h.\n      return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt'))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "have \"\\<dots> = map_pmf (\\<lambda>h. f \\<circ> h) (Pi_pmf A dflt g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt g \\<bind>\n    (\\<lambda>h.\n        return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt')) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "unfolding map_pmf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt g \\<bind>\n    (\\<lambda>h.\n        return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt')) =\n    Pi_pmf A dflt g \\<bind> (\\<lambda>x. return_pmf (f \\<circ> x))", "using set_Pi_pmf_subset'[of A dflt g]"], ["proof (prove)\nusing this:\n  finite A \\<Longrightarrow>\n  set_pmf (Pi_pmf A dflt g) \\<subseteq> PiE_dflt A dflt (set_pmf \\<circ> g)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt g \\<bind>\n    (\\<lambda>h.\n        return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt')) =\n    Pi_pmf A dflt g \\<bind> (\\<lambda>x. return_pmf (f \\<circ> x))", "by (intro bind_pmf_cong refl arg_cong[of _ _ return_pmf])\n       (auto dest: simp: fun_eq_iff PiE_dflt_def assms(2))"], ["proof (state)\nthis:\n  Pi_pmf A dflt g \\<bind>\n  (\\<lambda>h.\n      return_pmf (\\<lambda>x. if x \\<in> A then f (h x) else dflt')) =\n  map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n  map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n  map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n    map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)", "."], ["proof (state)\nthis:\n  Pi_pmf A dflt' (\\<lambda>x. map_pmf f (g x)) =\n  map_pmf ((\\<circ>) f) (Pi_pmf A dflt g)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We can exchange the default value in a product of PMFs like this:\n\\<close>"], ["", "lemma Pi_pmf_default_swap:\n  assumes \"finite A\"\n  shows   \"map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt') (Pi_pmf A dflt p) =\n             Pi_pmf A dflt' p\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n     (Pi_pmf A dflt p) =\n    Pi_pmf A dflt' p", "proof (rule pmf_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n             (Pi_pmf A dflt p))\n        i =\n       pmf (Pi_pmf A dflt' p) i", "case (1 f)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n             (Pi_pmf A dflt p))\n        i =\n       pmf (Pi_pmf A dflt' p) i", "let ?B = \"(\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter> PiE_dflt A dflt (\\<lambda>_. UNIV)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n             (Pi_pmf A dflt p))\n        i =\n       pmf (Pi_pmf A dflt' p) i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "proof (cases \"\\<exists>x\\<in>-A. f x \\<noteq> dflt'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "let ?f' = \"\\<lambda>x. if x \\<in> A then f x else dflt\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')", "have \"pmf ?lhs f = measure_pmf.prob (Pi_pmf A dflt p) ?B\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n  finite A\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "unfolding pmf_map"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n  finite A\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f}) =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "by (intro measure_prob_cong_0) (auto simp: PiE_dflt_def pmf_Pi_outside)"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  measure_pmf.prob (Pi_pmf A dflt p)\n   ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  measure_pmf.prob (Pi_pmf A dflt p)\n   ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV))\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')", "have \"?B = {?f'}\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n\ngoal (1 subgoal):\n 1. (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV) =\n    {\\<lambda>x. if x \\<in> A then f x else dflt}", "by (auto simp: fun_eq_iff PiE_dflt_def)"], ["proof (state)\nthis:\n  (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n  PiE_dflt A dflt (\\<lambda>_. UNIV) =\n  {\\<lambda>x. if x \\<in> A then f x else dflt}\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n  PiE_dflt A dflt (\\<lambda>_. UNIV) =\n  {\\<lambda>x. if x \\<in> A then f x else dflt}\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "have \"measure_pmf.prob (Pi_pmf A dflt p) {?f'} = pmf (Pi_pmf A dflt p) ?f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p)\n     {\\<lambda>x. if x \\<in> A then f x else dflt} =\n    pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt)", "by (simp add: measure_pmf_single)"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p)\n   {\\<lambda>x. if x \\<in> A then f x else dflt} =\n  pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p)\n   {\\<lambda>x. if x \\<in> A then f x else dflt} =\n  pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt)\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "have \"\\<dots> = pmf ?rhs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt) =\n    pmf (Pi_pmf A dflt' p) f", "using False assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt')\n  finite A\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt) =\n    pmf (Pi_pmf A dflt' p) f", "by (subst (1 2) pmf_Pi) auto"], ["proof (state)\nthis:\n  pmf (Pi_pmf A dflt p) (\\<lambda>x. if x \\<in> A then f x else dflt) =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f\n 2. \\<not> (\\<exists>x\\<in>- A. f x \\<noteq> dflt') \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "finally"], ["proof (chain)\npicking this:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "."], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "case True"], ["proof (state)\nthis:\n  \\<exists>x\\<in>- A. f x \\<noteq> dflt'\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "have \"pmf ?lhs f = measure_pmf.prob (Pi_pmf A dflt p) ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "unfolding pmf_map"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f}) =\n    measure_pmf.prob (Pi_pmf A dflt p)\n     ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n      PiE_dflt A dflt (\\<lambda>_. UNIV))", "by (intro measure_prob_cong_0) (auto simp: PiE_dflt_def pmf_Pi_outside)"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  measure_pmf.prob (Pi_pmf A dflt p)\n   ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV))\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  measure_pmf.prob (Pi_pmf A dflt p)\n   ((\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV))\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "from True"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>- A. f x \\<noteq> dflt'", "have \"?B = {}\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>- A. f x \\<noteq> dflt'\n\ngoal (1 subgoal):\n 1. (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n    PiE_dflt A dflt (\\<lambda>_. UNIV) =\n    {}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n  PiE_dflt A dflt (\\<lambda>_. UNIV) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  (\\<lambda>f x. if x \\<in> A then f x else dflt') -` {f} \\<inter>\n  PiE_dflt A dflt (\\<lambda>_. UNIV) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "have \"measure_pmf.prob (Pi_pmf A dflt p) \\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf A dflt p) {} = 0", "by simp"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) {} = 0\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf A dflt p) {} = 0\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "have \"0 = pmf ?rhs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = pmf (Pi_pmf A dflt' p) f", "using True assms"], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>- A. f x \\<noteq> dflt'\n  finite A\n\ngoal (1 subgoal):\n 1. 0 = pmf (Pi_pmf A dflt' p) f", "by (intro pmf_Pi_outside [symmetric]) auto"], ["proof (state)\nthis:\n  0 = pmf (Pi_pmf A dflt' p) f\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>- A. f x \\<noteq> dflt' \\<Longrightarrow>\n    pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "finally"], ["proof (chain)\npicking this:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n          (Pi_pmf A dflt p))\n     f =\n    pmf (Pi_pmf A dflt' p) f", "."], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>f x. if x \\<in> A then f x else dflt')\n        (Pi_pmf A dflt p))\n   f =\n  pmf (Pi_pmf A dflt' p) f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The following rule allows reindexing the product:\n\\<close>"], ["", "lemma Pi_pmf_bij_betw:\n  assumes \"finite A\" \"bij_betw h A B\" \"\\<And>x. x \\<notin> A \\<Longrightarrow> h x \\<notin> B\"\n  shows \"Pi_pmf A dflt (\\<lambda>_. f) = map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))\"\n    (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. f) =\n    map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. f) =\n    map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))", "have B: \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B", "using assms bij_betw_finite"], ["proof (prove)\nusing this:\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  bij_betw ?f ?A ?B \\<Longrightarrow> finite ?A = finite ?B\n\ngoal (1 subgoal):\n 1. finite B", "by auto"], ["proof (state)\nthis:\n  finite B\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. f) =\n    map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))", "have \"pmf ?lhs g = pmf ?rhs g\" for g"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "proof (cases \"\\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "case True"], ["proof (state)\nthis:\n  \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "define h' where \"h' = the_inv_into A h\""], ["proof (state)\nthis:\n  h' = the_inv_into A h\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have h': \"h' (h x) = x\" if \"x \\<in> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. h' (h x) = x", "unfolding h'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_inv_into A h (h x) = x", "using that assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n\ngoal (1 subgoal):\n 1. the_inv_into A h (h x) = x", "by (auto simp add: bij_betw_def the_inv_into_f_f)"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> h' (h ?x) = ?x\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have h: \"h (h' x) = x\" if \"x \\<in> B\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (h' x) = x", "unfolding h'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (the_inv_into A h x) = x", "using that assms f_the_inv_into_f_bij_betw"], ["proof (prove)\nusing this:\n  x \\<in> B\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  \\<lbrakk>bij_betw ?f ?A ?B;\n   bij_betw ?f ?A ?B \\<Longrightarrow> ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?f (the_inv_into ?A ?f ?x) = ?x\n\ngoal (1 subgoal):\n 1. h (the_inv_into A h x) = x", "by fastforce"], ["proof (state)\nthis:\n  ?x \\<in> B \\<Longrightarrow> h (h' ?x) = ?x\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"pmf ?rhs g = measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f)) ((\\<lambda>g. g \\<circ> h) -` {g})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g =\n    measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g})", "unfolding pmf_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g}) =\n    measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g})", "by simp"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g})\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "also"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g})\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"\\<dots> = measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n                                (((\\<lambda>g. g \\<circ> h) -` {g}) \\<inter> PiE_dflt B dflt (\\<lambda>_. UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g}) =\n    measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV))", "using B"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g}) =\n    measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV))", "by (intro measure_prob_cong_0) (auto simp: PiE_dflt_def pmf_Pi_outside)"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g}) =\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV))\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g}) =\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV))\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"\\<dots> = pmf (Pi_pmf B dflt (\\<lambda>_. f)) (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n    pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n    pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)", "have \"(if h x \\<in> B then g (h' (h x)) else dflt) = g x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if h x \\<in> B then g (h' (h x)) else dflt) = g x", "using h' assms True"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> h' (h ?x) = ?x\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\n\ngoal (1 subgoal):\n 1. (if h x \\<in> B then g (h' (h x)) else dflt) = g x", "by (cases \"x \\<in> A\") (auto simp add: bij_betwE)"], ["proof (state)\nthis:\n  (if h ?x \\<in> B then g (h' (h ?x)) else dflt) = g ?x\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n    pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)", "then"], ["proof (chain)\npicking this:\n  (if h ?x \\<in> B then g (h' (h ?x)) else dflt) = g ?x", "have \"(\\<lambda>g. g \\<circ> h) -` {g} \\<inter> PiE_dflt B dflt (\\<lambda>_. UNIV) =\n            {(\\<lambda>x. if x \\<in> B then g (h' x) else dflt)}\""], ["proof (prove)\nusing this:\n  (if h ?x \\<in> B then g (h' (h ?x)) else dflt) = g ?x\n\ngoal (1 subgoal):\n 1. (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV) =\n    {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}", "using assms h' h True"], ["proof (prove)\nusing this:\n  (if h ?x \\<in> B then g (h' (h ?x)) else dflt) = g ?x\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  ?x \\<in> A \\<Longrightarrow> h' (h ?x) = ?x\n  ?x \\<in> B \\<Longrightarrow> h (h' ?x) = ?x\n  \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\n\ngoal (1 subgoal):\n 1. (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV) =\n    {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}", "unfolding PiE_dflt_def"], ["proof (prove)\nusing this:\n  (if h ?x \\<in> B then g (h' (h ?x)) else dflt) = g ?x\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  ?x \\<in> A \\<Longrightarrow> h' (h ?x) = ?x\n  ?x \\<in> B \\<Longrightarrow> h (h' ?x) = ?x\n  \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\n\ngoal (1 subgoal):\n 1. (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    {f. \\<forall>x.\n           (x \\<in> B \\<longrightarrow> f x \\<in> UNIV) \\<and>\n           (x \\<notin> B \\<longrightarrow> f x = dflt)} =\n    {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n  PiE_dflt B dflt (\\<lambda>_. UNIV) =\n  {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n    pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n  PiE_dflt B dflt (\\<lambda>_. UNIV) =\n  {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n  PiE_dflt B dflt (\\<lambda>_. UNIV) =\n  {\\<lambda>x. if x \\<in> B then g (h' x) else dflt}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n     ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n      PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n    pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)", "by (simp add: measure_pmf_single)"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n  pmf (Pi_pmf B dflt (\\<lambda>_. f))\n   (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n  pmf (Pi_pmf B dflt (\\<lambda>_. f))\n   (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (Pi_pmf B dflt (\\<lambda>_. f))\n   ((\\<lambda>g. g \\<circ> h) -` {g} \\<inter>\n    PiE_dflt B dflt (\\<lambda>_. UNIV)) =\n  pmf (Pi_pmf B dflt (\\<lambda>_. f))\n   (\\<lambda>x. if x \\<in> B then g (h' x) else dflt)\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"\\<dots> = pmf (Pi_pmf A dflt (\\<lambda>_. f)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt) =\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g", "using B assms True  h'_def"], ["proof (prove)\nusing this:\n  finite B\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt\n  h' = the_inv_into A h\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf B dflt (\\<lambda>_. f))\n     (\\<lambda>x. if x \\<in> B then g (h' x) else dflt) =\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g", "by (auto simp add: pmf_Pi intro!: prod.reindex_bij_betw bij_betw_the_inv_into)"], ["proof (state)\nthis:\n  pmf (Pi_pmf B dflt (\\<lambda>_. f))\n   (\\<lambda>x. if x \\<in> B then g (h' x) else dflt) =\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) g\n\ngoal (2 subgoals):\n 1. \\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g\n 2. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "finally"], ["proof (chain)\npicking this:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) g", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) g\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "by simp"], ["proof (state)\nthis:\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))) g\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"pmf ?rhs g = infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f))) ((\\<lambda>g. g \\<circ> h) -` {g})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g =\n    infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n     ((\\<lambda>g. g \\<circ> h) -` {g})", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g =\n    infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n     ((\\<lambda>g. g \\<circ> h) -` {g})", "by (auto simp add: measure_pmf_conv_infsetsum pmf_map)"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n   ((\\<lambda>g. g \\<circ> h) -` {g})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "also"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n   ((\\<lambda>g. g \\<circ> h) -` {g})\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"\\<dots> = infsetsum (\\<lambda>_. 0) ((\\<lambda>g x. g (h x)) -` {g})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n     ((\\<lambda>g. g \\<circ> h) -` {g}) =\n    (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0)", "using B False assms"], ["proof (prove)\nusing this:\n  finite B\n  \\<not> (\\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt)\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n\ngoal (1 subgoal):\n 1. infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n     ((\\<lambda>g. g \\<circ> h) -` {g}) =\n    (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0)", "by (intro infsetsum_cong pmf_Pi_outside) fastforce+"], ["proof (state)\nthis:\n  infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n   ((\\<lambda>g. g \\<circ> h) -` {g}) =\n  (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "also"], ["proof (state)\nthis:\n  infsetsum (pmf (Pi_pmf B dflt (\\<lambda>_. f)))\n   ((\\<lambda>g. g \\<circ> h) -` {g}) =\n  (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a_\\<in>(\\<lambda>g x. g (h x)) -` {g}. 0) = 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               a \\<notin> A \\<longrightarrow> g a = dflt) \\<Longrightarrow>\n    pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "finally"], ["proof (chain)\npicking this:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  0", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  0\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "using assms False"], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n   g =\n  0\n  finite A\n  bij_betw h A B\n  ?x \\<notin> A \\<Longrightarrow> h ?x \\<notin> B\n  \\<not> (\\<forall>a. a \\<notin> A \\<longrightarrow> g a = dflt)\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n    pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f)))\n     g", "by (auto simp add: pmf_Pi pmf_map)"], ["proof (state)\nthis:\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) g =\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))) g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) ?g =\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))) ?g\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. f) =\n    map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))", "then"], ["proof (chain)\npicking this:\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) ?g =\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))) ?g", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (Pi_pmf A dflt (\\<lambda>_. f)) ?g =\n  pmf (map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))) ?g\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. f) =\n    map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))", "by (rule pmf_eqI)"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>_. f) =\n  map_pmf (\\<lambda>g. g \\<circ> h) (Pi_pmf B dflt (\\<lambda>_. f))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  A product of uniform random choices is again a uniform distribution.\n\\<close>"], ["", "lemma Pi_pmf_of_set:\n  assumes \"finite A\" \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\" \"\\<And>x. x \\<in> A \\<Longrightarrow> B x \\<noteq> {}\"\n  shows   \"Pi_pmf A d (\\<lambda>x. pmf_of_set (B x)) = pmf_of_set (PiE_dflt A d B)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A d (\\<lambda>x. pmf_of_set (B x)) = pmf_of_set (PiE_dflt A d B)", "proof (rule pmf_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) i =\n       pmf (pmf_of_set (PiE_dflt A d B)) i", "case (1 f)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) i =\n       pmf (pmf_of_set (PiE_dflt A d B)) i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "proof (cases \"\\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "case True"], ["proof (state)\nthis:\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "hence \"pmf ?lhs f = 0\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f = 0", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f = 0", "by (intro pmf_Pi_outside) (auto simp: PiE_dflt_def)"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f = 0\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f = 0\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "from True"], ["proof (chain)\npicking this:\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d", "have \"f \\<notin> PiE_dflt A d B\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. f \\<notin> PiE_dflt A d B", "by (auto simp: PiE_dflt_def)"], ["proof (state)\nthis:\n  f \\<notin> PiE_dflt A d B\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "hence \"0 = pmf ?rhs f\""], ["proof (prove)\nusing this:\n  f \\<notin> PiE_dflt A d B\n\ngoal (1 subgoal):\n 1. 0 = pmf (pmf_of_set (PiE_dflt A d B)) f", "using assms"], ["proof (prove)\nusing this:\n  f \\<notin> PiE_dflt A d B\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. 0 = pmf (pmf_of_set (PiE_dflt A d B)) f", "by (subst pmf_of_set) auto"], ["proof (state)\nthis:\n  0 = pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f\n 2. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "finally"], ["proof (chain)\npicking this:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "."], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "hence \"pmf ?lhs f = (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x))\""], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x))", "using assms"], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x))", "by (subst pmf_Pi') auto"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "have \"\\<dots> = (\\<Prod>x\\<in>A. indicator (B x) (f x) / real (card (B x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x)) =\n    (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x)))", "by (intro prod.cong refl, subst pmf_of_set) (use assms False in auto)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x)) =\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x)))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. pmf (pmf_of_set (B x)) (f x)) =\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x)))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "have \"\\<dots> = (\\<Prod>x\\<in>A. indicator (B x) (f x)) / real (\\<Prod>x\\<in>A. card (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x))) =\n    (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) /\n    real (\\<Prod>x\\<in>A. card (B x))", "by (subst prod_dividef) simp_all"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x))) =\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) /\n  real (\\<Prod>x\\<in>A. card (B x))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x) / real (card (B x))) =\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) /\n  real (\\<Prod>x\\<in>A. card (B x))\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "have \"(\\<Prod>x\\<in>A. indicator (B x) (f x) :: real) = indicator (PiE_dflt A d B) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) =\n    indicat_real (PiE_dflt A d B) f", "using assms False"], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n  \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) =\n    indicat_real (PiE_dflt A d B) f", "by (auto simp: indicator_def PiE_dflt_def)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) =\n  indicat_real (PiE_dflt A d B) f\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. indicat_real (B x) (f x)) =\n  indicat_real (PiE_dflt A d B) f\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "have \"(\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)", "by (intro card_PiE_dflt [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. card (B x)) = card (PiE_dflt A d B)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "have \"indicator (PiE_dflt A d B) f / \\<dots> = pmf ?rhs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indicat_real (PiE_dflt A d B) f / real (card (PiE_dflt A d B)) =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n  ?x \\<in> A \\<Longrightarrow> B ?x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. indicat_real (PiE_dflt A d B) f / real (card (PiE_dflt A d B)) =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "by (intro pmf_of_set [symmetric]) auto"], ["proof (state)\nthis:\n  indicat_real (PiE_dflt A d B) f / real (card (PiE_dflt A d B)) =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<notin> A \\<and> f x \\<noteq> d \\<Longrightarrow>\n    pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "finally"], ["proof (chain)\npicking this:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n    pmf (pmf_of_set (PiE_dflt A d B)) f", "."], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmf (Pi_pmf A d (\\<lambda>x. pmf_of_set (B x))) f =\n  pmf (pmf_of_set (PiE_dflt A d B)) f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Merging and splitting PMF products\\<close>"], ["", "text \\<open>\n  The following lemma shows that we can add a single PMF to a product:\n\\<close>"], ["", "lemma Pi_pmf_insert:\n  assumes \"finite A\" \"x \\<notin> A\"\n  shows   \"Pi_pmf (insert x A) dflt p = map_pmf (\\<lambda>(y,f). f(x:=y)) (pair_pmf (p x) (Pi_pmf A dflt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (insert x A) dflt p =\n    map_pmf (\\<lambda>(y, f). f(x := y)) (pair_pmf (p x) (Pi_pmf A dflt p))", "proof (intro pmf_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "let ?M = \"pair_pmf (p x) (Pi_pmf A dflt p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "have \"pmf (map_pmf (\\<lambda>(y, f). f(x := y)) ?M) f =\n          measure_pmf.prob ?M ((\\<lambda>(y, f). f(x := y)) -` {f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n          (pair_pmf (p x) (Pi_pmf A dflt p)))\n     f =\n    measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     ((\\<lambda>(y, f). f(x := y)) -` {f})", "by (subst pmf_map) auto"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n        (pair_pmf (p x) (Pi_pmf A dflt p)))\n   f =\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   ((\\<lambda>(y, f). f(x := y)) -` {f})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "also"], ["proof (state)\nthis:\n  pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n        (pair_pmf (p x) (Pi_pmf A dflt p)))\n   f =\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   ((\\<lambda>(y, f). f(x := y)) -` {f})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "have \"((\\<lambda>(y, f). f(x := y)) -` {f}) = (\\<Union>y'. {(f x, f(x := y'))})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(y, f). f(x := y)) -` {f} = (\\<Union>y'. {(f x, f(x := y'))})", "by (auto simp: fun_upd_def fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>(y, f). f(x := y)) -` {f} = (\\<Union>y'. {(f x, f(x := y'))})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "also"], ["proof (state)\nthis:\n  (\\<lambda>(y, f). f(x := y)) -` {f} = (\\<Union>y'. {(f x, f(x := y'))})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "have \"measure_pmf.prob ?M \\<dots> = measure_pmf.prob ?M {(f x, f(x := dflt))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     (\\<Union>y'. {(f x, f(x := y'))}) =\n    measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     {(f x, f(x := dflt))}", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     (\\<Union>y'. {(f x, f(x := y'))}) =\n    measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     {(f x, f(x := dflt))}", "by (intro measure_prob_cong_0) (auto simp: pmf_pair pmf_Pi split: if_splits)"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   (\\<Union>y'. {(f x, f(x := y'))}) =\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p)) {(f x, f(x := dflt))}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   (\\<Union>y'. {(f x, f(x := y'))}) =\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p)) {(f x, f(x := dflt))}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "have \"\\<dots> = pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n     {(f x, f(x := dflt))} =\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt))", "by (simp add: measure_pmf_single pmf_pair pmf_Pi)"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   {(f x, f(x := dflt))} =\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "also"], ["proof (state)\nthis:\n  measure_pmf.prob (pair_pmf (p x) (Pi_pmf A dflt p))\n   {(f x, f(x := dflt))} =\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "have \"\\<dots> = pmf (Pi_pmf (insert x A) dflt p) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "proof (cases \"\\<forall>y. y \\<notin> insert x A \\<longrightarrow> f y = dflt\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "case True"], ["proof (state)\nthis:\n  \\<forall>y. y \\<notin> insert x A \\<longrightarrow> f y = dflt\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "with assms"], ["proof (chain)\npicking this:\n  finite A\n  x \\<notin> A\n  \\<forall>y. y \\<notin> insert x A \\<longrightarrow> f y = dflt", "have \"pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n                       pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa))\""], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  \\<forall>y. y \\<notin> insert x A \\<longrightarrow> f y = dflt\n\ngoal (1 subgoal):\n 1. pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa))", "by (subst pmf_Pi') auto"], ["proof (state)\nthis:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa))\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "also"], ["proof (state)\nthis:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa))\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "have \"(\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa)) = (\\<Prod>xa\\<in>A. pmf (p xa) (f xa))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa)) =\n    (\\<Prod>xa\\<in>A. pmf (p xa) (f xa))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa)) =\n    (\\<Prod>xa\\<in>A. pmf (p xa) (f xa))", "by (intro prod.cong) auto"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa)) =\n  (\\<Prod>xa\\<in>A. pmf (p xa) (f xa))\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "also"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>A. pmf (p xa) ((f(x := dflt)) xa)) =\n  (\\<Prod>xa\\<in>A. pmf (p xa) (f xa))\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "have \"pmf (p x) (f x) * \\<dots> = pmf (Pi_pmf (insert x A) dflt p) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "using assms True"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  \\<forall>y. y \\<notin> insert x A \\<longrightarrow> f y = dflt\n\ngoal (1 subgoal):\n 1. pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "by (subst pmf_Pi') auto"], ["proof (state)\nthis:\n  pmf (p x) (f x) * (\\<Prod>xa\\<in>A. pmf (p xa) (f xa)) =\n  pmf (Pi_pmf (insert x A) dflt p) f\n\ngoal (2 subgoals):\n 1. \\<forall>y.\n       y \\<notin> insert x A \\<longrightarrow> f y = dflt \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f\n 2. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "finally"], ["proof (chain)\npicking this:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (Pi_pmf (insert x A) dflt p) f", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (Pi_pmf (insert x A) dflt p) f\n\ngoal (1 subgoal):\n 1. pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "."], ["proof (state)\nthis:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (Pi_pmf (insert x A) dflt p) f\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>y.\n               y \\<notin> insert x A \\<longrightarrow>\n               f y = dflt) \\<Longrightarrow>\n    pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n    pmf (Pi_pmf (insert x A) dflt p) f", "qed (insert assms, auto simp: pmf_Pi)"], ["proof (state)\nthis:\n  pmf (p x) (f x) * pmf (Pi_pmf A dflt p) (f(x := dflt)) =\n  pmf (Pi_pmf (insert x A) dflt p) f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pmf (Pi_pmf (insert x A) dflt p) i =\n       pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n             (pair_pmf (p x) (Pi_pmf A dflt p)))\n        i", "finally"], ["proof (chain)\npicking this:\n  pmf (map_pmf (\\<lambda>a. case a of (y, f) \\<Rightarrow> f(x := y))\n        (pair_pmf (p x) (Pi_pmf A dflt p)))\n   f =\n  pmf (Pi_pmf (insert x A) dflt p) f", "show \"\\<dots> = pmf (map_pmf (\\<lambda>(y, f). f(x := y)) ?M) f\""], ["proof (prove)\nusing this:\n  pmf (map_pmf (\\<lambda>a. case a of (y, f) \\<Rightarrow> f(x := y))\n        (pair_pmf (p x) (Pi_pmf A dflt p)))\n   f =\n  pmf (Pi_pmf (insert x A) dflt p) f\n\ngoal (1 subgoal):\n 1. pmf (Pi_pmf (insert x A) dflt p) f =\n    pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n          (pair_pmf (p x) (Pi_pmf A dflt p)))\n     f", ".."], ["proof (state)\nthis:\n  pmf (Pi_pmf (insert x A) dflt p) f =\n  pmf (map_pmf (\\<lambda>(y, f). f(x := y))\n        (pair_pmf (p x) (Pi_pmf A dflt p)))\n   f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_insert':\n  assumes \"finite A\"  \"x \\<notin> A\"\n  shows   \"Pi_pmf (insert x A) dflt p =\n             do {y \\<leftarrow> p x; f \\<leftarrow> Pi_pmf A dflt p; return_pmf (f(x := y))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (insert x A) dflt p =\n    p x \\<bind>\n    (\\<lambda>y.\n        Pi_pmf A dflt p \\<bind> (\\<lambda>f. return_pmf (f(x := y))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. Pi_pmf (insert x A) dflt p =\n    p x \\<bind>\n    (\\<lambda>y.\n        Pi_pmf A dflt p \\<bind> (\\<lambda>f. return_pmf (f(x := y))))", "by (subst Pi_pmf_insert)\n     (auto simp add: map_pmf_def pair_pmf_def case_prod_beta' bind_return_pmf bind_assoc_pmf)"], ["", "lemma Pi_pmf_singleton:\n  \"Pi_pmf {x} dflt p = map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "have \"Pi_pmf {x} dflt p = map_pmf (fun_upd (\\<lambda>_. dflt) x) (p x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p = map_pmf (fun_upd (\\<lambda>_. dflt) x) (p x)", "by (subst Pi_pmf_insert) (simp_all add: pair_return_pmf2 pmf.map_comp o_def)"], ["proof (state)\nthis:\n  Pi_pmf {x} dflt p = map_pmf (fun_upd (\\<lambda>_. dflt) x) (p x)\n\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "also"], ["proof (state)\nthis:\n  Pi_pmf {x} dflt p = map_pmf (fun_upd (\\<lambda>_. dflt) x) (p x)\n\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "have \"fun_upd (\\<lambda>_. dflt) x = (\\<lambda>z y. if y = x then z else dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun_upd (\\<lambda>_. dflt) x = (\\<lambda>z y. if y = x then z else dflt)", "by (simp add: fun_upd_def fun_eq_iff)"], ["proof (state)\nthis:\n  fun_upd (\\<lambda>_. dflt) x = (\\<lambda>z y. if y = x then z else dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf {x} dflt p =\n  map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf {x} dflt p =\n  map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)\n\ngoal (1 subgoal):\n 1. Pi_pmf {x} dflt p =\n    map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)", "."], ["proof (state)\nthis:\n  Pi_pmf {x} dflt p =\n  map_pmf (\\<lambda>a b. if b = x then a else dflt) (p x)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Projecting a product of PMFs onto a component yields the expected result:\n\\<close>"], ["", "lemma Pi_pmf_component:\n  assumes \"finite A\"\n  shows   \"map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = (if x \\<in> A then p x else return_pmf dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "proof (cases \"x \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)\n 2. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "case True"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)\n 2. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "define A' where \"A' = A - {x}\""], ["proof (state)\nthis:\n  A' = A - {x}\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)\n 2. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "from assms and True"], ["proof (chain)\npicking this:\n  finite A\n  x \\<in> A", "have A': \"A = insert x A'\""], ["proof (prove)\nusing this:\n  finite A\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. A = insert x A'", "by (auto simp: A'_def)"], ["proof (state)\nthis:\n  A = insert x A'\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)\n 2. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "from assms"], ["proof (chain)\npicking this:\n  finite A", "have \"map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = p x\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = p x", "unfolding A'"], ["proof (prove)\nusing this:\n  finite (insert x A')\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf (insert x A') dflt p) = p x", "by (subst Pi_pmf_insert)\n       (auto simp: A'_def pmf.map_comp o_def case_prod_unfold map_fst_pair_pmf)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = p x\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)\n 2. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "with True"], ["proof (chain)\npicking this:\n  x \\<in> A\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = p x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> A\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = p x\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "by simp"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n  (if x \\<in> A then p x else return_pmf dflt)\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "case False"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "have \"map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) = map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)", "using assms False set_Pi_pmf_subset[of A dflt p]"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  finite A \\<Longrightarrow>\n  set_pmf (Pi_pmf A dflt p)\n  \\<subseteq> {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)", "by (intro pmf.map_cong refl) (auto simp: set_pmf_eq pmf_Pi_outside)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n  map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow>\n    map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "with False"], ["proof (chain)\npicking this:\n  x \\<notin> A\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n  map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n  map_pmf (\\<lambda>_. dflt) (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n    (if x \\<in> A then p x else return_pmf dflt)", "by simp"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f. f x) (Pi_pmf A dflt p) =\n  (if x \\<in> A then p x else return_pmf dflt)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We can take merge two PMF products on disjoint sets like this:\n\\<close>"], ["", "lemma Pi_pmf_union:\n  assumes \"finite A\" \"finite B\" \"A \\<inter> B = {}\"\n  shows   \"Pi_pmf (A \\<union> B) dflt p =\n             map_pmf (\\<lambda>(f,g) x. if x \\<in> A then f x else g x)\n             (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p))\" (is \"_ = map_pmf (?h A) (?q A)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> A then f x else g x)\n     (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p))", "using assms(1,3)"], ["proof (prove)\nusing this:\n  finite A\n  A \\<inter> B = {}\n\ngoal (1 subgoal):\n 1. Pi_pmf (A \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> A then f x else g x)\n     (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p))", "proof (induction rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  A \\<inter> B = {} \\<Longrightarrow>\n  Pi_pmf (A \\<union> B) dflt p =\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow> \\<lambda>x. if x \\<in> A then f x else g x)\n   (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p))\n  insert x A \\<inter> B = {}\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"map_pmf (?h (insert x A)) (?q (insert x A)) =\n          do {v \\<leftarrow> p x; (f, g) \\<leftarrow> pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p);\n              return_pmf (\\<lambda>y. if y \\<in> insert x A then (f(x := v)) y else g y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf\n     (\\<lambda>a.\n         case a of\n         (f, g) \\<Rightarrow>\n           \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n     (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p)) =\n    p x \\<bind>\n    (\\<lambda>v.\n        pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n        (\\<lambda>(f, g).\n            return_pmf\n             (\\<lambda>y.\n                 if y \\<in> insert x A then (f(x := v)) y else g y)))", "by (subst Pi_pmf_insert)\n       (insert insert.hyps insert.prems,\n        simp_all add: pair_pmf_def map_bind_pmf bind_map_pmf bind_assoc_pmf bind_return_pmf)"], ["proof (state)\nthis:\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow>\n         \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n   (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p)) =\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           (\\<lambda>y. if y \\<in> insert x A then (f(x := v)) y else g y)))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "also"], ["proof (state)\nthis:\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow>\n         \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n   (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p)) =\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           (\\<lambda>y. if y \\<in> insert x A then (f(x := v)) y else g y)))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"\\<dots> = do {v \\<leftarrow> p x; (f, g) \\<leftarrow> ?q A; return_pmf ((?h A (f,g))(x := v))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x \\<bind>\n    (\\<lambda>v.\n        pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n        (\\<lambda>(f, g).\n            return_pmf\n             (\\<lambda>y.\n                 if y \\<in> insert x A then (f(x := v)) y else g y))) =\n    p x \\<bind>\n    (\\<lambda>v.\n        pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n        (\\<lambda>(f, g).\n            return_pmf\n             ((case (f, g) of\n               (f, g) \\<Rightarrow>\n                 \\<lambda>x. if x \\<in> A then f x else g x)\n              (x := v))))", "by (intro bind_pmf_cong refl) (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           (\\<lambda>y.\n               if y \\<in> insert x A then (f(x := v)) y else g y))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           ((case (f, g) of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n            (x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "also"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           (\\<lambda>y.\n               if y \\<in> insert x A then (f(x := v)) y else g y))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           ((case (f, g) of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n            (x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"\\<dots> = do {v \\<leftarrow> p x; f \\<leftarrow> map_pmf (?h A) (?q A); return_pmf (f(x := v))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x \\<bind>\n    (\\<lambda>v.\n        pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n        (\\<lambda>(f, g).\n            return_pmf\n             ((case (f, g) of\n               (f, g) \\<Rightarrow>\n                 \\<lambda>x. if x \\<in> A then f x else g x)\n              (x := v)))) =\n    p x \\<bind>\n    (\\<lambda>v.\n        map_pmf\n         (\\<lambda>a.\n             case a of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n         (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v))))", "by (simp add: bind_map_pmf map_bind_pmf case_prod_unfold cong: if_cong)"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           ((case (f, g) of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n            (x := v)))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      map_pmf\n       (\\<lambda>a.\n           case a of\n           (f, g) \\<Rightarrow> \\<lambda>x. if x \\<in> A then f x else g x)\n       (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "also"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p) \\<bind>\n      (\\<lambda>(f, g).\n          return_pmf\n           ((case (f, g) of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n            (x := v)))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      map_pmf\n       (\\<lambda>a.\n           case a of\n           (f, g) \\<Rightarrow> \\<lambda>x. if x \\<in> A then f x else g x)\n       (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"\\<dots> = do {v \\<leftarrow> p x; f \\<leftarrow> Pi_pmf (A \\<union> B) dflt p; return_pmf (f(x := v))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x \\<bind>\n    (\\<lambda>v.\n        map_pmf\n         (\\<lambda>a.\n             case a of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n         (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v)))) =\n    p x \\<bind>\n    (\\<lambda>v.\n        Pi_pmf (A \\<union> B) dflt p \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v))))", "using insert.hyps and insert.prems"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  insert x A \\<inter> B = {}\n\ngoal (1 subgoal):\n 1. p x \\<bind>\n    (\\<lambda>v.\n        map_pmf\n         (\\<lambda>a.\n             case a of\n             (f, g) \\<Rightarrow>\n               \\<lambda>x. if x \\<in> A then f x else g x)\n         (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v)))) =\n    p x \\<bind>\n    (\\<lambda>v.\n        Pi_pmf (A \\<union> B) dflt p \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v))))", "by (intro bind_pmf_cong insert.IH [symmetric] refl) auto"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      map_pmf\n       (\\<lambda>a.\n           case a of\n           (f, g) \\<Rightarrow> \\<lambda>x. if x \\<in> A then f x else g x)\n       (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v)))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      Pi_pmf (A \\<union> B) dflt p \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "also"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      map_pmf\n       (\\<lambda>a.\n           case a of\n           (f, g) \\<Rightarrow> \\<lambda>x. if x \\<in> A then f x else g x)\n       (pair_pmf (Pi_pmf A dflt p) (Pi_pmf B dflt p)) \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v)))) =\n  p x \\<bind>\n  (\\<lambda>v.\n      Pi_pmf (A \\<union> B) dflt p \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v))))\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"\\<dots> = Pi_pmf (insert x (A \\<union> B)) dflt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x \\<bind>\n    (\\<lambda>v.\n        Pi_pmf (A \\<union> B) dflt p \\<bind>\n        (\\<lambda>f. return_pmf (f(x := v)))) =\n    Pi_pmf (insert x (A \\<union> B)) dflt p", "by (subst Pi_pmf_insert)\n       (insert assms insert.hyps insert.prems, auto simp: pair_pmf_def map_bind_pmf)"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      Pi_pmf (A \\<union> B) dflt p \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v)))) =\n  Pi_pmf (insert x (A \\<union> B)) dflt p\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "also"], ["proof (state)\nthis:\n  p x \\<bind>\n  (\\<lambda>v.\n      Pi_pmf (A \\<union> B) dflt p \\<bind>\n      (\\<lambda>f. return_pmf (f(x := v)))) =\n  Pi_pmf (insert x (A \\<union> B)) dflt p\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "have \"insert x (A \\<union> B) = insert x A \\<union> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x (A \\<union> B) = insert x A \\<union> B", "by simp"], ["proof (state)\nthis:\n  insert x (A \\<union> B) = insert x A \\<union> B\n\ngoal (2 subgoals):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<inter> B = {} \\<Longrightarrow>\n        Pi_pmf (F \\<union> B) dflt p =\n        map_pmf (\\<lambda>(f, g) x. if x \\<in> F then f x else g x)\n         (pair_pmf (Pi_pmf F dflt p) (Pi_pmf B dflt p));\n        insert x F \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> Pi_pmf (insert x F \\<union> B) dflt p =\n                         map_pmf\n                          (\\<lambda>(f, g) xa.\n                              if xa \\<in> insert x F then f xa else g xa)\n                          (pair_pmf (Pi_pmf (insert x F) dflt p)\n                            (Pi_pmf B dflt p))", "finally"], ["proof (chain)\npicking this:\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow>\n         \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n   (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p)) =\n  Pi_pmf (insert x A \\<union> B) dflt p", "show ?case"], ["proof (prove)\nusing this:\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow>\n         \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n   (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p)) =\n  Pi_pmf (insert x A \\<union> B) dflt p\n\ngoal (1 subgoal):\n 1. Pi_pmf (insert x A \\<union> B) dflt p =\n    map_pmf\n     (\\<lambda>a.\n         case a of\n         (f, g) \\<Rightarrow>\n           \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n     (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p))", ".."], ["proof (state)\nthis:\n  Pi_pmf (insert x A \\<union> B) dflt p =\n  map_pmf\n   (\\<lambda>a.\n       case a of\n       (f, g) \\<Rightarrow>\n         \\<lambda>xa. if xa \\<in> insert x A then f xa else g xa)\n   (pair_pmf (Pi_pmf (insert x A) dflt p) (Pi_pmf B dflt p))\n\ngoal (1 subgoal):\n 1. {} \\<inter> B = {} \\<Longrightarrow>\n    Pi_pmf ({} \\<union> B) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> {} then f x else g x)\n     (pair_pmf (Pi_pmf {} dflt p) (Pi_pmf B dflt p))", "qed (simp_all add: case_prod_unfold map_snd_pair_pmf)"], ["", "text \\<open>\n  We can also project a product to a subset of the indices by mapping all the other\n  indices to the default value:\n\\<close>"], ["", "lemma Pi_pmf_subset:\n  assumes \"finite A\" \"A' \\<subseteq> A\"\n  shows   \"Pi_pmf A' dflt p = map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt) (Pi_pmf A dflt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "let ?P = \"pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  A' \\<subseteq> A", "have [simp]: \"finite A'\""], ["proof (prove)\nusing this:\n  finite A\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite A'", "by (blast dest: finite_subset)"], ["proof (state)\nthis:\n  finite A'\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  A' \\<subseteq> A", "have \"A = A' \\<union> (A - A')\""], ["proof (prove)\nusing this:\n  finite A\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A = A' \\<union> (A - A')", "by blast"], ["proof (state)\nthis:\n  A = A' \\<union> (A - A')\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "also"], ["proof (state)\nthis:\n  A = A' \\<union> (A - A')\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "have \"Pi_pmf \\<dots> dflt p = map_pmf (\\<lambda>(f,g) x. if x \\<in> A' then f x else g x) ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A' \\<union> (A - A')) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. Pi_pmf (A' \\<union> (A - A')) dflt p =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))", "by (intro Pi_pmf_union) auto"], ["proof (state)\nthis:\n  Pi_pmf (A' \\<union> (A - A')) dflt p =\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n   (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "also"], ["proof (state)\nthis:\n  Pi_pmf (A' \\<union> (A - A')) dflt p =\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n   (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "have \"map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt) \\<dots> = map_pmf fst ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n       (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))) =\n    map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))", "unfolding map_pmf_comp o_def case_prod_unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf\n     (\\<lambda>x xa.\n         if xa \\<in> A' then if xa \\<in> A' then fst x xa else snd x xa\n         else dflt)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p)) =\n    map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))", "using set_Pi_pmf_subset[of A' dflt p]"], ["proof (prove)\nusing this:\n  finite A' \\<Longrightarrow>\n  set_pmf (Pi_pmf A' dflt p)\n  \\<subseteq> {f. \\<forall>x. x \\<notin> A' \\<longrightarrow> f x = dflt}\n\ngoal (1 subgoal):\n 1. map_pmf\n     (\\<lambda>x xa.\n         if xa \\<in> A' then if xa \\<in> A' then fst x xa else snd x xa\n         else dflt)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p)) =\n    map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))", "by (intro map_pmf_cong refl) (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n   (map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))) =\n  map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "also"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n   (map_pmf (\\<lambda>(f, g) x. if x \\<in> A' then f x else g x)\n     (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))) =\n  map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p))\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "have \"\\<dots> = Pi_pmf A' dflt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p)) =\n    Pi_pmf A' dflt p", "by (simp add: map_fst_pair_pmf)"], ["proof (state)\nthis:\n  map_pmf fst (pair_pmf (Pi_pmf A' dflt p) (Pi_pmf (A - A') dflt p)) =\n  Pi_pmf A' dflt p\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", "finally"], ["proof (chain)\npicking this:\n  map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n   (Pi_pmf A dflt p) =\n  Pi_pmf A' dflt p", "show ?thesis"], ["proof (prove)\nusing this:\n  map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n   (Pi_pmf A dflt p) =\n  Pi_pmf A' dflt p\n\ngoal (1 subgoal):\n 1. Pi_pmf A' dflt p =\n    map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt)\n     (Pi_pmf A dflt p)", ".."], ["proof (state)\nthis:\n  Pi_pmf A' dflt p =\n  map_pmf (\\<lambda>f x. if x \\<in> A' then f x else dflt) (Pi_pmf A dflt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_subset':\n  fixes f :: \"'a \\<Rightarrow> 'b pmf\"\n  assumes \"finite A\" \"B \\<subseteq> A\" \"\\<And>x. x \\<in> A - B \\<Longrightarrow> f x = return_pmf dflt\"\n  shows \"Pi_pmf A dflt f = Pi_pmf B dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"Pi_pmf (B \\<union> (A - B)) dflt f =\n          map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n                  (pair_pmf (Pi_pmf B dflt f) (Pi_pmf (A - B) dflt f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (B \\<union> (A - B)) dflt f =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n     (pair_pmf (Pi_pmf B dflt f) (Pi_pmf (A - B) dflt f))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  ?x \\<in> A - B \\<Longrightarrow> f ?x = return_pmf dflt\n\ngoal (1 subgoal):\n 1. Pi_pmf (B \\<union> (A - B)) dflt f =\n    map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n     (pair_pmf (Pi_pmf B dflt f) (Pi_pmf (A - B) dflt f))", "by (intro Pi_pmf_union) (auto dest: finite_subset)"], ["proof (state)\nthis:\n  Pi_pmf (B \\<union> (A - B)) dflt f =\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n   (pair_pmf (Pi_pmf B dflt f) (Pi_pmf (A - B) dflt f))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "also"], ["proof (state)\nthis:\n  Pi_pmf (B \\<union> (A - B)) dflt f =\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n   (pair_pmf (Pi_pmf B dflt f) (Pi_pmf (A - B) dflt f))\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"Pi_pmf (A - B) dflt f = Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A - B) dflt f =\n    Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  ?x \\<in> A - B \\<Longrightarrow> f ?x = return_pmf dflt\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - B) dflt f =\n    Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt)", "by (intro Pi_pmf_cong) auto"], ["proof (state)\nthis:\n  Pi_pmf (A - B) dflt f = Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "also"], ["proof (state)\nthis:\n  Pi_pmf (A - B) dflt f = Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"\\<dots> = return_pmf (\\<lambda>_. dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt) =\n    return_pmf (\\<lambda>_. dflt)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  ?x \\<in> A - B \\<Longrightarrow> f ?x = return_pmf dflt\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt) =\n    return_pmf (\\<lambda>_. dflt)", "by simp"], ["proof (state)\nthis:\n  Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt) =\n  return_pmf (\\<lambda>_. dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "also"], ["proof (state)\nthis:\n  Pi_pmf (A - B) dflt (\\<lambda>_. return_pmf dflt) =\n  return_pmf (\\<lambda>_. dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n                  (pair_pmf (Pi_pmf B dflt f) (return_pmf (\\<lambda>_. dflt))) =\n             map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt) (Pi_pmf B dflt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n     (pair_pmf (Pi_pmf B dflt f) (return_pmf (\\<lambda>_. dflt))) =\n    map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt)\n     (Pi_pmf B dflt f)", "by (simp add: map_pmf_def pair_pmf_def bind_assoc_pmf bind_return_pmf bind_return_pmf')"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n   (pair_pmf (Pi_pmf B dflt f) (return_pmf (\\<lambda>_. dflt))) =\n  map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt) (Pi_pmf B dflt f)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "also"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>(f, g) x. if x \\<in> B then f x else g x)\n   (pair_pmf (Pi_pmf B dflt f) (return_pmf (\\<lambda>_. dflt))) =\n  map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt) (Pi_pmf B dflt f)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"\\<dots> = Pi_pmf B dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt)\n     (Pi_pmf B dflt f) =\n    Pi_pmf B dflt f", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  ?x \\<in> A - B \\<Longrightarrow> f ?x = return_pmf dflt\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt)\n     (Pi_pmf B dflt f) =\n    Pi_pmf B dflt f", "by (intro Pi_pmf_default_swap) (auto dest: finite_subset)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt)\n   (Pi_pmf B dflt f) =\n  Pi_pmf B dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "also"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f x. if x \\<in> B then f x else dflt)\n   (Pi_pmf B dflt f) =\n  Pi_pmf B dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "have \"B \\<union> (A - B) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<union> (A - B) = A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  ?x \\<in> A - B \\<Longrightarrow> f ?x = return_pmf dflt\n\ngoal (1 subgoal):\n 1. B \\<union> (A - B) = A", "by auto"], ["proof (state)\nthis:\n  B \\<union> (A - B) = A\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A dflt f = Pi_pmf B dflt f", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A dflt f = Pi_pmf B dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt f = Pi_pmf B dflt f", "."], ["proof (state)\nthis:\n  Pi_pmf A dflt f = Pi_pmf B dflt f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_if_set:\n  assumes \"finite A\"\n  shows \"Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n           Pi_pmf {x\\<in>A. b x} dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "have \"Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n          Pi_pmf {x\\<in>A. b x} dflt (\\<lambda>x. if b x then f x else return_pmf dflt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt\n     (\\<lambda>x. if b x then f x else return_pmf dflt)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt\n     (\\<lambda>x. if b x then f x else return_pmf dflt)", "by (intro Pi_pmf_subset') auto"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt\n   (\\<lambda>x. if b x then f x else return_pmf dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "also"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt\n   (\\<lambda>x. if b x then f x else return_pmf dflt)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "have \"\\<dots> = Pi_pmf {x\\<in>A. b x} dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf {x \\<in> A. b x} dflt\n     (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "by (intro Pi_pmf_cong) auto"], ["proof (state)\nthis:\n  Pi_pmf {x \\<in> A. b x} dflt\n   (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt f", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n    Pi_pmf {x \\<in> A. b x} dflt f", "."], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then f x else return_pmf dflt) =\n  Pi_pmf {x \\<in> A. b x} dflt f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_if_set':\n  assumes \"finite A\"\n  shows \"Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n         Pi_pmf {x\\<in>A. \\<not>b x} dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "have \"Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else  f x) =\n          Pi_pmf {x\\<in>A. \\<not>b x} dflt (\\<lambda>x. if b x then return_pmf dflt else  f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt\n     (\\<lambda>x. if b x then return_pmf dflt else f x)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt\n     (\\<lambda>x. if b x then return_pmf dflt else f x)", "by (intro Pi_pmf_subset') auto"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt\n   (\\<lambda>x. if b x then return_pmf dflt else f x)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "also"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt\n   (\\<lambda>x. if b x then return_pmf dflt else f x)\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "have \"\\<dots> = Pi_pmf {x\\<in>A. \\<not>b x} dflt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf {x \\<in> A. \\<not> b x} dflt\n     (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "by (intro Pi_pmf_cong) auto"], ["proof (state)\nthis:\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt\n   (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt f\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n    Pi_pmf {x \\<in> A. \\<not> b x} dflt f", "."], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>x. if b x then return_pmf dflt else f x) =\n  Pi_pmf {x \\<in> A. \\<not> b x} dflt f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Lastly, we can delete a single component from a product:\n\\<close>"], ["", "lemma Pi_pmf_remove:\n  assumes \"finite A\"\n  shows   \"Pi_pmf (A - {x}) dflt p = map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "have \"Pi_pmf (A - {x}) dflt p =\n          map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt) (Pi_pmf A dflt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n     (Pi_pmf A dflt p)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n     (Pi_pmf A dflt p)", "by (intro Pi_pmf_subset) auto"], ["proof (state)\nthis:\n  Pi_pmf (A - {x}) dflt p =\n  map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n   (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "also"], ["proof (state)\nthis:\n  Pi_pmf (A - {x}) dflt p =\n  map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n   (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "have \"\\<dots> = map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n     (Pi_pmf A dflt p) =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "using set_Pi_pmf_subset[of A dflt p] assms"], ["proof (prove)\nusing this:\n  finite A \\<Longrightarrow>\n  set_pmf (Pi_pmf A dflt p)\n  \\<subseteq> {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = dflt}\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n     (Pi_pmf A dflt p) =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "by (intro map_pmf_cong refl) (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>f xa. if xa \\<in> A - {x} then f xa else dflt)\n   (Pi_pmf A dflt p) =\n  map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf (A - {x}) dflt p =\n  map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf (A - {x}) dflt p =\n  map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\n\ngoal (1 subgoal):\n 1. Pi_pmf (A - {x}) dflt p =\n    map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)", "."], ["proof (state)\nthis:\n  Pi_pmf (A - {x}) dflt p =\n  map_pmf (\\<lambda>f. f(x := dflt)) (Pi_pmf A dflt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Applications\\<close>"], ["", "text \\<open>\n  Choosing a subset of a set uniformly at random is equivalent to tossing a fair coin\n  independently for each element and collecting all the elements that came up heads.\n\\<close>"], ["", "lemma pmf_of_set_Pow_conv_bernoulli:\n  assumes \"finite (A :: 'a set)\"\n  shows \"map_pmf (\\<lambda>b. {x\\<in>A. b x}) (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1/2))) = pmf_of_set (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have \"Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1/2)) = pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2)) =\n    pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2)) =\n    pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))", "by (simp add: bernoulli_pmf_half_conv_pmf_of_set Pi_pmf_of_set)"], ["proof (state)\nthis:\n  Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2)) =\n  pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "also"], ["proof (state)\nthis:\n  Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2)) =\n  pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have \"map_pmf (\\<lambda>b. {x\\<in>A. b x}) \\<dots> = pmf_of_set (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n    pmf_of_set (Pow A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n    pmf_of_set (Pow A)", "have \"bij_betw (\\<lambda>b. {x \\<in> A. b x}) (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>b. {x \\<in> A. b x})\n     (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)", "by (rule bij_betwI[of _ _ _ \"\\<lambda>B b. if b \\<in> A then b \\<in> B else P\"]) (auto simp add: PiE_dflt_def)"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>b. {x \\<in> A. b x}) (PiE_dflt A P (\\<lambda>_. UNIV))\n   (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n    pmf_of_set (Pow A)", "then"], ["proof (chain)\npicking this:\n  bij_betw (\\<lambda>b. {x \\<in> A. b x}) (PiE_dflt A P (\\<lambda>_. UNIV))\n   (Pow A)", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>b. {x \\<in> A. b x}) (PiE_dflt A P (\\<lambda>_. UNIV))\n   (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n    pmf_of_set (Pow A)", "using assms"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>b. {x \\<in> A. b x}) (PiE_dflt A P (\\<lambda>_. UNIV))\n   (Pow A)\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n    pmf_of_set (Pow A)", "by (intro map_pmf_of_set_bij_betw) auto"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n  pmf_of_set (Pow A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>x. UNIV))) =\n  pmf_of_set (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "finally"], ["proof (chain)\npicking this:\n  map_pmf (\\<lambda>b. {x \\<in> A. b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)", "show ?thesis"], ["proof (prove)\nusing this:\n  map_pmf (\\<lambda>b. {x \\<in> A. b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "by simp"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  A binomial distribution can be seen as the number of successes in \\<open>n\\<close> independent coin tosses.\n\\<close>"], ["", "lemma binomial_pmf_altdef':\n  fixes A :: \"'a set\"\n  assumes \"finite A\" and \"card A = n\" and p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n             map_pmf (\\<lambda>f. card {x\\<in>A. f x}) (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  card A = n\n  p \\<in> {0..1}", "have \"?lhs = binomial_pmf (card A) p\""], ["proof (prove)\nusing this:\n  finite A\n  card A = n\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf n p = binomial_pmf (card A) p", "by simp"], ["proof (state)\nthis:\n  binomial_pmf n p = binomial_pmf (card A) p\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  binomial_pmf n p = binomial_pmf (card A) p\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf (card A) p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "using assms(1)"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. binomial_pmf (card A) p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "proof (induction rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "with p"], ["proof (chain)\npicking this:\n  p \\<in> {0..1}", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))", "by (simp add: binomial_pmf_0)"], ["proof (state)\nthis:\n  binomial_pmf (card {}) p =\n  map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n   (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  binomial_pmf (card A) p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "from insert.hyps"], ["proof (chain)\npicking this:\n  finite A\n  x \\<notin> A", "have \"card (insert x A) = Suc (card A)\""], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. card (insert x A) = Suc (card A)", "by simp"], ["proof (state)\nthis:\n  card (insert x A) = Suc (card A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  card (insert x A) = Suc (card A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"binomial_pmf \\<dots> p = do {\n                                     b \\<leftarrow> bernoulli_pmf p;\n                                     f \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n                                     return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})\n                                   }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf (Suc (card A)) p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))", "using p"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf (Suc (card A)) p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))", "by (simp add: binomial_pmf_Suc insert.IH bind_map_pmf)"], ["proof (state)\nthis:\n  binomial_pmf (Suc (card A)) p =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  binomial_pmf (Suc (card A)) p =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = do {\n                      b \\<leftarrow> bernoulli_pmf p;\n                      f \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n                      return_pmf (card {y \\<in> insert x A. (f(x := b)) y})\n                    }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))", "proof (intro bind_pmf_cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "case (1 b f)"], ["proof (state)\nthis:\n  b \\<in> set_pmf (bernoulli_pmf p)\n  f \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "have \"(if b then 1 else 0) + card {y\\<in>A. f y} = card ((if b then {x} else {}) \\<union> {y\\<in>A. f y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then 1 else 0) + card {y \\<in> A. f y} =\n    card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (if b then 1 else 0) + card {y \\<in> A. f y} =\n    card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})", "by auto"], ["proof (state)\nthis:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "also"], ["proof (state)\nthis:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "have \"(if b then {x} else {}) \\<union> {y\\<in>A. f y} = {y\\<in>insert x A. (f(x := b)) y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n    {y \\<in> insert x A. (f(x := b)) y}", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n    {y \\<in> insert x A. (f(x := b)) y}", "by auto"], ["proof (state)\nthis:\n  (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n  {y \\<in> insert x A. (f(x := b)) y}\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "finally"], ["proof (chain)\npicking this:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card {y \\<in> insert x A. (f(x := b)) y}", "show ?case"], ["proof (prove)\nusing this:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card {y \\<in> insert x A. (f(x := b)) y}\n\ngoal (1 subgoal):\n 1. return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}) =\n    return_pmf (card {y \\<in> insert x A. (f(x := b)) y})", "by simp"], ["proof (state)\nthis:\n  return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}) =\n  return_pmf (card {y \\<in> insert x A. (f(x := b)) y})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = map_pmf (\\<lambda>f. card {y\\<in>insert x A. f y})\n                      (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n    map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n    map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "by (subst Pi_pmf_insert) (simp_all add: pair_pmf_def map_bind_pmf)"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "finally"], ["proof (chain)\npicking this:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "show ?case"], ["proof (prove)\nusing this:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf (card (insert x A)) p =\n    map_pmf (\\<lambda>f. card {xa \\<in> insert x A. f xa})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "."], ["proof (state)\nthis:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {xa \\<in> insert x A. f xa})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binomial_pmf (card A) p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "finally"], ["proof (chain)\npicking this:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "show ?thesis"], ["proof (prove)\nusing this:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "."], ["proof (state)\nthis:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}