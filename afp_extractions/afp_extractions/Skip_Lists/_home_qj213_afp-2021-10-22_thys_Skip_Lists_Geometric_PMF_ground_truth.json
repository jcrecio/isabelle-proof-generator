{"file_name": "/home/qj213/afp-2021-10-22/thys/Skip_Lists/Geometric_PMF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Skip_Lists", "problem_names": ["lemma geometric_sums_times_n:\n  fixes c::\"'a::{banach,real_normed_field}\"\n  assumes \"norm c < 1\"\n  shows \"(\\<lambda>n. c^n * of_nat n) sums (c / (1 - c)\\<^sup>2)\"", "lemma geometric_sums_times_norm:\n  fixes c::\"'a::{banach,real_normed_field}\"\n  assumes \"norm c < 1\"\n  shows \"(\\<lambda>n. norm (c^n * of_nat n)) sums (norm c / (1 - norm c)\\<^sup>2)\"", "lemma integrable_real_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"integrable (geometric_pmf p) real\"", "lemma expectation_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p\"", "lemma nn_integral_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"nn_integral (geometric_pmf p) real = (1 - p) / p\"", "lemma geometric_bind_pmf_unfold:\n  assumes \"p \\<in> {0<..1}\"\n  shows \"geometric_pmf p =\n     do {b \\<leftarrow> bernoulli_pmf p;\n         if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)}\"", "lemma \"p \\<in> {0<..<1} \\<Longrightarrow> set_pmf (geometric_pmf p) = UNIV\"", "lemma \"set_pmf (geometric_pmf 1) = 0\"", "lemma geometric_pmf_prob_atMost:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {..n} = (1 - (1 - p)^(n + 1))\"", "lemma geometric_pmf_prob_lessThan:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n\"", "lemma geometric_pmf_prob_greaterThan:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p)^(n + 1)\"", "lemma geometric_pmf_prob_atLeast:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {n..} = (1 - p)^n\"", "lemma bernoulli_pmf_of_set':\n  assumes \"finite A\"\n  shows \"map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1/2))) = pmf_of_set (Pow A)\"", "lemma Pi_pmf_pmf_of_set_Suc:\n  assumes \"finite A\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n       do {\n         B \\<leftarrow> pmf_of_set (Pow A);\n         Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1/2))) }\"", "lemma Pi_pmf_pmf_of_set_Suc':\n  assumes \"finite A\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n       do {\n         B \\<leftarrow> pmf_of_set (Pow A);\n         Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1/2))) }\"", "lemma binomial_pmf_altdef':\n  fixes A :: \"'a set\"\n  assumes \"finite A\" and \"card A = n\" and p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n             map_pmf (\\<lambda>f. card {x\\<in>A. f x}) (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\" (is \"?lhs = ?rhs\")", "lemma bernoulli_pmf_Not:\n  assumes \"p \\<in> {0..1}\"\n  shows \"bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))\"", "lemma binomial_pmf_altdef'':\n  assumes p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n           map_pmf (\\<lambda>f. card {x. x < n \\<and> f x}) (Pi_pmf {..<n} dflt (\\<lambda>_. bernoulli_pmf p))\"", "lemma Pi_pmf_geometric_filter:\n  assumes \"finite A\" \"p \\<in> {0<..1}\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n       do {\n         fb \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n         Pi_pmf {x \\<in> A. \\<not> fb x} 0 (\\<lambda>_. map_pmf Suc (geometric_pmf p)) }\"", "lemma Pi_pmf_geometric_filter':\n  assumes \"finite A\" \"p \\<in> {0<..1}\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n       do {\n         fb \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf (1 - p));\n         Pi_pmf {x \\<in> A. fb x} 0 (\\<lambda>_. map_pmf Suc (geometric_pmf p)) }\""], "translations": [["", "lemma geometric_sums_times_n:\n  fixes c::\"'a::{banach,real_normed_field}\"\n  assumes \"norm c < 1\"\n  shows \"(\\<lambda>n. c^n * of_nat n) sums (c / (1 - c)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "have \"(\\<lambda>n. c * z ^ n) sums (c / (1 - z))\" if \"norm z < 1\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. c * z ^ n) sums (c / ((1::'a) - z))", "using geometric_sums sums_mult that"], ["proof (prove)\nusing this:\n  norm ?c < 1 \\<Longrightarrow> (^) ?c sums ((1::?'a) / ((1::?'a) - ?c))\n  ?f sums ?a \\<Longrightarrow> (\\<lambda>n. ?c * ?f n) sums (?c * ?a)\n  norm z < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c * z ^ n) sums (c / ((1::'a) - z))", "by fastforce"], ["proof (state)\nthis:\n  norm ?z < 1 \\<Longrightarrow>\n  (\\<lambda>n. c * ?z ^ n) sums (c / ((1::'a) - ?z))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "moreover"], ["proof (state)\nthis:\n  norm ?z < 1 \\<Longrightarrow>\n  (\\<lambda>n. c * ?z ^ n) sums (c / ((1::'a) - ?z))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "have \"((\\<lambda>z. c / (1 - z)) has_field_derivative (c / (1 - c)\\<^sup>2)) (at c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n     c / ((1::'a) - c)\\<^sup>2)\n     (at c)", "using assms"], ["proof (prove)\nusing this:\n  norm c < 1\n\ngoal (1 subgoal):\n 1. ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n     c / ((1::'a) - c)\\<^sup>2)\n     (at c)", "by (auto intro!: derivative_eq_intros simp add: semiring_normalization_rules)"], ["proof (state)\nthis:\n  ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n   c / ((1::'a) - c)\\<^sup>2)\n   (at c)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "ultimately"], ["proof (chain)\npicking this:\n  norm ?z < 1 \\<Longrightarrow>\n  (\\<lambda>n. c * ?z ^ n) sums (c / ((1::'a) - ?z))\n  ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n   c / ((1::'a) - c)\\<^sup>2)\n   (at c)", "have \"(\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums (c / (1 - c)\\<^sup>2)\""], ["proof (prove)\nusing this:\n  norm ?z < 1 \\<Longrightarrow>\n  (\\<lambda>n. c * ?z ^ n) sums (c / ((1::'a) - ?z))\n  ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n   c / ((1::'a) - c)\\<^sup>2)\n   (at c)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums\n    (c / ((1::'a) - c)\\<^sup>2)", "using assms"], ["proof (prove)\nusing this:\n  norm ?z < 1 \\<Longrightarrow>\n  (\\<lambda>n. c * ?z ^ n) sums (c / ((1::'a) - ?z))\n  ((\\<lambda>z. c / ((1::'a) - z)) has_field_derivative\n   c / ((1::'a) - c)\\<^sup>2)\n   (at c)\n  norm c < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums\n    (c / ((1::'a) - c)\\<^sup>2)", "by (intro termdiffs_sums_strong)"], ["proof (state)\nthis:\n  (\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums\n  (c / ((1::'a) - c)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums\n  (c / ((1::'a) - c)\\<^sup>2)", "have \"(\\<lambda>n. of_nat (Suc n) * c ^ (Suc n)) sums (c / (1 - c)\\<^sup>2)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. diffs (\\<lambda>n. c) n * c ^ n) sums\n  (c / ((1::'a) - c)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. of_nat (Suc n) * c ^ Suc n) sums\n    (c / ((1::'a) - c)\\<^sup>2)", "unfolding diffs_def"], ["proof (prove)\nusing this:\n  (\\<lambda>n. of_nat (Suc n) * c * c ^ n) sums (c / ((1::'a) - c)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. of_nat (Suc n) * c ^ Suc n) sums\n    (c / ((1::'a) - c)\\<^sup>2)", "by (simp add: power_eq_if mult.assoc)"], ["proof (state)\nthis:\n  (\\<lambda>n. of_nat (Suc n) * c ^ Suc n) sums (c / ((1::'a) - c)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>n. of_nat (Suc n) * c ^ Suc n) sums (c / ((1::'a) - c)\\<^sup>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. of_nat (Suc n) * c ^ Suc n) sums (c / ((1::'a) - c)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)", "by (subst (asm) sums_Suc_iff) (auto simp add: mult.commute)"], ["proof (state)\nthis:\n  (\\<lambda>n. c ^ n * of_nat n) sums (c / ((1::'a) - c)\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma geometric_sums_times_norm:\n  fixes c::\"'a::{banach,real_normed_field}\"\n  assumes \"norm c < 1\"\n  shows \"(\\<lambda>n. norm (c^n * of_nat n)) sums (norm c / (1 - norm c)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (c ^ n * of_nat n)) sums\n    (norm c / (1 - norm c)\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (c ^ n * of_nat n)) sums\n    (norm c / (1 - norm c)\\<^sup>2)", "have \"norm (c^n * of_nat n) = (norm c) ^ n * of_nat n\" for n::nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (c ^ n * of_nat n) = norm c ^ n * real n", "by (simp add: norm_power norm_mult)"], ["proof (state)\nthis:\n  norm (c ^ ?n * of_nat ?n) = norm c ^ ?n * real ?n\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (c ^ n * of_nat n)) sums\n    (norm c / (1 - norm c)\\<^sup>2)", "then"], ["proof (chain)\npicking this:\n  norm (c ^ ?n * of_nat ?n) = norm c ^ ?n * real ?n", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (c ^ ?n * of_nat ?n) = norm c ^ ?n * real ?n\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (c ^ n * of_nat n)) sums\n    (norm c / (1 - norm c)\\<^sup>2)", "using geometric_sums_times_n[of \"norm c\"] assms"], ["proof (prove)\nusing this:\n  norm (c ^ ?n * of_nat ?n) = norm c ^ ?n * real ?n\n  norm (norm c) < 1 \\<Longrightarrow>\n  (\\<lambda>n. norm c ^ n * real n) sums (norm c / (1 - norm c)\\<^sup>2)\n  norm c < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (c ^ n * of_nat n)) sums\n    (norm c / (1 - norm c)\\<^sup>2)", "by force"], ["proof (state)\nthis:\n  (\\<lambda>n. norm (c ^ n * of_nat n)) sums (norm c / (1 - norm c)\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma integrable_real_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"integrable (geometric_pmf p) real\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable (measure_pmf (geometric_pmf p)) real", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integrable (measure_pmf (geometric_pmf p)) real", "have \"summable (\\<lambda>x. p * ((1 - p) ^ x * real x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. p * ((1 - p) ^ x * real x))", "using geometric_sums_times_norm[of \"1 - p\"] assms"], ["proof (prove)\nusing this:\n  norm (1 - p) < 1 \\<Longrightarrow>\n  (\\<lambda>n. norm ((1 - p) ^ n * real n)) sums\n  (norm (1 - p) / (1 - norm (1 - p))\\<^sup>2)\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. p * ((1 - p) ^ x * real x))", "by (intro summable_mult) (auto simp: sums_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>x. p * ((1 - p) ^ x * real x))\n\ngoal (1 subgoal):\n 1. integrable (measure_pmf (geometric_pmf p)) real", "hence \"summable (\\<lambda>x. (1 - p) ^ x * real x)\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. p * ((1 - p) ^ x * real x))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. (1 - p) ^ x * real x)", "by (rule summable_mult_D) (use assms in auto)"], ["proof (state)\nthis:\n  summable (\\<lambda>x. (1 - p) ^ x * real x)\n\ngoal (1 subgoal):\n 1. integrable (measure_pmf (geometric_pmf p)) real", "thus ?thesis"], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. (1 - p) ^ x * real x)\n\ngoal (1 subgoal):\n 1. integrable (measure_pmf (geometric_pmf p)) real", "unfolding measure_pmf_eq_density"], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. (1 - p) ^ x * real x)\n\ngoal (1 subgoal):\n 1. integrable\n     (density (count_space UNIV)\n       (\\<lambda>x. ennreal (pmf (geometric_pmf p) x)))\n     real", "using assms"], ["proof (prove)\nusing this:\n  summable (\\<lambda>x. (1 - p) ^ x * real x)\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. integrable\n     (density (count_space UNIV)\n       (\\<lambda>x. ennreal (pmf (geometric_pmf p) x)))\n     real", "by (subst integrable_density)\n       (auto simp: integrable_count_space_nat_iff mult_ac)"], ["proof (state)\nthis:\n  integrable (measure_pmf (geometric_pmf p)) real\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expectation_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "have \"(\\<lambda>n. p * ((1 - p) ^ n * n)) sums (p * ((1 - p) / p^2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums\n    (p * ((1 - p) / p\\<^sup>2))", "using assms geometric_sums_times_n[of \"1-p\"]"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n  norm (1 - p) < 1 \\<Longrightarrow>\n  (\\<lambda>n. (1 - p) ^ n * real n) sums ((1 - p) / (1 - (1 - p))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums\n    (p * ((1 - p) / p\\<^sup>2))", "by (intro sums_mult) auto"], ["proof (state)\nthis:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums (p * ((1 - p) / p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums (p * ((1 - p) / p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "have \"(\\<lambda>n. p * ((1 - p) ^ n * n)) = (\\<lambda>n. (1 - p) ^ n * p  * real n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. p * ((1 - p) ^ n * real n)) =\n    (\\<lambda>n. (1 - p) ^ n * p * real n)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) =\n  (\\<lambda>n. (1 - p) ^ n * p * real n)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums (p * ((1 - p) / p\\<^sup>2))\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) =\n  (\\<lambda>n. (1 - p) ^ n * p * real n)", "have *: \"(\\<lambda>n. (1 - p) ^ n * p  * real n) sums ((1 - p) / p)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums (p * ((1 - p) / p\\<^sup>2))\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) =\n  (\\<lambda>n. (1 - p) ^ n * p * real n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)", "using assms sums_subst"], ["proof (prove)\nusing this:\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) sums (p * ((1 - p) / p\\<^sup>2))\n  (\\<lambda>n. p * ((1 - p) ^ n * real n)) =\n  (\\<lambda>n. (1 - p) ^ n * p * real n)\n  p \\<in> {0<..1}\n  \\<lbrakk>?f = ?g; ?g sums ?z\\<rbrakk> \\<Longrightarrow> ?f sums ?z\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)", "by (auto simp add: power2_eq_square)"], ["proof (state)\nthis:\n  (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "have \"measure_pmf.expectation (geometric_pmf p) real =\n        (\\<integral>n. pmf (geometric_pmf p) n * real n \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real =\n    LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n", "unfolding measure_pmf_eq_density"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>L\n     (density (count_space UNIV)\n       (\\<lambda>x. ennreal (pmf (geometric_pmf p) x)))\n     real =\n    LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n", "by (subst integral_density) auto"], ["proof (state)\nthis:\n  measure_pmf.expectation (geometric_pmf p) real =\n  LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "also"], ["proof (state)\nthis:\n  measure_pmf.expectation (geometric_pmf p) real =\n  LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "have \"integrable (count_space UNIV) (\\<lambda>n. pmf (geometric_pmf p) n * real n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable (count_space UNIV)\n     (\\<lambda>n. pmf (geometric_pmf p) n * real n)", "using * assms"], ["proof (prove)\nusing this:\n  (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. integrable (count_space UNIV)\n     (\\<lambda>n. pmf (geometric_pmf p) n * real n)", "unfolding integrable_count_space_nat_iff"], ["proof (prove)\nusing this:\n  (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>x. norm (pmf (geometric_pmf p) x * real x))", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  integrable (count_space UNIV)\n   (\\<lambda>n. pmf (geometric_pmf p) n * real n)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "hence \"(\\<integral>n. pmf (geometric_pmf p) n * real n \\<partial>count_space UNIV) = (1 - p) / p\""], ["proof (prove)\nusing this:\n  integrable (count_space UNIV)\n   (\\<lambda>n. pmf (geometric_pmf p) n * real n)\n\ngoal (1 subgoal):\n 1. LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n = (1 - p) / p", "using * assms"], ["proof (prove)\nusing this:\n  integrable (count_space UNIV)\n   (\\<lambda>n. pmf (geometric_pmf p) n * real n)\n  (\\<lambda>n. (1 - p) ^ n * p * real n) sums ((1 - p) / p)\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n = (1 - p) / p", "by (subst integral_count_space_nat) (simp_all add: sums_iff)"], ["proof (state)\nthis:\n  LINT n|count_space UNIV. pmf (geometric_pmf p) n * real n = (1 - p) / p\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "finally"], ["proof (chain)\npicking this:\n  measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "show ?thesis"], ["proof (prove)\nusing this:\n  measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p", "by auto"], ["proof (state)\nthis:\n  measure_pmf.expectation (geometric_pmf p) real = (1 - p) / p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_geometric_pmf:\n  assumes \"p \\<in> {0<..1}\"\n  shows   \"nn_integral (geometric_pmf p) real = (1 - p) / p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (real x)\n                       \\<partial>measure_pmf (geometric_pmf p) =\n    ennreal ((1 - p) / p)", "using assms expectation_geometric_pmf integrable_real_geometric_pmf"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n  ?p \\<in> {0<..1} \\<Longrightarrow>\n  measure_pmf.expectation (geometric_pmf ?p) real = (1 - ?p) / ?p\n  ?p \\<in> {0<..1} \\<Longrightarrow>\n  integrable (measure_pmf (geometric_pmf ?p)) real\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (real x)\n                       \\<partial>measure_pmf (geometric_pmf p) =\n    ennreal ((1 - p) / p)", "by (subst nn_integral_eq_integral) auto"], ["", "lemma geometric_bind_pmf_unfold:\n  assumes \"p \\<in> {0<..1}\"\n  shows \"geometric_pmf p =\n     do {b \\<leftarrow> bernoulli_pmf p;\n         if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "have *: \"(Suc -` {i}) = (if i = 0 then {} else {i - 1})\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc -` {i} = (if i = 0 then {} else {i - 1})", "by force"], ["proof (state)\nthis:\n  Suc -` {?i} = (if ?i = 0 then {} else {?i - 1})\n\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "have \"pmf (geometric_pmf p) i =\n        pmf (bernoulli_pmf p \\<bind>\n            (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n            i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "have \"pmf (geometric_pmf p) i =\n          (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1))", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1))", "by (simp add: power_eq_if)"], ["proof (state)\nthis:\n  pmf (geometric_pmf p) i =\n  (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1))\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "also"], ["proof (state)\nthis:\n  pmf (geometric_pmf p) i =\n  (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1))\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "have \"\\<dots> = (if i = 0  then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1)) =\n    (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i)", "by (simp add: pmf_map indicator_def measure_pmf_single *)"], ["proof (state)\nthis:\n  (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1)) =\n  (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i)\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "also"], ["proof (state)\nthis:\n  (if i = 0 then p else (1 - p) * pmf (geometric_pmf p) (i - 1)) =\n  (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i)\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "have \"\\<dots> = measure_pmf.expectation (bernoulli_pmf p)\n          (\\<lambda>x. pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i) =\n    measure_pmf.expectation (bernoulli_pmf p)\n     (\\<lambda>x.\n         pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i)", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i) =\n    measure_pmf.expectation (bernoulli_pmf p)\n     (\\<lambda>x.\n         pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i)", "by (auto simp add: pmf_map *)"], ["proof (state)\nthis:\n  (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i) =\n  measure_pmf.expectation (bernoulli_pmf p)\n   (\\<lambda>x.\n       pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i)\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "also"], ["proof (state)\nthis:\n  (if i = 0 then p else (1 - p) * pmf (map_pmf Suc (geometric_pmf p)) i) =\n  measure_pmf.expectation (bernoulli_pmf p)\n   (\\<lambda>x.\n       pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i)\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "have \"\\<dots> = pmf (bernoulli_pmf p \\<bind>\n                   (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n                   i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (bernoulli_pmf p)\n     (\\<lambda>x.\n         pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p))\n          i) =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "by (auto simp add: pmf_bind)"], ["proof (state)\nthis:\n  measure_pmf.expectation (bernoulli_pmf p)\n   (\\<lambda>x.\n       pmf (if x then return_pmf 0 else map_pmf Suc (geometric_pmf p)) i) =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   i\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "finally"], ["proof (chain)\npicking this:\n  pmf (geometric_pmf p) i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   i", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (geometric_pmf p) i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   i\n\ngoal (1 subgoal):\n 1. pmf (geometric_pmf p) i =\n    pmf (bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n     i", "."], ["proof (state)\nthis:\n  pmf (geometric_pmf p) i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmf (geometric_pmf p) ?i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   ?i\n\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "then"], ["proof (chain)\npicking this:\n  pmf (geometric_pmf p) ?i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   ?i", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (geometric_pmf p) ?i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   ?i\n\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "using pmf_eqI"], ["proof (prove)\nusing this:\n  pmf (geometric_pmf p) ?i =\n  pmf (bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n   ?i\n  (\\<And>i. pmf ?M i = pmf ?N i) \\<Longrightarrow> ?M = ?N\n\ngoal (1 subgoal):\n 1. geometric_pmf p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))", "by blast"], ["proof (state)\nthis:\n  geometric_pmf p =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"p \\<in> {0<..<1} \\<Longrightarrow> set_pmf (geometric_pmf p) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> {0<..<1} \\<Longrightarrow> set_pmf (geometric_pmf p) = UNIV", "by (auto simp add: measure_pmf_single set_pmf_def)"], ["", "lemma \"set_pmf (geometric_pmf 1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (geometric_pmf 1) = 0", "by (auto simp add: measure_pmf_single set_pmf_def)"], ["", "lemma geometric_pmf_prob_atMost:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {..n} = (1 - (1 - p)^(n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)", "have \"(\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n", "by (induction n) (auto simp add: algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)", "using assms"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<le>n. (1 - p) ^ x * p) = 1 - (1 - p) * (1 - p) ^ n\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)", "by (auto simp add: measure_pmf_conv_infsetsum)"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) {..n} = 1 - (1 - p) ^ (n + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma geometric_pmf_prob_lessThan:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n", "have \"(\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n", "by (induction n) (auto simp add: algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n", "using assms"], ["proof (prove)\nusing this:\n  (\\<Sum>x<n. (1 - p) ^ x * p) = 1 - (1 - p) ^ n\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n", "by (auto simp add: measure_pmf_conv_infsetsum)"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) {..<n} = 1 - (1 - p) ^ n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma geometric_pmf_prob_greaterThan:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p)^(n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "have \"(UNIV - {..n}) = {n<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - {..n} = {n<..}", "by auto"], ["proof (state)\nthis:\n  UNIV - {..n} = {n<..}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "moreover"], ["proof (state)\nthis:\n  UNIV - {..n} = {n<..}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "have \"measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)", "by (subst measure_pmf.finite_measure_Diff)\n                   (auto simp add: geometric_pmf_prob_atMost)"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "ultimately"], ["proof (chain)\npicking this:\n  UNIV - {..n} = {n<..}\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  UNIV - {..n} = {n<..}\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..n}) = (1 - p) ^ (n + 1)\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)", "by auto"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) {n<..} = (1 - p) ^ (n + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma geometric_pmf_prob_atLeast:\n  assumes \"p \\<in> {0<..1}\"\n  shows  \"measure_pmf.prob (geometric_pmf p) {n..} = (1 - p)^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "have \"(UNIV - {..<n}) = {n..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - {..<n} = {n..}", "by auto"], ["proof (state)\nthis:\n  UNIV - {..<n} = {n..}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "moreover"], ["proof (state)\nthis:\n  UNIV - {..<n} = {n..}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "have \"measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n", "by (subst measure_pmf.finite_measure_Diff)\n                   (auto simp add: geometric_pmf_prob_lessThan)"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "ultimately"], ["proof (chain)\npicking this:\n  UNIV - {..<n} = {n..}\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  UNIV - {..<n} = {n..}\n  measure_pmf.prob (geometric_pmf p) (UNIV - {..<n}) = (1 - p) ^ n\n\ngoal (1 subgoal):\n 1. measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n", "by auto"], ["proof (state)\nthis:\n  measure_pmf.prob (geometric_pmf p) {n..} = (1 - p) ^ n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernoulli_pmf_of_set':\n  assumes \"finite A\"\n  shows \"map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1/2))) = pmf_of_set (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have *: \"Pi_pmf A P (\\<lambda>_. pmf_of_set (UNIV :: bool set)) = pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV :: bool set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV) =\n    pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV) =\n    pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))", "by (intro Pi_pmf_of_set) auto"], ["proof (state)\nthis:\n  Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV) =\n  pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have \"map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n        map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV))", "using bernoulli_pmf_half_conv_pmf_of_set"], ["proof (prove)\nusing this:\n  bernoulli_pmf (1 / 2) = pmf_of_set UNIV\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV))", "by auto"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "also"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have \"\\<dots> = map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV)) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV)) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV)))", "by (subst Pi_pmf_of_set) (auto)"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV)) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV)))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "also"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. pmf_of_set UNIV)) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV)))\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "have \"\\<dots> = pmf_of_set (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n    pmf_of_set (Pow A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n    pmf_of_set (Pow A)", "have \"bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x}) (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)", "by (rule bij_betwI[of _ _ _ \"\\<lambda>B b. if b \\<in> A then \\<not> (b \\<in> B) else P\"]) (auto simp add: PiE_dflt_def)"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n    pmf_of_set (Pow A)", "then"], ["proof (chain)\npicking this:\n  bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n    pmf_of_set (Pow A)", "using assms"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (PiE_dflt A P (\\<lambda>_. UNIV)) (Pow A)\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n    pmf_of_set (Pow A)", "by (intro map_pmf_of_set_bij_betw) auto"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n  pmf_of_set (Pow A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (pmf_of_set (PiE_dflt A P (\\<lambda>_. UNIV))) =\n  pmf_of_set (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "finally"], ["proof (chain)\npicking this:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)", "show ?thesis"], ["proof (prove)\nusing this:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n    pmf_of_set (Pow A)", "by simp"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A P (\\<lambda>_. bernoulli_pmf (1 / 2))) =\n  pmf_of_set (Pow A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_pmf_of_set_Suc:\n  assumes \"finite A\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n       do {\n         B \\<leftarrow> pmf_of_set (Pow A);\n         Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1/2))) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n        Pi_pmf A 0 (\\<lambda>_. bernoulli_pmf (1/2) \\<bind>\n        (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1/2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst geometric_bind_pmf_unfold) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2)) \\<bind>\n             (\\<lambda>b. Pi_pmf A 0 (\\<lambda>x. if b x then return_pmf 0 else map_pmf Suc (geometric_pmf (1/2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst Pi_pmf_bind[of _ _ _ _ False]) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             do {b \\<leftarrow> Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2));\n                 Pi_pmf {x \\<in> A. ~b x} 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1/2)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst Pi_pmf_if_set') auto"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             do {B \\<leftarrow> map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2)));\n                 Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1/2)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "unfolding map_pmf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>x. return_pmf {xa \\<in> A. \\<not> x xa}) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x))))", "apply(subst bind_assoc_pmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>x.\n        return_pmf {xa \\<in> A. \\<not> x xa} \\<bind>\n        (\\<lambda>B.\n            Pi_pmf B 0\n             (\\<lambda>x.\n                 geometric_pmf (1 / 2) \\<bind>\n                 (\\<lambda>x. return_pmf (Suc x)))))", "apply(subst bind_return_pmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>x.\n        Pi_pmf {xa \\<in> A. \\<not> x xa} 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x))))", "by auto"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> = pmf_of_set (Pow A) \\<bind> (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst bernoulli_pmf_of_set') auto"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B.\n      Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "by simp"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_pmf_of_set_Suc':\n  assumes \"finite A\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n       do {\n         B \\<leftarrow> pmf_of_set (Pow A);\n         Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1/2))) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1/2)) =\n        Pi_pmf A 0 (\\<lambda>_. bernoulli_pmf (1/2) \\<bind>\n        (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1/2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst geometric_bind_pmf_unfold) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2)) \\<bind>\n             (\\<lambda>b. Pi_pmf A 0 (\\<lambda>x. if b x then return_pmf 0 else map_pmf Suc (geometric_pmf (1/2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf (1 / 2) \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst Pi_pmf_bind[of _ _ _ _ False]) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf (1 / 2) \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             do {b \\<leftarrow> Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2));\n                 Pi_pmf {x \\<in> A. ~b x} 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1/2)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0\n             else map_pmf Suc (geometric_pmf (1 / 2)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst Pi_pmf_if_set') auto"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0\n           else map_pmf Suc (geometric_pmf (1 / 2)))) =\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> =\n             do {B \\<leftarrow> map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x}) (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1/2)));\n                 Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1/2)))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "unfolding map_pmf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x)))) =\n    Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n    (\\<lambda>x. return_pmf {xa \\<in> A. \\<not> x xa}) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0\n         (\\<lambda>x.\n             geometric_pmf (1 / 2) \\<bind>\n             (\\<lambda>x. return_pmf (Suc x))))", "by (auto simp add: bind_assoc_pmf bind_return_pmf)"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "also"], ["proof (state)\nthis:\n  Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2)) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "have \"\\<dots> = pmf_of_set (Pow A) \\<bind> (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n     (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "by (subst bernoulli_pmf_of_set') auto"], ["proof (state)\nthis:\n  map_pmf (\\<lambda>b. {x \\<in> A. \\<not> b x})\n   (Pi_pmf A False (\\<lambda>_. bernoulli_pmf (1 / 2))) \\<bind>\n  (\\<lambda>B.\n      Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2)))) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>x. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n    pmf_of_set (Pow A) \\<bind>\n    (\\<lambda>B.\n        Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))", "by simp"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf (1 / 2)) =\n  pmf_of_set (Pow A) \\<bind>\n  (\\<lambda>B. Pi_pmf B 0 (\\<lambda>_. map_pmf Suc (geometric_pmf (1 / 2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma binomial_pmf_altdef':\n  fixes A :: \"'a set\"\n  assumes \"finite A\" and \"card A = n\" and p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n             map_pmf (\\<lambda>f. card {x\\<in>A. f x}) (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  card A = n\n  p \\<in> {0..1}", "have \"?lhs = binomial_pmf (card A) p\""], ["proof (prove)\nusing this:\n  finite A\n  card A = n\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf n p = binomial_pmf (card A) p", "by simp"], ["proof (state)\nthis:\n  binomial_pmf n p = binomial_pmf (card A) p\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  binomial_pmf n p = binomial_pmf (card A) p\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf (card A) p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "using assms(1)"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. binomial_pmf (card A) p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "proof (induction rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "with p"], ["proof (chain)\npicking this:\n  p \\<in> {0..1}", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf (card {}) p =\n    map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n     (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))", "by (simp add: binomial_pmf_0)"], ["proof (state)\nthis:\n  binomial_pmf (card {}) p =\n  map_pmf (\\<lambda>f. card {x \\<in> {}. f x})\n   (Pi_pmf {} dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  binomial_pmf (card A) p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "from insert.hyps"], ["proof (chain)\npicking this:\n  finite A\n  x \\<notin> A", "have \"card (insert x A) = Suc (card A)\""], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. card (insert x A) = Suc (card A)", "by simp"], ["proof (state)\nthis:\n  card (insert x A) = Suc (card A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  card (insert x A) = Suc (card A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"binomial_pmf \\<dots> p = do {\n                                     b \\<leftarrow> bernoulli_pmf p;\n                                     f \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n                                     return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})\n                                   }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf (Suc (card A)) p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))", "using p"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf (Suc (card A)) p =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))", "by (simp add: binomial_pmf_Suc insert.IH bind_map_pmf)"], ["proof (state)\nthis:\n  binomial_pmf (Suc (card A)) p =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  binomial_pmf (Suc (card A)) p =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = do {\n                      b \\<leftarrow> bernoulli_pmf p;\n                      f \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n                      return_pmf (card {y \\<in> insert x A. (f(x := b)) y})\n                    }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n    bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))", "proof (intro bind_pmf_cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "case (1 b f)"], ["proof (state)\nthis:\n  b \\<in> set_pmf (bernoulli_pmf p)\n  f \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "have \"(if b then 1 else 0) + card {y\\<in>A. f y} = card ((if b then {x} else {}) \\<union> {y\\<in>A. f y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then 1 else 0) + card {y \\<in> A. f y} =\n    card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (if b then 1 else 0) + card {y \\<in> A. f y} =\n    card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})", "by auto"], ["proof (state)\nthis:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "also"], ["proof (state)\nthis:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card ((if b then {x} else {}) \\<union> {y \\<in> A. f y})\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "have \"(if b then {x} else {}) \\<union> {y\\<in>A. f y} = {y\\<in>insert x A. (f(x := b)) y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n    {y \\<in> insert x A. (f(x := b)) y}", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n    {y \\<in> insert x A. (f(x := b)) y}", "by auto"], ["proof (state)\nthis:\n  (if b then {x} else {}) \\<union> {y \\<in> A. f y} =\n  {y \\<in> insert x A. (f(x := b)) y}\n\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> set_pmf (bernoulli_pmf p);\n        xaa\n        \\<in> set_pmf (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> return_pmf\n                          ((if xa then 1 else 0) +\n                           card {y \\<in> A. xaa y}) =\n                         return_pmf\n                          (card {y \\<in> insert x A. (xaa(x := xa)) y})", "finally"], ["proof (chain)\npicking this:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card {y \\<in> insert x A. (f(x := b)) y}", "show ?case"], ["proof (prove)\nusing this:\n  (if b then 1 else 0) + card {y \\<in> A. f y} =\n  card {y \\<in> insert x A. (f(x := b)) y}\n\ngoal (1 subgoal):\n 1. return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}) =\n    return_pmf (card {y \\<in> insert x A. (f(x := b)) y})", "by simp"], ["proof (state)\nthis:\n  return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}) =\n  return_pmf (card {y \\<in> insert x A. (f(x := b)) y})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "also"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f.\n          return_pmf ((if b then 1 else 0) + card {y \\<in> A. f y}))) =\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y})))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "have \"\\<dots> = map_pmf (\\<lambda>f. card {y\\<in>insert x A. f y})\n                      (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n    map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. bernoulli_pmf p \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n        (\\<lambda>f.\n            return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n    map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "by (subst Pi_pmf_insert) (simp_all add: pair_pmf_def map_bind_pmf)"], ["proof (state)\nthis:\n  bernoulli_pmf p \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n      (\\<lambda>f. return_pmf (card {y \\<in> insert x A. (f(x := b)) y}))) =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        binomial_pmf (card F) p =\n        map_pmf (\\<lambda>f. card {x \\<in> F. f x})\n         (Pi_pmf F dflt (\\<lambda>_. bernoulli_pmf p))\\<rbrakk>\n       \\<Longrightarrow> binomial_pmf (card (insert x F)) p =\n                         map_pmf\n                          (\\<lambda>f. card {xa \\<in> insert x F. f xa})\n                          (Pi_pmf (insert x F) dflt\n                            (\\<lambda>_. bernoulli_pmf p))", "finally"], ["proof (chain)\npicking this:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "show ?case"], ["proof (prove)\nusing this:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {y \\<in> insert x A. f y})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf (card (insert x A)) p =\n    map_pmf (\\<lambda>f. card {xa \\<in> insert x A. f xa})\n     (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))", "."], ["proof (state)\nthis:\n  binomial_pmf (card (insert x A)) p =\n  map_pmf (\\<lambda>f. card {xa \\<in> insert x A. f xa})\n   (Pi_pmf (insert x A) dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binomial_pmf (card A) p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "finally"], ["proof (chain)\npicking this:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "show ?thesis"], ["proof (prove)\nusing this:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n     (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))", "."], ["proof (state)\nthis:\n  binomial_pmf n p =\n  map_pmf (\\<lambda>f. card {x \\<in> A. f x})\n   (Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bernoulli_pmf_Not:\n  assumes \"p \\<in> {0..1}\"\n  shows \"bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))", "have *: \"(Not -` {True}) = {False}\" \"(Not -` {False}) = {True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Not -` {True} = {False} &&& Not -` {False} = {True}", "by blast+"], ["proof (state)\nthis:\n  Not -` {True} = {False}\n  Not -` {False} = {True}\n\ngoal (1 subgoal):\n 1. bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))", "have \"pmf (bernoulli_pmf p) b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) b\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (bernoulli_pmf p) b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) b", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (bernoulli_pmf p) b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) b", "by (cases b) (auto simp add: pmf_map * measure_pmf_single)"], ["proof (state)\nthis:\n  pmf (bernoulli_pmf p) ?b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) ?b\n\ngoal (1 subgoal):\n 1. bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))", "then"], ["proof (chain)\npicking this:\n  pmf (bernoulli_pmf p) ?b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) ?b", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (bernoulli_pmf p) ?b = pmf (map_pmf Not (bernoulli_pmf (1 - p))) ?b\n\ngoal (1 subgoal):\n 1. bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))", "by (rule pmf_eqI)"], ["proof (state)\nthis:\n  bernoulli_pmf p = map_pmf Not (bernoulli_pmf (1 - p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma binomial_pmf_altdef'':\n  assumes p: \"p \\<in> {0..1}\"\n  shows   \"binomial_pmf n p =\n           map_pmf (\\<lambda>f. card {x. x < n \\<and> f x}) (Pi_pmf {..<n} dflt (\\<lambda>_. bernoulli_pmf p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x. x < n \\<and> f x})\n     (Pi_pmf {..<n} dflt (\\<lambda>_. bernoulli_pmf p))", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. binomial_pmf n p =\n    map_pmf (\\<lambda>f. card {x. x < n \\<and> f x})\n     (Pi_pmf {..<n} dflt (\\<lambda>_. bernoulli_pmf p))", "by (subst binomial_pmf_altdef'[of \"{..<n}\"]) (auto)"], ["", "context includes monad_normalisation\nbegin"], ["", "lemma Pi_pmf_geometric_filter:\n  assumes \"finite A\" \"p \\<in> {0<..1}\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n       do {\n         fb \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n         Pi_pmf {x \\<in> A. \\<not> fb x} 0 (\\<lambda>_. map_pmf Suc (geometric_pmf p)) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "have \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n        Pi_pmf A 0 (\\<lambda>_. bernoulli_pmf p \\<bind>\n                   (\\<lambda>b. if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))", "by (subst geometric_bind_pmf_unfold) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "have \"\\<dots> =\n             Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n             (\\<lambda>b. Pi_pmf A 0 (\\<lambda>x. if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0\n     (\\<lambda>_.\n         bernoulli_pmf p \\<bind>\n         (\\<lambda>b.\n             if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p)))", "by (subst Pi_pmf_bind[of _ _ _ _ dflt]) auto"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "also"], ["proof (state)\nthis:\n  Pi_pmf A 0\n   (\\<lambda>_.\n       bernoulli_pmf p \\<bind>\n       (\\<lambda>b.\n           if b then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "have \"\\<dots> =\n             do {b \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p);\n                 Pi_pmf {x \\<in> A. \\<not> b x} 0 (\\<lambda>x. map_pmf Suc (geometric_pmf p))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf p)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf A 0\n         (\\<lambda>x.\n             if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>b.\n        Pi_pmf {x \\<in> A. \\<not> b x} 0\n         (\\<lambda>x. map_pmf Suc (geometric_pmf p)))", "by (subst Pi_pmf_if_set') (auto)"], ["proof (state)\nthis:\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf A 0\n       (\\<lambda>x.\n           if b x then return_pmf 0 else map_pmf Suc (geometric_pmf p))) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "finally"], ["proof (chain)\npicking this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf p)))", "show ?thesis"], ["proof (prove)\nusing this:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>b.\n      Pi_pmf {x \\<in> A. \\<not> b x} 0\n       (\\<lambda>x. map_pmf Suc (geometric_pmf p)))\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. \\<not> fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "by simp"], ["proof (state)\nthis:\n  Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n  Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf p) \\<bind>\n  (\\<lambda>fb.\n      Pi_pmf {x \\<in> A. \\<not> fb x} 0\n       (\\<lambda>_. map_pmf Suc (geometric_pmf p)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pi_pmf_geometric_filter':\n  assumes \"finite A\" \"p \\<in> {0<..1}\"\n  shows \"Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n       do {\n         fb \\<leftarrow> Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf (1 - p));\n         Pi_pmf {x \\<in> A. fb x} 0 (\\<lambda>_. map_pmf Suc (geometric_pmf p)) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf (1 - p)) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  p \\<in> {0<..1}\n\ngoal (1 subgoal):\n 1. Pi_pmf A 0 (\\<lambda>_. geometric_pmf p) =\n    Pi_pmf A dflt (\\<lambda>_. bernoulli_pmf (1 - p)) \\<bind>\n    (\\<lambda>fb.\n        Pi_pmf {x \\<in> A. fb x} 0\n         (\\<lambda>_. map_pmf Suc (geometric_pmf p)))", "by (auto simp add: Pi_pmf_geometric_filter[of _ _ \"\\<not> dflt\"] bernoulli_pmf_Not[of p]\n      Pi_pmf_map[of _ _ dflt] map_pmf_def[of \"((\\<circ>) Not)\"])"], ["", "end"], ["", "end"]]}