{"file_name": "/home/qj213/afp-2021-10-22/thys/Skip_Lists/Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Skip_Lists", "problem_names": ["lemma bij_betw_mono_on_the_inv_into:\n  fixes A::\"'a::linorder set\" and B::\"'b::linorder set\"\n  assumes b: \"bij_betw f A B\" and m: \"mono_on f A\"\n  shows \"mono_on (the_inv_into A f) B\"", "lemma rev_removeAll_removeAll_rev: \"rev (removeAll x xs) = removeAll x (rev xs)\"", "lemma sorted_list_of_set_Min_Cons:\n  assumes \"finite A\" \"A \\<noteq> {}\"\n  shows \"sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\"", "lemma sorted_list_of_set_filter:\n  assumes \"finite A\"\n  shows \"sorted_list_of_set ({x\\<in>A. P x}) = filter P (sorted_list_of_set A)\"", "lemma sorted_list_of_set_Max_snoc:\n  assumes \"finite A\" \"A \\<noteq> {}\"\n  shows \"sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]\"", "lemma sorted_list_of_set_image:\n  assumes \"mono_on g A\" \"inj_on g A\"\n  shows \"(sorted_list_of_set (g ` A)) = map g (sorted_list_of_set A)\"", "lemma sorted_list_of_set_length: \"length (sorted_list_of_set A) = card A\"", "lemma sorted_list_of_set_bij_betw:\n  assumes \"finite A\"\n  shows \"bij_betw (\\<lambda>n. sorted_list_of_set A ! n) {..<card A} A\"", "lemma nth_mono_on:\n  assumes \"sorted xs\" \"distinct xs\" \"set xs = A\"\n  shows \"mono_on (\\<lambda>n. xs ! n) {..<card A}\"", "lemma sorted_list_of_set_mono_on:\n  \"finite A \\<Longrightarrow> mono_on (\\<lambda>n. sorted_list_of_set A ! n) {..<card A}\"", "lemma bij_mono_map_set_to_nat:\n  assumes \"finite A\"\n  shows \"bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\"\n        \"mono_on (bij_mono_map_set_to_nat A) A\"\n        \"(bij_mono_map_set_to_nat A) ` A = {..<card A}\""], "translations": [["", "lemma bij_betw_mono_on_the_inv_into:\n  fixes A::\"'a::linorder set\" and B::\"'b::linorder set\"\n  assumes b: \"bij_betw f A B\" and m: \"mono_on f A\"\n  shows \"mono_on (the_inv_into A f) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_on (the_inv_into A f) B", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "assume \"\\<not> mono_on (the_inv_into A f) B\""], ["proof (state)\nthis:\n  \\<not> mono_on (the_inv_into A f) B\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> mono_on (the_inv_into A f) B", "have \"\\<exists>r s. r \\<in> B \\<and> s \\<in> B \\<and> r \\<le> s \\<and> \\<not> the_inv_into A f s \\<ge> the_inv_into A f r\""], ["proof (prove)\nusing this:\n  \\<not> mono_on (the_inv_into A f) B\n\ngoal (1 subgoal):\n 1. \\<exists>r s.\n       r \\<in> B \\<and>\n       s \\<in> B \\<and>\n       r \\<le> s \\<and> \\<not> the_inv_into A f r \\<le> the_inv_into A f s", "unfolding mono_on_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>r s.\n             r \\<in> B \\<and> s \\<in> B \\<and> r \\<le> s \\<longrightarrow>\n             the_inv_into A f r \\<le> the_inv_into A f s)\n\ngoal (1 subgoal):\n 1. \\<exists>r s.\n       r \\<in> B \\<and>\n       s \\<in> B \\<and>\n       r \\<le> s \\<and> \\<not> the_inv_into A f r \\<le> the_inv_into A f s", "by blast"], ["proof (state)\nthis:\n  \\<exists>r s.\n     r \\<in> B \\<and>\n     s \\<in> B \\<and>\n     r \\<le> s \\<and> \\<not> the_inv_into A f r \\<le> the_inv_into A f s\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>r s.\n     r \\<in> B \\<and>\n     s \\<in> B \\<and>\n     r \\<le> s \\<and> \\<not> the_inv_into A f r \\<le> the_inv_into A f s", "obtain r s where rs: \"r \\<in> B\" \"s \\<in> B\" \"r \\<le> s\" \"the_inv_into A f s < the_inv_into A f r\""], ["proof (prove)\nusing this:\n  \\<exists>r s.\n     r \\<in> B \\<and>\n     s \\<in> B \\<and>\n     r \\<le> s \\<and> \\<not> the_inv_into A f r \\<le> the_inv_into A f s\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        \\<lbrakk>r \\<in> B; s \\<in> B; r \\<le> s;\n         the_inv_into A f s < the_inv_into A f r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  r \\<in> B\n  s \\<in> B\n  r \\<le> s\n  the_inv_into A f s < the_inv_into A f r\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "have f: \"f (the_inv_into A f b) = b\" if \"b \\<in> B\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (the_inv_into A f b) = b", "using that assms f_the_inv_into_f_bij_betw"], ["proof (prove)\nusing this:\n  b \\<in> B\n  bij_betw f A B\n  mono_on f A\n  \\<lbrakk>bij_betw ?f ?A ?B;\n   bij_betw ?f ?A ?B \\<Longrightarrow> ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?f (the_inv_into ?A ?f ?x) = ?x\n\ngoal (1 subgoal):\n 1. f (the_inv_into A f b) = b", "by metis"], ["proof (state)\nthis:\n  ?b \\<in> B \\<Longrightarrow> f (the_inv_into A f ?b) = ?b\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "have \"the_inv_into A f s \\<in> A\" \"the_inv_into A f r \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_inv_into A f s \\<in> A &&& the_inv_into A f r \\<in> A", "using rs assms"], ["proof (prove)\nusing this:\n  r \\<in> B\n  s \\<in> B\n  r \\<le> s\n  the_inv_into A f s < the_inv_into A f r\n  bij_betw f A B\n  mono_on f A\n\ngoal (1 subgoal):\n 1. the_inv_into A f s \\<in> A &&& the_inv_into A f r \\<in> A", "by (auto simp add: bij_betw_def the_inv_into_into)"], ["proof (state)\nthis:\n  the_inv_into A f s \\<in> A\n  the_inv_into A f r \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  the_inv_into A f s \\<in> A\n  the_inv_into A f r \\<in> A", "have \"f (the_inv_into A f s) \\<le> f (the_inv_into A f r)\""], ["proof (prove)\nusing this:\n  the_inv_into A f s \\<in> A\n  the_inv_into A f r \\<in> A\n\ngoal (1 subgoal):\n 1. f (the_inv_into A f s) \\<le> f (the_inv_into A f r)", "using rs"], ["proof (prove)\nusing this:\n  the_inv_into A f s \\<in> A\n  the_inv_into A f r \\<in> A\n  r \\<in> B\n  s \\<in> B\n  r \\<le> s\n  the_inv_into A f s < the_inv_into A f r\n\ngoal (1 subgoal):\n 1. f (the_inv_into A f s) \\<le> f (the_inv_into A f r)", "by (intro mono_onD[OF m]) (auto)"], ["proof (state)\nthis:\n  f (the_inv_into A f s) \\<le> f (the_inv_into A f r)\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f (the_inv_into A f s) \\<le> f (the_inv_into A f r)", "have \"r = s\""], ["proof (prove)\nusing this:\n  f (the_inv_into A f s) \\<le> f (the_inv_into A f r)\n\ngoal (1 subgoal):\n 1. r = s", "using rs f"], ["proof (prove)\nusing this:\n  f (the_inv_into A f s) \\<le> f (the_inv_into A f r)\n  r \\<in> B\n  s \\<in> B\n  r \\<le> s\n  the_inv_into A f s < the_inv_into A f r\n  ?b \\<in> B \\<Longrightarrow> f (the_inv_into A f ?b) = ?b\n\ngoal (1 subgoal):\n 1. r = s", "by simp"], ["proof (state)\nthis:\n  r = s\n\ngoal (1 subgoal):\n 1. \\<not> mono_on (the_inv_into A f) B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  r = s", "show False"], ["proof (prove)\nusing this:\n  r = s\n\ngoal (1 subgoal):\n 1. False", "using rs"], ["proof (prove)\nusing this:\n  r = s\n  r \\<in> B\n  s \\<in> B\n  r \\<le> s\n  the_inv_into A f s < the_inv_into A f r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_removeAll_removeAll_rev: \"rev (removeAll x xs) = removeAll x (rev xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (removeAll x xs) = removeAll x (rev xs)", "by (simp add: removeAll_filter_not_eq rev_filter)"], ["", "lemma sorted_list_of_set_Min_Cons:\n  assumes \"finite A\" \"A \\<noteq> {}\"\n  shows \"sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "have *: \"A = insert (Min A) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = insert (Min A) A", "using assms Min_in"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. A = insert (Min A) A", "by (auto)"], ["proof (state)\nthis:\n  A = insert (Min A) A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "then"], ["proof (chain)\npicking this:\n  A = insert (Min A) A", "have \"sorted_list_of_set A = insort (Min A) (sorted_list_of_set (A - {Min A}))\""], ["proof (prove)\nusing this:\n  A = insert (Min A) A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = insort (Min A) (sorted_list_of_set (A - {Min A}))", "using assms"], ["proof (prove)\nusing this:\n  A = insert (Min A) A\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = insort (Min A) (sorted_list_of_set (A - {Min A}))", "by (subst *, intro sorted_list_of_set_insert) auto"], ["proof (state)\nthis:\n  sorted_list_of_set A = insort (Min A) (sorted_list_of_set (A - {Min A}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "also"], ["proof (state)\nthis:\n  sorted_list_of_set A = insort (Min A) (sorted_list_of_set (A - {Min A}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "have \"\\<dots> = Min A # sorted_list_of_set (A - {Min A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insort (Min A) (sorted_list_of_set (A - {Min A})) =\n    Min A # sorted_list_of_set (A - {Min A})", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. insort (Min A) (sorted_list_of_set (A - {Min A})) =\n    Min A # sorted_list_of_set (A - {Min A})", "by (intro insort_is_Cons) (auto)"], ["proof (state)\nthis:\n  insort (Min A) (sorted_list_of_set (A - {Min A})) =\n  Min A # sorted_list_of_set (A - {Min A})\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_set_filter:\n  assumes \"finite A\"\n  shows \"sorted_list_of_set ({x\\<in>A. P x}) = filter P (sorted_list_of_set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "proof (induction \"sorted_list_of_set A\" arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have x: \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using Cons sorted_list_of_set list.set_intros(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  finite ?A \\<Longrightarrow> set (sorted_list_of_set ?A) = ?A\n  sorted (sorted_list_of_set ?A)\n  distinct (sorted_list_of_set ?A)\n  ?x21.0 \\<in> set (?x21.0 # ?x22.0)\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by metis"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have \"sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "by (intro sorted_list_of_set_Min_Cons) auto"], ["proof (state)\nthis:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})", "have 1: \"x = Min A\" \"xs = sorted_list_of_set (A - {x})\""], ["proof (prove)\nusing this:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\n\ngoal (1 subgoal):\n 1. x = Min A &&& xs = sorted_list_of_set (A - {x})", "using Cons"], ["proof (prove)\nusing this:\n  sorted_list_of_set A = Min A # sorted_list_of_set (A - {Min A})\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n\ngoal (1 subgoal):\n 1. x = Min A &&& xs = sorted_list_of_set (A - {x})", "by auto"], ["proof (state)\nthis:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "{"], ["proof (state)\nthis:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "assume Px: \"P x\""], ["proof (state)\nthis:\n  P x\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have 2: \"sorted_list_of_set {x \\<in> A. P x} = Min {x \\<in> A. P x} # sorted_list_of_set ({x \\<in> A. P x} - {Min {x \\<in> A. P x}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} =\n    Min {x \\<in> A. P x} #\n    sorted_list_of_set ({x \\<in> A. P x} - {Min {x \\<in> A. P x}})", "using Px Cons 1 sorted_list_of_set_eq_Nil_iff"], ["proof (prove)\nusing this:\n  P x\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n  finite ?A \\<Longrightarrow> (sorted_list_of_set ?A = []) = (?A = {})\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} =\n    Min {x \\<in> A. P x} #\n    sorted_list_of_set ({x \\<in> A. P x} - {Min {x \\<in> A. P x}})", "by (intro sorted_list_of_set_Min_Cons) fastforce+"], ["proof (state)\nthis:\n  sorted_list_of_set {x \\<in> A. P x} =\n  Min {x \\<in> A. P x} #\n  sorted_list_of_set ({x \\<in> A. P x} - {Min {x \\<in> A. P x}})\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  sorted_list_of_set {x \\<in> A. P x} =\n  Min {x \\<in> A. P x} #\n  sorted_list_of_set ({x \\<in> A. P x} - {Min {x \\<in> A. P x}})\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have 3: \"Min {x \\<in> A. P x} = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {x \\<in> A. P x} = x", "using Cons 1 Px x"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n  P x\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. Min {x \\<in> A. P x} = x", "by (auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min {x \\<in> A. P x} = x\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  Min {x \\<in> A. P x} = x\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have 4: \"{x \\<in> A. P x} - {x} = {y \\<in> A - {x}. P y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} - {x} = {y \\<in> A - {x}. P y}", "by blast"], ["proof (state)\nthis:\n  {x \\<in> A. P x} - {x} = {y \\<in> A - {x}. P y}\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  {x \\<in> A. P x} - {x} = {y \\<in> A - {x}. P y}\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have 5: \"sorted_list_of_set {y \\<in> A - {x}. P y} = filter P (sorted_list_of_set (A - {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set {y \\<in> A - {x}. P y} =\n    filter P (sorted_list_of_set (A - {x}))", "using 1 Cons"], ["proof (prove)\nusing this:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {y \\<in> A - {x}. P y} =\n    filter P (sorted_list_of_set (A - {x}))", "by (intro Cons) (auto)"], ["proof (state)\nthis:\n  sorted_list_of_set {y \\<in> A - {x}. P y} =\n  filter P (sorted_list_of_set (A - {x}))\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  sorted_list_of_set {y \\<in> A - {x}. P y} =\n  filter P (sorted_list_of_set (A - {x}))\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have \"\\<dots> = filter P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set (A - {x})) = filter P xs", "using 1"], ["proof (prove)\nusing this:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set (A - {x})) = filter P xs", "by simp"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set (A - {x})) = filter P xs\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set (A - {x})) = filter P xs\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have \"filter P (sorted_list_of_set A) = x # filter P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set A) = x # filter P xs", "using Px"], ["proof (prove)\nusing this:\n  P x\n\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set A) = x # filter P xs", "by (simp flip: \\<open>x # xs = sorted_list_of_set A\\<close>)"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set A) = x # filter P xs\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "finally"], ["proof (chain)\npicking this:\n  filter P (sorted_list_of_set A) = sorted_list_of_set {x \\<in> A. P x}", "have ?case"], ["proof (prove)\nusing this:\n  filter P (sorted_list_of_set A) = sorted_list_of_set {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "by auto"], ["proof (state)\nthis:\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "}"], ["proof (state)\nthis:\n  P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "moreover"], ["proof (state)\nthis:\n  P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "{"], ["proof (state)\nthis:\n  P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "assume Px: \"\\<not> P x\""], ["proof (state)\nthis:\n  \\<not> P x\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  \\<not> P x", "have \"{x \\<in> A. P x} = {y \\<in> A - {x}. P y}\""], ["proof (prove)\nusing this:\n  \\<not> P x\n\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} = {y \\<in> A - {x}. P y}", "by blast"], ["proof (state)\nthis:\n  {x \\<in> A. P x} = {y \\<in> A - {x}. P y}\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  {x \\<in> A. P x} = {y \\<in> A - {x}. P y}\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have \"sorted_list_of_set \\<dots> = filter P (sorted_list_of_set (A - {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set {y \\<in> A - {x}. P y} =\n    filter P (sorted_list_of_set (A - {x}))", "using 1 Cons"], ["proof (prove)\nusing this:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set {x \\<in> ?A. P x} =\n                    filter P (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {y \\<in> A - {x}. P y} =\n    filter P (sorted_list_of_set (A - {x}))", "by (intro Cons) auto"], ["proof (state)\nthis:\n  sorted_list_of_set {y \\<in> A - {x}. P y} =\n  filter P (sorted_list_of_set (A - {x}))\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  sorted_list_of_set {y \\<in> A - {x}. P y} =\n  filter P (sorted_list_of_set (A - {x}))\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "have  \"filter P (sorted_list_of_set (A - {x})) = filter P (sorted_list_of_set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set (A - {x})) =\n    filter P (sorted_list_of_set A)", "using 1 Px"], ["proof (prove)\nusing this:\n  x = Min A\n  xs = sorted_list_of_set (A - {x})\n  \\<not> P x\n\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set (A - {x})) =\n    filter P (sorted_list_of_set A)", "by (simp flip: \\<open>x # xs = sorted_list_of_set A\\<close>)"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set (A - {x})) = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "have ?case"], ["proof (prove)\nusing this:\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "}"], ["proof (state)\nthis:\n  \\<not> P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                                     filter P (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "ultimately"], ["proof (chain)\npicking this:\n  P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n  \\<not> P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "show ?case"], ["proof (prove)\nusing this:\n  P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n  \\<not> P x \\<Longrightarrow>\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)", "by blast"], ["proof (state)\nthis:\n  sorted_list_of_set {x \\<in> A. P x} = filter P (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set {x \\<in> A. P x} =\n                         filter P (sorted_list_of_set A)", "qed (use sorted_list_of_set_eq_Nil_iff in fastforce)"], ["", "lemma sorted_list_of_set_Max_snoc:\n  assumes \"finite A\" \"A \\<noteq> {}\"\n  shows \"sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "have *: \"A = insert (Max A) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = insert (Max A) A", "using assms Max_in"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. A = insert (Max A) A", "by (auto)"], ["proof (state)\nthis:\n  A = insert (Max A) A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "then"], ["proof (chain)\npicking this:\n  A = insert (Max A) A", "have \"sorted_list_of_set A = insort (Max A) (sorted_list_of_set (A - {Max A}))\""], ["proof (prove)\nusing this:\n  A = insert (Max A) A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = insort (Max A) (sorted_list_of_set (A - {Max A}))", "using assms"], ["proof (prove)\nusing this:\n  A = insert (Max A) A\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = insort (Max A) (sorted_list_of_set (A - {Max A}))", "by (subst *, intro sorted_list_of_set_insert) auto"], ["proof (state)\nthis:\n  sorted_list_of_set A = insort (Max A) (sorted_list_of_set (A - {Max A}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "also"], ["proof (state)\nthis:\n  sorted_list_of_set A = insort (Max A) (sorted_list_of_set (A - {Max A}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "have \"\\<dots> = sorted_list_of_set (A - {Max A}) @ [Max A]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insort (Max A) (sorted_list_of_set (A - {Max A})) =\n    sorted_list_of_set (A - {Max A}) @ [Max A]", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. insort (Max A) (sorted_list_of_set (A - {Max A})) =\n    sorted_list_of_set (A - {Max A}) @ [Max A]", "by (intro sorted_insort_is_snoc) (auto)"], ["proof (state)\nthis:\n  insort (Max A) (sorted_list_of_set (A - {Max A})) =\n  sorted_list_of_set (A - {Max A}) @ [Max A]\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]\n\ngoal (1 subgoal):\n 1. sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set A = sorted_list_of_set (A - {Max A}) @ [Max A]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_set_image:\n  assumes \"mono_on g A\" \"inj_on g A\"\n  shows \"(sorted_list_of_set (g ` A)) = map g (sorted_list_of_set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "proof (cases \"finite A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n 2. infinite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "case True"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n 2. infinite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  finite A", "show ?thesis"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  mono_on g A\n  inj_on g A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "proof (induction \"sorted_list_of_set A\" arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "case Nil"], ["proof (state)\nthis:\n  [] = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>[] = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)\n 2. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  [] = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A", "show ?case"], ["proof (prove)\nusing this:\n  [] = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "using sorted_list_of_set_eq_Nil_iff"], ["proof (prove)\nusing this:\n  [] = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  finite ?A \\<Longrightarrow> (sorted_list_of_set ?A = []) = (?A = {})\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "by fastforce"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "case (Cons x xs A)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "have not_empty_A: \"A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "using Cons sorted_list_of_set_eq_Nil_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  finite ?A \\<Longrightarrow> (sorted_list_of_set ?A = []) = (?A = {})\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "have *: \"Min (g ` A) = g (Min A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (g ` A) = g (Min A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (g ` A) = g (Min A)", "have \"g (Min A) \\<le> g a\" if \"a \\<in> A\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. g (Min A) \\<le> g a", "using that Cons Min_in Min_le not_empty_A"], ["proof (prove)\nusing this:\n  a \\<in> A\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> Min ?A \\<le> ?x\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. g (Min A) \\<le> g a", "by (auto intro!: mono_onD[of g])"], ["proof (state)\nthis:\n  ?a \\<in> A \\<Longrightarrow> g (Min A) \\<le> g ?a\n\ngoal (1 subgoal):\n 1. Min (g ` A) = g (Min A)", "then"], ["proof (chain)\npicking this:\n  ?a \\<in> A \\<Longrightarrow> g (Min A) \\<le> g ?a", "show ?thesis"], ["proof (prove)\nusing this:\n  ?a \\<in> A \\<Longrightarrow> g (Min A) \\<le> g ?a\n\ngoal (1 subgoal):\n 1. Min (g ` A) = g (Min A)", "using Cons not_empty_A"], ["proof (prove)\nusing this:\n  ?a \\<in> A \\<Longrightarrow> g (Min A) \\<le> g ?a\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (g ` A) = g (Min A)", "by (intro Min_eqI) auto"], ["proof (state)\nthis:\n  Min (g ` A) = g (Min A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Min (g ` A) = g (Min A)\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "have \"g ` A \\<noteq> {}\" \"finite (g ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g ` A \\<noteq> {} &&& finite (g ` A)", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n\ngoal (1 subgoal):\n 1. g ` A \\<noteq> {} &&& finite (g ` A)", "by auto"], ["proof (state)\nthis:\n  g ` A \\<noteq> {}\n  finite (g ` A)\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  g ` A \\<noteq> {}\n  finite (g ` A)", "have \"(sorted_list_of_set (g ` A)) =\n             Min (g ` A) # sorted_list_of_set ((g ` A) - {Min (g ` A)})\""], ["proof (prove)\nusing this:\n  g ` A \\<noteq> {}\n  finite (g ` A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) =\n    Min (g ` A) # sorted_list_of_set (g ` A - {Min (g ` A)})", "by (auto simp add: sorted_list_of_set_Min_Cons)"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) =\n  Min (g ` A) # sorted_list_of_set (g ` A - {Min (g ` A)})\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) =\n  Min (g ` A) # sorted_list_of_set (g ` A - {Min (g ` A)})\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "have \"(g ` A) - {Min (g ` A)} = g ` (A - {Min A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g ` A - {Min (g ` A)} = g ` (A - {Min A})", "using Cons Min_in not_empty_A *"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n  A \\<noteq> {}\n  Min (g ` A) = g (Min A)\n\ngoal (1 subgoal):\n 1. g ` A - {Min (g ` A)} = g ` (A - {Min A})", "by (subst inj_on_image_set_diff[of _ A]) auto"], ["proof (state)\nthis:\n  g ` A - {Min (g ` A)} = g ` (A - {Min A})\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "also"], ["proof (state)\nthis:\n  g ` A - {Min (g ` A)} = g ` (A - {Min A})\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "have \"sorted_list_of_set (g ` (A - {Min A})) = map g (sorted_list_of_set (A - {Min A}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` (A - {Min A})) =\n    map g (sorted_list_of_set (A - {Min A}))", "using not_empty_A Cons mono_on_subset[of _ A \"A - {Min A}\"] inj_on_subset[of _ A \"A - {Min A}\"]"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  \\<lbrakk>mono_on ?f A; A - {Min A} \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> mono_on ?f (A - {Min A})\n  \\<lbrakk>inj_on ?f A; A - {Min A} \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> inj_on ?f (A - {Min A})\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` (A - {Min A})) =\n    map g (sorted_list_of_set (A - {Min A}))", "by (intro Cons) (auto simp add: sorted_list_of_set_Min_Cons)"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` (A - {Min A})) =\n  map g (sorted_list_of_set (A - {Min A}))\n\ngoal (1 subgoal):\n 1. \\<And>a x A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>x = sorted_list_of_set A; finite A; mono_on g A;\n                    inj_on g A\\<rbrakk>\n                   \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                                     map g (sorted_list_of_set A);\n        a # x = sorted_list_of_set A; finite A; mono_on g A;\n        inj_on g A\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (g ` A) =\n                         map g (sorted_list_of_set A)", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set (g ` A) =\n  Min (g ` A) # map g (sorted_list_of_set (A - {Min A}))", "show ?case"], ["proof (prove)\nusing this:\n  sorted_list_of_set (g ` A) =\n  Min (g ` A) # map g (sorted_list_of_set (A - {Min A}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "using Cons not_empty_A *"], ["proof (prove)\nusing this:\n  sorted_list_of_set (g ` A) =\n  Min (g ` A) # map g (sorted_list_of_set (A - {Min A}))\n  \\<lbrakk>xs = sorted_list_of_set ?A; finite ?A; mono_on g ?A;\n   inj_on g ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (g ` ?A) =\n                    map g (sorted_list_of_set ?A)\n  x # xs = sorted_list_of_set A\n  finite A\n  mono_on g A\n  inj_on g A\n  A \\<noteq> {}\n  Min (g ` A) = g (Min A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "by (auto simp add: sorted_list_of_set_Min_Cons)"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "case False"], ["proof (state)\nthis:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "then"], ["proof (chain)\npicking this:\n  infinite A", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "using assms"], ["proof (prove)\nusing this:\n  infinite A\n  mono_on g A\n  inj_on g A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)", "by (simp add: finite_image_iff)"], ["proof (state)\nthis:\n  sorted_list_of_set (g ` A) = map g (sorted_list_of_set A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_set_length: \"length (sorted_list_of_set A) = card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sorted_list_of_set A) = card A", "using distinct_card sorted_list_of_set[of A]"], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n  finite A \\<Longrightarrow> set (sorted_list_of_set A) = A\n  sorted (sorted_list_of_set A)\n  distinct (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. length (sorted_list_of_set A) = card A", "by (cases \"finite A\") fastforce+"], ["", "lemma sorted_list_of_set_bij_betw:\n  assumes \"finite A\"\n  shows \"bij_betw (\\<lambda>n. sorted_list_of_set A ! n) {..<card A} A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((!) (sorted_list_of_set A)) {..<card A} A", "by (rule bij_betw_nth) (fastforce simp add: assms sorted_list_of_set_length)+"], ["", "lemma nth_mono_on:\n  assumes \"sorted xs\" \"distinct xs\" \"set xs = A\"\n  shows \"mono_on (\\<lambda>n. xs ! n) {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_on ((!) xs) {..<card A}", "using assms"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  set xs = A\n\ngoal (1 subgoal):\n 1. mono_on ((!) xs) {..<card A}", "by (intro mono_onI sorted_nth_mono) (auto simp add: distinct_card)"], ["", "lemma sorted_list_of_set_mono_on:\n  \"finite A \\<Longrightarrow> mono_on (\\<lambda>n. sorted_list_of_set A ! n) {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    mono_on ((!) (sorted_list_of_set A)) {..<card A}", "by (rule nth_mono_on) (auto)"], ["", "definition bij_mono_map_set_to_nat :: \"'a::linorder set \\<Rightarrow> 'a \\<Rightarrow> nat\" where\n  \"bij_mono_map_set_to_nat A =\n    (\\<lambda>x. if x \\<in> A then the_inv_into {..<card A} ((!) (sorted_list_of_set A)) x\n                  else card A)\""], ["", "lemma bij_mono_map_set_to_nat:\n  assumes \"finite A\"\n  shows \"bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\"\n        \"mono_on (bij_mono_map_set_to_nat A) A\"\n        \"(bij_mono_map_set_to_nat A) ` A = {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A} &&&\n    mono_on (bij_mono_map_set_to_nat A) A &&&\n    bij_mono_map_set_to_nat A ` A = {..<card A}", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n 2. mono_on (bij_mono_map_set_to_nat A) A\n 3. bij_mono_map_set_to_nat A ` A = {..<card A}", "let ?f = \"bij_mono_map_set_to_nat A\""], ["proof (state)\ngoal (3 subgoals):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n 2. mono_on (bij_mono_map_set_to_nat A) A\n 3. bij_mono_map_set_to_nat A ` A = {..<card A}", "have \"bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n     {..<card A}", "using assms sorted_list_of_set_bij_betw  bij_betw_the_inv_into"], ["proof (prove)\nusing this:\n  finite A\n  finite ?A \\<Longrightarrow>\n  bij_betw ((!) (sorted_list_of_set ?A)) {..<card ?A} ?A\n  bij_betw ?f ?A ?B \\<Longrightarrow> bij_betw (the_inv_into ?A ?f) ?B ?A\n\ngoal (1 subgoal):\n 1. bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n     {..<card A}", "by blast"], ["proof (state)\nthis:\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A}\n\ngoal (3 subgoals):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n 2. mono_on (bij_mono_map_set_to_nat A) A\n 3. bij_mono_map_set_to_nat A ` A = {..<card A}", "moreover"], ["proof (state)\nthis:\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A}\n\ngoal (3 subgoals):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n 2. mono_on (bij_mono_map_set_to_nat A) A\n 3. bij_mono_map_set_to_nat A ` A = {..<card A}", "have \"bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A {..<card A}\n                     = bij_betw ?f A {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n     {..<card A} =\n    bij_betw (bij_mono_map_set_to_nat A) A {..<card A}", "unfolding bij_mono_map_set_to_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n     {..<card A} =\n    bij_betw\n     (\\<lambda>x.\n         if x \\<in> A\n         then the_inv_into {..<card A} ((!) (sorted_list_of_set A)) x\n         else card A)\n     A {..<card A}", "by (rule bij_betw_cong) simp"], ["proof (state)\nthis:\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A} =\n  bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n\ngoal (3 subgoals):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n 2. mono_on (bij_mono_map_set_to_nat A) A\n 3. bij_mono_map_set_to_nat A ` A = {..<card A}", "ultimately"], ["proof (chain)\npicking this:\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A}\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A} =\n  bij_betw (bij_mono_map_set_to_nat A) A {..<card A}", "show *: \"bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\""], ["proof (prove)\nusing this:\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A}\n  bij_betw (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n   {..<card A} =\n  bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n\ngoal (1 subgoal):\n 1. bij_betw (bij_mono_map_set_to_nat A) A {..<card A}", "by blast"], ["proof (state)\nthis:\n  bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n\ngoal (2 subgoals):\n 1. mono_on (bij_mono_map_set_to_nat A) A\n 2. bij_mono_map_set_to_nat A ` A = {..<card A}", "have \"mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A", "using assms sorted_list_of_set_bij_betw\n      sorted_list_of_set_mono_on"], ["proof (prove)\nusing this:\n  finite A\n  finite ?A \\<Longrightarrow>\n  bij_betw ((!) (sorted_list_of_set ?A)) {..<card ?A} ?A\n  finite ?A \\<Longrightarrow>\n  mono_on ((!) (sorted_list_of_set ?A)) {..<card ?A}\n\ngoal (1 subgoal):\n 1. mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A", "by (intro bij_betw_mono_on_the_inv_into) auto"], ["proof (state)\nthis:\n  mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n\ngoal (2 subgoals):\n 1. mono_on (bij_mono_map_set_to_nat A) A\n 2. bij_mono_map_set_to_nat A ` A = {..<card A}", "then"], ["proof (chain)\npicking this:\n  mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A", "show \"mono_on (bij_mono_map_set_to_nat A) A\""], ["proof (prove)\nusing this:\n  mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n\ngoal (1 subgoal):\n 1. mono_on (bij_mono_map_set_to_nat A) A", "unfolding bij_mono_map_set_to_nat_def"], ["proof (prove)\nusing this:\n  mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n\ngoal (1 subgoal):\n 1. mono_on\n     (\\<lambda>x.\n         if x \\<in> A\n         then the_inv_into {..<card A} ((!) (sorted_list_of_set A)) x\n         else card A)\n     A", "using mono_onD"], ["proof (prove)\nusing this:\n  mono_on (the_inv_into {..<card A} ((!) (sorted_list_of_set A))) A\n  \\<lbrakk>mono_on ?f ?A; ?r \\<in> ?A; ?s \\<in> ?A; ?r \\<le> ?s\\<rbrakk>\n  \\<Longrightarrow> ?f ?r \\<le> ?f ?s\n\ngoal (1 subgoal):\n 1. mono_on\n     (\\<lambda>x.\n         if x \\<in> A\n         then the_inv_into {..<card A} ((!) (sorted_list_of_set A)) x\n         else card A)\n     A", "by (intro mono_onI) (auto)"], ["proof (state)\nthis:\n  mono_on (bij_mono_map_set_to_nat A) A\n\ngoal (1 subgoal):\n 1. bij_mono_map_set_to_nat A ` A = {..<card A}", "show \"?f ` A = {..<card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_mono_map_set_to_nat A ` A = {..<card A}", "using assms bij_betw_imp_surj_on *"], ["proof (prove)\nusing this:\n  finite A\n  bij_betw ?f ?A ?B \\<Longrightarrow> ?f ` ?A = ?B\n  bij_betw (bij_mono_map_set_to_nat A) A {..<card A}\n\ngoal (1 subgoal):\n 1. bij_mono_map_set_to_nat A ` A = {..<card A}", "by blast"], ["proof (state)\nthis:\n  bij_mono_map_set_to_nat A ` A = {..<card A}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}