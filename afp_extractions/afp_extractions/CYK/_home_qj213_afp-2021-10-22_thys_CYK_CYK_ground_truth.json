{"file_name": "/home/qj213/afp-2021-10-22/thys/CYK/CYK.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CYK", "problem_names": ["lemma prod_into_DSTEP1 :\n\"(S, Branch A B) \\<in> set G \\<Longrightarrow>\n L \\<cdot> [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inl A, Inl B] \\<cdot> R\"", "lemma prod_into_DSTEP2 :\n\"(S, Leaf a) \\<in> set G \\<Longrightarrow>\n L \\<cdot> [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inr a] \\<cdot> R\"", "lemma DSTEP_D :\n\"s -G\\<rightarrow> t \\<Longrightarrow> \n \\<exists>L N R rhs. s = L \\<cdot> [Inl N] \\<cdot> R \\<and> (N, rhs) \\<in> set G \\<and> \n (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\"", "lemma DSTEP_append :\nassumes a: \"s -G\\<rightarrow> t\"\nshows \"L  \\<cdot>  s  \\<cdot>  R -G\\<rightarrow> L  \\<cdot>  t  \\<cdot>  R\"", "lemma DSTEP_star_mono :\n\"s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow> length s \\<le> length t\"", "lemma DSTEP_comp :\nassumes a: \"l \\<cdot> r -G\\<rightarrow> t\" \nshows \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>= l' \\<and> r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\"", "theorem DSTEP_star_comp1 :\nassumes A: \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* t\" \nshows \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\"", "theorem DSTEP_star_comp2 :\nassumes A: \"l -G\\<rightarrow>\\<^sup>* l'\" \n    and B: \"r -G\\<rightarrow>\\<^sup>* r'\"\nshows \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\"", "lemma DSTEP_trancl_term :\nassumes A: \"[Inl S] -G\\<rightarrow>\\<^sup>+ t\"\n    and B: \"Inr x \\<in> set t\" \n shows \"\\<exists>N. (N, Leaf x) \\<in> set G\"", "lemma Lang_no_Nil :\n\"w \\<in> Lang G S \\<Longrightarrow> w \\<noteq> []\"", "lemma Lang_rtrancl_eq :\n\"(w \\<in> Lang G S) = [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w\"          (is \"?L = (?p \\<in> ?R\\<^sup>*)\")", "lemma Lang_term :\n\"w \\<in> Lang G S \\<Longrightarrow> \n \\<forall>x \\<in> set w. \\<exists>N. (N, Leaf x) \\<in> set G\"", "lemma Lang_eq1 :\n\"([x] \\<in> Lang G S) = ((S, Leaf x) \\<in> set G)\"", "theorem Lang_eq2 :\n\"(w \\<in> Lang G S \\<and> 1 < length w) = \n (\\<exists>A B. (S, Branch A B) \\<in> set G \\<and> (\\<exists>l r. w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B))\"  \n(is \"?L = ?R\")", "lemma subword_length :\n\"i + j \\<le> length w \\<Longrightarrow> length(subword w i j) = j\"", "lemma subword_nth1 :\n\"i + j \\<le> length w \\<Longrightarrow> k < j \\<Longrightarrow> \n(subword w i j)!k = w!(i + k)\"", "lemma subword_nth2 :\nassumes A: \"i + 1 \\<le> length w\" \nshows \"subword w i 1 = [w!i]\"", "lemma subword_self :\n\"subword w 0 (length w) = w\"", "lemma take_split[rule_format] :\n\"\\<forall>n m. n \\<le> length xs \\<longrightarrow> n \\<le> m \\<longrightarrow>\n take n xs \\<cdot> take (m - n) (drop n xs) = take m xs\"", "lemma subword_split :\n\"i + j \\<le> length w \\<Longrightarrow> 0 < k \\<Longrightarrow> k < j \\<Longrightarrow>\n subword w i j = subword w i k \\<cdot> subword w (i + k) (j - k)\"", "lemma subword_split2 :\nassumes A: \"subword w i j = l \\<cdot> r\"\n    and B: \"i + j \\<le> length w\"\n    and C: \"0 < length l\"\n    and D: \"0 < length r\"\nshows \"l = subword w i (length l) \\<and> r = subword w (i + length l) (j - length l)\"", "lemma CYK_Lang :\n\"(S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)\"", "lemma CYK_eq1 :\n\"i + 1 \\<le> length w \\<Longrightarrow>\n CYK G w i 1 = {S. (S, Leaf (w!i)) \\<in> set G}\"", "theorem CYK_eq2 :\nassumes A: \"i + j \\<le> length w\"\n    and B: \"1 < j\"\nshows \"CYK G w i j = {X | X A B k. (X, Branch A B) \\<in> set G \\<and> A \\<in> CYK G w i k \\<and> B \\<in> CYK G w (i + k) (j - k) \\<and> 1 \\<le> k \\<and> k < j}\"", "lemma mem[simp] :\n\"mem x xs = (x \\<in> set xs)\"", "lemma match_prods :\n\"(X \\<in> set(match_prods G ls rs)) = \n (\\<exists>A \\<in> set ls. \\<exists>B \\<in> set rs. (X, Branch A B) \\<in> set G)\"", "lemma inner :\n\"(X \\<in> set(inner G T i k j)) =\n (\\<exists>l. k \\<le> l \\<and> l < j \\<and> X \\<in> set(match_prods G (T(i, l)) (T(i + l, j - l))))\" \n(is \"?L G T i k j = ?R G T i k j\")", "lemma main :\n assumes \"1 < j\"\n     and \"i + j \\<le> length w\"\n     and \"\\<And>i' j'. j' < j \\<Longrightarrow> 1 \\<le> j' \\<Longrightarrow> i' + j' \\<le> length w \\<Longrightarrow> set(T(i', j')) = CYK G w i' j'\"\n     and \"\\<And>i'. i' < i \\<Longrightarrow> i' + j \\<le> length w \\<Longrightarrow> set(T(i', j)) = CYK G w i' j\"\n     and \"1 \\<le> j'\"\n     and \"i' + j' \\<le> length w\"\n shows \"set((main G T (length w) i j)(i', j')) = CYK G w i' j'\"", "lemma init_match :\n\"(X \\<in> set(init_match G a)) = \n ((X, Leaf a) \\<in> set G)\"", "lemma init' :\nassumes \"i + 1 \\<le> length w\"\nshows \"set(init' G w 0 (i, 1)) = CYK G w i 1\"", "lemma init1:\n  \\<open>init' G w k = T\\<close> if \\<open>init G w k = Some T\\<close>", "lemma init2 :\n\"(init G w k = None) =\n (w = [] \\<or> (\\<exists>a \\<in> set w. init_match G a = []))\"", "theorem cyk :\n\"cyk G S w = (w \\<in> Lang G S)\""], "translations": [["", "lemma prod_into_DSTEP1 :\n\"(S, Branch A B) \\<in> set G \\<Longrightarrow>\n L \\<cdot> [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inl A, Inl B] \\<cdot> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S, Branch A B) \\<in> set G \\<Longrightarrow>\n    L \\<cdot>\n    [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inl A, Inl B] \\<cdot> R", "by(simp add: DSTEP_def, rule_tac x=\"L\" in exI, force)"], ["", "lemma prod_into_DSTEP2 :\n\"(S, Leaf a) \\<in> set G \\<Longrightarrow>\n L \\<cdot> [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inr a] \\<cdot> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S, Leaf a) \\<in> set G \\<Longrightarrow>\n    L \\<cdot> [Inl S] \\<cdot> R -G\\<rightarrow> L \\<cdot> [Inr a] \\<cdot> R", "by(simp add: DSTEP_def, rule_tac x=\"L\" in exI, force)"], ["", "lemma DSTEP_D :\n\"s -G\\<rightarrow> t \\<Longrightarrow> \n \\<exists>L N R rhs. s = L \\<cdot> [Inl N] \\<cdot> R \\<and> (N, rhs) \\<in> set G \\<and> \n (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s -G\\<rightarrow> t \\<Longrightarrow>\n    \\<exists>L N R rhs.\n       s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n       (N, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow>\n           t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n       (\\<forall>x.\n           rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "by(unfold DSTEP_def, clarsimp, simp split: RHS.split_asm, blast+)"], ["", "lemma DSTEP_append :\nassumes a: \"s -G\\<rightarrow> t\"\nshows \"L  \\<cdot>  s  \\<cdot>  R -G\\<rightarrow> L  \\<cdot>  t  \\<cdot>  R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R", "from a"], ["proof (chain)\npicking this:\n  s -G\\<rightarrow> t", "have \"\\<exists>l N r rhs. s = l \\<cdot> [Inl N] \\<cdot> r \\<and> (N, rhs) \\<in> set G \\<and> \n                         (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n                         (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)\" (is \"\\<exists>l N r rhs. ?P l N r rhs\")"], ["proof (prove)\nusing this:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>l N r rhs.\n       s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n       (N, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow>\n           t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n       (\\<forall>x.\n           rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)", "by(rule DSTEP_D)"], ["proof (state)\nthis:\n  \\<exists>l N r rhs.\n     s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)\n\ngoal (1 subgoal):\n 1. L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R", "then"], ["proof (chain)\npicking this:\n  \\<exists>l N r rhs.\n     s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)", "obtain l N r rhs where \"?P l N r rhs\""], ["proof (prove)\nusing this:\n  \\<exists>l N r rhs.\n     s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)\n\ngoal (1 subgoal):\n 1. (\\<And>l N r rhs.\n        s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n        (N, rhs) \\<in> set G \\<and>\n        (\\<forall>A B.\n            rhs = Branch A B \\<longrightarrow>\n            t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n        (\\<forall>x.\n            rhs = Leaf x \\<longrightarrow>\n            t = l \\<cdot> [Inr x] \\<cdot> r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)\n\ngoal (1 subgoal):\n 1. L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = l \\<cdot> [Inl N] \\<cdot> r \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = l \\<cdot> [Inl A, Inl B] \\<cdot> r) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = l \\<cdot> [Inr x] \\<cdot> r)\n\ngoal (1 subgoal):\n 1. L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R", "by(simp add: DSTEP_def, rule_tac x=\"L \\<cdot> l\" in exI,\n    rule_tac x=N in exI, rule_tac x=\"r \\<cdot> R\" in exI,\n    simp, rule_tac x=rhs in exI, simp split: RHS.split)"], ["proof (state)\nthis:\n  L \\<cdot> s \\<cdot> R -G\\<rightarrow> L \\<cdot> t \\<cdot> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DSTEP_star_mono :\n\"s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow> length s \\<le> length t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow> length s \\<le> length t", "proof(erule rtrancl_induct, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        length s \\<le> length y\\<rbrakk>\n       \\<Longrightarrow> length s \\<le> length z", "fix t u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        length s \\<le> length y\\<rbrakk>\n       \\<Longrightarrow> length s \\<le> length z", "assume \"s -G\\<rightarrow>\\<^sup>* t\""], ["proof (state)\nthis:\n  s -G\\<rightarrow>\\<^sup>* t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        length s \\<le> length y\\<rbrakk>\n       \\<Longrightarrow> length s \\<le> length z", "assume a: \"t -G\\<rightarrow> u\""], ["proof (state)\nthis:\n  t -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        length s \\<le> length y\\<rbrakk>\n       \\<Longrightarrow> length s \\<le> length z", "assume b: \"length s \\<le> length t\""], ["proof (state)\nthis:\n  length s \\<le> length t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        length s \\<le> length y\\<rbrakk>\n       \\<Longrightarrow> length s \\<le> length z", "show \"length s \\<le> length u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length s \\<le> length u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length s \\<le> length u", "from a"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow> u", "have \"\\<exists>L N R rhs. t = L \\<cdot> [Inl N] \\<cdot> R \\<and> (N, rhs) \\<in> set G \\<and> \n                          (\\<forall>A B. rhs = Branch A B \\<longrightarrow> u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n                          (\\<forall>x. rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)\" (is \"\\<exists>L N R rhs. ?P L N R rhs\")"], ["proof (prove)\nusing this:\n  t -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. \\<exists>L N R rhs.\n       t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n       (N, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow>\n           u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n       (\\<forall>x.\n           rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)", "by(rule DSTEP_D)"], ["proof (state)\nthis:\n  \\<exists>L N R rhs.\n     t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. length s \\<le> length u", "then"], ["proof (chain)\npicking this:\n  \\<exists>L N R rhs.\n     t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)", "obtain L N R rhs where \"?P L N R rhs\""], ["proof (prove)\nusing this:\n  \\<exists>L N R rhs.\n     t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. (\\<And>L N R rhs.\n        t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n        (N, rhs) \\<in> set G \\<and>\n        (\\<forall>A B.\n            rhs = Branch A B \\<longrightarrow>\n            u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n        (\\<forall>x.\n            rhs = Leaf x \\<longrightarrow>\n            u = L \\<cdot> [Inr x] \\<cdot> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. length s \\<le> length u", "with b"], ["proof (chain)\npicking this:\n  length s \\<le> length t\n  t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)", "show ?thesis"], ["proof (prove)\nusing this:\n  length s \\<le> length t\n  t = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      u = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> u = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. length s \\<le> length u", "by(case_tac rhs, clarsimp+)"], ["proof (state)\nthis:\n  length s \\<le> length u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length s \\<le> length u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DSTEP_comp :\nassumes a: \"l \\<cdot> r -G\\<rightarrow> t\" \nshows \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>= l' \\<and> r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "from a"], ["proof (chain)\npicking this:\n  l \\<cdot> r -G\\<rightarrow> t", "have \"\\<exists>L N R rhs. l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and> (N, rhs) \\<in> set G \\<and> \n                         (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n                        (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\" (is \"\\<exists>L N R rhs. ?T L N R rhs\")"], ["proof (prove)\nusing this:\n  l \\<cdot> r -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>L N R rhs.\n       l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n       (N, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow>\n           t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n       (\\<forall>x.\n           rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "by(rule DSTEP_D)"], ["proof (state)\nthis:\n  \\<exists>L N R rhs.\n     l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "then"], ["proof (chain)\npicking this:\n  \\<exists>L N R rhs.\n     l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "obtain L N R rhs where b: \"?T L N R rhs\""], ["proof (prove)\nusing this:\n  \\<exists>L N R rhs.\n     l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. (\\<And>L N R rhs.\n        l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n        (N, rhs) \\<in> set G \\<and>\n        (\\<forall>A B.\n            rhs = Branch A B \\<longrightarrow>\n            t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n        (\\<forall>x.\n            rhs = Leaf x \\<longrightarrow>\n            t = L \\<cdot> [Inr x] \\<cdot> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "hence \"l \\<cdot> r = L \\<cdot> Inl N # R\""], ["proof (prove)\nusing this:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. l \\<cdot> r = L \\<cdot> Inl N # R", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r = L \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "hence \"\\<exists>u. (l = L \\<cdot> u \\<and> u \\<cdot> r = Inl N # R) \\<or> (l \\<cdot> u = L \\<and> r = u \\<cdot> Inl N # R)\""], ["proof (prove)\nusing this:\n  l \\<cdot> r = L \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       l = L \\<cdot> u \\<and> u \\<cdot> r = Inl N # R \\<or>\n       l \\<cdot> u = L \\<and> r = u \\<cdot> Inl N # R", "by(rule append_eq_append_conv2[THEN iffD1])"], ["proof (state)\nthis:\n  \\<exists>u.\n     l = L \\<cdot> u \\<and> u \\<cdot> r = Inl N # R \\<or>\n     l \\<cdot> u = L \\<and> r = u \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "then"], ["proof (chain)\npicking this:\n  \\<exists>u.\n     l = L \\<cdot> u \\<and> u \\<cdot> r = Inl N # R \\<or>\n     l \\<cdot> u = L \\<and> r = u \\<cdot> Inl N # R", "obtain xs where c: \"l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or> l \\<cdot> xs = L \\<and> r = xs  \\<cdot>  Inl N # R\" (is \"?C1 \\<or> ?C2\")"], ["proof (prove)\nusing this:\n  \\<exists>u.\n     l = L \\<cdot> u \\<and> u \\<cdot> r = Inl N # R \\<or>\n     l \\<cdot> u = L \\<and> r = u \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n        l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof(cases rhs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>x2.\n       rhs = Leaf x2 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Leaf x)"], ["proof (state)\nthis:\n  rhs = Leaf x\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>x2.\n       rhs = Leaf x2 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with b"], ["proof (chain)\npicking this:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n  rhs = Leaf x", "have d: \"t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\""], ["proof (prove)\nusing this:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n  rhs = Leaf x\n\ngoal (1 subgoal):\n 1. t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G", "by simp"], ["proof (state)\nthis:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>x2.\n       rhs = Leaf x2 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "from c"], ["proof (chain)\npicking this:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R", "show ?thesis"], ["proof (prove)\nusing this:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "assume e: \"?C1\""], ["proof (state)\nthis:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n\ngoal (2 subgoals):\n 1. l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(clarsimp, rule_tac x=L in exI, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Cons z zs)"], ["proof (state)\nthis:\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = z # zs", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=\"L \\<cdot> Inr x # zs\" in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "assume e: \"?C2\""], ["proof (state)\nthis:\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=L in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Cons z zs)"], ["proof (state)\nthis:\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = z # zs", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inr x] \\<cdot> R \\<and> (N, Leaf x) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=\"l\" in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, \n         rule_tac x=\"z#zs\" in exI, rule_tac x=N in exI, rule_tac x=R in exI, simp, rule_tac x=\"Leaf x\" in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Branch A B)"], ["proof (state)\nthis:\n  rhs = Branch A B\n\ngoal (1 subgoal):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with b"], ["proof (chain)\npicking this:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n  rhs = Branch A B", "have d: \"t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\""], ["proof (prove)\nusing this:\n  l \\<cdot> r = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n  rhs = Branch A B\n\ngoal (1 subgoal):\n 1. t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and>\n    (N, Branch A B) \\<in> set G", "by simp"], ["proof (state)\nthis:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n\ngoal (1 subgoal):\n 1. \\<And>x11 x12.\n       rhs = Branch x11 x12 \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "from c"], ["proof (chain)\npicking this:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R", "show ?thesis"], ["proof (prove)\nusing this:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<or>\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "assume e: \"?C1\""], ["proof (state)\nthis:\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n\ngoal (2 subgoals):\n 1. l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(clarsimp, rule_tac x=L in exI, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Cons z zs)"], ["proof (state)\nthis:\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = z # zs", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l = L \\<cdot> xs \\<and> xs \\<cdot> r = Inl N # R\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=\"L \\<cdot> [Inl A, Inl B] \\<cdot> zs\" in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "assume e: \"?C2\""], ["proof (state)\nthis:\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n\ngoal (1 subgoal):\n 1. l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=L in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, blast)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "case (Cons z zs)"], ["proof (state)\nthis:\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>= l' \\<and>\n          r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "with d and e"], ["proof (chain)\npicking this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = z # zs", "show ?thesis"], ["proof (prove)\nusing this:\n  t = L \\<cdot> [Inl A, Inl B] \\<cdot> R \\<and> (N, Branch A B) \\<in> set G\n  l \\<cdot> xs = L \\<and> r = xs \\<cdot> Inl N # R\n  xs = z # zs\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>= l' \\<and>\n       r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'", "by(rule_tac x=\"l\" in exI, clarsimp, simp add: DSTEP_def, simp split: RHS.split, \n         rule_tac x=\"z#zs\" in exI, rule_tac x=N in exI, rule_tac x=R in exI, simp, rule_tac x=\"Branch A B\" in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>= l' \\<and>\n     r -G\\<rightarrow>\\<^sup>= r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem DSTEP_star_comp1 :\nassumes A: \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* t\" \nshows \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "have \"\\<And>s. s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow> \n       \\<forall>l r. s = l \\<cdot> r \\<longrightarrow> (\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\" (is \"\\<And>s. ?P s t \\<Longrightarrow> ?Q s t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow>\n       \\<forall>l r.\n          s = l \\<cdot> r \\<longrightarrow>\n          (\\<exists>l' r'.\n              l -G\\<rightarrow>\\<^sup>* l' \\<and>\n              r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')", "proof(erule rtrancl_induct, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>l r.\n           s = l \\<cdot> r \\<longrightarrow>\n           (\\<exists>l' r'.\n               l -G\\<rightarrow>\\<^sup>* l' \\<and>\n               r -G\\<rightarrow>\\<^sup>* r' \\<and>\n               y = l' \\<cdot> r')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>l r.\n                            s = l \\<cdot> r \\<longrightarrow>\n                            (\\<exists>l' r'.\n                                l -G\\<rightarrow>\\<^sup>* l' \\<and>\n                                r -G\\<rightarrow>\\<^sup>* r' \\<and>\n                                z = l' \\<cdot> r')", "fix s t u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>l r.\n           s = l \\<cdot> r \\<longrightarrow>\n           (\\<exists>l' r'.\n               l -G\\<rightarrow>\\<^sup>* l' \\<and>\n               r -G\\<rightarrow>\\<^sup>* r' \\<and>\n               y = l' \\<cdot> r')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>l r.\n                            s = l \\<cdot> r \\<longrightarrow>\n                            (\\<exists>l' r'.\n                                l -G\\<rightarrow>\\<^sup>* l' \\<and>\n                                r -G\\<rightarrow>\\<^sup>* r' \\<and>\n                                z = l' \\<cdot> r')", "assume \"?P s t\""], ["proof (state)\nthis:\n  s -G\\<rightarrow>\\<^sup>* t\n\ngoal (1 subgoal):\n 1. \\<And>s y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>l r.\n           s = l \\<cdot> r \\<longrightarrow>\n           (\\<exists>l' r'.\n               l -G\\<rightarrow>\\<^sup>* l' \\<and>\n               r -G\\<rightarrow>\\<^sup>* r' \\<and>\n               y = l' \\<cdot> r')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>l r.\n                            s = l \\<cdot> r \\<longrightarrow>\n                            (\\<exists>l' r'.\n                                l -G\\<rightarrow>\\<^sup>* l' \\<and>\n                                r -G\\<rightarrow>\\<^sup>* r' \\<and>\n                                z = l' \\<cdot> r')", "assume a: \"t -G\\<rightarrow> u\""], ["proof (state)\nthis:\n  t -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. \\<And>s y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>l r.\n           s = l \\<cdot> r \\<longrightarrow>\n           (\\<exists>l' r'.\n               l -G\\<rightarrow>\\<^sup>* l' \\<and>\n               r -G\\<rightarrow>\\<^sup>* r' \\<and>\n               y = l' \\<cdot> r')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>l r.\n                            s = l \\<cdot> r \\<longrightarrow>\n                            (\\<exists>l' r'.\n                                l -G\\<rightarrow>\\<^sup>* l' \\<and>\n                                r -G\\<rightarrow>\\<^sup>* r' \\<and>\n                                z = l' \\<cdot> r')", "assume b: \"?Q s t\""], ["proof (state)\nthis:\n  \\<forall>l r.\n     s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\n\ngoal (1 subgoal):\n 1. \\<And>s y z.\n       \\<lbrakk>s -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>l r.\n           s = l \\<cdot> r \\<longrightarrow>\n           (\\<exists>l' r'.\n               l -G\\<rightarrow>\\<^sup>* l' \\<and>\n               r -G\\<rightarrow>\\<^sup>* r' \\<and>\n               y = l' \\<cdot> r')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>l r.\n                            s = l \\<cdot> r \\<longrightarrow>\n                            (\\<exists>l' r'.\n                                l -G\\<rightarrow>\\<^sup>* l' \\<and>\n                                r -G\\<rightarrow>\\<^sup>* r' \\<and>\n                                z = l' \\<cdot> r')", "show \"?Q s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l r.\n       s = l \\<cdot> r \\<longrightarrow>\n       (\\<exists>l' r'.\n           l -G\\<rightarrow>\\<^sup>* l' \\<and>\n           r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r')", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "fix l r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "assume \"s = l \\<cdot> r\""], ["proof (state)\nthis:\n  s = l \\<cdot> r\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "with b"], ["proof (chain)\npicking this:\n  \\<forall>l r.\n     s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\n  s = l \\<cdot> r", "have \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\""], ["proof (prove)\nusing this:\n  \\<forall>l r.\n     s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\n  s = l \\<cdot> r\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "by simp"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>* l' \\<and>\n     r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "then"], ["proof (chain)\npicking this:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>* l' \\<and>\n     r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "obtain l' r' where c: \"l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\""], ["proof (prove)\nusing this:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>* l' \\<and>\n     r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. (\\<And>l' r'.\n        l -G\\<rightarrow>\\<^sup>* l' \\<and>\n        r -G\\<rightarrow>\\<^sup>* r' \\<and>\n        t = l' \\<cdot> r' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l -G\\<rightarrow>\\<^sup>* l' \\<and>\n  r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "with a"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow> u\n  l -G\\<rightarrow>\\<^sup>* l' \\<and>\n  r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "have \"l' \\<cdot> r' -G\\<rightarrow> u\""], ["proof (prove)\nusing this:\n  t -G\\<rightarrow> u\n  l -G\\<rightarrow>\\<^sup>* l' \\<and>\n  r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l' \\<cdot> r' -G\\<rightarrow> u", "by simp"], ["proof (state)\nthis:\n  l' \\<cdot> r' -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "hence \"\\<exists>l'' r''. l' -G\\<rightarrow>\\<^sup>=  l'' \\<and> r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\""], ["proof (prove)\nusing this:\n  l' \\<cdot> r' -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. \\<exists>l'' r''.\n       l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n       r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''", "by(rule DSTEP_comp)"], ["proof (state)\nthis:\n  \\<exists>l'' r''.\n     l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n     r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "then"], ["proof (chain)\npicking this:\n  \\<exists>l'' r''.\n     l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n     r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''", "obtain l'' r'' where \"l' -G\\<rightarrow>\\<^sup>=  l'' \\<and> r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\""], ["proof (prove)\nusing this:\n  \\<exists>l'' r''.\n     l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n     r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. (\\<And>l'' r''.\n        l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n        r' -G\\<rightarrow>\\<^sup>= r'' \\<and>\n        u = l'' \\<cdot> r'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n  r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "hence \"l' -G\\<rightarrow>\\<^sup>* l'' \\<and> r' -G\\<rightarrow>\\<^sup>* r'' \\<and> u = l'' \\<cdot> r''\""], ["proof (prove)\nusing this:\n  l' -G\\<rightarrow>\\<^sup>= l'' \\<and>\n  r' -G\\<rightarrow>\\<^sup>= r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. l' -G\\<rightarrow>\\<^sup>* l'' \\<and>\n    r' -G\\<rightarrow>\\<^sup>* r'' \\<and> u = l'' \\<cdot> r''", "by blast"], ["proof (state)\nthis:\n  l' -G\\<rightarrow>\\<^sup>* l'' \\<and>\n  r' -G\\<rightarrow>\\<^sup>* r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. \\<And>l r.\n       s = l \\<cdot> r \\<Longrightarrow>\n       \\<exists>l' r'.\n          l -G\\<rightarrow>\\<^sup>* l' \\<and>\n          r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "with c"], ["proof (chain)\npicking this:\n  l -G\\<rightarrow>\\<^sup>* l' \\<and>\n  r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n  l' -G\\<rightarrow>\\<^sup>* l'' \\<and>\n  r' -G\\<rightarrow>\\<^sup>* r'' \\<and> u = l'' \\<cdot> r''", "show \"\\<exists>l' r'. l -G\\<rightarrow>\\<^sup>* l' \\<and> r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'\""], ["proof (prove)\nusing this:\n  l -G\\<rightarrow>\\<^sup>* l' \\<and>\n  r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n  l' -G\\<rightarrow>\\<^sup>* l'' \\<and>\n  r' -G\\<rightarrow>\\<^sup>* r'' \\<and> u = l'' \\<cdot> r''\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'", "by(rule_tac x=l'' in exI, rule_tac x=r'' in exI, force)"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>* l' \\<and>\n     r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l r.\n     s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> u = l' \\<cdot> r')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow>\n  \\<forall>l r.\n     ?s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "with A"], ["proof (chain)\npicking this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* t\n  ?s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow>\n  \\<forall>l r.\n     ?s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* t\n  ?s -G\\<rightarrow>\\<^sup>* t \\<Longrightarrow>\n  \\<forall>l r.\n     ?s = l \\<cdot> r \\<longrightarrow>\n     (\\<exists>l' r'.\n         l -G\\<rightarrow>\\<^sup>* l' \\<and>\n         r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r')\n\ngoal (1 subgoal):\n 1. \\<exists>l' r'.\n       l -G\\<rightarrow>\\<^sup>* l' \\<and>\n       r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'", "by force"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     l -G\\<rightarrow>\\<^sup>* l' \\<and>\n     r -G\\<rightarrow>\\<^sup>* r' \\<and> t = l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem DSTEP_star_comp2 :\nassumes A: \"l -G\\<rightarrow>\\<^sup>* l'\" \n    and B: \"r -G\\<rightarrow>\\<^sup>* r'\"\nshows \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "have \"l -G\\<rightarrow>\\<^sup>* l' \\<Longrightarrow> \n       \\<forall>r r'. r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow> l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\" (is \"?P l l' \\<Longrightarrow> ?Q l l'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. l -G\\<rightarrow>\\<^sup>* l' \\<Longrightarrow>\n    \\<forall>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "proof(erule rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> r'\n 2. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "show \"?Q l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> r'", "proof(clarify, erule rtrancl_induct, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r' y z.\n       \\<lbrakk>r -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> y\\<rbrakk>\n       \\<Longrightarrow> l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> z", "fix r s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r' y z.\n       \\<lbrakk>r -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> y\\<rbrakk>\n       \\<Longrightarrow> l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> z", "assume a: \"s -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>r r' y z.\n       \\<lbrakk>r -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> y\\<rbrakk>\n       \\<Longrightarrow> l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> z", "assume b: \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> s\""], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> s\n\ngoal (1 subgoal):\n 1. \\<And>r r' y z.\n       \\<lbrakk>r -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> y\\<rbrakk>\n       \\<Longrightarrow> l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> z", "show \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t", "from a"], ["proof (chain)\npicking this:\n  s -G\\<rightarrow> t", "have \"l \\<cdot> s -G\\<rightarrow> l \\<cdot> t\""], ["proof (prove)\nusing this:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. l \\<cdot> s -G\\<rightarrow> l \\<cdot> t", "by(drule_tac L=l and R=\"[]\" in DSTEP_append, simp)"], ["proof (state)\nthis:\n  l \\<cdot> s -G\\<rightarrow> l \\<cdot> t\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t", "with b"], ["proof (chain)\npicking this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> s\n  l \\<cdot> s -G\\<rightarrow> l \\<cdot> t", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> s\n  l \\<cdot> s -G\\<rightarrow> l \\<cdot> t\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* l \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "assume a: \"s -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "assume b: \"?Q l s\""], ["proof (state)\nthis:\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>l -G\\<rightarrow>\\<^sup>* y; y -G\\<rightarrow> z;\n        \\<forall>r r'.\n           r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n           l \\<cdot> r -G\\<rightarrow>\\<^sup>* y \\<cdot> r'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r r'.\n                            r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n                            l \\<cdot> r -G\\<rightarrow>\\<^sup>* z \\<cdot> r'", "show \"?Q l t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<Longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "fix r r'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<Longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "assume \"r -G\\<rightarrow>\\<^sup>* r'\""], ["proof (state)\nthis:\n  r -G\\<rightarrow>\\<^sup>* r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<Longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "with b"], ["proof (chain)\npicking this:\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n  r -G\\<rightarrow>\\<^sup>* r'", "have c: \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\""], ["proof (prove)\nusing this:\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n  r -G\\<rightarrow>\\<^sup>* r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<Longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "from a"], ["proof (chain)\npicking this:\n  s -G\\<rightarrow> t", "have \"s \\<cdot> r' -G\\<rightarrow> t \\<cdot> r'\""], ["proof (prove)\nusing this:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. s \\<cdot> r' -G\\<rightarrow> t \\<cdot> r'", "by(drule_tac L=\"[]\" and R=r' in DSTEP_append, simp)"], ["proof (state)\nthis:\n  s \\<cdot> r' -G\\<rightarrow> t \\<cdot> r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       r -G\\<rightarrow>\\<^sup>* r' \\<Longrightarrow>\n       l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "with c"], ["proof (chain)\npicking this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n  s \\<cdot> r' -G\\<rightarrow> t \\<cdot> r'", "show \"l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'\""], ["proof (prove)\nusing this:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* s \\<cdot> r'\n  s \\<cdot> r' -G\\<rightarrow> t \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* t \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l -G\\<rightarrow>\\<^sup>* l' \\<Longrightarrow>\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "with A and B"], ["proof (chain)\npicking this:\n  l -G\\<rightarrow>\\<^sup>* l'\n  r -G\\<rightarrow>\\<^sup>* r'\n  l -G\\<rightarrow>\\<^sup>* l' \\<Longrightarrow>\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "show ?thesis"], ["proof (prove)\nusing this:\n  l -G\\<rightarrow>\\<^sup>* l'\n  r -G\\<rightarrow>\\<^sup>* r'\n  l -G\\<rightarrow>\\<^sup>* l' \\<Longrightarrow>\n  \\<forall>r r'.\n     r -G\\<rightarrow>\\<^sup>* r' \\<longrightarrow>\n     l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r -G\\<rightarrow>\\<^sup>* l' \\<cdot> r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DSTEP_trancl_term :\nassumes A: \"[Inl S] -G\\<rightarrow>\\<^sup>+ t\"\n    and B: \"Inr x \\<in> set t\" \n shows \"\\<exists>N. (N, Leaf x) \\<in> set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. (N, Leaf x) \\<in> set G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>N. (N, Leaf x) \\<in> set G", "have \"[Inl S] -G\\<rightarrow>\\<^sup>+ t \\<Longrightarrow> \n       \\<forall>x. Inr x \\<in> set t \\<longrightarrow> (\\<exists>N. (N, Leaf x) \\<in> set G)\" (is \"?P t \\<Longrightarrow> ?Q t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>+ t \\<Longrightarrow>\n    \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "proof(erule trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       [Inl S] -G\\<rightarrow> y \\<Longrightarrow>\n       \\<forall>x.\n          Inr x \\<in> set y \\<longrightarrow>\n          (\\<exists>N. (N, Leaf x) \\<in> set G)\n 2. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       [Inl S] -G\\<rightarrow> y \\<Longrightarrow>\n       \\<forall>x.\n          Inr x \\<in> set y \\<longrightarrow>\n          (\\<exists>N. (N, Leaf x) \\<in> set G)\n 2. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "assume a: \"[Inl S] -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       [Inl S] -G\\<rightarrow> y \\<Longrightarrow>\n       \\<forall>x.\n          Inr x \\<in> set y \\<longrightarrow>\n          (\\<exists>N. (N, Leaf x) \\<in> set G)\n 2. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "show \"?Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "from a"], ["proof (chain)\npicking this:\n  [Inl S] -G\\<rightarrow> t", "have \"\\<exists>rhs. (S, rhs) \\<in> set G \\<and> \n                      (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n                      (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])\" (is \"\\<exists>rhs. ?P rhs\")"], ["proof (prove)\nusing this:\n  [Inl S] -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>rhs.\n       (S, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n       (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])", "by(simp add: DSTEP_def, clarsimp, simp split: RHS.split_asm, case_tac l, force, simp,\n      clarsimp, simp split: RHS.split_asm, case_tac l, force, simp)"], ["proof (state)\nthis:\n  \\<exists>rhs.\n     (S, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n     (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "then"], ["proof (chain)\npicking this:\n  \\<exists>rhs.\n     (S, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n     (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])", "obtain rhs where \"?P rhs\""], ["proof (prove)\nusing this:\n  \\<exists>rhs.\n     (S, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n     (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])\n\ngoal (1 subgoal):\n 1. (\\<And>rhs.\n        (S, rhs) \\<in> set G \\<and>\n        (\\<forall>A B.\n            rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n        (\\<forall>x.\n            rhs = Leaf x \\<longrightarrow> t = [Inr x]) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (S, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n  (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (S, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow> t = [Inl A, Inl B]) \\<and>\n  (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = [Inr x])\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "by(case_tac rhs, clarsimp, force)"], ["proof (state)\nthis:\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "assume a: \"s -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "assume b: \"?Q s\""], ["proof (state)\nthis:\n  \\<forall>x.\n     Inr x \\<in> set s \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>[Inl S] -G\\<rightarrow>\\<^sup>+ y; y -G\\<rightarrow> z;\n        \\<forall>x.\n           Inr x \\<in> set y \\<longrightarrow>\n           (\\<exists>N. (N, Leaf x) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Inr x \\<in> set z \\<longrightarrow>\n                            (\\<exists>N. (N, Leaf x) \\<in> set G)", "show \"?Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "from a"], ["proof (chain)\npicking this:\n  s -G\\<rightarrow> t", "have \"\\<exists>L N R rhs. s = L \\<cdot> [Inl N] \\<cdot> R \\<and> (N, rhs) \\<in> set G \\<and> \n                         (\\<forall>A B. rhs = Branch A B \\<longrightarrow> t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n                         (\\<forall>x. rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\" (is \"\\<exists>L N R rhs. ?P L N R rhs\")"], ["proof (prove)\nusing this:\n  s -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>L N R rhs.\n       s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n       (N, rhs) \\<in> set G \\<and>\n       (\\<forall>A B.\n           rhs = Branch A B \\<longrightarrow>\n           t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n       (\\<forall>x.\n           rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "by(rule DSTEP_D)"], ["proof (state)\nthis:\n  \\<exists>L N R rhs.\n     s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "then"], ["proof (chain)\npicking this:\n  \\<exists>L N R rhs.\n     s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "obtain L N R rhs where \"?P L N R rhs\""], ["proof (prove)\nusing this:\n  \\<exists>L N R rhs.\n     s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n     (N, rhs) \\<in> set G \\<and>\n     (\\<forall>A B.\n         rhs = Branch A B \\<longrightarrow>\n         t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n     (\\<forall>x.\n         rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. (\\<And>L N R rhs.\n        s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n        (N, rhs) \\<in> set G \\<and>\n        (\\<forall>A B.\n            rhs = Branch A B \\<longrightarrow>\n            t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n        (\\<forall>x.\n            rhs = Leaf x \\<longrightarrow>\n            t = L \\<cdot> [Inr x] \\<cdot> R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "with b"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     Inr x \\<in> set s \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n  s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     Inr x \\<in> set s \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n  s = L \\<cdot> [Inl N] \\<cdot> R \\<and>\n  (N, rhs) \\<in> set G \\<and>\n  (\\<forall>A B.\n      rhs = Branch A B \\<longrightarrow>\n      t = L \\<cdot> [Inl A, Inl B] \\<cdot> R) \\<and>\n  (\\<forall>x.\n      rhs = Leaf x \\<longrightarrow> t = L \\<cdot> [Inr x] \\<cdot> R)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Inr x \\<in> set t \\<longrightarrow>\n       (\\<exists>N. (N, Leaf x) \\<in> set G)", "by(case_tac rhs, clarsimp, force)"], ["proof (state)\nthis:\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow>\\<^sup>+ t \\<Longrightarrow>\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal (1 subgoal):\n 1. \\<exists>N. (N, Leaf x) \\<in> set G", "with A and B"], ["proof (chain)\npicking this:\n  [Inl S] -G\\<rightarrow>\\<^sup>+ t\n  Inr x \\<in> set t\n  [Inl S] -G\\<rightarrow>\\<^sup>+ t \\<Longrightarrow>\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)", "show ?thesis"], ["proof (prove)\nusing this:\n  [Inl S] -G\\<rightarrow>\\<^sup>+ t\n  Inr x \\<in> set t\n  [Inl S] -G\\<rightarrow>\\<^sup>+ t \\<Longrightarrow>\n  \\<forall>x.\n     Inr x \\<in> set t \\<longrightarrow>\n     (\\<exists>N. (N, Leaf x) \\<in> set G)\n\ngoal (1 subgoal):\n 1. \\<exists>N. (N, Leaf x) \\<in> set G", "by simp"], ["proof (state)\nthis:\n  \\<exists>N. (N, Leaf x) \\<in> set G\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Properties of generated languages\""], ["", "lemma Lang_no_Nil :\n\"w \\<in> Lang G S \\<Longrightarrow> w \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> Lang G S \\<Longrightarrow> w \\<noteq> []", "by(simp add: Lang_def, drule trancl_into_rtrancl, drule DSTEP_star_mono, force)"], ["", "lemma Lang_rtrancl_eq :\n\"(w \\<in> Lang G S) = [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w\"          (is \"?L = (?p \\<in> ?R\\<^sup>*)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> Lang G S) = [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w", "proof(simp add: Lang_def, rule iffI, erule trancl_into_rtrancl)"], ["proof (state)\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "assume \"?p \\<in> ?R\\<^sup>*\""], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "hence \"?p \\<in> (?R\\<^sup>+)\\<^sup>=\""], ["proof (prove)\nusing this:\n  [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (1 subgoal):\n 1. ([Inl S], map Inr w) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=", "by(subst rtrancl_trancl_reflcl[THEN sym], assumption)"], ["proof (state)\nthis:\n  ([Inl S], map Inr w) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=\n\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "hence \"[Inl S] = map Inr w \\<or> ?p \\<in> ?R\\<^sup>+\""], ["proof (prove)\nusing this:\n  ([Inl S], map Inr w) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=\n\ngoal (1 subgoal):\n 1. [Inl S] = map Inr w \\<or> [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "by force"], ["proof (state)\nthis:\n  [Inl S] = map Inr w \\<or> [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w\n\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>* map Inr w \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "thus \"?p \\<in> ?R\\<^sup>+\""], ["proof (prove)\nusing this:\n  [Inl S] = map Inr w \\<or> [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w\n\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w", "by(case_tac w, simp_all)"], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow>\\<^sup>+ map Inr w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lang_term :\n\"w \\<in> Lang G S \\<Longrightarrow> \n \\<forall>x \\<in> set w. \\<exists>N. (N, Leaf x) \\<in> set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> Lang G S \\<Longrightarrow>\n    \\<forall>x\\<in>set w. \\<exists>N. (N, Leaf x) \\<in> set G", "by(clarsimp simp add: Lang_def, drule DSTEP_trancl_term, \n   simp, erule imageI, assumption)"], ["", "lemma Lang_eq1 :\n\"([x] \\<in> Lang G S) = ((S, Leaf x) \\<in> set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x] \\<in> Lang G S) = ((S, Leaf x) \\<in> set G)", "proof(simp add: Lang_def, rule iffI, subst (asm) trancl_unfold_left, clarsimp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "assume a: \"[Inl S] -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "assume b: \"t -G\\<rightarrow>\\<^sup>* [Inr x]\""], ["proof (state)\nthis:\n  t -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "note DSTEP_star_mono[OF b, simplified]"], ["proof (state)\nthis:\n  length t \\<le> Suc 0\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "hence c: \"length t \\<le> 1\""], ["proof (prove)\nusing this:\n  length t \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. length t \\<le> 1", "by simp"], ["proof (state)\nthis:\n  length t \\<le> 1\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "have \"\\<exists>z. t = [z]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z. t = [z]", "proof(cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. t = [] \\<Longrightarrow> \\<exists>z. t = [z]\n 2. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "assume \"t = []\""], ["proof (state)\nthis:\n  t = []\n\ngoal (2 subgoals):\n 1. t = [] \\<Longrightarrow> \\<exists>z. t = [z]\n 2. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "with b"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow>\\<^sup>* [Inr x]\n  t = []", "have d: \"[] -G\\<rightarrow>\\<^sup>* [Inr x]\""], ["proof (prove)\nusing this:\n  t -G\\<rightarrow>\\<^sup>* [Inr x]\n  t = []\n\ngoal (1 subgoal):\n 1. [] -G\\<rightarrow>\\<^sup>* [Inr x]", "by simp"], ["proof (state)\nthis:\n  [] -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (2 subgoals):\n 1. t = [] \\<Longrightarrow> \\<exists>z. t = [z]\n 2. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "have \"\\<And>s. ([], s) \\<in> (DSTEP G)\\<^sup>* \\<Longrightarrow> s = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. [] -G\\<rightarrow>\\<^sup>* s \\<Longrightarrow> s = []", "by(erule rtrancl_induct, simp_all, drule DSTEP_D, clarsimp)"], ["proof (state)\nthis:\n  [] -G\\<rightarrow>\\<^sup>* ?s \\<Longrightarrow> ?s = []\n\ngoal (2 subgoals):\n 1. t = [] \\<Longrightarrow> \\<exists>z. t = [z]\n 2. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "note this[OF d]"], ["proof (state)\nthis:\n  [Inr x] = []\n\ngoal (2 subgoals):\n 1. t = [] \\<Longrightarrow> \\<exists>z. t = [z]\n 2. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "thus ?thesis"], ["proof (prove)\nusing this:\n  [Inr x] = []\n\ngoal (1 subgoal):\n 1. \\<exists>z. t = [z]", "by simp"], ["proof (state)\nthis:\n  \\<exists>z. t = [z]\n\ngoal (1 subgoal):\n 1. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "fix z zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "assume \"t = z#zs\""], ["proof (state)\nthis:\n  t = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list. t = a # list \\<Longrightarrow> \\<exists>z. t = [z]", "with c"], ["proof (chain)\npicking this:\n  length t \\<le> 1\n  t = z # zs", "show ?thesis"], ["proof (prove)\nusing this:\n  length t \\<le> 1\n  t = z # zs\n\ngoal (1 subgoal):\n 1. \\<exists>z. t = [z]", "by force"], ["proof (state)\nthis:\n  \\<exists>z. t = [z]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z. t = [z]\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "with a"], ["proof (chain)\npicking this:\n  [Inl S] -G\\<rightarrow> t\n  \\<exists>z. t = [z]", "have \"\\<exists>z. (S, Leaf z) \\<in> set G \\<and> t = [Inr z]\""], ["proof (prove)\nusing this:\n  [Inl S] -G\\<rightarrow> t\n  \\<exists>z. t = [z]\n\ngoal (1 subgoal):\n 1. \\<exists>z. (S, Leaf z) \\<in> set G \\<and> t = [Inr z]", "by(clarsimp simp add: DSTEP_def, simp split: RHS.split_asm, case_tac l, simp_all)"], ["proof (state)\nthis:\n  \\<exists>z. (S, Leaf z) \\<in> set G \\<and> t = [Inr z]\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* [Inr x]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G\n 2. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "with b"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow>\\<^sup>* [Inr x]\n  \\<exists>z. (S, Leaf z) \\<in> set G \\<and> t = [Inr z]", "show \"(S, Leaf x) \\<in> set G\""], ["proof (prove)\nusing this:\n  t -G\\<rightarrow>\\<^sup>* [Inr x]\n  \\<exists>z. (S, Leaf z) \\<in> set G \\<and> t = [Inr z]\n\ngoal (1 subgoal):\n 1. (S, Leaf x) \\<in> set G", "proof(clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "assume c: \"(S, Leaf z) \\<in> set G\""], ["proof (state)\nthis:\n  (S, Leaf z) \\<in> set G\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "assume \"[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x]\""], ["proof (state)\nthis:\n  [Inr z] -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "hence \"([Inr z], [Inr x]) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=\""], ["proof (prove)\nusing this:\n  [Inr z] -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (1 subgoal):\n 1. ([Inr z], [Inr x]) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=", "by simp"], ["proof (state)\nthis:\n  ([Inr z], [Inr x]) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "hence \"[Inr z] = [Inr x] \\<or> [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\""], ["proof (prove)\nusing this:\n  ([Inr z], [Inr x]) \\<in> ((DSTEP G)\\<^sup>+)\\<^sup>=\n\ngoal (1 subgoal):\n 1. [Inr z] = [Inr x] \\<or> [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]", "by force"], ["proof (state)\nthis:\n  [Inr z] = [Inr x] \\<or> [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "hence \"x = z\""], ["proof (prove)\nusing this:\n  [Inr z] = [Inr x] \\<or> [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\n\ngoal (1 subgoal):\n 1. x = z", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. [Inr z] = [Inr x] \\<Longrightarrow> x = z\n 2. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "assume \"[Inr z] = [Inr x]\""], ["proof (state)\nthis:\n  [Inr z] = [Inr x]\n\ngoal (2 subgoals):\n 1. [Inr z] = [Inr x] \\<Longrightarrow> x = z\n 2. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "thus ?thesis"], ["proof (prove)\nusing this:\n  [Inr z] = [Inr x]\n\ngoal (1 subgoal):\n 1. x = z", "by simp"], ["proof (state)\nthis:\n  x = z\n\ngoal (1 subgoal):\n 1. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "assume \"[Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\""], ["proof (state)\nthis:\n  [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\n\ngoal (1 subgoal):\n 1. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "hence \"\\<exists>u. [Inr z] -G\\<rightarrow> u \\<and> u -G\\<rightarrow>\\<^sup>* [Inr x]\""], ["proof (prove)\nusing this:\n  [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x]\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       [Inr z] -G\\<rightarrow> u \\<and> u -G\\<rightarrow>\\<^sup>* [Inr x]", "by(subst (asm) trancl_unfold_left, force)"], ["proof (state)\nthis:\n  \\<exists>u.\n     [Inr z] -G\\<rightarrow> u \\<and> u -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (1 subgoal):\n 1. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "then"], ["proof (chain)\npicking this:\n  \\<exists>u.\n     [Inr z] -G\\<rightarrow> u \\<and> u -G\\<rightarrow>\\<^sup>* [Inr x]", "obtain u where \"[Inr z] -G\\<rightarrow> u\""], ["proof (prove)\nusing this:\n  \\<exists>u.\n     [Inr z] -G\\<rightarrow> u \\<and> u -G\\<rightarrow>\\<^sup>* [Inr x]\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        [Inr z] -G\\<rightarrow> u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [Inr z] -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. [Inr z] -G\\<rightarrow>\\<^sup>+ [Inr x] \\<Longrightarrow> x = z", "thus ?thesis"], ["proof (prove)\nusing this:\n  [Inr z] -G\\<rightarrow> u\n\ngoal (1 subgoal):\n 1. x = z", "by(clarsimp simp add: DSTEP_def, case_tac l, simp_all)"], ["proof (state)\nthis:\n  x = z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = z\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>[Inr z] -G\\<rightarrow>\\<^sup>* [Inr x];\n        (S, Leaf z) \\<in> set G; t = [Inr z]\\<rbrakk>\n       \\<Longrightarrow> (S, Leaf x) \\<in> set G", "with c"], ["proof (chain)\npicking this:\n  (S, Leaf z) \\<in> set G\n  x = z", "show ?thesis"], ["proof (prove)\nusing this:\n  (S, Leaf z) \\<in> set G\n  x = z\n\ngoal (1 subgoal):\n 1. (S, Leaf x) \\<in> set G", "by simp"], ["proof (state)\nthis:\n  (S, Leaf x) \\<in> set G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S, Leaf x) \\<in> set G\n\ngoal (1 subgoal):\n 1. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "assume a: \"(S, Leaf x) \\<in> set G\""], ["proof (state)\nthis:\n  (S, Leaf x) \\<in> set G\n\ngoal (1 subgoal):\n 1. (S, Leaf x) \\<in> set G \\<Longrightarrow>\n    [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "show \"[Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]", "by(rule r_into_trancl, simp add: DSTEP_def, rule_tac x=\"[]\" in exI,\n    rule_tac x=\"S\" in exI, rule_tac x=\"[]\" in exI, simp, rule_tac x=\"Leaf x\" in exI,\n    simp add: a)"], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow>\\<^sup>+ [Inr x]\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Lang_eq2 :\n\"(w \\<in> Lang G S \\<and> 1 < length w) = \n (\\<exists>A B. (S, Branch A B) \\<in> set G \\<and> (\\<exists>l r. w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B))\"  \n(is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> Lang G S \\<and> 1 < length w) =\n    (\\<exists>A B.\n        (S, Branch A B) \\<in> set G \\<and>\n        (\\<exists>l r.\n            w = l \\<cdot> r \\<and>\n            l \\<in> Lang G A \\<and> r \\<in> Lang G B))", "proof(rule iffI, clarify, subst (asm) Lang_def, simp, subst (asm) trancl_unfold_left, clarsimp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "have map_Inr_split : \"\\<And>xs. \\<forall>zs w. map Inr w = xs \\<cdot> zs \\<longrightarrow> \n                       (\\<exists>u v. w = u \\<cdot> v \\<and> xs = map Inr u \\<and> zs = map Inr v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>zs w.\n          map Inr w = xs \\<cdot> zs \\<longrightarrow>\n          (\\<exists>u v.\n              w = u \\<cdot> v \\<and> xs = map Inr u \\<and> zs = map Inr v)", "by(induct_tac xs, simp, force)"], ["proof (state)\nthis:\n  \\<forall>zs w.\n     map Inr w = ?xs \\<cdot> zs \\<longrightarrow>\n     (\\<exists>u v.\n         w = u \\<cdot> v \\<and> ?xs = map Inr u \\<and> zs = map Inr v)\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "assume a: \"Suc 0 < length w\""], ["proof (state)\nthis:\n  Suc 0 < length w\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "assume b: \"[Inl S] -G\\<rightarrow> t\""], ["proof (state)\nthis:\n  [Inl S] -G\\<rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "assume c: \"t -G\\<rightarrow>\\<^sup>* map Inr w\""], ["proof (state)\nthis:\n  t -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "from b"], ["proof (chain)\npicking this:\n  [Inl S] -G\\<rightarrow> t", "have  \"\\<exists>A B. (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\""], ["proof (prove)\nusing this:\n  [Inl S] -G\\<rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>A B. (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]", "proof(simp add: DSTEP_def, clarify, case_tac l, simp_all, simp split: RHS.split_asm, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"t = [Inr x]\""], ["proof (state)\nthis:\n  t = [Inr x]\n\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "with c"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow>\\<^sup>* map Inr w\n  t = [Inr x]", "have d: \"[Inr x] -G\\<rightarrow>\\<^sup>* map Inr w\""], ["proof (prove)\nusing this:\n  t -G\\<rightarrow>\\<^sup>* map Inr w\n  t = [Inr x]\n\ngoal (1 subgoal):\n 1. [Inr x] -G\\<rightarrow>\\<^sup>* map Inr w", "by simp"], ["proof (state)\nthis:\n  [Inr x] -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And>x s. [Inr x] -G\\<rightarrow>\\<^sup>* s \\<Longrightarrow> s = [Inr x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       [Inr x] -G\\<rightarrow>\\<^sup>* s \\<Longrightarrow> s = [Inr x]", "by(erule rtrancl_induct, simp_all, drule DSTEP_D, clarsimp, case_tac L, simp_all)"], ["proof (state)\nthis:\n  [Inr ?x1] -G\\<rightarrow>\\<^sup>* ?s1 \\<Longrightarrow> ?s1 = [Inr ?x1]\n\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "note this[OF d]"], ["proof (state)\nthis:\n  map Inr w = [Inr x]\n\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"w = [x]\""], ["proof (prove)\nusing this:\n  map Inr w = [Inr x]\n\ngoal (1 subgoal):\n 1. w = [x]", "by(case_tac w, simp_all)"], ["proof (state)\nthis:\n  w = [x]\n\ngoal (1 subgoal):\n 1. \\<And>l N rhs x2.\n       \\<lbrakk>[Inl S] -G\\<rightarrow> [Inr x2]; (S, Leaf x2) \\<in> set G;\n        t = [Inr x2]; [Inl S] -G\\<rightarrow> [Inr x2]\\<rbrakk>\n       \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  Suc 0 < length w\n  w = [x]", "show \"False\""], ["proof (prove)\nusing this:\n  Suc 0 < length w\n  w = [x]\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A B. (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "then"], ["proof (chain)\npicking this:\n  \\<exists>A B. (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]", "obtain A B where d: \"(S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\""], ["proof (prove)\nusing this:\n  \\<exists>A B. (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        (S, Branch A B) \\<in> set G \\<and>\n        t = [Inl A, Inl B] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "with c"], ["proof (chain)\npicking this:\n  t -G\\<rightarrow>\\<^sup>* map Inr w\n  (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]", "have e: \"[Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w\""], ["proof (prove)\nusing this:\n  t -G\\<rightarrow>\\<^sup>* map Inr w\n  (S, Branch A B) \\<in> set G \\<and> t = [Inl A, Inl B]\n\ngoal (1 subgoal):\n 1. [Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w", "by simp"], ["proof (state)\nthis:\n  [Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "note DSTEP_star_comp1[OF e]"], ["proof (state)\nthis:\n  \\<exists>l' r'.\n     [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n     [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "then"], ["proof (chain)\npicking this:\n  \\<exists>l' r'.\n     [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n     [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'", "obtain l' r' where e: \"[Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and> [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> \n                              map Inr w = l'  \\<cdot>  r'\""], ["proof (prove)\nusing this:\n  \\<exists>l' r'.\n     [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n     [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'\n\ngoal (1 subgoal):\n 1. (\\<And>l' r'.\n        [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n        [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and>\n        map Inr w = l' \\<cdot> r' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n  [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "note map_Inr_split[rule_format, OF e[THEN conjunct2, THEN conjunct2]]"], ["proof (state)\nthis:\n  \\<exists>u v. w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v. w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v", "obtain u v where f: \"w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v\""], ["proof (prove)\nusing this:\n  \\<exists>u v. w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        w = u \\<cdot> v \\<and>\n        l' = map Inr u \\<and> r' = map Inr v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "with e"], ["proof (chain)\npicking this:\n  [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n  [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'\n  w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v", "have g: \"[Inl A] -G\\<rightarrow>\\<^sup>* map Inr u \\<and> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr v\""], ["proof (prove)\nusing this:\n  [Inl A] -G\\<rightarrow>\\<^sup>* l' \\<and>\n  [Inl B] -G\\<rightarrow>\\<^sup>* r' \\<and> map Inr w = l' \\<cdot> r'\n  w = u \\<cdot> v \\<and> l' = map Inr u \\<and> r' = map Inr v\n\ngoal (1 subgoal):\n 1. [Inl A] -G\\<rightarrow>\\<^sup>* map Inr u \\<and>\n    [Inl B] -G\\<rightarrow>\\<^sup>* map Inr v", "by simp"], ["proof (state)\nthis:\n  [Inl A] -G\\<rightarrow>\\<^sup>* map Inr u \\<and>\n  [Inl B] -G\\<rightarrow>\\<^sup>* map Inr v\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Suc 0 < length w; [Inl S] -G\\<rightarrow> y;\n        y -G\\<rightarrow>\\<^sup>* map Inr w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A B.\n                            (S, Branch A B) \\<in> set G \\<and>\n                            (\\<exists>l r.\n                                w = l \\<cdot> r \\<and>\n                                l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n 2. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "show \"?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B)", "by(rule_tac x=A in exI, rule_tac x=B in exI, simp add: d,\n     rule_tac x=u in exI, rule_tac x=v in exI, simp add: f,\n     (subst Lang_rtrancl_eq)+, rule g)"], ["proof (state)\nthis:\n  \\<exists>A B.\n     (S, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "assume \"?R\""], ["proof (state)\nthis:\n  \\<exists>A B.\n     (S, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "then"], ["proof (chain)\npicking this:\n  \\<exists>A B.\n     (S, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B)", "obtain A B l r where a: \"(S, Branch A B) \\<in> set G \\<and> w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\""], ["proof (prove)\nusing this:\n  \\<exists>A B.\n     (S, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n\ngoal (1 subgoal):\n 1. (\\<And>A B l r.\n        (S, Branch A B) \\<in> set G \\<and>\n        w = l \\<cdot> r \\<and>\n        l \\<in> Lang G A \\<and> r \\<in> Lang G B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (S, Branch A B) \\<in> set G \\<and>\n  w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "have \"[Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr l \\<cdot> map Inr r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Inl A] \\<cdot>\n    [Inl B] -G\\<rightarrow>\\<^sup>* map Inr l \\<cdot> map Inr r", "by(rule DSTEP_star_comp2, subst Lang_rtrancl_eq[THEN sym], simp add: a,\n     subst Lang_rtrancl_eq[THEN sym], simp add: a)"], ["proof (state)\nthis:\n  [Inl A] \\<cdot>\n  [Inl B] -G\\<rightarrow>\\<^sup>* map Inr l \\<cdot> map Inr r\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "hence b: \"[Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w\""], ["proof (prove)\nusing this:\n  [Inl A] \\<cdot>\n  [Inl B] -G\\<rightarrow>\\<^sup>* map Inr l \\<cdot> map Inr r\n\ngoal (1 subgoal):\n 1. [Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w", "by(simp add: a)"], ["proof (state)\nthis:\n  [Inl A] \\<cdot> [Inl B] -G\\<rightarrow>\\<^sup>* map Inr w\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "have c: \"w \\<in> Lang G S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> Lang G S", "by(simp add: Lang_def, subst trancl_unfold_left, rule_tac b=\"[Inl A] \\<cdot> [Inl B]\" in relcompI,\n     simp add: DSTEP_def, rule_tac x=\"[]\" in exI, rule_tac x=\"S\" in exI, rule_tac x=\"[]\" in exI,\n     simp, rule_tac x=\"Branch A B\" in exI, simp add:  a[THEN conjunct1], rule b)"], ["proof (state)\nthis:\n  w \\<in> Lang G S\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (S, Branch A B) \\<in> set G \\<and>\n       (\\<exists>l r.\n           w = l \\<cdot> r \\<and>\n           l \\<in> Lang G A \\<and> r \\<in> Lang G B) \\<Longrightarrow>\n    w \\<in> Lang G S \\<and> 1 < length w", "thus \"?L\""], ["proof (prove)\nusing this:\n  w \\<in> Lang G S\n\ngoal (1 subgoal):\n 1. w \\<in> Lang G S \\<and> 1 < length w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length w", "show \"1 < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length w", "proof(simp add: a, rule ccontr, drule leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. length l + length r \\<le> Suc 0 \\<Longrightarrow> False", "assume \"length l + length r \\<le> Suc 0\""], ["proof (state)\nthis:\n  length l + length r \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. length l + length r \\<le> Suc 0 \\<Longrightarrow> False", "hence \"l = [] \\<or> r = []\""], ["proof (prove)\nusing this:\n  length l + length r \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. l = [] \\<or> r = []", "by(case_tac l, simp_all)"], ["proof (state)\nthis:\n  l = [] \\<or> r = []\n\ngoal (1 subgoal):\n 1. length l + length r \\<le> Suc 0 \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  l = [] \\<or> r = []\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> False\n 2. r = [] \\<Longrightarrow> False", "assume \"l = []\""], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> False\n 2. r = [] \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  (S, Branch A B) \\<in> set G \\<and>\n  w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  l = []", "have \"[] \\<in> Lang G A\""], ["proof (prove)\nusing this:\n  (S, Branch A B) \\<in> set G \\<and>\n  w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  l = []\n\ngoal (1 subgoal):\n 1. [] \\<in> Lang G A", "by simp"], ["proof (state)\nthis:\n  [] \\<in> Lang G A\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> False\n 2. r = [] \\<Longrightarrow> False", "note Lang_no_Nil[OF this]"], ["proof (state)\nthis:\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> False\n 2. r = [] \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. r = [] \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r = [] \\<Longrightarrow> False", "assume \"r = []\""], ["proof (state)\nthis:\n  r = []\n\ngoal (1 subgoal):\n 1. r = [] \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  (S, Branch A B) \\<in> set G \\<and>\n  w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  r = []", "have \"[] \\<in> Lang G B\""], ["proof (prove)\nusing this:\n  (S, Branch A B) \\<in> set G \\<and>\n  w = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  r = []\n\ngoal (1 subgoal):\n 1. [] \\<in> Lang G B", "by simp"], ["proof (state)\nthis:\n  [] \\<in> Lang G B\n\ngoal (1 subgoal):\n 1. r = [] \\<Longrightarrow> False", "note Lang_no_Nil[OF this]"], ["proof (state)\nthis:\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. r = [] \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<in> Lang G S \\<and> 1 < length w\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Abstract specification of CYK\""], ["", "text \"A subword of a word $w$, starting at the position $i$ \n      (first element is at the position $0$) and having the length $j$, is defined as follows.\""], ["", "definition \"subword w i j = take j (drop i w)\""], ["", "text \"Thus, to any subword of the given word $w$ CYK assigns all non-terminals\n      from which this subword is derivable by the grammar $G$.\""], ["", "definition \"CYK G w i j = {S. subword w i j \\<in> Lang G S}\""], ["", "subsection \\<open>Properties of @{term \"subword\"}\\<close>"], ["", "lemma subword_length :\n\"i + j \\<le> length w \\<Longrightarrow> length(subword w i j) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + j \\<le> length w \\<Longrightarrow> length (subword w i j) = j", "by(simp add: subword_def)"], ["", "lemma subword_nth1 :\n\"i + j \\<le> length w \\<Longrightarrow> k < j \\<Longrightarrow> \n(subword w i j)!k = w!(i + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i + j \\<le> length w; k < j\\<rbrakk>\n    \\<Longrightarrow> subword w i j ! k = w ! (i + k)", "by(simp add: subword_def)"], ["", "lemma subword_nth2 :\nassumes A: \"i + 1 \\<le> length w\" \nshows \"subword w i 1 = [w!i]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "note subword_length[OF A]"], ["proof (state)\nthis:\n  length (subword w i 1) = 1\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "hence \"\\<exists>x. subword w i 1 = [x]\""], ["proof (prove)\nusing this:\n  length (subword w i 1) = 1\n\ngoal (1 subgoal):\n 1. \\<exists>x. subword w i 1 = [x]", "by(case_tac \"subword w i 1\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>x. subword w i 1 = [x]\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. subword w i 1 = [x]", "obtain x where a:\"subword w i 1 = [x]\""], ["proof (prove)\nusing this:\n  \\<exists>x. subword w i 1 = [x]\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        subword w i 1 = [x] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  subword w i 1 = [x]\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "note subword_nth1[OF A, where k=\"(0 :: nat)\", simplified]"], ["proof (state)\nthis:\n  subword w i (Suc 0) ! 0 = w ! i\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "with a"], ["proof (chain)\npicking this:\n  subword w i 1 = [x]\n  subword w i (Suc 0) ! 0 = w ! i", "have \"x = w!i\""], ["proof (prove)\nusing this:\n  subword w i 1 = [x]\n  subword w i (Suc 0) ! 0 = w ! i\n\ngoal (1 subgoal):\n 1. x = w ! i", "by simp"], ["proof (state)\nthis:\n  x = w ! i\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "with a"], ["proof (chain)\npicking this:\n  subword w i 1 = [x]\n  x = w ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  subword w i 1 = [x]\n  x = w ! i\n\ngoal (1 subgoal):\n 1. subword w i 1 = [w ! i]", "by simp"], ["proof (state)\nthis:\n  subword w i 1 = [w ! i]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subword_self :\n\"subword w 0 (length w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subword w 0 (length w) = w", "by(simp add: subword_def)"], ["", "lemma take_split[rule_format] :\n\"\\<forall>n m. n \\<le> length xs \\<longrightarrow> n \\<le> m \\<longrightarrow>\n take n xs \\<cdot> take (m - n) (drop n xs) = take m xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n m.\n       n \\<le> length xs \\<longrightarrow>\n       n \\<le> m \\<longrightarrow>\n       take n xs \\<cdot> take (m - n) (drop n xs) = take m xs", "by(induct_tac xs, clarsimp+, case_tac n, simp_all, case_tac m, simp_all)"], ["", "lemma subword_split :\n\"i + j \\<le> length w \\<Longrightarrow> 0 < k \\<Longrightarrow> k < j \\<Longrightarrow>\n subword w i j = subword w i k \\<cdot> subword w (i + k) (j - k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i + j \\<le> length w; 0 < k; k < j\\<rbrakk>\n    \\<Longrightarrow> subword w i j =\n                      subword w i k \\<cdot> subword w (i + k) (j - k)", "by(simp add: subword_def, subst take_split[where n=k, THEN sym], simp_all,\n   rule_tac f=\"\\<lambda>x. take (j - k) (drop x w)\" in arg_cong, simp)"], ["", "lemma subword_split2 :\nassumes A: \"subword w i j = l \\<cdot> r\"\n    and B: \"i + j \\<le> length w\"\n    and C: \"0 < length l\"\n    and D: \"0 < length r\"\nshows \"l = subword w i (length l) \\<and> r = subword w (i + length l) (j - length l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "have a: \"length(subword w i j) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (subword w i j) = j", "by(rule subword_length, rule B)"], ["proof (state)\nthis:\n  length (subword w i j) = j\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "note arg_cong[where f=length, OF A]"], ["proof (state)\nthis:\n  length (subword w i j) = length (l \\<cdot> r)\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "with a and D"], ["proof (chain)\npicking this:\n  length (subword w i j) = j\n  0 < length r\n  length (subword w i j) = length (l \\<cdot> r)", "have b: \"length l < j\""], ["proof (prove)\nusing this:\n  length (subword w i j) = j\n  0 < length r\n  length (subword w i j) = length (l \\<cdot> r)\n\ngoal (1 subgoal):\n 1. length l < j", "by force"], ["proof (state)\nthis:\n  length l < j\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "with B"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  length l < j", "have c: \"i + length l \\<le> length w\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  length l < j\n\ngoal (1 subgoal):\n 1. i + length l \\<le> length w", "by force"], ["proof (state)\nthis:\n  i + length l \\<le> length w\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "have \"subword w i j = subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subword w i j =\n    subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)", "by(rule subword_split, rule B, rule C, rule b)"], ["proof (state)\nthis:\n  subword w i j =\n  subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "with A"], ["proof (chain)\npicking this:\n  subword w i j = l \\<cdot> r\n  subword w i j =\n  subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)", "have d: \"l \\<cdot> r = subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)\""], ["proof (prove)\nusing this:\n  subword w i j = l \\<cdot> r\n  subword w i j =\n  subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)\n\ngoal (1 subgoal):\n 1. l \\<cdot> r =\n    subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)", "by simp"], ["proof (state)\nthis:\n  l \\<cdot> r =\n  subword w i (length l) \\<cdot> subword w (i + length l) (j - length l)\n\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. l = subword w i (length l) \\<and>\n    r = subword w (i + length l) (j - length l)", "by(rule append_eq_append_conv[THEN iffD1], subst subword_length, rule c, simp, rule d)"], ["proof (state)\nthis:\n  l = subword w i (length l) \\<and>\n  r = subword w (i + length l) (j - length l)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Properties of @{term \"CYK\"}\\<close>"], ["", "lemma CYK_Lang :\n\"(S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "by(simp add: CYK_def subword_self)"], ["", "lemma CYK_eq1 :\n\"i + 1 \\<le> length w \\<Longrightarrow>\n CYK G w i 1 = {S. (S, Leaf (w!i)) \\<in> set G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + 1 \\<le> length w \\<Longrightarrow>\n    CYK G w i 1 = {S. (S, Leaf (w ! i)) \\<in> set G}", "by(simp add: CYK_def, subst subword_nth2[simplified], assumption,\n   subst Lang_eq1, rule refl)"], ["", "theorem CYK_eq2 :\nassumes A: \"i + j \\<le> length w\"\n    and B: \"1 < j\"\nshows \"CYK G w i j = {X | X A B k. (X, Branch A B) \\<in> set G \\<and> A \\<in> CYK G w i k \\<and> B \\<in> CYK G w (i + k) (j - k) \\<and> 1 \\<le> k \\<and> k < j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CYK G w i j =\n    {uu_.\n     \\<exists>X A B k.\n        uu_ = X \\<and>\n        (X, Branch A B) \\<in> set G \\<and>\n        A \\<in> CYK G w i k \\<and>\n        B \\<in> CYK G w (i + k) (j - k) \\<and> 1 \\<le> k \\<and> k < j}", "proof(rule set_eqI, rule iffI, simp_all add: CYK_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       subword w i j \\<in> Lang G x \\<Longrightarrow>\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j)\n 2. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       subword w i j \\<in> Lang G x \\<Longrightarrow>\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j)\n 2. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "assume a: \"subword w i j \\<in> Lang G X\""], ["proof (state)\nthis:\n  subword w i j \\<in> Lang G X\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       subword w i j \\<in> Lang G x \\<Longrightarrow>\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j)\n 2. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "show \"\\<exists>A B. (X, Branch A B) \\<in> set G \\<and> (\\<exists>k. subword w i k \\<in> Lang G A \\<and> subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "have b: \"1 < length(subword w i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length (subword w i j)", "by(subst subword_length, rule A, rule B)"], ["proof (state)\nthis:\n  1 < length (subword w i j)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "note Lang_eq2[THEN iffD1, OF conjI, OF a b]"], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         subword w i j = l \\<cdot> r \\<and>\n         l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         subword w i j = l \\<cdot> r \\<and>\n         l \\<in> Lang G A \\<and> r \\<in> Lang G B)", "obtain A B l r where c: \"(X, Branch A B) \\<in> set G \\<and> subword w i j = l \\<cdot> r \\<and> l \\<in> Lang G A \\<and> r \\<in> Lang G B\""], ["proof (prove)\nusing this:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>l r.\n         subword w i j = l \\<cdot> r \\<and>\n         l \\<in> Lang G A \\<and> r \\<in> Lang G B)\n\ngoal (1 subgoal):\n 1. (\\<And>A B l r.\n        (X, Branch A B) \\<in> set G \\<and>\n        subword w i j = l \\<cdot> r \\<and>\n        l \\<in> Lang G A \\<and> r \\<in> Lang G B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i j = l \\<cdot> r \\<and>\n  l \\<in> Lang G A \\<and> r \\<in> Lang G B\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "note Lang_no_Nil[OF c[THEN conjunct2, THEN conjunct2, THEN conjunct1]]"], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "hence d: \"0 < length l\""], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length l", "by(case_tac l, simp_all)"], ["proof (state)\nthis:\n  0 < length l\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "note Lang_no_Nil[OF c[THEN conjunct2, THEN conjunct2, THEN conjunct2]]"], ["proof (state)\nthis:\n  r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "hence e: \"0 < length r\""], ["proof (prove)\nusing this:\n  r \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length r", "by(case_tac r, simp_all)"], ["proof (state)\nthis:\n  0 < length r\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "note subword_split2[OF c[THEN conjunct2, THEN conjunct1], OF A, OF d, OF e]"], ["proof (state)\nthis:\n  l = subword w i (length l) \\<and>\n  r = subword w (i + length l) (j - length l)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "with c"], ["proof (chain)\npicking this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i j = l \\<cdot> r \\<and>\n  l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  l = subword w i (length l) \\<and>\n  r = subword w (i + length l) (j - length l)", "show ?thesis"], ["proof (prove)\nusing this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i j = l \\<cdot> r \\<and>\n  l \\<in> Lang G A \\<and> r \\<in> Lang G B\n  l = subword w i (length l) \\<and>\n  r = subword w (i + length l) (j - length l)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           subword w i k \\<in> Lang G A \\<and>\n           subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "proof(rule_tac x=A in exI, rule_tac x=B in exI, simp, \n        rule_tac x=\"length l\" in exI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>subword w (i + length l) (j - length l) \\<in> Lang G B;\n     (X, Branch A B) \\<in> set G \\<and>\n     subword w i j =\n     l \\<cdot> subword w (i + length l) (j - length l) \\<and>\n     l \\<in> Lang G A;\n     l = subword w i (length l) \\<and>\n     r = subword w (i + length l) (j - length l)\\<rbrakk>\n    \\<Longrightarrow> Suc 0 \\<le> length l \\<and> length l < j", "show \"Suc 0 \\<le> length l \\<and> length l < j\" (is \"?A \\<and> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> length l \\<and> length l < j", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc 0 \\<le> length l\n 2. length l < j", "from d"], ["proof (chain)\npicking this:\n  0 < length l", "show \"?A\""], ["proof (prove)\nusing this:\n  0 < length l\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> length l", "by(case_tac l, simp_all)"], ["proof (state)\nthis:\n  Suc 0 \\<le> length l\n\ngoal (1 subgoal):\n 1. length l < j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length l < j", "note arg_cong[where f=length, OF c[THEN conjunct2, THEN conjunct1], THEN sym]"], ["proof (state)\nthis:\n  length (l \\<cdot> r) = length (subword w i j)\n\ngoal (1 subgoal):\n 1. length l < j", "also"], ["proof (state)\nthis:\n  length (l \\<cdot> r) = length (subword w i j)\n\ngoal (1 subgoal):\n 1. length l < j", "have \"length(subword w i j) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (subword w i j) = j", "by(rule subword_length, rule A)"], ["proof (state)\nthis:\n  length (subword w i j) = j\n\ngoal (1 subgoal):\n 1. length l < j", "finally"], ["proof (chain)\npicking this:\n  length (l \\<cdot> r) = j", "have \"length l + length r = j\""], ["proof (prove)\nusing this:\n  length (l \\<cdot> r) = j\n\ngoal (1 subgoal):\n 1. length l + length r = j", "by simp"], ["proof (state)\nthis:\n  length l + length r = j\n\ngoal (1 subgoal):\n 1. length l < j", "with e"], ["proof (chain)\npicking this:\n  0 < length r\n  length l + length r = j", "show ?B"], ["proof (prove)\nusing this:\n  0 < length r\n  length l + length r = j\n\ngoal (1 subgoal):\n 1. length l < j", "by force"], ["proof (state)\nthis:\n  length l < j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc 0 \\<le> length l \\<and> length l < j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         subword w i k \\<in> Lang G A \\<and>\n         subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n         Suc 0 \\<le> k \\<and> k < j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         subword w i k \\<in> Lang G A \\<and>\n         subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n         Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "assume \"\\<exists>A B. (X, Branch A B) \\<in> set G \\<and> (\\<exists>k. subword w i k \\<in> Lang G A \\<and> subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j)\""], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         subword w i k \\<in> Lang G A \\<and>\n         subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n         Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "then"], ["proof (chain)\npicking this:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         subword w i k \\<in> Lang G A \\<and>\n         subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n         Suc 0 \\<le> k \\<and> k < j)", "obtain A B k where a: \"(X, Branch A B) \\<in> set G \\<and> subword w i k \\<in> Lang G A \\<and> subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j\""], ["proof (prove)\nusing this:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         subword w i k \\<in> Lang G A \\<and>\n         subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n         Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. (\\<And>A B k.\n        (X, Branch A B) \\<in> set G \\<and>\n        subword w i k \\<in> Lang G A \\<and>\n        subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n        Suc 0 \\<le> k \\<and> k < j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i k \\<in> Lang G A \\<and>\n  subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>A B.\n          (x, Branch A B) \\<in> set G \\<and>\n          (\\<exists>k.\n              subword w i k \\<in> Lang G A \\<and>\n              subword w (i + k) (j - k) \\<in> Lang G B \\<and>\n              Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n       subword w i j \\<in> Lang G x", "show \"subword w i j \\<in> Lang G X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subword w i j \\<in> Lang G X", "proof(rule Lang_eq2[THEN iffD2, THEN conjunct1], rule_tac x=A in exI, rule_tac x=B in exI, simp add: a,\n       rule_tac x=\"subword w i k\" in exI, rule_tac x=\"subword w (i + k) (j - k)\" in exI, simp add: a,\n       rule subword_split, rule A)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < k\n 2. k < j", "from a"], ["proof (chain)\npicking this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i k \\<in> Lang G A \\<and>\n  subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j", "show \"0 < k\""], ["proof (prove)\nusing this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i k \\<in> Lang G A \\<and>\n  subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j\n\ngoal (1 subgoal):\n 1. 0 < k", "by force"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. k < j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k < j", "from a"], ["proof (chain)\npicking this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i k \\<in> Lang G A \\<and>\n  subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j", "show \"k < j\""], ["proof (prove)\nusing this:\n  (X, Branch A B) \\<in> set G \\<and>\n  subword w i k \\<in> Lang G A \\<and>\n  subword w (i + k) (j - k) \\<in> Lang G B \\<and> Suc 0 \\<le> k \\<and> k < j\n\ngoal (1 subgoal):\n 1. k < j", "by simp"], ["proof (state)\nthis:\n  k < j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subword w i j \\<in> Lang G X\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Implementation\""], ["", "text \"One of the particularly interesting features of CYK implementation \nis that it follows the principles of dynamic programming, constructing a \ntable of solutions for sub-problems in the bottom-up style reusing already \nstored results.\""], ["", "subsection \"Main cycle\""], ["", "text \"This is an auxiliary implementation of the membership test on lists.\""], ["", "fun mem :: \"'a \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere \n\"mem a [] = False\" |\n\"mem a (x#xs) = (x = a \\<or> mem a xs)\""], ["", "lemma mem[simp] :\n\"mem x xs = (x \\<in> set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mem x xs = (x \\<in> set xs)", "by(induct_tac xs, simp, force)"], ["", "text \"The purpose of the following is to collect non-terminals that appear on the lhs of a production\n      such that the first non-terminal on its rhs appears in the first of two given lists and the second\n      non-terminal -- in the second list.\""], ["", "fun match_prods :: \"('n, 't) CNG \\<Rightarrow> 'n list \\<Rightarrow> 'n list \\<Rightarrow> 'n list\"\nwhere \"match_prods [] ls rs = []\" |\n      \"match_prods ((X, Branch A B)#ps) ls rs = \n          (if mem A ls \\<and> mem B rs then X # match_prods ps ls rs\n           else match_prods ps ls rs)\" |\n      \"match_prods ((X, Leaf a)#ps) ls rs = match_prods ps ls rs\""], ["", "lemma match_prods :\n\"(X \\<in> set(match_prods G ls rs)) = \n (\\<exists>A \\<in> set ls. \\<exists>B \\<in> set rs. (X, Branch A B) \\<in> set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> set (match_prods G ls rs)) =\n    (\\<exists>A\\<in>set ls.\n        \\<exists>B\\<in>set rs. (X, Branch A B) \\<in> set G)", "by(induct_tac G, clarsimp+, rename_tac l r ps, case_tac r, force+)"], ["", "text \"The following function is the inner cycle of the algorithm. The parameters $i$ and $j$\n      identify a subword starting at $i$ with the length $j$, whereas $k$ is used to iterate through\n      its splits (which are of course subwords as well) all having the length greater $0$ but less than $j$. \n      The parameter $T$ represents a table containing CYK solutions for those splits.\""], ["", "function inner :: \"('n, 't) CNG \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'n list) \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'n list\"\nwhere \"inner G T i k j = \n(if k < j then match_prods G (T(i, k)) (T(i + k, j - k)) @ inner G T i (k + 1) j\n else [])\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>G T i k j.\n           x = (G, T, i, k, j) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>G T i k j Ga Ta ia ka ja.\n       (G, T, i, k, j) = (Ga, Ta, ia, ka, ja) \\<Longrightarrow>\n       (if k < j\n        then match_prods G (T (i, k)) (T (i + k, j - k)) \\<cdot>\n             inner_sumC (G, T, i, k + 1, j)\n        else []) =\n       (if ka < ja\n        then match_prods Ga (Ta (ia, ka)) (Ta (ia + ka, ja - ka)) \\<cdot>\n             inner_sumC (Ga, Ta, ia, ka + 1, ja)\n        else [])", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All inner_dom", "by(relation \"measure(\\<lambda>(a, b, c, d, e). e - d)\", rule wf_measure, simp)"], ["", "declare inner.simps[simp del]"], ["", "lemma inner :\n\"(X \\<in> set(inner G T i k j)) =\n (\\<exists>l. k \\<le> l \\<and> l < j \\<and> X \\<in> set(match_prods G (T(i, l)) (T(i + l, j - l))))\" \n(is \"?L G T i k j = ?R G T i k j\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "proof(induct_tac G T i k j rule: inner.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G T i k j.\n       (k < j \\<Longrightarrow>\n        (X \\<in> set (inner G T i (k + 1) j)) =\n        (\\<exists>l\\<ge>k + 1.\n            l < j \\<and>\n            X \\<in> set (match_prods G (T (i, l))\n                          (T (i + l, j - l))))) \\<Longrightarrow>\n       (X \\<in> set (inner G T i k j)) =\n       (\\<exists>l\\<ge>k.\n           l < j \\<and>\n           X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "fix G T i k j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G T i k j.\n       (k < j \\<Longrightarrow>\n        (X \\<in> set (inner G T i (k + 1) j)) =\n        (\\<exists>l\\<ge>k + 1.\n            l < j \\<and>\n            X \\<in> set (match_prods G (T (i, l))\n                          (T (i + l, j - l))))) \\<Longrightarrow>\n       (X \\<in> set (inner G T i k j)) =\n       (\\<exists>l\\<ge>k.\n           l < j \\<and>\n           X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "assume a: \"k < j \\<Longrightarrow> ?L G T i (k + 1) j = ?R G T i (k + 1) j\""], ["proof (state)\nthis:\n  k < j \\<Longrightarrow>\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n\ngoal (1 subgoal):\n 1. \\<And>G T i k j.\n       (k < j \\<Longrightarrow>\n        (X \\<in> set (inner G T i (k + 1) j)) =\n        (\\<exists>l\\<ge>k + 1.\n            l < j \\<and>\n            X \\<in> set (match_prods G (T (i, l))\n                          (T (i + l, j - l))))) \\<Longrightarrow>\n       (X \\<in> set (inner G T i k j)) =\n       (\\<exists>l\\<ge>k.\n           l < j \\<and>\n           X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "show \"?L G T i k j = ?R G T i k j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "proof(case_tac \"k < j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n 2. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "assume b: \"k < j\""], ["proof (state)\nthis:\n  k < j\n\ngoal (2 subgoals):\n 1. k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n 2. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "with a"], ["proof (chain)\npicking this:\n  k < j \\<Longrightarrow>\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n  k < j", "have c: \"?L G T i (k + 1) j = ?R G T i (k + 1) j\""], ["proof (prove)\nusing this:\n  k < j \\<Longrightarrow>\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n  k < j\n\ngoal (1 subgoal):\n 1. (X \\<in> set (inner G T i (k + 1) j)) =\n    (\\<exists>l\\<ge>k + 1.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "by simp"], ["proof (state)\nthis:\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n\ngoal (2 subgoals):\n 1. k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n 2. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "proof(subst inner.simps, simp add: b, rule iffI, erule disjE, rule_tac x=k in exI, simp add: b)"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<in> set (inner G T i (Suc k) j) \\<Longrightarrow>\n    \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n 2. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "assume \"X \\<in> set(inner G T i (Suc k) j)\""], ["proof (state)\nthis:\n  X \\<in> set (inner G T i (Suc k) j)\n\ngoal (2 subgoals):\n 1. X \\<in> set (inner G T i (Suc k) j) \\<Longrightarrow>\n    \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n 2. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "with c"], ["proof (chain)\npicking this:\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n  X \\<in> set (inner G T i (Suc k) j)", "have \"?R G T i (k + 1) j\""], ["proof (prove)\nusing this:\n  (X \\<in> set (inner G T i (k + 1) j)) =\n  (\\<exists>l\\<ge>k + 1.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n  X \\<in> set (inner G T i (Suc k) j)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k + 1.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))", "by simp"], ["proof (state)\nthis:\n  \\<exists>l\\<ge>k + 1.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (2 subgoals):\n 1. X \\<in> set (inner G T i (Suc k) j) \\<Longrightarrow>\n    \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n 2. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "thus \"?R G T i k j\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<ge>k + 1.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))", "by(clarsimp, rule_tac x=l in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>l\\<ge>k.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "assume \"?R G T i k j\""], ["proof (state)\nthis:\n  \\<exists>l\\<ge>k.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<ge>k.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))", "obtain l where d: \"k \\<le> l \\<and> l < j \\<and> X \\<in> set(match_prods G (T(i, l)) (T(i + l, j - l)))\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<ge>k.\n     l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k \\<le> l \\<and>\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l))\n                      (T (i + l, j - l))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k \\<le> l \\<and>\n  l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>k.\n       l < j \\<and>\n       X \\<in> set (match_prods G (T (i, l))\n                     (T (i + l, j - l))) \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "show \"X \\<in> set(match_prods G (T(i, k)) (T(i + k, j - k))) \\<or> ?L G T i (Suc k) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n    X \\<in> set (inner G T i (Suc k) j)", "proof(case_tac \"Suc k \\<le> l\", rule disjI2, subst c[simplified], rule_tac x=l in exI, simp add: d, \n         rule disjI1)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc k \\<le> l \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k)))", "assume \"\\<not> Suc k \\<le> l\""], ["proof (state)\nthis:\n  \\<not> Suc k \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> Suc k \\<le> l \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k)))", "with d"], ["proof (chain)\npicking this:\n  k \\<le> l \\<and>\n  l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n  \\<not> Suc k \\<le> l", "have \"l = k\""], ["proof (prove)\nusing this:\n  k \\<le> l \\<and>\n  l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n  \\<not> Suc k \\<le> l\n\ngoal (1 subgoal):\n 1. l = k", "by force"], ["proof (state)\nthis:\n  l = k\n\ngoal (1 subgoal):\n 1. \\<not> Suc k \\<le> l \\<Longrightarrow>\n    X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k)))", "with d"], ["proof (chain)\npicking this:\n  k \\<le> l \\<and>\n  l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n  l = k", "show \"X \\<in> set(match_prods G (T(i, k)) (T(i + k, j - k)))\""], ["proof (prove)\nusing this:\n  k \\<le> l \\<and>\n  l < j \\<and> X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l)))\n  l = k\n\ngoal (1 subgoal):\n 1. X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k)))", "by simp"], ["proof (state)\nthis:\n  X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X \\<in> set (match_prods G (T (i, k)) (T (i + k, j - k))) \\<or>\n  X \\<in> set (inner G T i (Suc k) j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (X \\<in> set (inner G T i k j)) =\n  (\\<exists>l\\<ge>k.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n\ngoal (1 subgoal):\n 1. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "assume \"\\<not> k < j\""], ["proof (state)\nthis:\n  \\<not> k < j\n\ngoal (1 subgoal):\n 1. \\<not> k < j \\<Longrightarrow>\n    (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> k < j\n\ngoal (1 subgoal):\n 1. (X \\<in> set (inner G T i k j)) =\n    (\\<exists>l\\<ge>k.\n        l < j \\<and>\n        X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))", "by(subst inner.simps, simp)"], ["proof (state)\nthis:\n  (X \\<in> set (inner G T i k j)) =\n  (\\<exists>l\\<ge>k.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (X \\<in> set (inner G T i k j)) =\n  (\\<exists>l\\<ge>k.\n      l < j \\<and>\n      X \\<in> set (match_prods G (T (i, l)) (T (i + l, j - l))))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Now the main part of the algorithm just iterates through all subwords up to the given length $len$,\n       calls @{term \"inner\"} on these, and stores the results in the table $T$. The length $j$ is supposed to \n       be greater than $1$ -- the subwords of length $1$ will be handled in the initialisation phase below.\\<close>"], ["", "function main :: \"('n, 't) CNG \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'n list) \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'n list)\"\nwhere \"main G T len i j = (let T' = T((i, j) := inner G T i 1 j) in\n                            if i + j < len then main G T' len (i + 1) j\n                            else if j < len then main G T' len 0 (j + 1)\n                                 else T')\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>G T len i j.\n           x = (G, T, len, i, j) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>G T len i j Ga Ta lena ia ja.\n       (G, T, len, i, j) = (Ga, Ta, lena, ia, ja) \\<Longrightarrow>\n       (let T' = T((i, j) := inner G T i 1 j)\n        in if i + j < len then main_sumC (G, T', len, i + 1, j)\n           else if j < len then main_sumC (G, T', len, 0, j + 1) else T') =\n       (let T' = Ta((ia, ja) := inner Ga Ta ia 1 ja)\n        in if ia + ja < lena then main_sumC (Ga, T', lena, ia + 1, ja)\n           else if ja < lena then main_sumC (Ga, T', lena, 0, ja + 1)\n                else T')", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All main_dom", "by(relation \"inv_image (less_than <*lex*> less_than) (\\<lambda>(a, b, c, d, e). (c - e, c - (d + e)))\", rule wf_inv_image, rule wf_lex_prod, (rule wf_less_than)+, simp_all)"], ["", "declare main.simps[simp del]"], ["", "lemma main :\n assumes \"1 < j\"\n     and \"i + j \\<le> length w\"\n     and \"\\<And>i' j'. j' < j \\<Longrightarrow> 1 \\<le> j' \\<Longrightarrow> i' + j' \\<le> length w \\<Longrightarrow> set(T(i', j')) = CYK G w i' j'\"\n     and \"\\<And>i'. i' < i \\<Longrightarrow> i' + j \\<le> length w \\<Longrightarrow> set(T(i', j)) = CYK G w i' j\"\n     and \"1 \\<le> j'\"\n     and \"i' + j' \\<le> length w\"\n shows \"set((main G T (length w) i j)(i', j')) = CYK G w i' j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "have \"\\<forall>len T' w. main G T len i j = T' \\<longrightarrow> length w = len \\<longrightarrow> 1 < j \\<longrightarrow> i + j \\<le> len \\<longrightarrow>\n      (\\<forall>j' < j. \\<forall>i'. 1 \\<le> j' \\<longrightarrow> i' + j' \\<le> len \\<longrightarrow> set(T(i', j')) = CYK G w i' j') \\<longrightarrow>\n      (\\<forall>i' < i. i' + j \\<le> len \\<longrightarrow> set(T(i', j)) = CYK G w i' j) \\<longrightarrow>\n      (\\<forall>j' \\<ge> 1. \\<forall>i'. i' + j' \\<le> len \\<longrightarrow> set(T'(i', j')) = CYK G w i' j')\" (is \"\\<forall>len. ?P G T len i j\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>len T' w.\n       main G T len i j = T' \\<longrightarrow>\n       length w = len \\<longrightarrow>\n       1 < j \\<longrightarrow>\n       i + j \\<le> len \\<longrightarrow>\n       (\\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> len \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j') \\<longrightarrow>\n       (\\<forall>i'<i.\n           i' + j \\<le> len \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j) \\<longrightarrow>\n       (\\<forall>j'\\<ge>1.\n           \\<forall>i'.\n              i' + j' \\<le> len \\<longrightarrow>\n              set (T' (i', j')) = CYK G w i' j')", "proof(rule allI, induct_tac G T len i j rule: main.induct, (drule meta_spec, drule meta_mp, rule refl)+, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "fix G T i j i' j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "fix w :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume a: \"i + j < length w \\<Longrightarrow> ?P G (T((i, j) := inner G T i 1 j)) (length w) (i + 1) j\""], ["proof (state)\nthis:\n  i + j < length w \\<Longrightarrow>\n  \\<forall>T' w.\n     main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1) j =\n     T' \\<longrightarrow>\n     length w = length w \\<longrightarrow>\n     1 < j \\<longrightarrow>\n     i + 1 + j \\<le> length w \\<longrightarrow>\n     (\\<forall>j'<j.\n         \\<forall>i'.\n            1 \\<le> j' \\<longrightarrow>\n            i' + j' \\<le> length w \\<longrightarrow>\n            set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n            CYK G w i' j') \\<longrightarrow>\n     (\\<forall>i'<i + 1.\n         i' + j \\<le> length w \\<longrightarrow>\n         set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n         CYK G w i' j) \\<longrightarrow>\n     (\\<forall>j'\\<ge>1.\n         \\<forall>i'.\n            i' + j' \\<le> length w \\<longrightarrow>\n            set (T' (i', j')) = CYK G w i' j')\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume b: \"\\<not> i + j < length w \\<Longrightarrow> j < length w \\<Longrightarrow> ?P G (T((i, j) := inner G T i 1 j)) (length w) 0 (j + 1)\""], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n  \\<Longrightarrow> \\<forall>T' w.\n                       main G (T((i, j) := inner G T i 1 j)) (length w) 0\n                        (j + 1) =\n                       T' \\<longrightarrow>\n                       length w = length w \\<longrightarrow>\n                       1 < j + 1 \\<longrightarrow>\n                       0 + (j + 1) \\<le> length w \\<longrightarrow>\n                       (\\<forall>j'<j + 1.\n                           \\<forall>i'.\n                              1 \\<le> j' \\<longrightarrow>\n                              i' + j' \\<le> length w \\<longrightarrow>\n                              set ((T((i, j) := inner G T i 1 j))\n                                    (i', j')) =\n                              CYK G w i' j') \\<longrightarrow>\n                       (\\<forall>i'<0.\n                           i' + (j + 1) \\<le> length w \\<longrightarrow>\n                           set ((T((i, j) := inner G T i 1 j))\n                                 (i', j + 1)) =\n                           CYK G w i' (j + 1)) \\<longrightarrow>\n                       (\\<forall>j'\\<ge>1.\n                           \\<forall>i'.\n                              i' + j' \\<le> length w \\<longrightarrow>\n                              set (T' (i', j')) = CYK G w i' j')\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume c: \"1 < j\""], ["proof (state)\nthis:\n  1 < j\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume d: \"i + j \\<le> length w\""], ["proof (state)\nthis:\n  i + j \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume e: \"(1::nat) \\<le> j'\""], ["proof (state)\nthis:\n  1 \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume f: \"i' + j' \\<le> length w\""], ["proof (state)\nthis:\n  i' + j' \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume g: \"\\<forall>j' < j. \\<forall>i'. 1 \\<le> j' \\<longrightarrow> i' + j' \\<le> length w \\<longrightarrow> set(T(i', j')) = CYK G w i' j'\""], ["proof (state)\nthis:\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "assume h: \"\\<forall>i' < i. i' + j \\<le> length w \\<longrightarrow> set(T(i', j)) = CYK G w i' j\""], ["proof (state)\nthis:\n  \\<forall>i'<i.\n     i' + j \\<le> length w \\<longrightarrow> set (T (i', j)) = CYK G w i' j\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "have inner: \"set (inner G T i (Suc 0) j) = CYK G w i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inner G T i (Suc 0) j) = CYK G w i j", "proof(rule set_eqI, subst inner, subst match_prods, subst CYK_eq2, rule d, rule c, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (x, Branch A B) \\<in> set G)) =\n       (\\<exists>A B.\n           (x, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j))", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (x, Branch A B) \\<in> set G)) =\n       (\\<exists>A B.\n           (x, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j))", "show \"(\\<exists>l\\<ge>Suc 0. l < j \\<and> (\\<exists>A \\<in> set(T(i, l)). \\<exists>B \\<in> set(T(i + l, j - l)). (X, Branch A B) \\<in> set G)) =\n          (\\<exists>A B. (X, Branch A B) \\<in> set G \\<and> (\\<exists>k. A \\<in> CYK G w i k \\<and> B \\<in> CYK G w (i + k) (j - k) \\<and> Suc 0 \\<le> k \\<and> k < j))\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l\\<ge>Suc 0.\n        l < j \\<and>\n        (\\<exists>A\\<in>set (T (i, l)).\n            \\<exists>B\\<in>set (T (i + l, j - l)).\n               (X, Branch A B) \\<in> set G)) =\n    (\\<exists>A B.\n        (X, Branch A B) \\<in> set G \\<and>\n        (\\<exists>k.\n            A \\<in> CYK G w i k \\<and>\n            B \\<in> CYK G w (i + k) (j - k) \\<and>\n            Suc 0 \\<le> k \\<and> k < j))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G) \\<Longrightarrow>\n    \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j)\n 2. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n    \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "assume \"?L\""], ["proof (state)\nthis:\n  \\<exists>l\\<ge>Suc 0.\n     l < j \\<and>\n     (\\<exists>A\\<in>set (T (i, l)).\n         \\<exists>B\\<in>set (T (i + l, j - l)). (X, Branch A B) \\<in> set G)\n\ngoal (2 subgoals):\n 1. \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G) \\<Longrightarrow>\n    \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j)\n 2. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n    \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "thus \"?R\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<ge>Suc 0.\n     l < j \\<and>\n     (\\<exists>A\\<in>set (T (i, l)).\n         \\<exists>B\\<in>set (T (i + l, j - l)). (X, Branch A B) \\<in> set G)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j)", "proof(clarsimp, rule_tac x=A in exI, rule_tac x=B in exI, simp, rule_tac x=l in exI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "fix l A B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "assume i: \"Suc 0 \\<le> l\""], ["proof (state)\nthis:\n  Suc 0 \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "assume j: \"l < j\""], ["proof (state)\nthis:\n  l < j\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "assume k: \"A \\<in> set(T(i, l))\""], ["proof (state)\nthis:\n  A \\<in> set (T (i, l))\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "assume l: \"B \\<in> set(T(i + l, j - l))\""], ["proof (state)\nthis:\n  B \\<in> set (T (i + l, j - l))\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "note g[rule_format, where i'=i and j'=l]"], ["proof (state)\nthis:\n  \\<lbrakk>l < j; 1 \\<le> l; i + l \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, l)) = CYK G w i l\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "with d i j"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  Suc 0 \\<le> l\n  l < j\n  \\<lbrakk>l < j; 1 \\<le> l; i + l \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, l)) = CYK G w i l", "have A: \"set(T(i, l)) = CYK G w i l\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  Suc 0 \\<le> l\n  l < j\n  \\<lbrakk>l < j; 1 \\<le> l; i + l \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, l)) = CYK G w i l\n\ngoal (1 subgoal):\n 1. set (T (i, l)) = CYK G w i l", "by force"], ["proof (state)\nthis:\n  set (T (i, l)) = CYK G w i l\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "note g[rule_format, where i'=\"i + l\" and j'=\"j - l\"]"], ["proof (state)\nthis:\n  \\<lbrakk>j - l < j; 1 \\<le> j - l; i + l + (j - l) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + l, j - l)) = CYK G w (i + l) (j - l)\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "with d i j"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  Suc 0 \\<le> l\n  l < j\n  \\<lbrakk>j - l < j; 1 \\<le> j - l; i + l + (j - l) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + l, j - l)) = CYK G w (i + l) (j - l)", "have \"set(T(i + l, j - l)) = CYK G w (i + l) (j - l)\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  Suc 0 \\<le> l\n  l < j\n  \\<lbrakk>j - l < j; 1 \\<le> j - l; i + l + (j - l) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + l, j - l)) = CYK G w (i + l) (j - l)\n\ngoal (1 subgoal):\n 1. set (T (i + l, j - l)) = CYK G w (i + l) (j - l)", "by force"], ["proof (state)\nthis:\n  set (T (i + l, j - l)) = CYK G w (i + l) (j - l)\n\ngoal (1 subgoal):\n 1. \\<And>l A B.\n       \\<lbrakk>Suc 0 \\<le> l; l < j; A \\<in> set (T (i, l));\n        B \\<in> set (T (i + l, j - l)); (X, Branch A B) \\<in> set G;\n        \\<exists>l\\<ge>Suc 0.\n           l < j \\<and>\n           (\\<exists>A\\<in>set (T (i, l)).\n               \\<exists>B\\<in>set (T (i + l, j - l)).\n                  (X, Branch A B) \\<in> set G)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> CYK G w i l \\<and>\n                         B \\<in> CYK G w (i + l) (j - l)", "with k l A"], ["proof (chain)\npicking this:\n  A \\<in> set (T (i, l))\n  B \\<in> set (T (i + l, j - l))\n  set (T (i, l)) = CYK G w i l\n  set (T (i + l, j - l)) = CYK G w (i + l) (j - l)", "show \"A \\<in> CYK G w i l \\<and> B \\<in> CYK G w (i + l) (j - l)\""], ["proof (prove)\nusing this:\n  A \\<in> set (T (i, l))\n  B \\<in> set (T (i + l, j - l))\n  set (T (i, l)) = CYK G w i l\n  set (T (i + l, j - l)) = CYK G w (i + l) (j - l)\n\ngoal (1 subgoal):\n 1. A \\<in> CYK G w i l \\<and> B \\<in> CYK G w (i + l) (j - l)", "by simp"], ["proof (state)\nthis:\n  A \\<in> CYK G w i l \\<and> B \\<in> CYK G w (i + l) (j - l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         A \\<in> CYK G w i k \\<and>\n         B \\<in> CYK G w (i + k) (j - k) \\<and> Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n    \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n    \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "assume \"?R\""], ["proof (state)\nthis:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         A \\<in> CYK G w i k \\<and>\n         B \\<in> CYK G w (i + k) (j - k) \\<and> Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. \\<exists>A B.\n       (X, Branch A B) \\<in> set G \\<and>\n       (\\<exists>k.\n           A \\<in> CYK G w i k \\<and>\n           B \\<in> CYK G w (i + k) (j - k) \\<and>\n           Suc 0 \\<le> k \\<and> k < j) \\<Longrightarrow>\n    \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "thus \"?L\""], ["proof (prove)\nusing this:\n  \\<exists>A B.\n     (X, Branch A B) \\<in> set G \\<and>\n     (\\<exists>k.\n         A \\<in> CYK G w i k \\<and>\n         B \\<in> CYK G w (i + k) (j - k) \\<and> Suc 0 \\<le> k \\<and> k < j)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>Suc 0.\n       l < j \\<and>\n       (\\<exists>A\\<in>set (T (i, l)).\n           \\<exists>B\\<in>set (T (i + l, j - l)).\n              (X, Branch A B) \\<in> set G)", "proof(clarsimp, rule_tac x=k in exI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "fix A B k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "assume i: \"Suc 0 \\<le> k\""], ["proof (state)\nthis:\n  Suc 0 \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "assume j: \"k < j\""], ["proof (state)\nthis:\n  k < j\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "assume k: \"A \\<in> CYK G w i k\""], ["proof (state)\nthis:\n  A \\<in> CYK G w i k\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "assume l: \"B \\<in> CYK G w (i + k) (j - k)\""], ["proof (state)\nthis:\n  B \\<in> CYK G w (i + k) (j - k)\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "assume m: \"(X, Branch A B) \\<in> set G\""], ["proof (state)\nthis:\n  (X, Branch A B) \\<in> set G\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "note g[rule_format, where i'=i and j'=k]"], ["proof (state)\nthis:\n  \\<lbrakk>k < j; 1 \\<le> k; i + k \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, k)) = CYK G w i k\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "with d i j"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  Suc 0 \\<le> k\n  k < j\n  \\<lbrakk>k < j; 1 \\<le> k; i + k \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, k)) = CYK G w i k", "have A: \"CYK G w i k = set(T(i, k))\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  Suc 0 \\<le> k\n  k < j\n  \\<lbrakk>k < j; 1 \\<le> k; i + k \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i, k)) = CYK G w i k\n\ngoal (1 subgoal):\n 1. CYK G w i k = set (T (i, k))", "by force"], ["proof (state)\nthis:\n  CYK G w i k = set (T (i, k))\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "note g[rule_format, where i'=\"i + k\" and j'=\"j - k\"]"], ["proof (state)\nthis:\n  \\<lbrakk>j - k < j; 1 \\<le> j - k; i + k + (j - k) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + k, j - k)) = CYK G w (i + k) (j - k)\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "with d i j"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  Suc 0 \\<le> k\n  k < j\n  \\<lbrakk>j - k < j; 1 \\<le> j - k; i + k + (j - k) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + k, j - k)) = CYK G w (i + k) (j - k)", "have \"CYK G w (i + k) (j - k) = set(T(i + k, j - k))\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  Suc 0 \\<le> k\n  k < j\n  \\<lbrakk>j - k < j; 1 \\<le> j - k; i + k + (j - k) \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (i + k, j - k)) = CYK G w (i + k) (j - k)\n\ngoal (1 subgoal):\n 1. CYK G w (i + k) (j - k) = set (T (i + k, j - k))", "by force"], ["proof (state)\nthis:\n  CYK G w (i + k) (j - k) = set (T (i + k, j - k))\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "with k l A"], ["proof (chain)\npicking this:\n  A \\<in> CYK G w i k\n  B \\<in> CYK G w (i + k) (j - k)\n  CYK G w i k = set (T (i, k))\n  CYK G w (i + k) (j - k) = set (T (i + k, j - k))", "have \"A \\<in> set(T(i, k)) \\<and> B \\<in> set(T(i + k, j - k))\""], ["proof (prove)\nusing this:\n  A \\<in> CYK G w i k\n  B \\<in> CYK G w (i + k) (j - k)\n  CYK G w i k = set (T (i, k))\n  CYK G w (i + k) (j - k) = set (T (i + k, j - k))\n\ngoal (1 subgoal):\n 1. A \\<in> set (T (i, k)) \\<and> B \\<in> set (T (i + k, j - k))", "by simp"], ["proof (state)\nthis:\n  A \\<in> set (T (i, k)) \\<and> B \\<in> set (T (i + k, j - k))\n\ngoal (1 subgoal):\n 1. \\<And>A B k.\n       \\<lbrakk>(X, Branch A B) \\<in> set G; A \\<in> CYK G w i k;\n        B \\<in> CYK G w (i + k) (j - k); Suc 0 \\<le> k; k < j;\n        \\<exists>A B.\n           (X, Branch A B) \\<in> set G \\<and>\n           (\\<exists>k.\n               A \\<in> CYK G w i k \\<and>\n               B \\<in> CYK G w (i + k) (j - k) \\<and>\n               Suc 0 \\<le> k \\<and> k < j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A\\<in>set (T (i, k)).\n                            \\<exists>B\\<in>set (T (i + k, j - k)).\n                               (X, Branch A B) \\<in> set G", "with m"], ["proof (chain)\npicking this:\n  (X, Branch A B) \\<in> set G\n  A \\<in> set (T (i, k)) \\<and> B \\<in> set (T (i + k, j - k))", "show \"\\<exists>A \\<in> set(T(i, k)). \\<exists>B \\<in> set(T(i + k, j - k)). (X, Branch A B) \\<in> set G\""], ["proof (prove)\nusing this:\n  (X, Branch A B) \\<in> set G\n  A \\<in> set (T (i, k)) \\<and> B \\<in> set (T (i + k, j - k))\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<in>set (T (i, k)).\n       \\<exists>B\\<in>set (T (i + k, j - k)). (X, Branch A B) \\<in> set G", "by force"], ["proof (state)\nthis:\n  \\<exists>A\\<in>set (T (i, k)).\n     \\<exists>B\\<in>set (T (i + k, j - k)). (X, Branch A B) \\<in> set G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l\\<ge>Suc 0.\n     l < j \\<and>\n     (\\<exists>A\\<in>set (T (i, l)).\n         \\<exists>B\\<in>set (T (i + l, j - l)). (X, Branch A B) \\<in> set G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>l\\<ge>Suc 0.\n      l < j \\<and>\n      (\\<exists>A\\<in>set (T (i, l)).\n          \\<exists>B\\<in>set (T (i + l, j - l)).\n             (X, Branch A B) \\<in> set G)) =\n  (\\<exists>A B.\n      (X, Branch A B) \\<in> set G \\<and>\n      (\\<exists>k.\n          A \\<in> CYK G w i k \\<and>\n          B \\<in> CYK G w (i + k) (j - k) \\<and>\n          Suc 0 \\<le> k \\<and> k < j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (inner G T i (Suc 0) j) = CYK G w i j\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "(* inner *)"], ["proof (state)\nthis:\n  set (inner G T i (Suc 0) j) = CYK G w i j\n\ngoal (1 subgoal):\n 1. \\<And>len G T lena i j T' w j' i'.\n       \\<lbrakk>i + j < length w \\<Longrightarrow>\n                \\<forall>T' wa.\n                   main G (T((i, j) := inner G T i 1 j)) (length w) (i + 1)\n                    j =\n                   T' \\<longrightarrow>\n                   length wa = length w \\<longrightarrow>\n                   1 < j \\<longrightarrow>\n                   i + 1 + j \\<le> length w \\<longrightarrow>\n                   (\\<forall>j'<j.\n                       \\<forall>i'.\n                          1 \\<le> j' \\<longrightarrow>\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set ((T((i, j) := inner G T i 1 j)) (i', j')) =\n                          CYK G wa i' j') \\<longrightarrow>\n                   (\\<forall>i'<i + 1.\n                       i' + j \\<le> length w \\<longrightarrow>\n                       set ((T((i, j) := inner G T i 1 j)) (i', j)) =\n                       CYK G wa i' j) \\<longrightarrow>\n                   (\\<forall>j'\\<ge>1.\n                       \\<forall>i'.\n                          i' + j' \\<le> length w \\<longrightarrow>\n                          set (T' (i', j')) = CYK G wa i' j');\n        \\<lbrakk>\\<not> i + j < length w; j < length w\\<rbrakk>\n        \\<Longrightarrow> \\<forall>T' wa.\n                             main G (T((i, j) := inner G T i 1 j))\n                              (length w) 0 (j + 1) =\n                             T' \\<longrightarrow>\n                             length wa = length w \\<longrightarrow>\n                             1 < j + 1 \\<longrightarrow>\n                             0 + (j + 1) \\<le> length w \\<longrightarrow>\n                             (\\<forall>j'<j + 1.\n                                 \\<forall>i'.\n                                    1 \\<le> j' \\<longrightarrow>\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set ((T((i, j) := inner G T i 1 j))\n    (i', j')) =\n                                    CYK G wa i' j') \\<longrightarrow>\n                             (\\<forall>i'<0.\n                                 i' + (j + 1)\n                                 \\<le> length w \\<longrightarrow>\n                                 set ((T((i, j) := inner G T i 1 j))\n (i', j + 1)) =\n                                 CYK G wa i' (j + 1)) \\<longrightarrow>\n                             (\\<forall>j'\\<ge>1.\n                                 \\<forall>i'.\n                                    i' + j' \\<le> length w \\<longrightarrow>\n                                    set (T' (i', j')) = CYK G wa i' j');\n        1 < j; i + j \\<le> length w;\n        \\<forall>j'<j.\n           \\<forall>i'.\n              1 \\<le> j' \\<longrightarrow>\n              i' + j' \\<le> length w \\<longrightarrow>\n              set (T (i', j')) = CYK G w i' j';\n        \\<forall>i'<i.\n           i' + j \\<le> length w \\<longrightarrow>\n           set (T (i', j)) = CYK G w i' j;\n        1 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (main G T (length w) i j (i', j')) =\n                         CYK G w i' j'", "show \"set((main G T (length w) i j)(i', j')) = CYK G w i' j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof(case_tac \"i + j = length w\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i + j = length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'\n 2. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "assume i: \"i + j = length w\""], ["proof (state)\nthis:\n  i + j = length w\n\ngoal (2 subgoals):\n 1. i + j = length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'\n 2. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof(case_tac \"j < length w\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'\n 2. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "assume j: \"j < length w\""], ["proof (state)\nthis:\n  j < length w\n\ngoal (2 subgoals):\n 1. j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'\n 2. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof(subst main.simps, simp add: Let_def i j, \n          rule b[rule_format, where w=w and i'=i' and j'=j', OF _ _ refl, simplified], \n          simp_all add: inner)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<not> i + j < length w\n 2. 0 < j\n 3. Suc j \\<le> length w\n 4. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 5. Suc 0 \\<le> j'\n 6. i' + j' \\<le> length w", "from i"], ["proof (chain)\npicking this:\n  i + j = length w", "show \"\\<not> i + j < length w\""], ["proof (prove)\nusing this:\n  i + j = length w\n\ngoal (1 subgoal):\n 1. \\<not> i + j < length w", "by simp"], ["proof (state)\nthis:\n  \\<not> i + j < length w\n\ngoal (5 subgoals):\n 1. 0 < j\n 2. Suc j \\<le> length w\n 3. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 4. Suc 0 \\<le> j'\n 5. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. 0 < j\n 2. Suc j \\<le> length w\n 3. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 4. Suc 0 \\<le> j'\n 5. i' + j' \\<le> length w", "from c"], ["proof (chain)\npicking this:\n  1 < j", "show \"0 < j\""], ["proof (prove)\nusing this:\n  1 < j\n\ngoal (1 subgoal):\n 1. 0 < j", "by simp"], ["proof (state)\nthis:\n  0 < j\n\ngoal (4 subgoals):\n 1. Suc j \\<le> length w\n 2. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 3. Suc 0 \\<le> j'\n 4. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. Suc j \\<le> length w\n 2. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 3. Suc 0 \\<le> j'\n 4. i' + j' \\<le> length w", "from j"], ["proof (chain)\npicking this:\n  j < length w", "show \"Suc j \\<le> length w\""], ["proof (prove)\nusing this:\n  j < length w\n\ngoal (1 subgoal):\n 1. Suc j \\<le> length w", "by simp"], ["proof (state)\nthis:\n  Suc j \\<le> length w\n\ngoal (3 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> j'\n 3. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> j'\n 3. i' + j' \\<le> length w", "from e"], ["proof (chain)\npicking this:\n  1 \\<le> j'", "show \"Suc 0 \\<le> j'\""], ["proof (prove)\nusing this:\n  1 \\<le> j'\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> j'", "by simp"], ["proof (state)\nthis:\n  Suc 0 \\<le> j'\n\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 2. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'\n 2. i' + j' \\<le> length w", "from f"], ["proof (chain)\npicking this:\n  i' + j' \\<le> length w", "show \"i' + j' \\<le> length w\""], ["proof (prove)\nusing this:\n  i' + j' \\<le> length w\n\ngoal (1 subgoal):\n 1. i' + j' \\<le> length w", "by assumption"], ["proof (state)\nthis:\n  i' + j' \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "fix i'' j''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "assume k: \"j'' < Suc j\""], ["proof (state)\nthis:\n  j'' < Suc j\n\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "assume l: \"Suc 0 \\<le> j''\""], ["proof (state)\nthis:\n  Suc 0 \\<le> j''\n\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "assume m: \"i'' + j'' \\<le> length w\""], ["proof (state)\nthis:\n  i'' + j'' \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < Suc j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> (i' = i \\<longrightarrow>\n                          j' \\<noteq> j) \\<longrightarrow>\n                         set (T (i', j')) = CYK G w i' j'", "show \"(i'' = i \\<longrightarrow> j'' \\<noteq> j) \\<longrightarrow> set(T(i'',j'')) = CYK G w i'' j''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i'' = i \\<longrightarrow> j'' \\<noteq> j) \\<longrightarrow>\n    set (T (i'', j'')) = CYK G w i'' j''", "proof(case_tac \"j'' = j\", simp_all, clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j'' = j; i'' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j\n 2. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "assume n: \"j'' = j\""], ["proof (state)\nthis:\n  j'' = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j'' = j; i'' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j\n 2. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "assume \"i'' \\<noteq> i\""], ["proof (state)\nthis:\n  i'' \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j'' = j; i'' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j\n 2. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "with i m n"], ["proof (chain)\npicking this:\n  i + j = length w\n  i'' + j'' \\<le> length w\n  j'' = j\n  i'' \\<noteq> i", "have \"i'' < i\""], ["proof (prove)\nusing this:\n  i + j = length w\n  i'' + j'' \\<le> length w\n  j'' = j\n  i'' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i'' < i", "by simp"], ["proof (state)\nthis:\n  i'' < i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j'' = j; i'' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j\n 2. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "with n m h"], ["proof (chain)\npicking this:\n  j'' = j\n  i'' + j'' \\<le> length w\n  \\<forall>i'<i.\n     i' + j \\<le> length w \\<longrightarrow> set (T (i', j)) = CYK G w i' j\n  i'' < i", "show \"set(T(i'', j)) = CYK G w i'' j\""], ["proof (prove)\nusing this:\n  j'' = j\n  i'' + j'' \\<le> length w\n  \\<forall>i'<i.\n     i' + j \\<le> length w \\<longrightarrow> set (T (i', j)) = CYK G w i' j\n  i'' < i\n\ngoal (1 subgoal):\n 1. set (T (i'', j)) = CYK G w i'' j", "by simp"], ["proof (state)\nthis:\n  set (T (i'', j)) = CYK G w i'' j\n\ngoal (1 subgoal):\n 1. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "assume \"j'' \\<noteq> j\""], ["proof (state)\nthis:\n  j'' \\<noteq> j\n\ngoal (1 subgoal):\n 1. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "with k"], ["proof (chain)\npicking this:\n  j'' < Suc j\n  j'' \\<noteq> j", "have \"j'' < j\""], ["proof (prove)\nusing this:\n  j'' < Suc j\n  j'' \\<noteq> j\n\ngoal (1 subgoal):\n 1. j'' < j", "by simp"], ["proof (state)\nthis:\n  j'' < j\n\ngoal (1 subgoal):\n 1. j'' \\<noteq> j \\<Longrightarrow> set (T (i'', j'')) = CYK G w i'' j''", "with l m g"], ["proof (chain)\npicking this:\n  Suc 0 \\<le> j''\n  i'' + j'' \\<le> length w\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  j'' < j", "show \"set(T(i'', j'')) = CYK G w i'' j''\""], ["proof (prove)\nusing this:\n  Suc 0 \\<le> j''\n  i'' + j'' \\<le> length w\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  j'' < j\n\ngoal (1 subgoal):\n 1. set (T (i'', j'')) = CYK G w i'' j''", "by simp"], ["proof (state)\nthis:\n  set (T (i'', j'')) = CYK G w i'' j''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i'' = i \\<longrightarrow> j'' \\<noteq> j) \\<longrightarrow>\n  set (T (i'', j'')) = CYK G w i'' j''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal (1 subgoal):\n 1. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "assume \"\\<not> j < length w\""], ["proof (state)\nthis:\n  \\<not> j < length w\n\ngoal (1 subgoal):\n 1. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "with i"], ["proof (chain)\npicking this:\n  i + j = length w\n  \\<not> j < length w", "have j: \"i = 0 \\<and> j = length w\""], ["proof (prove)\nusing this:\n  i + j = length w\n  \\<not> j < length w\n\ngoal (1 subgoal):\n 1. i = 0 \\<and> j = length w", "by simp"], ["proof (state)\nthis:\n  i = 0 \\<and> j = length w\n\ngoal (1 subgoal):\n 1. \\<not> j < length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof(subst main.simps, simp add: Let_def j, intro conjI, clarify)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i' = 0; j' = length w\\<rbrakk>\n    \\<Longrightarrow> set (inner G T 0 (Suc 0) (length w)) =\n                      CYK G w 0 (length w)\n 2. 0 < i' \\<longrightarrow> set (T (i', j')) = CYK G w i' j'\n 3. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "from j and inner"], ["proof (chain)\npicking this:\n  i = 0 \\<and> j = length w\n  set (inner G T i (Suc 0) j) = CYK G w i j", "show \"set (inner G T 0 (Suc 0) (length w)) = CYK G w 0 (length w)\""], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = length w\n  set (inner G T i (Suc 0) j) = CYK G w i j\n\ngoal (1 subgoal):\n 1. set (inner G T 0 (Suc 0) (length w)) = CYK G w 0 (length w)", "by simp"], ["proof (state)\nthis:\n  set (inner G T 0 (Suc 0) (length w)) = CYK G w 0 (length w)\n\ngoal (2 subgoals):\n 1. 0 < i' \\<longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < i' \\<longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "show \"0 < i' \\<longrightarrow> set(T(i', j')) = CYK G w i' j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i' \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < i' \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "assume \"0 < i'\""], ["proof (state)\nthis:\n  0 < i'\n\ngoal (1 subgoal):\n 1. 0 < i' \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "with j and f"], ["proof (chain)\npicking this:\n  i = 0 \\<and> j = length w\n  i' + j' \\<le> length w\n  0 < i'", "have \"j' < j\""], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = length w\n  i' + j' \\<le> length w\n  0 < i'\n\ngoal (1 subgoal):\n 1. j' < j", "by simp"], ["proof (state)\nthis:\n  j' < j\n\ngoal (1 subgoal):\n 1. 0 < i' \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "with e g f"], ["proof (chain)\npicking this:\n  1 \\<le> j'\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  i' + j' \\<le> length w\n  j' < j", "show \"set(T(i', j')) = CYK G w i' j'\""], ["proof (prove)\nusing this:\n  1 \\<le> j'\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  i' + j' \\<le> length w\n  j' < j\n\ngoal (1 subgoal):\n 1. set (T (i', j')) = CYK G w i' j'", "by simp"], ["proof (state)\nthis:\n  set (T (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < i' \\<longrightarrow> set (T (i', j')) = CYK G w i' j'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "show \"j' \\<noteq> length w \\<longrightarrow> set(T(i', j')) = CYK G w i' j'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "assume \"j' \\<noteq> length w \""], ["proof (state)\nthis:\n  j' \\<noteq> length w\n\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "with j and f"], ["proof (chain)\npicking this:\n  i = 0 \\<and> j = length w\n  i' + j' \\<le> length w\n  j' \\<noteq> length w", "have \"j' < j\""], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = length w\n  i' + j' \\<le> length w\n  j' \\<noteq> length w\n\ngoal (1 subgoal):\n 1. j' < j", "by simp"], ["proof (state)\nthis:\n  j' < j\n\ngoal (1 subgoal):\n 1. j' \\<noteq> length w \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'", "with e g f"], ["proof (chain)\npicking this:\n  1 \\<le> j'\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  i' + j' \\<le> length w\n  j' < j", "show \"set(T(i', j')) = CYK G w i' j'\""], ["proof (prove)\nusing this:\n  1 \\<le> j'\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  i' + j' \\<le> length w\n  j' < j\n\ngoal (1 subgoal):\n 1. set (T (i', j')) = CYK G w i' j'", "by simp"], ["proof (state)\nthis:\n  set (T (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j' \\<noteq> length w \\<longrightarrow> set (T (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal (1 subgoal):\n 1. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "assume \"i + j \\<noteq> length w\""], ["proof (state)\nthis:\n  i + j \\<noteq> length w\n\ngoal (1 subgoal):\n 1. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "with d"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  i + j \\<noteq> length w", "have i: \"i + j < length w\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  i + j \\<noteq> length w\n\ngoal (1 subgoal):\n 1. i + j < length w", "by simp"], ["proof (state)\nthis:\n  i + j < length w\n\ngoal (1 subgoal):\n 1. i + j \\<noteq> length w \\<Longrightarrow>\n    set (main G T (length w) i j (i', j')) = CYK G w i' j'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "proof(subst main.simps, simp add: Let_def i,\n         rule a[rule_format, where w=w and i'=i' and j'=j', OF i, OF refl, simplified])"], ["proof (state)\ngoal (6 subgoals):\n 1. Suc 0 < j\n 2. Suc (i + j) \\<le> length w\n 3. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 4. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 5. Suc 0 \\<le> j'\n 6. i' + j' \\<le> length w", "from c"], ["proof (chain)\npicking this:\n  1 < j", "show \"Suc 0 < j\""], ["proof (prove)\nusing this:\n  1 < j\n\ngoal (1 subgoal):\n 1. Suc 0 < j", "by simp"], ["proof (state)\nthis:\n  Suc 0 < j\n\ngoal (5 subgoals):\n 1. Suc (i + j) \\<le> length w\n 2. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 3. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 4. Suc 0 \\<le> j'\n 5. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. Suc (i + j) \\<le> length w\n 2. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 3. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 4. Suc 0 \\<le> j'\n 5. i' + j' \\<le> length w", "from i"], ["proof (chain)\npicking this:\n  i + j < length w", "show \"Suc(i + j) \\<le> length w\""], ["proof (prove)\nusing this:\n  i + j < length w\n\ngoal (1 subgoal):\n 1. Suc (i + j) \\<le> length w", "by simp"], ["proof (state)\nthis:\n  Suc (i + j) \\<le> length w\n\ngoal (4 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 3. Suc 0 \\<le> j'\n 4. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 3. Suc 0 \\<le> j'\n 4. i' + j' \\<le> length w", "from e"], ["proof (chain)\npicking this:\n  1 \\<le> j'", "show \"Suc 0 \\<le> j'\""], ["proof (prove)\nusing this:\n  1 \\<le> j'\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> j'", "by simp"], ["proof (state)\nthis:\n  Suc 0 \\<le> j'\n\ngoal (3 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 3. i' + j' \\<le> length w", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j\n 3. i' + j' \\<le> length w", "from f"], ["proof (chain)\npicking this:\n  i' + j' \\<le> length w", "show \"i' + j' \\<le> length w\""], ["proof (prove)\nusing this:\n  i' + j' \\<le> length w\n\ngoal (1 subgoal):\n 1. i' + j' \\<le> length w", "by assumption"], ["proof (state)\nthis:\n  i' + j' \\<le> length w\n\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "fix i'' j''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "assume \"j'' < j\"\n    and \"Suc 0 \\<le> j''\"\n    and \"i'' + j'' \\<le> length w\""], ["proof (state)\nthis:\n  j'' < j\n  Suc 0 \\<le> j''\n  i'' + j'' \\<le> length w\n\ngoal (2 subgoals):\n 1. \\<And>j' i'.\n       \\<lbrakk>j' < j; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (T (i', j')) = CYK G w i' j'\n 2. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "with g"], ["proof (chain)\npicking this:\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  j'' < j\n  Suc 0 \\<le> j''\n  i'' + j'' \\<le> length w", "show \"set(T(i'', j'')) = CYK G w i'' j''\""], ["proof (prove)\nusing this:\n  \\<forall>j'<j.\n     \\<forall>i'.\n        1 \\<le> j' \\<longrightarrow>\n        i' + j' \\<le> length w \\<longrightarrow>\n        set (T (i', j')) = CYK G w i' j'\n  j'' < j\n  Suc 0 \\<le> j''\n  i'' + j'' \\<le> length w\n\ngoal (1 subgoal):\n 1. set (T (i'', j'')) = CYK G w i'' j''", "by simp"], ["proof (state)\nthis:\n  set (T (i'', j'')) = CYK G w i'' j''\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "fix i''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "assume j: \"i'' < Suc i\""], ["proof (state)\nthis:\n  i'' < Suc i\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       i' < Suc i \\<Longrightarrow>\n       set (if i' = i then inner G T i (Suc 0) j else T (i', j)) =\n       CYK G w i' j", "show \"set(if i'' = i then inner G T i (Suc 0) j else T(i'', j)) = CYK G w i'' j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (if i'' = i then inner G T i (Suc 0) j else T (i'', j)) =\n    CYK G w i'' j", "proof(simp split: if_split, rule conjI, clarify, rule inner, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. i'' \\<noteq> i \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j", "assume \"i'' \\<noteq> i\""], ["proof (state)\nthis:\n  i'' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i'' \\<noteq> i \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j", "with j"], ["proof (chain)\npicking this:\n  i'' < Suc i\n  i'' \\<noteq> i", "have \"i'' < i\""], ["proof (prove)\nusing this:\n  i'' < Suc i\n  i'' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i'' < i", "by simp"], ["proof (state)\nthis:\n  i'' < i\n\ngoal (1 subgoal):\n 1. i'' \\<noteq> i \\<Longrightarrow> set (T (i'', j)) = CYK G w i'' j", "with d h"], ["proof (chain)\npicking this:\n  i + j \\<le> length w\n  \\<forall>i'<i.\n     i' + j \\<le> length w \\<longrightarrow> set (T (i', j)) = CYK G w i' j\n  i'' < i", "show \"set(T(i'', j)) = CYK G w i'' j\""], ["proof (prove)\nusing this:\n  i + j \\<le> length w\n  \\<forall>i'<i.\n     i' + j \\<le> length w \\<longrightarrow> set (T (i', j)) = CYK G w i' j\n  i'' < i\n\ngoal (1 subgoal):\n 1. set (T (i'', j)) = CYK G w i'' j", "by simp"], ["proof (state)\nthis:\n  set (T (i'', j)) = CYK G w i'' j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (if i'' = i then inner G T i (Suc 0) j else T (i'', j)) =\n  CYK G w i'' j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>len T' w.\n     main G T len i j = T' \\<longrightarrow>\n     length w = len \\<longrightarrow>\n     1 < j \\<longrightarrow>\n     i + j \\<le> len \\<longrightarrow>\n     (\\<forall>j'<j.\n         \\<forall>i'.\n            1 \\<le> j' \\<longrightarrow>\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T (i', j')) = CYK G w i' j') \\<longrightarrow>\n     (\\<forall>i'<i.\n         i' + j \\<le> len \\<longrightarrow>\n         set (T (i', j)) = CYK G w i' j) \\<longrightarrow>\n     (\\<forall>j'\\<ge>1.\n         \\<forall>i'.\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T' (i', j')) = CYK G w i' j')\n\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "with assms"], ["proof (chain)\npicking this:\n  1 < j\n  i + j \\<le> length w\n  \\<lbrakk>?j' < j; 1 \\<le> ?j'; ?i' + ?j' \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (?i', ?j')) = CYK G w ?i' ?j'\n  \\<lbrakk>?i' < i; ?i' + j \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (?i', j)) = CYK G w ?i' j\n  1 \\<le> j'\n  i' + j' \\<le> length w\n  \\<forall>len T' w.\n     main G T len i j = T' \\<longrightarrow>\n     length w = len \\<longrightarrow>\n     1 < j \\<longrightarrow>\n     i + j \\<le> len \\<longrightarrow>\n     (\\<forall>j'<j.\n         \\<forall>i'.\n            1 \\<le> j' \\<longrightarrow>\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T (i', j')) = CYK G w i' j') \\<longrightarrow>\n     (\\<forall>i'<i.\n         i' + j \\<le> len \\<longrightarrow>\n         set (T (i', j)) = CYK G w i' j) \\<longrightarrow>\n     (\\<forall>j'\\<ge>1.\n         \\<forall>i'.\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T' (i', j')) = CYK G w i' j')", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < j\n  i + j \\<le> length w\n  \\<lbrakk>?j' < j; 1 \\<le> ?j'; ?i' + ?j' \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (?i', ?j')) = CYK G w ?i' ?j'\n  \\<lbrakk>?i' < i; ?i' + j \\<le> length w\\<rbrakk>\n  \\<Longrightarrow> set (T (?i', j)) = CYK G w ?i' j\n  1 \\<le> j'\n  i' + j' \\<le> length w\n  \\<forall>len T' w.\n     main G T len i j = T' \\<longrightarrow>\n     length w = len \\<longrightarrow>\n     1 < j \\<longrightarrow>\n     i + j \\<le> len \\<longrightarrow>\n     (\\<forall>j'<j.\n         \\<forall>i'.\n            1 \\<le> j' \\<longrightarrow>\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T (i', j')) = CYK G w i' j') \\<longrightarrow>\n     (\\<forall>i'<i.\n         i' + j \\<le> len \\<longrightarrow>\n         set (T (i', j)) = CYK G w i' j) \\<longrightarrow>\n     (\\<forall>j'\\<ge>1.\n         \\<forall>i'.\n            i' + j' \\<le> len \\<longrightarrow>\n            set (T' (i', j')) = CYK G w i' j')\n\ngoal (1 subgoal):\n 1. set (main G T (length w) i j (i', j')) = CYK G w i' j'", "by force"], ["proof (state)\nthis:\n  set (main G T (length w) i j (i', j')) = CYK G w i' j'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Initialisation phase\""], ["", "text\\<open>Similarly to @{term \"match_prods\"} above, here we collect non-terminals from which\n       the given terminal symbol can be derived.\\<close>"], ["", "fun init_match :: \"('n, 't) CNG \\<Rightarrow> 't \\<Rightarrow> 'n list\"\nwhere \"init_match [] t = []\" |\n      \"init_match ((X, Branch A B)#ps) t = init_match ps t\" |\n      \"init_match ((X, Leaf a)#ps) t = (if a = t then X # init_match ps t\n                                        else init_match ps t)\""], ["", "lemma init_match :\n\"(X \\<in> set(init_match G a)) = \n ((X, Leaf a) \\<in> set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> set (init_match G a)) = ((X, Leaf a) \\<in> set G)", "by(induct_tac G a rule: init_match.induct, simp_all)"], ["", "text \"Representing the empty table.\""], ["", "definition \"emptyT = (\\<lambda>(i, j). [])\""], ["", "text \"The following function initialises the empty table for subwords of\n      length $1$, i.e. each symbol occurring in the given word.\""], ["", "fun init' :: \"('n, 't) CNG \\<Rightarrow> 't list \\<Rightarrow> nat \\<Rightarrow> nat \\<times> nat \\<Rightarrow> 'n list\"\nwhere \"init' G [] k = emptyT\" |\n      \"init' G (t#ts) k = (init' G ts (k + 1))((k, 1) := init_match G t)\""], ["", "lemma init' :\nassumes \"i + 1 \\<le> length w\"\nshows \"set(init' G w 0 (i, 1)) = CYK G w i 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "have \"\\<forall>i. Suc i \\<le> length w \\<longrightarrow>\n      (\\<forall>k. set(init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))\" (is \"\\<forall>i. ?P i w \\<longrightarrow> (\\<forall>k. ?Q i k w)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       Suc i \\<le> length w \\<longrightarrow>\n       (\\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))", "proof(induct_tac w, clarsimp+, rule conjI, clarsimp, rule set_eqI, subst init_match)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list x.\n       \\<forall>i.\n          Suc i \\<le> length list \\<longrightarrow>\n          (\\<forall>k.\n              set (init' G list k (k + i, Suc 0)) =\n              CYK G list i (Suc 0)) \\<Longrightarrow>\n       ((x, Leaf a) \\<in> set G) = (x \\<in> CYK G (a # list) 0 (Suc 0))\n 2. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "fix x w S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list x.\n       \\<forall>i.\n          Suc i \\<le> length list \\<longrightarrow>\n          (\\<forall>k.\n              set (init' G list k (k + i, Suc 0)) =\n              CYK G list i (Suc 0)) \\<Longrightarrow>\n       ((x, Leaf a) \\<in> set G) = (x \\<in> CYK G (a # list) 0 (Suc 0))\n 2. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "show \"((S, Leaf x) \\<in> set G) = (S \\<in> CYK G (x#w) 0 (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((S, Leaf x) \\<in> set G) = (S \\<in> CYK G (x # w) 0 (Suc 0))", "by(subst CYK_eq1[simplified], simp_all)"], ["proof (state)\nthis:\n  ((S, Leaf x) \\<in> set G) = (S \\<in> CYK G (x # w) 0 (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "fix x w i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "assume a: \"\\<forall>i. ?P i w \\<longrightarrow> (\\<forall>k. ?Q i k w)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i \\<le> length w \\<longrightarrow>\n     (\\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "assume b: \"i \\<le> length w\""], ["proof (state)\nthis:\n  i \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>a list i.\n       \\<lbrakk>\\<forall>i.\n                   Suc i \\<le> length list \\<longrightarrow>\n                   (\\<forall>k.\n                       set (init' G list k (k + i, Suc 0)) =\n                       CYK G list i (Suc 0));\n        i \\<le> length list\\<rbrakk>\n       \\<Longrightarrow> 0 < i \\<longrightarrow>\n                         (\\<forall>k.\n                             set (init' G list (Suc k) (k + i, Suc 0)) =\n                             CYK G (a # list) i (Suc 0))", "show \"0 < i \\<longrightarrow> (\\<forall>k. set(init' G w (Suc k) (k + i, Suc 0)) = CYK G (x#w) i (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i \\<longrightarrow>\n    (\\<forall>k.\n        set (init' G w (Suc k) (k + i, Suc 0)) = CYK G (x # w) i (Suc 0))", "proof(clarify, case_tac i, simp_all, subst CYK_eq1[simplified], simp, erule subst, rule b, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "fix k j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "assume c: \"i = Suc j\""], ["proof (state)\nthis:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "note a[rule_format, where i=j and k=\"Suc k\"]"], ["proof (state)\nthis:\n  Suc j \\<le> length w \\<Longrightarrow>\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "with b and c"], ["proof (chain)\npicking this:\n  i \\<le> length w\n  i = Suc j\n  Suc j \\<le> length w \\<Longrightarrow>\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)", "have \"set(init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\""], ["proof (prove)\nusing this:\n  i \\<le> length w\n  i = Suc j\n  Suc j \\<le> length w \\<Longrightarrow>\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\n\ngoal (1 subgoal):\n 1. set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)", "by simp"], ["proof (state)\nthis:\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "also"], ["proof (state)\nthis:\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "with b and c"], ["proof (chain)\npicking this:\n  i \\<le> length w\n  i = Suc j\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)", "have \"... = {S. (S, Leaf (w ! j)) \\<in> set G}\""], ["proof (prove)\nusing this:\n  i \\<le> length w\n  i = Suc j\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) = CYK G w j (Suc 0)\n\ngoal (1 subgoal):\n 1. CYK G w j (Suc 0) = {S. (S, Leaf (w ! j)) \\<in> set G}", "by(subst CYK_eq1[simplified], simp_all)"], ["proof (state)\nthis:\n  CYK G w j (Suc 0) = {S. (S, Leaf (w ! j)) \\<in> set G}\n\ngoal (1 subgoal):\n 1. \\<And>k nat.\n       i = Suc nat \\<Longrightarrow>\n       set (init' G w (Suc k) (Suc (k + nat), Suc 0)) =\n       {S. (S, Leaf (w ! nat)) \\<in> set G}", "finally"], ["proof (chain)\npicking this:\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) =\n  {S. (S, Leaf (w ! j)) \\<in> set G}", "show \"set(init' G w (Suc k) (Suc (k + j), Suc 0)) = {S. (S, Leaf (w ! j)) \\<in> set G}\""], ["proof (prove)\nusing this:\n  set (init' G w (Suc k) (Suc k + j, Suc 0)) =\n  {S. (S, Leaf (w ! j)) \\<in> set G}\n\ngoal (1 subgoal):\n 1. set (init' G w (Suc k) (Suc (k + j), Suc 0)) =\n    {S. (S, Leaf (w ! j)) \\<in> set G}", "by simp"], ["proof (state)\nthis:\n  set (init' G w (Suc k) (Suc (k + j), Suc 0)) =\n  {S. (S, Leaf (w ! j)) \\<in> set G}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < i \\<longrightarrow>\n  (\\<forall>k.\n      set (init' G w (Suc k) (k + i, Suc 0)) = CYK G (x # w) i (Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i \\<le> length w \\<longrightarrow>\n     (\\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))\n\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "with assms"], ["proof (chain)\npicking this:\n  i + 1 \\<le> length w\n  \\<forall>i.\n     Suc i \\<le> length w \\<longrightarrow>\n     (\\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))", "have \"\\<forall>k. ?Q i k w\""], ["proof (prove)\nusing this:\n  i + 1 \\<le> length w\n  \\<forall>i.\n     Suc i \\<le> length w \\<longrightarrow>\n     (\\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0)", "by simp"], ["proof (state)\nthis:\n  \\<forall>k. set (init' G w k (k + i, Suc 0)) = CYK G w i (Suc 0)\n\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "note this[rule_format, where k=0]"], ["proof (state)\nthis:\n  set (init' G w 0 (0 + i, Suc 0)) = CYK G w i (Suc 0)\n\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (init' G w 0 (0 + i, Suc 0)) = CYK G w i (Suc 0)\n\ngoal (1 subgoal):\n 1. set (init' G w 0 (i, 1)) = CYK G w i 1", "by simp"], ["proof (state)\nthis:\n  set (init' G w 0 (i, 1)) = CYK G w i 1\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The next version of initialization refines @{term \"init'\"} in that\n      it takes additional account of the cases when the given word is \n      empty or contains a terminal symbol that does not have any matching \n      production (that is, @{term \"init_match\"} is an empty list). No initial \n      table is then needed as such words can immediately be rejected.\\<close>"], ["", "fun init :: \"('n, 't) CNG \\<Rightarrow> 't list \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'n list) option\"\nwhere \"init G [] k = None\" |\n      \"init G [t] k = (case (init_match G t) of\n                        [] \\<Rightarrow> None\n                      | xs \\<Rightarrow> Some(emptyT((k, 1) := xs)))\" |\n      \"init G (t#ts) k = (case (init_match G t) of\n                           [] \\<Rightarrow> None\n                         | xs \\<Rightarrow> (case (init G ts (k + 1)) of\n                                  None \\<Rightarrow> None\n                                | Some T \\<Rightarrow> Some(T((k, 1) := xs))))\""], ["", "lemma init1:\n  \\<open>init' G w k = T\\<close> if \\<open>init G w k = Some T\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. init' G w k = T", "using that"], ["proof (prove)\nusing this:\n  init G w k = Some T\n\ngoal (1 subgoal):\n 1. init' G w k = T", "by (induction G w k arbitrary: T rule: init.induct)\n    (simp_all split: list.splits option.splits)"], ["", "lemma init2 :\n\"(init G w k = None) =\n (w = [] \\<or> (\\<exists>a \\<in> set w. init_match G a = []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (init G w k = None) =\n    (w = [] \\<or> (\\<exists>a\\<in>set w. init_match G a = []))", "by(induct_tac G w k rule: init.induct, simp, simp split: list.split, \n   simp split: list.split option.split, force)"], ["", "subsection \\<open>The overall procedure\\<close>"], ["", "definition \"cyk G S w = (case init G w 0 of\n                          None \\<Rightarrow> False\n                        | Some T \\<Rightarrow> let len = length w in\n                                     if len = 1 then mem S (T(0, 1))\n                                     else let T' = main G T len 0 2 in\n                                            mem S (T'(0, len)))\""], ["", "theorem cyk :\n\"cyk G S w = (w \\<in> Lang G S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyk G S w = (w \\<in> Lang G S)", "proof(simp add: cyk_def split: option.split, simp_all add: Let_def,\n      rule conjI, subst init2, simp, rule conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. w = [] \\<longrightarrow> [] \\<notin> Lang G S\n 2. (\\<exists>a\\<in>set w. init_match G a = []) \\<longrightarrow>\n    w \\<notin> Lang G S\n 3. \\<forall>x2.\n       init G w 0 = Some x2 \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (x2 (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G x2 (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "show \"w = [] \\<longrightarrow> [] \\<notin> Lang G S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = [] \\<longrightarrow> [] \\<notin> Lang G S", "by(clarify, drule Lang_no_Nil, clarify)"], ["proof (state)\nthis:\n  w = [] \\<longrightarrow> [] \\<notin> Lang G S\n\ngoal (2 subgoals):\n 1. (\\<exists>a\\<in>set w. init_match G a = []) \\<longrightarrow>\n    w \\<notin> Lang G S\n 2. \\<forall>x2.\n       init G w 0 = Some x2 \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (x2 (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G x2 (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<exists>a\\<in>set w. init_match G a = []) \\<longrightarrow>\n    w \\<notin> Lang G S\n 2. \\<forall>x2.\n       init G w 0 = Some x2 \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (x2 (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G x2 (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "show \"(\\<exists>x\\<in>set w. init_match G x = []) \\<longrightarrow> w \\<notin> Lang G S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>set w. init_match G x = []) \\<longrightarrow>\n    w \\<notin> Lang G S", "by(clarify, drule Lang_term, subst (asm) init_match[THEN sym], force)"], ["proof (state)\nthis:\n  (\\<exists>x\\<in>set w. init_match G x = []) \\<longrightarrow>\n  w \\<notin> Lang G S\n\ngoal (1 subgoal):\n 1. \\<forall>x2.\n       init G w 0 = Some x2 \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (x2 (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G x2 (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x2.\n       init G w 0 = Some x2 \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (x2 (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G x2 (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "show \"\\<forall>T. init G w 0 = Some T \\<longrightarrow> \n       ((length w = Suc 0 \\<longrightarrow> S \\<in> set(T(0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow> S \\<in> set(main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)\" (is \"\\<forall>T. ?P T \\<longrightarrow> ?L T = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>T.\n       init G w 0 = Some T \\<longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "fix T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "assume a: \"?P T\""], ["proof (state)\nthis:\n  init G w 0 = Some T\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "hence b: \"init' G w 0 = T\""], ["proof (prove)\nusing this:\n  init G w 0 = Some T\n\ngoal (1 subgoal):\n 1. init' G w 0 = T", "by(rule init1)"], ["proof (state)\nthis:\n  init' G w 0 = T\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "note init2[THEN iffD2, OF disjI1]"], ["proof (state)\nthis:\n  ?w1 = [] \\<Longrightarrow> init ?G1 ?w1 ?k1 = None\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "have c: \"w \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by(clarify, drule init2[where G=G and k=0, THEN iffD2, OF disjI1], simp add: a)"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "have \"?L (init' G w 0) = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((length w = Suc 0 \\<longrightarrow>\n      S \\<in> set (init' G w 0 (0, Suc 0))) \\<and>\n     (length w \\<noteq> Suc 0 \\<longrightarrow>\n      S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w)))) =\n    (w \\<in> Lang G S)", "proof(case_tac \"length w = 1\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. length w = Suc 0 \\<Longrightarrow>\n    (S \\<in> set (init' G w 0 (0, Suc 0))) = (w \\<in> Lang G S)\n 2. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "assume d: \"length w = Suc 0\""], ["proof (state)\nthis:\n  length w = Suc 0\n\ngoal (2 subgoals):\n 1. length w = Suc 0 \\<Longrightarrow>\n    (S \\<in> set (init' G w 0 (0, Suc 0))) = (w \\<in> Lang G S)\n 2. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "show \"S \\<in> set(init' G w 0 (0, Suc 0)) = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> set (init' G w 0 (0, Suc 0))) = (w \\<in> Lang G S)", "by(subst init'[simplified], simp add: d, subst CYK_Lang[THEN sym], simp add: d)"], ["proof (state)\nthis:\n  (S \\<in> set (init' G w 0 (0, Suc 0))) = (w \\<in> Lang G S)\n\ngoal (1 subgoal):\n 1. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "assume \"length w \\<noteq> Suc 0\""], ["proof (state)\nthis:\n  length w \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "with c"], ["proof (chain)\npicking this:\n  w \\<noteq> []\n  length w \\<noteq> Suc 0", "have \"1 < length w\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  length w \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. 1 < length w", "by(case_tac w, simp_all)"], ["proof (state)\nthis:\n  1 < length w\n\ngoal (1 subgoal):\n 1. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "hence d: \"Suc(Suc 0) \\<le> length w\""], ["proof (prove)\nusing this:\n  1 < length w\n\ngoal (1 subgoal):\n 1. Suc (Suc 0) \\<le> length w", "by simp"], ["proof (state)\nthis:\n  Suc (Suc 0) \\<le> length w\n\ngoal (1 subgoal):\n 1. length w \\<noteq> Suc 0 \\<Longrightarrow>\n    (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "show \"(S \\<in> set(main G (init' G w 0) (length w) 0 2 (0, length w))) = (w \\<in> Lang G S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n    (w \\<in> Lang G S)", "proof(subst main, simp_all, rule d)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "fix i' j'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "assume \"j' < 2\" and \"Suc 0 \\<le> j'\""], ["proof (state)\nthis:\n  j' < 2\n  Suc 0 \\<le> j'\n\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "hence e: \"j' = 1\""], ["proof (prove)\nusing this:\n  j' < 2\n  Suc 0 \\<le> j'\n\ngoal (1 subgoal):\n 1. j' = 1", "by simp"], ["proof (state)\nthis:\n  j' = 1\n\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "assume \"i' + j' \\<le> length w\""], ["proof (state)\nthis:\n  i' + j' \\<le> length w\n\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "with e"], ["proof (chain)\npicking this:\n  j' = 1\n  i' + j' \\<le> length w", "have f: \"i' + 1 \\<le> length w\""], ["proof (prove)\nusing this:\n  j' = 1\n  i' + j' \\<le> length w\n\ngoal (1 subgoal):\n 1. i' + 1 \\<le> length w", "by simp"], ["proof (state)\nthis:\n  i' + 1 \\<le> length w\n\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "have \"set(init' G w 0 (i', 1)) = CYK G w i' 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (init' G w 0 (i', 1)) = CYK G w i' 1", "by(rule init', rule f)"], ["proof (state)\nthis:\n  set (init' G w 0 (i', 1)) = CYK G w i' 1\n\ngoal (3 subgoals):\n 1. \\<And>i' j'.\n       \\<lbrakk>j' < 2; Suc 0 \\<le> j'; i' + j' \\<le> length w\\<rbrakk>\n       \\<Longrightarrow> set (init' G w 0 (i', j')) = CYK G w i' j'\n 2. Suc 0 \\<le> length w\n 3. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "with e"], ["proof (chain)\npicking this:\n  j' = 1\n  set (init' G w 0 (i', 1)) = CYK G w i' 1", "show \"set(init' G w 0 (i', j')) = CYK G w i' j'\""], ["proof (prove)\nusing this:\n  j' = 1\n  set (init' G w 0 (i', 1)) = CYK G w i' 1\n\ngoal (1 subgoal):\n 1. set (init' G w 0 (i', j')) = CYK G w i' j'", "by simp"], ["proof (state)\nthis:\n  set (init' G w 0 (i', j')) = CYK G w i' j'\n\ngoal (2 subgoals):\n 1. Suc 0 \\<le> length w\n 2. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc 0 \\<le> length w\n 2. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "from d"], ["proof (chain)\npicking this:\n  Suc (Suc 0) \\<le> length w", "show \"Suc 0 \\<le> length w\""], ["proof (prove)\nusing this:\n  Suc (Suc 0) \\<le> length w\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> length w", "by simp"], ["proof (state)\nthis:\n  Suc 0 \\<le> length w\n\ngoal (1 subgoal):\n 1. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "show \"(S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)", "by(rule CYK_Lang)"], ["proof (state)\nthis:\n  (S \\<in> CYK G w 0 (length w)) = (w \\<in> Lang G S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w))) =\n  (w \\<in> Lang G S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((length w = Suc 0 \\<longrightarrow>\n    S \\<in> set (init' G w 0 (0, Suc 0))) \\<and>\n   (length w \\<noteq> Suc 0 \\<longrightarrow>\n    S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w)))) =\n  (w \\<in> Lang G S)\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       init G w 0 = Some T \\<Longrightarrow>\n       ((length w = Suc 0 \\<longrightarrow>\n         S \\<in> set (T (0, Suc 0))) \\<and>\n        (length w \\<noteq> Suc 0 \\<longrightarrow>\n         S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n       (w \\<in> Lang G S)", "with b"], ["proof (chain)\npicking this:\n  init' G w 0 = T\n  ((length w = Suc 0 \\<longrightarrow>\n    S \\<in> set (init' G w 0 (0, Suc 0))) \\<and>\n   (length w \\<noteq> Suc 0 \\<longrightarrow>\n    S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w)))) =\n  (w \\<in> Lang G S)", "show \"?L T = ?R\""], ["proof (prove)\nusing this:\n  init' G w 0 = T\n  ((length w = Suc 0 \\<longrightarrow>\n    S \\<in> set (init' G w 0 (0, Suc 0))) \\<and>\n   (length w \\<noteq> Suc 0 \\<longrightarrow>\n    S \\<in> set (main G (init' G w 0) (length w) 0 2 (0, length w)))) =\n  (w \\<in> Lang G S)\n\ngoal (1 subgoal):\n 1. ((length w = Suc 0 \\<longrightarrow> S \\<in> set (T (0, Suc 0))) \\<and>\n     (length w \\<noteq> Suc 0 \\<longrightarrow>\n      S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n    (w \\<in> Lang G S)", "by simp"], ["proof (state)\nthis:\n  ((length w = Suc 0 \\<longrightarrow> S \\<in> set (T (0, Suc 0))) \\<and>\n   (length w \\<noteq> Suc 0 \\<longrightarrow>\n    S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n  (w \\<in> Lang G S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>T.\n     init G w 0 = Some T \\<longrightarrow>\n     ((length w = Suc 0 \\<longrightarrow> S \\<in> set (T (0, Suc 0))) \\<and>\n      (length w \\<noteq> Suc 0 \\<longrightarrow>\n       S \\<in> set (main G T (length w) 0 2 (0, length w)))) =\n     (w \\<in> Lang G S)\n\ngoal:\nNo subgoals!", "qed"], ["", "value [code]\n  \"let G = [(0::int, Branch 1 2), (0, Branch 2 3),\n            (1, Branch 2 1), (1, Leaf ''a''),\n            (2, Branch 3 3), (2, Leaf ''b''),\n            (3, Branch 1 2), (3, Leaf ''a'')]\n  in map (cyk G 0)\n     [[''b'',''a'',''a'',''b'',''a''],\n      [''b'',''a'',''b'',''a'']]\""], ["", "end"]]}