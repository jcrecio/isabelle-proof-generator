{"file_name": "/home/qj213/afp-2021-10-22/thys/Closest_Pair_Points/Closest_Pair.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Closest_Pair_Points", "problem_names": ["lemma find_closest_eq_val_find_closest_tm:\n  \"val (find_closest_tm p \\<delta> ps) = find_closest p \\<delta> ps\"", "lemma find_closest_set:\n  \"0 < length ps \\<Longrightarrow> find_closest p \\<delta> ps \\<in> set ps\"", "lemma find_closest_dist:\n  assumes \"sorted_snd (p # ps)\" \"\\<exists>q \\<in> set ps. dist p q < \\<delta>\"\n  shows \"\\<forall>q \\<in> set ps. dist p (find_closest p \\<delta> ps) \\<le> dist p q\"", "lemma find_closest_pair_eq_val_find_closest_pair_tm:\n  \"val (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"", "lemma find_closest_pair_set:\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"(C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps) \\<or> (C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1)\"", "lemma find_closest_pair_c0_ne_c1:\n  \"c\\<^sub>0 \\<noteq> c\\<^sub>1 \\<Longrightarrow> distinct ps \\<Longrightarrow> (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\"", "lemma find_closest_pair_dist_mono:\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"dist C\\<^sub>0 C\\<^sub>1 \\<le> dist c\\<^sub>0 c\\<^sub>1\"", "lemma find_closest_pair_dist:\n  assumes \"sorted_snd ps\" \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"sparse (dist C\\<^sub>0 C\\<^sub>1) (set ps)\"", "lemma combine_eq_val_combine_tm:\n  \"val (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"", "lemma combine_set:\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"(c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps) \\<or> (c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L) \\<or> (c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R)\"", "lemma combine_c0_ne_c1:\n  assumes \"p\\<^sub>0\\<^sub>L \\<noteq> p\\<^sub>1\\<^sub>L\" \"p\\<^sub>0\\<^sub>R \\<noteq> p\\<^sub>1\\<^sub>R\" \"distinct ps\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"c\\<^sub>0 \\<noteq> c\\<^sub>1\"", "lemma combine_dist:\n  assumes \"sorted_snd ps\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse (dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L) ps\\<^sub>L\" \"sparse (dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R) ps\\<^sub>R\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set ps)\"", "lemma closest_pair_rec_simps:\n  assumes \"n = length xs\" \"\\<not> (n \\<le> 3)\"\n  shows \"closest_pair_rec xs = (\n    let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n    let (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L in\n    let (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R in\n    let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n    (ys, combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys)\n  )\"", "lemma closest_pair_rec_eq_val_closest_pair_rec_tm:\n  \"val (closest_pair_rec_tm xs) = closest_pair_rec xs\"", "lemma closest_pair_rec_set_length_sorted_snd:\n  assumes \"(ys, p) = closest_pair_rec xs\"\n  shows \"set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\"", "lemma closest_pair_rec_distinct:\n  assumes \"distinct xs\" \"(ys, p) = closest_pair_rec xs\"\n  shows \"distinct ys\"", "lemma closest_pair_rec_c0_c1:\n  assumes \"1 < length xs\" \"distinct xs\" \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  shows \"c\\<^sub>0 \\<in> set xs \\<and> c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\"", "lemma closest_pair_rec_dist:\n  assumes \"1 < length xs\" \"sorted_fst xs\" \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set xs)\"", "lemma closest_pair_eq_val_closest_pair_tm:\n  \"val (closest_pair_tm ps) = closest_pair ps\"", "lemma closest_pair_simps:\n  \"1 < length ps \\<Longrightarrow> closest_pair ps = (let (_, p) = closest_pair_rec (mergesort fst ps) in p)\"", "theorem closest_pair_c0_c1:\n  assumes \"1 < length ps\" \"distinct ps\" \"(c\\<^sub>0, c\\<^sub>1) = closest_pair ps\"\n  shows \"c\\<^sub>0 \\<in> set ps\" \"c\\<^sub>1 \\<in> set ps\" \"c\\<^sub>0 \\<noteq> c\\<^sub>1\"", "theorem closest_pair_dist:\n  assumes \"1 < length ps\" \"(c\\<^sub>0, c\\<^sub>1) = closest_pair ps\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set ps)\"", "lemma core_argument:\n  fixes \\<delta> :: real and p :: point and ps :: \"point list\"\n  assumes \"distinct (p # ps)\" \"sorted_snd (p # ps)\" \"0 \\<le> \\<delta>\" \"set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>q \\<in> set (p # ps). l - \\<delta> < fst q \\<and> fst q < l + \\<delta>\"\n  assumes \"\\<forall>q \\<in> ps\\<^sub>L. fst q \\<le> l\" \"\\<forall>q \\<in> ps\\<^sub>R. l \\<le> fst q\"\n  assumes \"sparse \\<delta> ps\\<^sub>L\" \"sparse \\<delta> ps\\<^sub>R\"\n  shows \"length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps) \\<le> 7\"", "lemma t_find_closest_eq_time_find_closest_tm:\n  \"t_find_closest p \\<delta> ps = time (find_closest_tm p \\<delta> ps)\"", "lemma t_find_closest_mono:\n  \"\\<delta>' \\<le> \\<delta> \\<Longrightarrow> t_find_closest p \\<delta>' ps \\<le> t_find_closest p \\<delta> ps\"", "lemma t_find_closest_cnt:\n  \"t_find_closest p \\<delta> ps \\<le> 1 + length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)\"", "lemma t_find_closest_pair_eq_time_find_closest_pair_tm:\n  \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps = time (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps)\"", "lemma t_find_closest_pair_bound:\n  assumes \"distinct ps\" \"sorted_snd ps\" \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> set ps. l - \\<Delta> < fst p \\<and> fst p < l + \\<Delta>\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse \\<Delta> ps\\<^sub>L\" \"sparse \\<Delta> ps\\<^sub>R\" \"\\<delta> \\<le> \\<Delta>\"\n  shows \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<le> 9 * length ps + 1\"", "lemma t_combine_eq_time_combine_tm:\n  \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps = time (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps)\"", "lemma t_combine_bound:\n  fixes ps :: \"point list\"\n  assumes \"distinct ps\" \"sorted_snd ps\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse (dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L) ps\\<^sub>L\" \"sparse (dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R) ps\\<^sub>R\"\n  shows \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps \\<le> 10 * length ps + 3\"", "lemma time_closest_pair_rec_tm_simps_1:\n  assumes \"length xs \\<le> 3\"\n  shows \"time (closest_pair_rec_tm xs) = 1 + time (length_tm xs) + time (mergesort_tm snd xs) + time (closest_pair_bf_tm xs)\"", "lemma time_closest_pair_rec_tm_simps_2:\n  assumes \"\\<not> (length xs \\<le> 3)\"\n  shows \"time (closest_pair_rec_tm xs) = 1 + (\n    let (xs\\<^sub>L, xs\\<^sub>R) = val (split_at_tm (length xs div 2) xs) in\n    let (ys\\<^sub>L, p\\<^sub>L) = val (closest_pair_rec_tm xs\\<^sub>L) in\n    let (ys\\<^sub>R, p\\<^sub>R) = val (closest_pair_rec_tm xs\\<^sub>R) in\n    let ys = val (merge_tm (\\<lambda>p. snd p) ys\\<^sub>L ys\\<^sub>R) in\n    time (length_tm xs) + time (split_at_tm (length xs div 2) xs) + time (closest_pair_rec_tm xs\\<^sub>L) +\n    time (closest_pair_rec_tm xs\\<^sub>R) + time (merge_tm (\\<lambda>p. snd p) ys\\<^sub>L ys\\<^sub>R) + t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys\n  )\"", "lemma closest_pair_recurrence_nonneg[simp]:\n  \"0 \\<le> closest_pair_recurrence n\"", "lemma time_closest_pair_rec_conv_closest_pair_recurrence:\n  assumes \"distinct ps\" \"sorted_fst ps\"\n  shows \"time (closest_pair_rec_tm ps) \\<le> closest_pair_recurrence (length ps)\"", "theorem closest_pair_recurrence:\n  \"closest_pair_recurrence \\<in> \\<Theta>(\\<lambda>n. n * ln n)\"", "theorem time_closest_pair_rec_bigo:\n  \"(\\<lambda>xs. time (closest_pair_rec_tm xs)) \\<in> O[length going_to at_top within { ps. distinct ps \\<and> sorted_fst ps }]((\\<lambda>n. n * ln n) o length)\"", "lemma time_closest_pair_conv_closest_pair_recurrence:\n  assumes \"distinct ps\"\n  shows \"time (closest_pair_tm ps) \\<le> closest_pair_time (length ps)\"", "lemma find_closest_code_dist_eq:\n  \"0 < length ps \\<Longrightarrow> (\\<delta>\\<^sub>c, c) = find_closest_code p \\<delta> ps \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\"", "lemma find_closest_code_eq:\n  assumes \"0 < length ps\" \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\" \"sorted_snd (p # ps)\"\n  assumes \"c = find_closest p \\<delta> ps\" \"(\\<delta>\\<^sub>c', c') = find_closest_code p \\<delta>' ps\"\n  shows \"c = c'\"", "lemma find_closest_pair_code_dist_eq:\n  assumes \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\" \"(\\<Delta>, C\\<^sub>0, C\\<^sub>1) = find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"\\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\"", "lemma find_closest_pair_code_eq:\n  assumes \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\" \"sorted_snd ps\"\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  assumes \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\"", "lemma combine_code_dist_eq:\n  assumes \"\\<delta>\\<^sub>L = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\" \"\\<delta>\\<^sub>R = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\"\n  assumes \"(\\<delta>, c\\<^sub>0, c\\<^sub>1) = combine_code (\\<delta>\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (\\<delta>\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\"", "lemma combine_code_eq:\n  assumes \"\\<delta>\\<^sub>L' = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\" \"\\<delta>\\<^sub>R' = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\" \"sorted_snd ps\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  assumes \"(\\<delta>', c\\<^sub>0', c\\<^sub>1') = combine_code (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\"", "lemma closest_pair_rec_code_simps:\n  assumes \"n = length xs\" \"\\<not> (n \\<le> 3)\"\n  shows \"closest_pair_rec_code xs = (\n    let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n    let l = fst (hd xs\\<^sub>R) in\n    let (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L in\n    let (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R in\n    let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n    (ys, combine_code p\\<^sub>L p\\<^sub>R l ys)\n  )\"", "lemma closest_pair_rec_code_dist_eq:\n  assumes \"1 < length xs\" \"(ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\"\n  shows \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\"", "lemma closest_pair_rec_ys_eq:\n  assumes \"1 < length xs\"\n  assumes \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  assumes \"(ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\"\n  shows \"ys = ys'\"", "lemma closest_pair_rec_code_eq:\n  assumes \"1 < length xs\"\n  assumes \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  assumes \"(ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\"\n  shows \"c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\"", "lemma closest_pair_code_eq:\n  \"closest_pair ps = closest_pair_code ps\""], "translations": [["", "lemma find_closest_eq_val_find_closest_tm:\n  \"val (find_closest_tm p \\<delta> ps) = find_closest p \\<delta> ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val (find_closest_tm p \\<delta> ps) =\n    find_closest p \\<delta> ps", "by (induction p \\<delta> ps rule: find_closest.induct) (auto simp: Let_def)"], ["", "lemma find_closest_set:\n  \"0 < length ps \\<Longrightarrow> find_closest p \\<delta> ps \\<in> set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length ps \\<Longrightarrow> find_closest p \\<delta> ps \\<in> set ps", "by (induction p \\<delta> ps rule: find_closest.induct)\n     (auto simp: Let_def)"], ["", "lemma find_closest_dist:\n  assumes \"sorted_snd (p # ps)\" \"\\<exists>q \\<in> set ps. dist p q < \\<delta>\"\n  shows \"\\<forall>q \\<in> set ps. dist p (find_closest p \\<delta> ps) \\<le> dist p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set ps.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> ps of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using assms"], ["proof (prove)\nusing this:\n  sorted_snd (p # ps)\n  \\<exists>q\\<in>set ps.\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set ps.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> ps of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "proof (induction p \\<delta> ps rule: find_closest.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       \\<lbrakk>\\<lbrakk>\\<not> \\<delta>\n                                \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n                 sorted_snd (p # v # va);\n                 \\<exists>q\\<in>set (v # va).\n                    dist\n                     (case p of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case q of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    < min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y)))\\<rbrakk>\n                \\<Longrightarrow> \\<forall>q\\<in>set (v # va).\n                                     dist\n(case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case find_closest p\n       (min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (v # va) of\n (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        \\<exists>q\\<in>set (p\\<^sub>0 # v # va).\n           dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < \\<delta>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>0 # v # va).\n                            dist\n                             (case p of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest p \\<delta>\n                                    (p\\<^sub>0 # v # va) of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "case (3 p \\<delta> p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n   sorted_snd (p # p\\<^sub>2 # ps);\n   \\<exists>q\\<in>set (p\\<^sub>2 # ps).\n      dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n                       dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case find_closest p\n                               (min \\<delta>\n                                 (dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case p\\<^sub>0 of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))))\n                               (p\\<^sub>2 # ps) of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                       \\<le> dist\n                              (case p of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case q of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<exists>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < \\<delta>\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       \\<lbrakk>\\<lbrakk>\\<not> \\<delta>\n                                \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n                 sorted_snd (p # v # va);\n                 \\<exists>q\\<in>set (v # va).\n                    dist\n                     (case p of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case q of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    < min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y)))\\<rbrakk>\n                \\<Longrightarrow> \\<forall>q\\<in>set (v # va).\n                                     dist\n(case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case find_closest p\n       (min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (v # va) of\n (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        \\<exists>q\\<in>set (p\\<^sub>0 # v # va).\n           dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < \\<delta>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>0 # v # va).\n                            dist\n                             (case p of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest p \\<delta>\n                                    (p\\<^sub>0 # v # va) of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "let ?ps = \"p\\<^sub>0 # p\\<^sub>2 # ps\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       \\<lbrakk>\\<lbrakk>\\<not> \\<delta>\n                                \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n                 sorted_snd (p # v # va);\n                 \\<exists>q\\<in>set (v # va).\n                    dist\n                     (case p of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case q of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    < min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y)))\\<rbrakk>\n                \\<Longrightarrow> \\<forall>q\\<in>set (v # va).\n                                     dist\n(case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case find_closest p\n       (min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (v # va) of\n (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        \\<exists>q\\<in>set (p\\<^sub>0 # v # va).\n           dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < \\<delta>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>0 # v # va).\n                            dist\n                             (case p of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest p \\<delta>\n                                    (p\\<^sub>0 # v # va) of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p (min \\<delta> (dist p p\\<^sub>0)) (p\\<^sub>2 # ps)\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       \\<lbrakk>\\<lbrakk>\\<not> \\<delta>\n                                \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n                 sorted_snd (p # v # va);\n                 \\<exists>q\\<in>set (v # va).\n                    dist\n                     (case p of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case q of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    < min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y)))\\<rbrakk>\n                \\<Longrightarrow> \\<forall>q\\<in>set (v # va).\n                                     dist\n(case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case find_closest p\n       (min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (v # va) of\n (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        \\<exists>q\\<in>set (p\\<^sub>0 # v # va).\n           dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < \\<delta>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>0 # v # va).\n                            dist\n                             (case p of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest p \\<delta>\n                                    (p\\<^sub>0 # v # va) of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "have A: \"\\<not> \\<delta> \\<le> snd p\\<^sub>0 - snd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "assume B: \"\\<not> \\<not> \\<delta> \\<le> snd p\\<^sub>0 - snd p\""], ["proof (state)\nthis:\n  \\<not> \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "have \"\\<forall>q \\<in> set ?ps. snd p \\<le> snd q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q", "using sorted_snd_def \"3.prems\"(1)"], ["proof (prove)\nusing this:\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q", "by simp"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "have \"\\<forall>q \\<in> set ?ps. \\<delta> \\<le> snd q - snd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta> \\<le> real_of_int (snd q - snd p)", "using sorted_snd_def \"3.prems\"(1) B"], ["proof (prove)\nusing this:\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<not> \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta> \\<le> real_of_int (snd q - snd p)", "by auto"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> real_of_int (snd q - snd p)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> real_of_int (snd q - snd p)", "have \"\\<forall>q \\<in> set ?ps. \\<delta> \\<le> dist (snd p) (snd q)\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> real_of_int (snd q - snd p)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta> \\<le> dist (real_of_int (snd p)) (real_of_int (snd q))", "using dist_real_def"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps). snd p \\<le> snd q\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> real_of_int (snd q - snd p)\n  dist ?x ?y = \\<bar>?x - ?y\\<bar>\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta> \\<le> dist (real_of_int (snd p)) (real_of_int (snd q))", "by simp"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> dist (real_of_int (snd p)) (real_of_int (snd q))\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "hence \"\\<forall>q \\<in> set ?ps. \\<delta> \\<le> dist p q\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> dist (real_of_int (snd p)) (real_of_int (snd q))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta>\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using dist_snd_le order_trans"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta> \\<le> dist (real_of_int (snd p)) (real_of_int (snd q))\n  dist (snd ?x) (snd ?y) \\<le> dist ?x ?y\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       \\<delta>\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b.\n       \\<lbrakk>\\<And>a b aa ba. dist b ba \\<le> dist (a, b) (aa, ba);\n        \\<And>x y z.\n           \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk>\n           \\<Longrightarrow> x \\<le> z;\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2b);\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2);\n        \\<forall>q\\<in>set ps.\n           \\<delta> \\<le> dist (real_of_int x2a) (real_of_int (snd q));\n        p\\<^sub>2 = (x1, x2); p = (x1a, x2a);\n        p\\<^sub>0 = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\n                         \\<le> dist (real_of_int x1a, real_of_int x2a)\n                                (real_of_int x1b, real_of_int x2b)\n 2. \\<And>x1 x2 x1a x2a x1b x2b.\n       \\<lbrakk>\\<And>a b aa ba. dist b ba \\<le> dist (a, b) (aa, ba);\n        \\<And>x y z.\n           \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk>\n           \\<Longrightarrow> x \\<le> z;\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2b);\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2);\n        \\<forall>q\\<in>set ps.\n           \\<delta> \\<le> dist (real_of_int x2a) (real_of_int (snd q));\n        p\\<^sub>2 = (x1, x2); p = (x1a, x2a);\n        p\\<^sub>0 = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\n                         \\<le> dist (real_of_int x1a, real_of_int x2a)\n                                (real_of_int x1, real_of_int x2)\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>\\<And>a b aa ba. dist b ba \\<le> dist (a, b) (aa, ba);\n        \\<And>x y z.\n           \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk>\n           \\<Longrightarrow> x \\<le> z;\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2b);\n        \\<delta> \\<le> dist (real_of_int x2a) (real_of_int x2);\n        \\<forall>q\\<in>set ps.\n           \\<delta> \\<le> dist (real_of_int x2a) (real_of_int (snd q));\n        p\\<^sub>2 = (x1, x2); p = (x1a, x2a); p\\<^sub>0 = (x1b, x2b);\n        (x1c, x2c) \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\n                         \\<le> dist (real_of_int x1a, real_of_int x2a)\n                                (real_of_int x1c, real_of_int x2c)", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta>\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> \\<delta>\n                  \\<le> real_of_int\n                         (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta>\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. False", "using \"3.prems\"(2)"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     \\<delta>\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<exists>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < \\<delta>\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       \\<lbrakk>\\<lbrakk>\\<not> \\<delta>\n                                \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n                 sorted_snd (p # v # va);\n                 \\<exists>q\\<in>set (v # va).\n                    dist\n                     (case p of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case q of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    < min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y)))\\<rbrakk>\n                \\<Longrightarrow> \\<forall>q\\<in>set (v # va).\n                                     dist\n(case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case find_closest p\n       (min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (v # va) of\n (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        \\<exists>q\\<in>set (p\\<^sub>0 # v # va).\n           dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < \\<delta>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>0 # v # va).\n                            dist\n                             (case p of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest p \\<delta>\n                                    (p\\<^sub>0 # v # va) of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "assume \"\\<exists>q \\<in> set (p\\<^sub>2 # ps). dist p q < min \\<delta> (dist p p\\<^sub>0)\""], ["proof (state)\nthis:\n  \\<exists>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < min \\<delta>\n        (dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence \"\\<forall>q \\<in> set (p\\<^sub>2 # ps). dist p p\\<^sub>1 \\<le> dist p q\""], ["proof (prove)\nusing this:\n  \\<exists>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < min \\<delta>\n        (dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using \"3.IH\" \"3.prems\"(1) A p\\<^sub>1_def sorted_snd_def"], ["proof (prove)\nusing this:\n  \\<exists>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < min \\<delta>\n        (dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n  \\<lbrakk>\\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n   sorted_snd (p # p\\<^sub>2 # ps);\n   \\<exists>q\\<in>set (p\\<^sub>2 # ps).\n      dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < min \\<delta>\n         (dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n                       dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case find_closest p\n                               (min \\<delta>\n                                 (dist\n                                   (case p of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case p\\<^sub>0 of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))))\n                               (p\\<^sub>2 # ps) of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                       \\<le> dist\n                              (case p of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case q of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by simp"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using p\\<^sub>1_def A"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>set (p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "assume B: \"\\<not> (\\<exists>q \\<in> set (p\\<^sub>2 # ps). dist p q < min \\<delta> (dist p p\\<^sub>0))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence \"dist p p\\<^sub>0 < \\<delta>\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n\ngoal (1 subgoal):\n 1. dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    < \\<delta>", "using \"3.prems\"(2) p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n  \\<exists>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < \\<delta>\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    < \\<delta>", "by auto"], ["proof (state)\nthis:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence C: \"\\<forall>q \\<in> set ?ps. dist p p\\<^sub>0 \\<le> dist p q\""], ["proof (prove)\nusing this:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using p\\<^sub>1_def B"], ["proof (prove)\nusing this:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < \\<delta>\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by auto"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)", "using p\\<^sub>1_def find_closest_set"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  0 < length ?ps \\<Longrightarrow>\n  find_closest ?p ?\\<delta> ?ps \\<in> set ?ps\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)", "by blast"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence \"dist p p\\<^sub>0 \\<le> dist p p\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using p\\<^sub>1_def C"], ["proof (prove)\nusing this:\n  p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by auto"], ["proof (state)\nthis:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>q\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case q of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow>\n                       (real_of_int x, real_of_int y)))) \\<Longrightarrow>\n    \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "thus ?thesis"], ["proof (prove)\nusing this:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using p\\<^sub>1_def A C"], ["proof (prove)\nusing this:\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case q of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_.\n       \\<lbrakk>sorted_snd [uu_];\n        \\<exists>q\\<in>set [].\n           dist\n            (case uu_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < uv_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [].\n                            dist\n                             (case uu_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uu_ uv_ [] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uu_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n 2. \\<And>uw_ ux_ p.\n       \\<lbrakk>sorted_snd [uw_, p];\n        \\<exists>q\\<in>set [p].\n           dist\n            (case uw_ of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           < ux_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>q\\<in>set [p].\n                            dist\n                             (case uw_ of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                             (case find_closest uw_ ux_ [p] of\n                              (x, y) \\<Rightarrow>\n                                (real_of_int x, real_of_int y))\n                            \\<le> dist\n                                   (case uw_ of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))\n                                   (case q of\n                                    (x, y) \\<Rightarrow>\n(real_of_int x, real_of_int y))", "qed auto"], ["", "declare find_closest.simps [simp del]"], ["", "fun find_closest_pair_tm :: \"(point * point) \\<Rightarrow> point list \\<Rightarrow> (point \\<times> point) tm\" where\n  \"find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) [] =1 return (c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) [_] =1 return (c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ps) =1 (\n    do {\n      p\\<^sub>1 <- find_closest_tm p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ps;\n      if dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1 then\n        find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps\n      else\n        find_closest_pair_tm (p\\<^sub>0, p\\<^sub>1) ps\n    }\n  )\""], ["", "fun find_closest_pair :: \"(point * point) \\<Rightarrow> point list \\<Rightarrow> (point \\<times> point)\" where\n  \"find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] = (c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair (c\\<^sub>0, c\\<^sub>1) [_] = (c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ps) = (\n    let p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ps in\n    if dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1 then\n      find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n    else\n      find_closest_pair (p\\<^sub>0, p\\<^sub>1) ps\n  )\""], ["", "lemma find_closest_pair_eq_val_find_closest_pair_tm:\n  \"val (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps) =\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps", "by (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 rule: find_closest_pair.induct)\n     (auto simp: Let_def find_closest_eq_val_find_closest_tm)"], ["", "lemma find_closest_pair_set:\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"(C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps) \\<or> (C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1 rule: find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [] \\<and> C\\<^sub>1 \\<in> set [] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [uu_] \\<and> C\\<^sub>1 \\<in> set [uu_] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                                     C\\<^sub>1 \\<in> set (v # va) \\<or>\n                                     C\\<^sub>0 = c\\<^sub>0 \\<and>\n                                     C\\<^sub>1 = c\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                             C\\<^sub>1 \\<in> set (v # va) \\<or>\n                             C\\<^sub>0 = p\\<^sub>0 \\<and> C\\<^sub>1 = x;\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<in> set (p\\<^sub>0 # v # va) \\<and>\n                         C\\<^sub>1 \\<in> set (p\\<^sub>0 # v # va) \\<or>\n                         C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<in> set (p\\<^sub>2 # ps) \\<and>\n                    ?C\\<^sub>1 \\<in> set (p\\<^sub>2 # ps) \\<or>\n                    ?C\\<^sub>0 = c\\<^sub>0 \\<and> ?C\\<^sub>1 = c\\<^sub>1\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<in> set (p\\<^sub>2 # ps) \\<and>\n                    ?C\\<^sub>1 \\<in> set (p\\<^sub>2 # ps) \\<or>\n                    ?C\\<^sub>0 = p\\<^sub>0 \\<and> ?C\\<^sub>1 = ?x\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [] \\<and> C\\<^sub>1 \\<in> set [] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [uu_] \\<and> C\\<^sub>1 \\<in> set [uu_] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                                     C\\<^sub>1 \\<in> set (v # va) \\<or>\n                                     C\\<^sub>0 = c\\<^sub>0 \\<and>\n                                     C\\<^sub>1 = c\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                             C\\<^sub>1 \\<in> set (v # va) \\<or>\n                             C\\<^sub>0 = p\\<^sub>0 \\<and> C\\<^sub>1 = x;\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<in> set (p\\<^sub>0 # v # va) \\<and>\n                         C\\<^sub>1 \\<in> set (p\\<^sub>0 # v # va) \\<or>\n                         C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [] \\<and> C\\<^sub>1 \\<in> set [] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [uu_] \\<and> C\\<^sub>1 \\<in> set [uu_] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                                     C\\<^sub>1 \\<in> set (v # va) \\<or>\n                                     C\\<^sub>0 = c\\<^sub>0 \\<and>\n                                     C\\<^sub>1 = c\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                             C\\<^sub>1 \\<in> set (v # va) \\<or>\n                             C\\<^sub>0 = p\\<^sub>0 \\<and> C\\<^sub>1 = x;\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<in> set (p\\<^sub>0 # v # va) \\<and>\n                         C\\<^sub>1 \\<in> set (p\\<^sub>0 # v # va) \\<or>\n                         C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "hence A: \"p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)", "using find_closest_set"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  0 < length ?ps \\<Longrightarrow>\n  find_closest ?p ?\\<delta> ?ps \\<in> set ?ps\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)", "by blast"], ["proof (state)\nthis:\n  p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [] \\<and> C\\<^sub>1 \\<in> set [] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [uu_] \\<and> C\\<^sub>1 \\<in> set [uu_] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                                     C\\<^sub>1 \\<in> set (v # va) \\<or>\n                                     C\\<^sub>0 = c\\<^sub>0 \\<and>\n                                     C\\<^sub>1 = c\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<in> set (v # va) \\<and>\n                             C\\<^sub>1 \\<in> set (v # va) \\<or>\n                             C\\<^sub>0 = p\\<^sub>0 \\<and> C\\<^sub>1 = x;\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<in> set (p\\<^sub>0 # v # va) \\<and>\n                         C\\<^sub>1 \\<in> set (p\\<^sub>0 # v # va) \\<or>\n                         C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "proof (cases \"dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "case True"], ["proof (state)\nthis:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "hence \"(C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and> C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps)) \\<or> (C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1)\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1", "using \"3.hyps\"(1) True p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<in> set (p\\<^sub>2 # ps) \\<and>\n                    ?C\\<^sub>1 \\<in> set (p\\<^sub>2 # ps) \\<or>\n                    ?C\\<^sub>0 = c\\<^sub>0 \\<and> ?C\\<^sub>1 = c\\<^sub>1\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs True \"3.prems\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = c\\<^sub>0 \\<and> C\\<^sub>1' = c\\<^sub>1\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "case False"], ["proof (state)\nthis:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "hence \"(C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and> C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps)) \\<or> (C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1", "using \"3.hyps\"(2) p\\<^sub>1_def False"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<in> set (p\\<^sub>2 # ps) \\<and>\n                    ?C\\<^sub>1 \\<in> set (p\\<^sub>2 # ps) \\<or>\n                    ?C\\<^sub>0 = p\\<^sub>0 \\<and> ?C\\<^sub>1 = ?x\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs False \"3.prems\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "using A"], ["proof (prove)\nusing this:\n  C\\<^sub>0' \\<in> set (p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1' \\<in> set (p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0' = p\\<^sub>0 \\<and> C\\<^sub>1' = p\\<^sub>1\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  p\\<^sub>1 \\<in> set (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n    C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n    C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<and>\n  C\\<^sub>1 \\<in> set (p\\<^sub>0 # p\\<^sub>2 # ps) \\<or>\n  C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [] \\<and> C\\<^sub>1 \\<in> set [] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       C\\<^sub>0 \\<in> set [uu_] \\<and> C\\<^sub>1 \\<in> set [uu_] \\<or>\n       C\\<^sub>0 = c\\<^sub>0 \\<and> C\\<^sub>1 = c\\<^sub>1", "qed auto"], ["", "lemma find_closest_pair_c0_ne_c1:\n  \"c\\<^sub>0 \\<noteq> c\\<^sub>1 \\<Longrightarrow> distinct ps \\<Longrightarrow> (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct ps;\n     (C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1 rule: find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            p\\<^sub>0 \\<noteq> x; distinct (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<noteq> ?C\\<^sub>1\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   p\\<^sub>0 \\<noteq> ?x; distinct (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<noteq> ?C\\<^sub>1\n  c\\<^sub>0 \\<noteq> c\\<^sub>1\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            p\\<^sub>0 \\<noteq> x; distinct (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            p\\<^sub>0 \\<noteq> x; distinct (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "hence A: \"p\\<^sub>0 \\<noteq> p\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. p\\<^sub>0 \\<noteq> p\\<^sub>1", "using \"3.prems\"(1,2)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  c\\<^sub>0 \\<noteq> c\\<^sub>1\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. p\\<^sub>0 \\<noteq> p\\<^sub>1", "by (metis distinct.simps(2) find_closest_set length_pos_if_in_set list.set_intros(1))"], ["proof (state)\nthis:\n  p\\<^sub>0 \\<noteq> p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            p\\<^sub>0 \\<noteq> x; distinct (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1;\n        c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "proof (cases \"dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "case True"], ["proof (state)\nthis:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "hence \"C\\<^sub>0' \\<noteq> C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<noteq> C\\<^sub>1'", "using \"3.hyps\"(1) \"3.prems\"(1,2) True p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<noteq> ?C\\<^sub>1\n  c\\<^sub>0 \\<noteq> c\\<^sub>1\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<noteq> C\\<^sub>1'", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs True \"3.prems\"(3)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "case False"], ["proof (state)\nthis:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "hence \"C\\<^sub>0' \\<noteq> C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<noteq> C\\<^sub>1'", "using \"3.hyps\"(2) \"3.prems\"(2) A False p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   p\\<^sub>0 \\<noteq> ?x; distinct (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<noteq> ?C\\<^sub>1\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  p\\<^sub>0 \\<noteq> p\\<^sub>1\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' \\<noteq> C\\<^sub>1'", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs False \"3.prems\"(3)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 \\<noteq> C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0' \\<noteq> C\\<^sub>1'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>c\\<^sub>0 \\<noteq> c\\<^sub>1; distinct [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 \\<noteq> C\\<^sub>1", "qed auto"], ["", "lemma find_closest_pair_dist_mono:\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"dist C\\<^sub>0 C\\<^sub>1 \\<le> dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using assms"], ["proof (prove)\nusing this:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1 rule: find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> dist\n(case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> dist\n                              (case C\\<^sub>0 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case C\\<^sub>1 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                             \\<le> dist\n                                    (case p\\<^sub>0 of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y))\n                                    (case x of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y));\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (case C\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case C\\<^sub>1 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                         \\<le> dist\n                                (case c\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case c\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (case ?C\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case ?C\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case c\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case c\\<^sub>1 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (case ?C\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case ?C\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case ?x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> dist\n(case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> dist\n                              (case C\\<^sub>0 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case C\\<^sub>1 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                             \\<le> dist\n                                    (case p\\<^sub>0 of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y))\n                                    (case x of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y));\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (case C\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case C\\<^sub>1 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                         \\<le> dist\n                                (case c\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case c\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> dist\n(case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n(case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                                     \\<le> dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> dist\n                              (case C\\<^sub>0 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case C\\<^sub>1 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                             \\<le> dist\n                                    (case p\\<^sub>0 of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y))\n                                    (case x of\n                                     (x, y) \\<Rightarrow>\n (real_of_int x, real_of_int y));\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (case C\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case C\\<^sub>1 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                         \\<le> dist\n                                (case c\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case c\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "proof (cases \"dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "case True"], ["proof (state)\nthis:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence \"dist C\\<^sub>0' C\\<^sub>1' \\<le> dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using \"3.hyps\"(1) True p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (case ?C\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case ?C\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case c\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case c\\<^sub>1 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by simp"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "moreover"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs True \"3.prems\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "ultimately"], ["proof (chain)\npicking this:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by simp"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "case False"], ["proof (state)\nthis:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "note defs = p\\<^sub>1_def C'_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "hence \"dist C\\<^sub>0' C\\<^sub>1' \\<le> dist p\\<^sub>0 p\\<^sub>1\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using \"3.hyps\"(2) False p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (case ?C\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case ?C\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case ?x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by blast"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "moreover"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs False \"3.prems\"(1)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by (auto split: prod.splits, metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "ultimately"], ["proof (chain)\npicking this:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using False"], ["proof (prove)\nusing this:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by simp"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       (C\\<^sub>0, C\\<^sub>1) =\n       find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_] \\<Longrightarrow>\n       dist\n        (case C\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "qed auto"], ["", "lemma find_closest_pair_dist:\n  assumes \"sorted_snd ps\" \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"sparse (dist C\\<^sub>0 C\\<^sub>1) (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "using assms"], ["proof (prove)\nusing this:\n  sorted_snd ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1 rule: find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [])\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [uu_])\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> sparse\n(dist\n  (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n(set (v # va));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> sparse\n                              (dist\n                                (case C\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case C\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y)))\n                              (set (v # va));\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set (p\\<^sub>0 # v # va))", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?C\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?C\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (p\\<^sub>2 # ps))\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?C\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?C\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (p\\<^sub>2 # ps))\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [])\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [uu_])\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> sparse\n(dist\n  (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n(set (v # va));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> sparse\n                              (dist\n                                (case C\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case C\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y)))\n                              (set (v # va));\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set (p\\<^sub>0 # v # va))", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [])\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [uu_])\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<And>x C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> sparse\n(dist\n  (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n(set (v # va));\n        \\<And>x C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va)\\<rbrakk>\n           \\<Longrightarrow> sparse\n                              (dist\n                                (case C\\<^sub>0 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y))\n                                (case C\\<^sub>1 of\n                                 (x, y) \\<Rightarrow>\n                                   (real_of_int x, real_of_int y)))\n                              (set (v # va));\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set (p\\<^sub>0 # v # va))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "assume \"\\<exists>p \\<in> set (p\\<^sub>2 # ps). dist p\\<^sub>0 p < dist c\\<^sub>0 c\\<^sub>1\""], ["proof (state)\nthis:\n  \\<exists>p\\<in>set (p\\<^sub>2 # ps).\n     dist\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "hence A: \"\\<forall>p \\<in> set (p\\<^sub>2 # ps). dist p\\<^sub>0 p\\<^sub>1 \\<le> dist p\\<^sub>0 p\" \"dist p\\<^sub>0 p\\<^sub>1 < dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set (p\\<^sub>2 # ps).\n     dist\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n       dist\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) &&&\n    dist\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    < dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using p\\<^sub>1_def find_closest_dist \"3.prems\"(1) le_less_trans"], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>set (p\\<^sub>2 # ps).\n     dist\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<lbrakk>sorted_snd (?p # ?ps);\n   \\<exists>q\\<in>set ?ps.\n      dist (case ?p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < ?\\<delta>\\<rbrakk>\n  \\<Longrightarrow> \\<forall>q\\<in>set ?ps.\n                       dist\n                        (case ?p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case find_closest ?p ?\\<delta> ?ps of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                       \\<le> dist\n                              (case ?p of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case q of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n       dist\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<le> dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) &&&\n    dist\n     (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    < dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by blast+"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n     dist\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  dist\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "hence B: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\""], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0', C\\<^sub>1') =\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)", "using A(2) p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0', C\\<^sub>1') =\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"sparse (dist C\\<^sub>0' C\\<^sub>1') (set (p\\<^sub>2 # ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>2 # ps))", "using \"3.hyps\"(2)[of p\\<^sub>1 C\\<^sub>0' C\\<^sub>1'] p\\<^sub>1_def C'_def \"3.prems\"(1) A(2) sorted_snd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>p\\<^sub>1 =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case p\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   sorted_snd (p\\<^sub>2 # ps);\n   (C\\<^sub>0', C\\<^sub>1') =\n   find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case C\\<^sub>0' of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case C\\<^sub>1' of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (p\\<^sub>2 # ps))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  dist\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>2 # ps))", "by fastforce"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "moreover"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"dist C\\<^sub>0' C\\<^sub>1' \\<le> dist p\\<^sub>0 p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using C'_def find_closest_pair_dist_mono"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  (?C\\<^sub>0, ?C\\<^sub>1) =\n  find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps \\<Longrightarrow>\n  dist\n   (case ?C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case ?C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case ?c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case ?c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by blast"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "ultimately"], ["proof (chain)\npicking this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"sparse (dist C\\<^sub>0' C\\<^sub>1') (set (p\\<^sub>0 # p\\<^sub>2 # ps))\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "using A sparse_identity order_trans"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n     dist\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<le> dist\n            (case p\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  dist\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  < dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<lbrakk>sparse ?\\<delta> (set ?ps);\n   \\<forall>p\\<in>set ?ps.\n      ?\\<delta>\n      \\<le> dist\n             (case ?p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\\<rbrakk>\n  \\<Longrightarrow> sparse ?\\<delta> (set (?p\\<^sub>0 # ?ps))\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "by blast"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> ?P \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "using B"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "by (metis \"3.prems\"(2) Pair_inject)"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "assume A: \"\\<not> (\\<exists>p \\<in> set (p\\<^sub>2 # ps). dist p\\<^sub>0 p < dist c\\<^sub>0 c\\<^sub>1)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < dist\n                (case c\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case c\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "hence B: \"dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < dist\n                (case c\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case c\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using find_closest_set[of \"p\\<^sub>2 # ps\" p\\<^sub>0 \"dist c\\<^sub>0 c\\<^sub>1\"] p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < dist\n                (case c\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case c\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n  0 < length (p\\<^sub>2 # ps) \\<Longrightarrow>\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<in> set (p\\<^sub>2 # ps)\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by auto"], ["proof (state)\nthis:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "hence C: \"(C\\<^sub>0', C\\<^sub>1') = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\""], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0', C\\<^sub>1') =\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)", "using B p\\<^sub>1_def"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0', C\\<^sub>1') =\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"sparse (dist C\\<^sub>0' C\\<^sub>1') (set (p\\<^sub>2 # ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>2 # ps))", "using \"3.hyps\"(1)[of p\\<^sub>1 C\\<^sub>0' C\\<^sub>1'] p\\<^sub>1_def C'_def B \"3.prems\" sorted_snd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>p\\<^sub>1 =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   sorted_snd (p\\<^sub>2 # ps);\n   (C\\<^sub>0', C\\<^sub>1') =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case C\\<^sub>0' of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case C\\<^sub>1' of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (p\\<^sub>2 # ps))\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>2 # ps))", "by simp"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "moreover"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"dist C\\<^sub>0' C\\<^sub>1' \\<le> dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using C'_def find_closest_pair_dist_mono"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  (?C\\<^sub>0, ?C\\<^sub>1) =\n  find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps \\<Longrightarrow>\n  dist\n   (case ?C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case ?C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case ?c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case ?c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by blast"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "ultimately"], ["proof (chain)\npicking this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"sparse (dist C\\<^sub>0' C\\<^sub>1') (set (p\\<^sub>0 # p\\<^sub>2 # ps))\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "using A sparse_identity[of \"dist C\\<^sub>0' C\\<^sub>1'\" \"p\\<^sub>2 # ps\" p\\<^sub>0] order_trans"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>2 # ps))\n  dist\n   (case C\\<^sub>0' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1' of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n             dist\n              (case p\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case p of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             < dist\n                (case c\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case c\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n  \\<lbrakk>sparse\n            (dist\n              (case C\\<^sub>0' of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case C\\<^sub>1' of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (set (p\\<^sub>2 # ps));\n   \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n      dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      \\<le> dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case C\\<^sub>0' of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case C\\<^sub>1' of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "by force"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>set (p\\<^sub>2 # ps).\n               dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case c\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case c\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y))) \\<Longrightarrow>\n    sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "using C"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n  (C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set (p\\<^sub>0 # p\\<^sub>2 # ps))", "by (metis \"3.prems\"(2) Pair_inject)"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [])\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_]\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case C\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case C\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set [uu_])", "qed (auto simp: sparse_def)"], ["", "declare find_closest_pair.simps [simp del]"], ["", "fun combine_tm :: \"(point \\<times> point) \\<Rightarrow> (point \\<times> point) \\<Rightarrow> int \\<Rightarrow> point list \\<Rightarrow> (point \\<times> point) tm\" where\n  \"combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =1 (\n    let (c\\<^sub>0, c\\<^sub>1) = if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) in\n    do {\n      ps' <- filter_tm (\\<lambda>p. dist p (l, snd p) < dist c\\<^sub>0 c\\<^sub>1) ps;\n      find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps'\n    }\n  )\""], ["", "fun combine :: \"(point \\<times> point) \\<Rightarrow> (point \\<times> point) \\<Rightarrow> int \\<Rightarrow> point list \\<Rightarrow> (point \\<times> point)\" where\n  \"combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps = (\n    let (c\\<^sub>0, c\\<^sub>1) = if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) in\n    let ps' = filter (\\<lambda>p. dist p (l, snd p) < dist c\\<^sub>0 c\\<^sub>1) ps in\n    find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n  )\""], ["", "lemma combine_eq_val_combine_tm:\n  \"val (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val\n     (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n       (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps) =\n    combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps", "by (auto simp: filter_eq_val_filter_tm find_closest_pair_eq_val_find_closest_pair_tm)"], ["", "lemma combine_set:\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"(c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps) \\<or> (c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L) \\<or> (c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = (if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        (if dist\n             (case p\\<^sub>0\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>1\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            < dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n         else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "define ps' where ps'_def: \"ps' = filter (\\<lambda>p. dist p (l, snd p) < dist C\\<^sub>0' C\\<^sub>1') ps\""], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "obtain C\\<^sub>0 C\\<^sub>1 where C_def: \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "note defs = C'_def ps'_def C_def"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "have \"(C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps') \\<or> (C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps' \\<or>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "using C_def find_closest_pair_set"], ["proof (prove)\nusing this:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n  (?C\\<^sub>0, ?C\\<^sub>1) =\n  find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps \\<Longrightarrow>\n  ?C\\<^sub>0 \\<in> set ?ps \\<and> ?C\\<^sub>1 \\<in> set ?ps \\<or>\n  ?C\\<^sub>0 = ?c\\<^sub>0 \\<and> ?C\\<^sub>1 = ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps' \\<or>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "by blast+"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps' \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "hence \"(C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps)\\<or> (C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1')\""], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps' \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "using ps'_def"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set ps' \\<and> C\\<^sub>1 \\<in> set ps' \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "have \"C\\<^sub>0 = c\\<^sub>0\" \"C\\<^sub>1 = c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "using assms defs"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "apply (auto split: if_splits prod.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1\n 4. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "using C'_def"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set ps \\<and> C\\<^sub>1 \\<in> set ps \\<or>\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n    c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  c\\<^sub>0 \\<in> set ps \\<and> c\\<^sub>1 \\<in> set ps \\<or>\n  c\\<^sub>0 = p\\<^sub>0\\<^sub>L \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>L \\<or>\n  c\\<^sub>0 = p\\<^sub>0\\<^sub>R \\<and> c\\<^sub>1 = p\\<^sub>1\\<^sub>R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma combine_c0_ne_c1:\n  assumes \"p\\<^sub>0\\<^sub>L \\<noteq> p\\<^sub>1\\<^sub>L\" \"p\\<^sub>0\\<^sub>R \\<noteq> p\\<^sub>1\\<^sub>R\" \"distinct ps\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"c\\<^sub>0 \\<noteq> c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = (if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        (if dist\n             (case p\\<^sub>0\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>1\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            < dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n         else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "define ps' where ps'_def: \"ps' = filter (\\<lambda>p. dist p (l, snd p) < dist C\\<^sub>0' C\\<^sub>1') ps\""], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain C\\<^sub>0 C\\<^sub>1 where C_def: \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "note defs = C'_def ps'_def C_def"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"C\\<^sub>0 \\<noteq> C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "using defs find_closest_pair_c0_ne_c1[of C\\<^sub>0' C\\<^sub>1' ps'] assms"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n  \\<lbrakk>C\\<^sub>0' \\<noteq> C\\<^sub>1'; distinct ps';\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 \\<noteq> ?C\\<^sub>1\n  p\\<^sub>0\\<^sub>L \\<noteq> p\\<^sub>1\\<^sub>L\n  p\\<^sub>0\\<^sub>R \\<noteq> p\\<^sub>1\\<^sub>R\n  distinct ps\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"C\\<^sub>0 = c\\<^sub>0\" \"C\\<^sub>1 = c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "using assms(4) defs"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "apply (auto split: if_splits prod.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1\n 4. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<noteq> c\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>0 \\<noteq> c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma combine_dist:\n  assumes \"sorted_snd ps\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse (dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L) ps\\<^sub>L\" \"sparse (dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R) ps\\<^sub>R\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "obtain C\\<^sub>0' C\\<^sub>1' where C'_def: \"(C\\<^sub>0', C\\<^sub>1') = (if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0' C\\<^sub>1'.\n        (C\\<^sub>0', C\\<^sub>1') =\n        (if dist\n             (case p\\<^sub>0\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>1\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            < dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n         else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "define ps' where ps'_def: \"ps' = filter (\\<lambda>p. dist p (l, snd p) < dist C\\<^sub>0' C\\<^sub>1') ps\""], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "obtain C\\<^sub>0 C\\<^sub>1 where C_def: \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "note defs = C'_def ps'_def C_def"], ["proof (state)\nthis:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have EQ: \"C\\<^sub>0 = c\\<^sub>0\" \"C\\<^sub>1 = c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "using defs assms(7)"], ["proof (prove)\nusing this:\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "apply (auto split: if_splits prod.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        (c\\<^sub>0, c\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        (c\\<^sub>0, c\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>L = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>L = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        (c\\<^sub>0, c\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b); p\\<^sub>0\\<^sub>R = (x1c, x2c);\n        dist (real_of_int x1a, real_of_int x2a)\n         (real_of_int x1, real_of_int x2)\n        < dist (real_of_int x1c, real_of_int x2c)\n           (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1\n 4. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>C\\<^sub>0' = (x1a, x2a); C\\<^sub>1' = (x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        p\\<^sub>0\\<^sub>R = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        (c\\<^sub>0, c\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>1\\<^sub>L = (x1b, x2b); p\\<^sub>0\\<^sub>L = (x1c, x2c);\n        \\<not> dist (real_of_int x1c, real_of_int x2c)\n                (real_of_int x1b, real_of_int x2b)\n               < dist (real_of_int x1a, real_of_int x2a)\n                  (real_of_int x1, real_of_int x2)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have ps': \"ps' = filter (\\<lambda>p. l - dist C\\<^sub>0' C\\<^sub>1' < fst p \\<and> fst p < l + dist C\\<^sub>0' C\\<^sub>1') ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps' =\n    filter\n     (\\<lambda>p.\n         real_of_int l -\n         dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         < real_of_int (fst p) \\<and>\n         real_of_int (fst p)\n         < real_of_int l +\n           dist\n            (case C\\<^sub>0' of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case C\\<^sub>1' of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps", "using ps'_def dist_transform"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (dist (case ?p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case (?l, snd ?p) of\n     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   < ?\\<delta>) =\n  (real_of_int ?l - ?\\<delta> < real_of_int (fst ?p) \\<and>\n   real_of_int (fst ?p) < real_of_int ?l + ?\\<delta>)\n\ngoal (1 subgoal):\n 1. ps' =\n    filter\n     (\\<lambda>p.\n         real_of_int l -\n         dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         < real_of_int (fst p) \\<and>\n         real_of_int (fst p)\n         < real_of_int l +\n           dist\n            (case C\\<^sub>0' of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case C\\<^sub>1' of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps", "by simp"], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>p.\n       real_of_int l -\n       dist\n        (case C\\<^sub>0' of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1' of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < real_of_int (fst p) \\<and>\n       real_of_int (fst p)\n       < real_of_int l +\n         dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have ps\\<^sub>L: \"sparse (dist C\\<^sub>0' C\\<^sub>1') ps\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L", "using assms(3,5) C'_def sparse_def"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  sparse\n   (dist\n     (case p\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L", "apply (auto split: if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>\\<delta> ps.\n                   sparse \\<delta> ps =\n                   (\\<forall>p\\<^sub>0\\<in>ps.\n                       \\<forall>p\\<^sub>1\\<in>ps.\n                          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n                          \\<delta>\n                          \\<le> dist\n                                 (case p\\<^sub>0 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y))\n                                 (case p\\<^sub>1 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y)));\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<^sub>0\\<in>ps\\<^sub>L.\n           \\<forall>p\\<^sub>1\\<in>ps\\<^sub>L.\n              p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n              dist\n               (case p\\<^sub>0\\<^sub>L of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>L of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<le> dist\n                     (case p\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case p\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case p\\<^sub>0\\<^sub>R of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1\\<^sub>R of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        (a, b) \\<in> ps\\<^sub>L; (aa, ba) \\<in> ps\\<^sub>L;\n        C\\<^sub>0' = p\\<^sub>0\\<^sub>R; C\\<^sub>1' = p\\<^sub>1\\<^sub>R;\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>R of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>R of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               \\<le> dist (real_of_int a, real_of_int b)\n                      (real_of_int aa, real_of_int ba)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>\\<delta> ps.\n                   sparse \\<delta> ps =\n                   (\\<forall>p\\<^sub>0\\<in>ps.\n                       \\<forall>p\\<^sub>1\\<in>ps.\n                          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n                          \\<delta>\n                          \\<le> dist\n                                 (case p\\<^sub>0 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y))\n                                 (case p\\<^sub>1 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y)));\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<^sub>0\\<in>ps\\<^sub>L.\n           \\<forall>p\\<^sub>1\\<in>ps\\<^sub>L.\n              p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n              dist\n               (case p\\<^sub>0\\<^sub>L of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>L of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<le> dist\n                     (case p\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case p\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               < dist\n                  (case p\\<^sub>0\\<^sub>R of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1\\<^sub>R of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        (a, b) \\<in> ps\\<^sub>L; (aa, ba) \\<in> ps\\<^sub>L;\n        C\\<^sub>0' = p\\<^sub>0\\<^sub>R; C\\<^sub>1' = p\\<^sub>1\\<^sub>R;\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>R of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>R of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               \\<le> dist (real_of_int a, real_of_int b)\n                      (real_of_int aa, real_of_int ba)\\<rbrakk>\n       \\<Longrightarrow> b = ba", "by force+"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have ps\\<^sub>R: \"sparse (dist C\\<^sub>0' C\\<^sub>1') ps\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R", "using assms(4,6) C'_def sparse_def"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  sparse\n   (dist\n     (case p\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n  (C\\<^sub>0', C\\<^sub>1') =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1' of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R", "apply (auto split: if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>\\<delta> ps.\n                   sparse \\<delta> ps =\n                   (\\<forall>p\\<^sub>0\\<in>ps.\n                       \\<forall>p\\<^sub>1\\<in>ps.\n                          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n                          \\<delta>\n                          \\<le> dist\n                                 (case p\\<^sub>0 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y))\n                                 (case p\\<^sub>1 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y)));\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        \\<forall>p\\<^sub>0\\<in>ps\\<^sub>R.\n           \\<forall>p\\<^sub>1\\<in>ps\\<^sub>R.\n              p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n              dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<le> dist\n                     (case p\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case p\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        dist\n         (case p\\<^sub>0\\<^sub>L of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>L of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case p\\<^sub>0\\<^sub>R of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1\\<^sub>R of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        (a, b) \\<in> ps\\<^sub>R; (aa, ba) \\<in> ps\\<^sub>R;\n        C\\<^sub>0' = p\\<^sub>0\\<^sub>L; C\\<^sub>1' = p\\<^sub>1\\<^sub>L;\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               \\<le> dist (real_of_int a, real_of_int b)\n                      (real_of_int aa, real_of_int ba)\\<rbrakk>\n       \\<Longrightarrow> a = aa\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<And>\\<delta> ps.\n                   sparse \\<delta> ps =\n                   (\\<forall>p\\<^sub>0\\<in>ps.\n                       \\<forall>p\\<^sub>1\\<in>ps.\n                          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n                          \\<delta>\n                          \\<le> dist\n                                 (case p\\<^sub>0 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y))\n                                 (case p\\<^sub>1 of\n                                  (x, y) \\<Rightarrow>\n                                    (real_of_int x, real_of_int y)));\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        \\<forall>p\\<^sub>0\\<in>ps\\<^sub>R.\n           \\<forall>p\\<^sub>1\\<in>ps\\<^sub>R.\n              p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n              dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<le> dist\n                     (case p\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case p\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        dist\n         (case p\\<^sub>0\\<^sub>L of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>L of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case p\\<^sub>0\\<^sub>R of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1\\<^sub>R of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        (a, b) \\<in> ps\\<^sub>R; (aa, ba) \\<in> ps\\<^sub>R;\n        C\\<^sub>0' = p\\<^sub>0\\<^sub>L; C\\<^sub>1' = p\\<^sub>1\\<^sub>L;\n        \\<not> dist\n                (case p\\<^sub>0\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1\\<^sub>L of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               \\<le> dist (real_of_int a, real_of_int b)\n                      (real_of_int aa, real_of_int ba)\\<rbrakk>\n       \\<Longrightarrow> b = ba", "by force+"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have \"sorted_snd ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd ps'", "using ps'_def assms(1) sorted_snd_def sorted_wrt_filter"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  sorted_snd ps\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  sorted_wrt ?f ?xs \\<Longrightarrow> sorted_wrt ?f (filter ?P ?xs)\n\ngoal (1 subgoal):\n 1. sorted_snd ps'", "by blast"], ["proof (state)\nthis:\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "hence *: \"sparse (dist C\\<^sub>0 C\\<^sub>1) (set ps')\""], ["proof (prove)\nusing this:\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps')", "using find_closest_pair_dist C_def"], ["proof (prove)\nusing this:\n  sorted_snd ps'\n  \\<lbrakk>sorted_snd ?ps;\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?C\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?C\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set ?ps)\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps')", "by simp"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps')\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have \"\\<forall>p\\<^sub>0 \\<in> set ps. \\<forall>p\\<^sub>1 \\<in> set ps. p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and> dist p\\<^sub>0 p\\<^sub>1 < dist C\\<^sub>0' C\\<^sub>1' \\<longrightarrow> p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<^sub>0\\<in>set ps.\n       \\<forall>p\\<^sub>1\\<in>set ps.\n          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n          dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          < dist\n             (case C\\<^sub>0' of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case C\\<^sub>1' of\n              (x, y) \\<Rightarrow>\n                (real_of_int x, real_of_int y)) \\<longrightarrow>\n          p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'", "using set_band_filter ps' ps\\<^sub>L ps\\<^sub>R assms(2,3,4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p\\<^sub>0 \\<in> set ?ps; ?p\\<^sub>1 \\<in> set ?ps;\n   ?p\\<^sub>0 \\<noteq> ?p\\<^sub>1;\n   dist\n    (case ?p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   < ?\\<delta>;\n   set ?ps = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R; sparse ?\\<delta> ?ps\\<^sub>L;\n   sparse ?\\<delta> ?ps\\<^sub>R; \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> ?l;\n   \\<forall>p\\<in>?ps\\<^sub>R. ?l \\<le> fst p;\n   ?ps' =\n   filter\n    (\\<lambda>p.\n        real_of_int ?l - ?\\<delta> < real_of_int (fst p) \\<and>\n        real_of_int (fst p) < real_of_int ?l + ?\\<delta>)\n    ?ps\\<rbrakk>\n  \\<Longrightarrow> ?p\\<^sub>0 \\<in> set ?ps' \\<and>\n                    ?p\\<^sub>1 \\<in> set ?ps'\n  ps' =\n  filter\n   (\\<lambda>p.\n       real_of_int l -\n       dist\n        (case C\\<^sub>0' of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case C\\<^sub>1' of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < real_of_int (fst p) \\<and>\n       real_of_int (fst p)\n       < real_of_int l +\n         dist\n          (case C\\<^sub>0' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1' of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  sparse\n   (dist\n     (case C\\<^sub>0' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1' of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n  set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<^sub>0\\<in>set ps.\n       \\<forall>p\\<^sub>1\\<in>set ps.\n          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n          dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          < dist\n             (case C\\<^sub>0' of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case C\\<^sub>1' of\n              (x, y) \\<Rightarrow>\n                (real_of_int x, real_of_int y)) \\<longrightarrow>\n          p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "have \"dist C\\<^sub>0 C\\<^sub>1 \\<le> dist C\\<^sub>0' C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using C_def find_closest_pair_dist_mono"], ["proof (prove)\nusing this:\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0', C\\<^sub>1') ps'\n  (?C\\<^sub>0, ?C\\<^sub>1) =\n  find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps \\<Longrightarrow>\n  dist\n   (case ?C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case ?C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case ?c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case ?c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by blast"], ["proof (state)\nthis:\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case C\\<^sub>0' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case C\\<^sub>1' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case C\\<^sub>0' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case C\\<^sub>1' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"\\<forall>p\\<^sub>0 \\<in> set ps. \\<forall>p\\<^sub>1 \\<in> set ps. p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and> dist p\\<^sub>0 p\\<^sub>1 < dist C\\<^sub>0 C\\<^sub>1 \\<longrightarrow> p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0' of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1' of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n  dist\n   (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case C\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case C\\<^sub>0' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case C\\<^sub>1' of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<^sub>0\\<in>set ps.\n       \\<forall>p\\<^sub>1\\<in>set ps.\n          p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n          dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          < dist\n             (case C\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case C\\<^sub>1 of\n              (x, y) \\<Rightarrow>\n                (real_of_int x, real_of_int y)) \\<longrightarrow>\n          p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'", "by simp"], ["proof (state)\nthis:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "hence \"sparse (dist C\\<^sub>0 C\\<^sub>1) (set ps)\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "using sparse_def *"], ["proof (prove)\nusing this:\n  \\<forall>p\\<^sub>0\\<in>set ps.\n     \\<forall>p\\<^sub>1\\<in>set ps.\n        p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<and>\n        dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        < dist\n           (case C\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<longrightarrow>\n        p\\<^sub>0 \\<in> set ps' \\<and> p\\<^sub>1 \\<in> set ps'\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps')\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "by (meson not_less)"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "using EQ"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps)\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "by blast"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare combine.simps [simp del]"], ["", "declare combine_tm.simps[simp del]"], ["", "subsubsection \"Divide and Conquer Algorithm\""], ["", "declare split_at_take_drop_conv [simp add]"], ["", "function closest_pair_rec_tm :: \"point list \\<Rightarrow> (point list \\<times> point \\<times> point) tm\" where\n  \"closest_pair_rec_tm xs =1 (\n    do {\n      n <- length_tm xs;\n      if n \\<le> 3 then\n        do {\n          ys <- mergesort_tm snd xs;\n          p <- closest_pair_bf_tm xs;\n          return (ys, p)\n        }\n      else\n        do {\n          (xs\\<^sub>L, xs\\<^sub>R) <- split_at_tm (n div 2) xs;\n          (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) <- closest_pair_rec_tm xs\\<^sub>L;\n          (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) <- closest_pair_rec_tm xs\\<^sub>R;\n          ys <- merge_tm snd ys\\<^sub>L ys\\<^sub>R;\n          (p\\<^sub>0, p\\<^sub>1) <- combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys;\n          return (ys, p\\<^sub>0, p\\<^sub>1)\n       }\n    }\n  )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. (\\<And>xs. x = xs \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>xs xsa.\n       xs = xsa \\<Longrightarrow>\n       length_tm xs \\<bind>\n       (\\<lambda>n.\n           if n \\<le> 3\n           then mergesort_tm snd xs \\<bind>\n                (\\<lambda>ys.\n                    closest_pair_bf_tm xs \\<bind>\n                    (\\<lambda>p. return (ys, p)))\n           else split_at_tm (n div 2) xs \\<bind>\n                (\\<lambda>(xs\\<^sub>L, xs\\<^sub>R).\n                    closest_pair_rec_tm_sumC xs\\<^sub>L \\<bind>\n                    (\\<lambda>(ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                        p\\<^sub>1\\<^sub>L).\n                        closest_pair_rec_tm_sumC xs\\<^sub>R \\<bind>\n                        (\\<lambda>(ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                            p\\<^sub>1\\<^sub>R).\n                            merge_tm snd ys\\<^sub>L ys\\<^sub>R \\<bind>\n                            (\\<lambda>ys.\n                                combine_tm\n                                 (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                                 (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                                 (fst (hd xs\\<^sub>R)) ys \\<bind>\n                                (\\<lambda>(p\\<^sub>0, p\\<^sub>1).\n                                    return\n                                     (ys, p\\<^sub>0,\np\\<^sub>1))))))) \\<bind>\n       tick =1\n       length_tm xsa \\<bind>\n       (\\<lambda>n.\n           if n \\<le> 3\n           then mergesort_tm snd xsa \\<bind>\n                (\\<lambda>ys.\n                    closest_pair_bf_tm xsa \\<bind>\n                    (\\<lambda>p. return (ys, p)))\n           else split_at_tm (n div 2) xsa \\<bind>\n                (\\<lambda>(xs\\<^sub>L, xs\\<^sub>R).\n                    closest_pair_rec_tm_sumC xs\\<^sub>L \\<bind>\n                    (\\<lambda>(ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                        p\\<^sub>1\\<^sub>L).\n                        closest_pair_rec_tm_sumC xs\\<^sub>R \\<bind>\n                        (\\<lambda>(ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                            p\\<^sub>1\\<^sub>R).\n                            merge_tm snd ys\\<^sub>L ys\\<^sub>R \\<bind>\n                            (\\<lambda>ys.\n                                combine_tm\n                                 (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                                 (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                                 (fst (hd xs\\<^sub>R)) ys \\<bind>\n                                (\\<lambda>(p\\<^sub>0, p\\<^sub>1).\n                                    return (ys, p\\<^sub>0, p\\<^sub>1)))))))", "by pat_completeness auto"], ["", "termination closest_pair_rec_tm"], ["proof (prove)\ngoal (1 subgoal):\n 1. All closest_pair_rec_tm_dom", "by (relation \"Wellfounded.measure (\\<lambda>xs. length xs)\")\n     (auto simp add: length_eq_val_length_tm split_at_eq_val_split_at_tm)"], ["", "function closest_pair_rec :: \"point list \\<Rightarrow> (point list * point * point)\" where\n  \"closest_pair_rec xs = (\n    let n = length xs in\n    if n \\<le> 3 then\n      (mergesort snd xs, closest_pair_bf xs)\n    else\n      let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n      let (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L in\n      let (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R in\n      let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n      (ys, combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys)\n  )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. (\\<And>xs. x = xs \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>xs xsa.\n       xs = xsa \\<Longrightarrow>\n       (let n = length xs\n        in if n \\<le> 3 then (mergesort snd xs, closest_pair_bf xs)\n           else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n                    (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                      closest_pair_rec_sumC xs\\<^sub>L;\n                    (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                      closest_pair_rec_sumC xs\\<^sub>R;\n                    ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                in (ys,\n                    combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                     (fst (hd xs\\<^sub>R)) ys)) =\n       (let n = length xsa\n        in if n \\<le> 3 then (mergesort snd xsa, closest_pair_bf xsa)\n           else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xsa;\n                    (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                      closest_pair_rec_sumC xs\\<^sub>L;\n                    (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                      closest_pair_rec_sumC xs\\<^sub>R;\n                    ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                in (ys,\n                    combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                     (fst (hd xs\\<^sub>R)) ys))", "by pat_completeness auto"], ["", "termination closest_pair_rec"], ["proof (prove)\ngoal (1 subgoal):\n 1. All closest_pair_rec_dom", "by (relation \"Wellfounded.measure (\\<lambda>xs. length xs)\")\n     (auto simp: Let_def)"], ["", "declare split_at_take_drop_conv [simp del]"], ["", "lemma closest_pair_rec_simps:\n  assumes \"n = length xs\" \"\\<not> (n \\<le> 3)\"\n  shows \"closest_pair_rec xs = (\n    let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n    let (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L in\n    let (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R in\n    let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n    (ys, combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair_rec xs =\n    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n           closest_pair_rec xs\\<^sub>L;\n         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n           closest_pair_rec xs\\<^sub>R;\n         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n     in (ys,\n         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys))", "using assms"], ["proof (prove)\nusing this:\n  n = length xs\n  \\<not> n \\<le> 3\n\ngoal (1 subgoal):\n 1. closest_pair_rec xs =\n    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n           closest_pair_rec xs\\<^sub>L;\n         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n           closest_pair_rec xs\\<^sub>R;\n         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n     in (ys,\n         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R)) ys))", "by (auto simp: Let_def)"], ["", "declare closest_pair_rec.simps [simp del]"], ["", "lemma closest_pair_rec_eq_val_closest_pair_rec_tm:\n  \"val (closest_pair_rec_tm xs) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "proof (induction rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          Time_Monad.val (closest_pair_rec_tm ys) =\n          closest_pair_rec ys \\<Longrightarrow>\n       Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     Time_Monad.val (closest_pair_rec_tm ys) = closest_pair_rec ys\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          Time_Monad.val (closest_pair_rec_tm ys) =\n          closest_pair_rec ys \\<Longrightarrow>\n       Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "define n where \"n = length xs\""], ["proof (state)\nthis:\n  n = length xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          Time_Monad.val (closest_pair_rec_tm ys) =\n          closest_pair_rec ys \\<Longrightarrow>\n       Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "obtain xs\\<^sub>L xs\\<^sub>R where xs_def: \"(xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs\\<^sub>L xs\\<^sub>R.\n        (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          Time_Monad.val (closest_pair_rec_tm ys) =\n          closest_pair_rec ys \\<Longrightarrow>\n       Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "note defs = n_def xs_def"], ["proof (state)\nthis:\n  n = length xs\n  (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          Time_Monad.val (closest_pair_rec_tm ys) =\n          closest_pair_rec ys \\<Longrightarrow>\n       Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs\n 2. \\<not> ?P \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "assume \"n \\<le> 3\""], ["proof (state)\nthis:\n  n \\<le> 3\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs\n 2. \\<not> ?P \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "then"], ["proof (chain)\npicking this:\n  n \\<le> 3", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> 3\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "using defs"], ["proof (prove)\nusing this:\n  n \\<le> 3\n  n = length xs\n  (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "by (auto simp: length_eq_val_length_tm mergesort_eq_val_mergesort_tm\n                     closest_pair_bf_eq_val_closest_pair_bf_tm closest_pair_rec.simps)"], ["proof (state)\nthis:\n  Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> 3 \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> 3 \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "assume asm: \"\\<not> n \\<le> 3\""], ["proof (state)\nthis:\n  \\<not> n \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> 3 \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "have \"length xs\\<^sub>L < length xs\" \"length xs\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs\\<^sub>L < length xs &&& length xs\\<^sub>R < length xs", "using asm defs"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> 3\n  n = length xs\n  (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\n\ngoal (1 subgoal):\n 1. length xs\\<^sub>L < length xs &&& length xs\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  length xs\\<^sub>L < length xs\n  length xs\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> 3 \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "hence \"val (closest_pair_rec_tm xs\\<^sub>L) = closest_pair_rec xs\\<^sub>L\"\n          \"val (closest_pair_rec_tm xs\\<^sub>R) = closest_pair_rec xs\\<^sub>R\""], ["proof (prove)\nusing this:\n  length xs\\<^sub>L < length xs\n  length xs\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n    closest_pair_rec xs\\<^sub>L &&&\n    Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n    closest_pair_rec xs\\<^sub>R", "using \"1.IH\""], ["proof (prove)\nusing this:\n  length xs\\<^sub>L < length xs\n  length xs\\<^sub>R < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     Time_Monad.val (closest_pair_rec_tm ys) = closest_pair_rec ys\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n    closest_pair_rec xs\\<^sub>L &&&\n    Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n    closest_pair_rec xs\\<^sub>R", "by blast+"], ["proof (state)\nthis:\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n  closest_pair_rec xs\\<^sub>L\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n  closest_pair_rec xs\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> 3 \\<Longrightarrow>\n    Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n  closest_pair_rec xs\\<^sub>L\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n  closest_pair_rec xs\\<^sub>R\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "using asm defs"], ["proof (prove)\nusing this:\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n  closest_pair_rec xs\\<^sub>L\n  Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n  closest_pair_rec xs\\<^sub>R\n  \\<not> n \\<le> 3\n  n = length xs\n  (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\n\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs", "apply (subst closest_pair_rec.simps, subst closest_pair_rec_tm.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n             closest_pair_rec xs\\<^sub>L;\n     Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n     closest_pair_rec xs\\<^sub>R;\n     \\<not> n \\<le> 3; n = length xs;\n     (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n     Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L) =\n     closest_pair_rec xs\\<^sub>L;\n     Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R) =\n     closest_pair_rec xs\\<^sub>R;\n     \\<not> n \\<le> 3; n = length xs;\n     (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs\\<rbrakk>\n    \\<Longrightarrow> Time_Monad.val\n                       (length_tm xs \\<bind>\n                        (\\<lambda>n.\n                            if n \\<le> 3\n                            then mergesort_tm snd xs \\<bind>\n                                 (\\<lambda>ys.\n                                     closest_pair_bf_tm xs \\<bind>\n                                     (\\<lambda>p. return (ys, p)))\n                            else split_at_tm (n div 2) xs \\<bind>\n                                 (\\<lambda>(xs\\<^sub>L, xs\\<^sub>R).\n                                     closest_pair_rec_tm xs\\<^sub>L \\<bind>\n                                     (\\<lambda>(ys\\<^sub>L,\n   p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L).\n   closest_pair_rec_tm xs\\<^sub>R \\<bind>\n   (\\<lambda>(ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R).\n       merge_tm snd ys\\<^sub>L ys\\<^sub>R \\<bind>\n       (\\<lambda>ys.\n           combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n            (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R))\n            ys \\<bind>\n           (\\<lambda>(p\\<^sub>0, p\\<^sub>1).\n               return (ys, p\\<^sub>0, p\\<^sub>1))))))) \\<bind>\n                        tick) =\n                      (let n = length xs\n                       in if n \\<le> 3\n                          then (mergesort snd xs, closest_pair_bf xs)\n                          else let (xs\\<^sub>L, xs\\<^sub>R) =\n                                     split_at (n div 2) xs;\n                                   (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                                     p\\<^sub>1\\<^sub>L) =\n                                     closest_pair_rec xs\\<^sub>L;\n                                   (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                                     p\\<^sub>1\\<^sub>R) =\n                                     closest_pair_rec xs\\<^sub>R;\n                                   ys = Common.merge snd ys\\<^sub>L\n   ys\\<^sub>R\n                               in (ys,\n                                   combine\n                                    (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                                    (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                                    (fst (hd xs\\<^sub>R)) ys))", "by (auto simp del: closest_pair_rec_tm.simps\n               simp add: Let_def length_eq_val_length_tm merge_eq_val_merge_tm\n                         split_at_eq_val_split_at_tm combine_eq_val_combine_tm\n               split: prod.split)"], ["proof (state)\nthis:\n  Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Time_Monad.val (closest_pair_rec_tm xs) = closest_pair_rec xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_set_length_sorted_snd:\n  assumes \"(ys, p) = closest_pair_rec xs\"\n  shows \"set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "using assms"], ["proof (prove)\nusing this:\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "proof (induction xs arbitrary: ys p rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       set x = set ys \\<and>\n                       length x = length ys \\<and> sorted_snd x);\n        (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> set ys = set xs \\<and>\n                         length ys = length xs \\<and> sorted_snd ys", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     (\\<forall>x xa.\n         (x, xa) = closest_pair_rec ys \\<longrightarrow>\n         set x = set ys \\<and> length x = length ys \\<and> sorted_snd x)\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       set x = set ys \\<and>\n                       length x = length ys \\<and> sorted_snd x);\n        (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> set ys = set xs \\<and>\n                         length ys = length xs \\<and> sorted_snd ys", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       set x = set ys \\<and>\n                       length x = length ys \\<and> sorted_snd x);\n        (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> set ys = set xs \\<and>\n                         length ys = length xs \\<and> sorted_snd ys", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "using \"1.prems\" sorted_snd_def"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, p) = closest_pair_rec xs\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "by (auto simp: mergesort closest_pair_rec.simps)"], ["proof (state)\nthis:\n  set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "obtain YS\\<^sub>L P\\<^sub>L where YSP\\<^sub>L_def: \"(YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L P\\<^sub>L.\n        (YS\\<^sub>L, P\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L P\\<^sub>L.\n        (YS\\<^sub>L, P\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "obtain YS\\<^sub>R P\\<^sub>R where YSP\\<^sub>R_def: \"(YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R P\\<^sub>R.\n        (YS\\<^sub>R, P\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R P\\<^sub>R.\n        (YS\\<^sub>R, P\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "define YS where \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "define P where \"P = combine P\\<^sub>L P\\<^sub>R L YS\""], ["proof (state)\nthis:\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSP\\<^sub>L_def YSP\\<^sub>R_def YS_def P_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "have \"length XS\\<^sub>L < length xs\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length XS\\<^sub>L < length xs &&& length XS\\<^sub>R < length xs", "using False defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. length XS\\<^sub>L < length xs &&& length XS\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "hence IH: \"set XS\\<^sub>L = set YS\\<^sub>L\" \"set XS\\<^sub>R = set YS\\<^sub>R\"\n              \"length XS\\<^sub>L = length YS\\<^sub>L\" \"length XS\\<^sub>R = length YS\\<^sub>R\"\n              \"sorted_snd YS\\<^sub>L\" \"sorted_snd YS\\<^sub>R\""], ["proof (prove)\nusing this:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. (set XS\\<^sub>L = set YS\\<^sub>L &&&\n     set XS\\<^sub>R = set YS\\<^sub>R &&&\n     length XS\\<^sub>L = length YS\\<^sub>L) &&&\n    length XS\\<^sub>R = length YS\\<^sub>R &&&\n    sorted_snd YS\\<^sub>L &&& sorted_snd YS\\<^sub>R", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     (\\<forall>x xa.\n         (x, xa) = closest_pair_rec ys \\<longrightarrow>\n         set x = set ys \\<and> length x = length ys \\<and> sorted_snd x)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. (set XS\\<^sub>L = set YS\\<^sub>L &&&\n     set XS\\<^sub>R = set YS\\<^sub>R &&&\n     length XS\\<^sub>L = length YS\\<^sub>L) &&&\n    length XS\\<^sub>R = length YS\\<^sub>R &&&\n    sorted_snd YS\\<^sub>L &&& sorted_snd YS\\<^sub>R", "by metis+"], ["proof (state)\nthis:\n  set XS\\<^sub>L = set YS\\<^sub>L\n  set XS\\<^sub>R = set YS\\<^sub>R\n  length XS\\<^sub>L = length YS\\<^sub>L\n  length XS\\<^sub>R = length YS\\<^sub>R\n  sorted_snd YS\\<^sub>L\n  sorted_snd YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "have \"set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R", "using defs"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R", "by (auto simp: set_take_drop split_at_take_drop_conv)"], ["proof (state)\nthis:\n  set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "hence SET: \"set xs = set YS\""], ["proof (prove)\nusing this:\n  set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. set xs = set YS", "using set_merge IH(1,2) defs"], ["proof (prove)\nusing this:\n  set xs = set XS\\<^sub>L \\<union> set XS\\<^sub>R\n  set (Common.merge ?f ?xs ?ys) = set ?xs \\<union> set ?ys\n  set XS\\<^sub>L = set YS\\<^sub>L\n  set XS\\<^sub>R = set YS\\<^sub>R\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. set xs = set YS", "by fast"], ["proof (state)\nthis:\n  set xs = set YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "have \"length xs = length XS\\<^sub>L + length XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length XS\\<^sub>L + length XS\\<^sub>R", "using defs"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. length xs = length XS\\<^sub>L + length XS\\<^sub>R", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  length xs = length XS\\<^sub>L + length XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "hence LENGTH: \"length xs = length YS\""], ["proof (prove)\nusing this:\n  length xs = length XS\\<^sub>L + length XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. length xs = length YS", "using IH(3,4) length_merge defs"], ["proof (prove)\nusing this:\n  length xs = length XS\\<^sub>L + length XS\\<^sub>R\n  length XS\\<^sub>L = length YS\\<^sub>L\n  length XS\\<^sub>R = length YS\\<^sub>R\n  length (Common.merge ?f ?xs ?ys) = length ?xs + length ?ys\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. length xs = length YS", "by metis"], ["proof (state)\nthis:\n  length xs = length YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "have SORTED: \"sorted_snd YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd YS", "using IH(5,6)"], ["proof (prove)\nusing this:\n  sorted_snd YS\\<^sub>L\n  sorted_snd YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sorted_snd YS", "by (simp add: defs sorted_snd_def sorted_merge)"], ["proof (state)\nthis:\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "have \"(YS, P) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, P) = closest_pair_rec xs", "using False closest_pair_rec_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. (YS, P) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, P) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "hence \"(ys, p) = (YS, P)\""], ["proof (prove)\nusing this:\n  (YS, P) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. (ys, p) = (YS, P)", "using \"1.prems\""], ["proof (prove)\nusing this:\n  (YS, P) = closest_pair_rec xs\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. (ys, p) = (YS, P)", "by argo"], ["proof (state)\nthis:\n  (ys, p) = (YS, P)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ys, p) = (YS, P)\n\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "using SET LENGTH SORTED"], ["proof (prove)\nusing this:\n  (ys, p) = (YS, P)\n  set xs = set YS\n  length xs = length YS\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys", "by simp"], ["proof (state)\nthis:\n  set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set ys = set xs \\<and> length ys = length xs \\<and> sorted_snd ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_distinct:\n  assumes \"distinct xs\" \"(ys, p) = closest_pair_rec xs\"\n  shows \"distinct ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ys", "using assms"], ["proof (prove)\nusing this:\n  distinct xs\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. distinct ys", "proof (induction xs arbitrary: ys p rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       distinct x);\n        distinct xs; (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> distinct ys", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     (\\<forall>x xa.\n         (x, xa) = closest_pair_rec ys \\<longrightarrow> distinct x)\n  distinct xs\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       distinct x);\n        distinct xs; (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> distinct ys", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys p.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa.\n                       (x, xa) = closest_pair_rec ys \\<longrightarrow>\n                       distinct x);\n        distinct xs; (ys, p) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> distinct ys", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ys", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> distinct ys\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> distinct ys\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. distinct ys", "using \"1.prems\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  distinct xs\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. distinct ys", "by (auto simp: mergesort closest_pair_rec.simps)"], ["proof (state)\nthis:\n  distinct ys\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "obtain YS\\<^sub>L P\\<^sub>L where YSP\\<^sub>L_def: \"(YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L P\\<^sub>L.\n        (YS\\<^sub>L, P\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L P\\<^sub>L.\n        (YS\\<^sub>L, P\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "obtain YS\\<^sub>R P\\<^sub>R where YSP\\<^sub>R_def: \"(YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R P\\<^sub>R.\n        (YS\\<^sub>R, P\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R P\\<^sub>R.\n        (YS\\<^sub>R, P\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "define YS where \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "define P where \"P = combine P\\<^sub>L P\\<^sub>R L YS\""], ["proof (state)\nthis:\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSP\\<^sub>L_def YSP\\<^sub>R_def YS_def P_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "have \"length XS\\<^sub>L < length xs\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length XS\\<^sub>L < length xs &&& length XS\\<^sub>R < length xs", "using False defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. length XS\\<^sub>L < length xs &&& length XS\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "moreover"], ["proof (state)\nthis:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "have \"distinct XS\\<^sub>L\" \"distinct XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>L &&& distinct XS\\<^sub>R", "using \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  distinct xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>L &&& distinct XS\\<^sub>R", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  distinct XS\\<^sub>L\n  distinct XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "ultimately"], ["proof (chain)\npicking this:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>L\n  distinct XS\\<^sub>R", "have IH: \"distinct YS\\<^sub>L\" \"distinct YS\\<^sub>R\""], ["proof (prove)\nusing this:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>L\n  distinct XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. distinct YS\\<^sub>L &&& distinct YS\\<^sub>R", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  length XS\\<^sub>L < length xs\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>L\n  distinct XS\\<^sub>R\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     (\\<forall>x xa.\n         (x, xa) = closest_pair_rec ys \\<longrightarrow> distinct x)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. distinct YS\\<^sub>L &&& distinct YS\\<^sub>R", "by blast+"], ["proof (state)\nthis:\n  distinct YS\\<^sub>L\n  distinct YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "have \"set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}", "using \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  distinct xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}", "by (auto simp: split_at_take_drop_conv set_take_disj_set_drop_if_distinct)"], ["proof (state)\nthis:\n  set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "moreover"], ["proof (state)\nthis:\n  set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "have \"set XS\\<^sub>L = set YS\\<^sub>L\" \"set XS\\<^sub>R = set YS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set XS\\<^sub>L = set YS\\<^sub>L &&& set XS\\<^sub>R = set YS\\<^sub>R", "using closest_pair_rec_set_length_sorted_snd defs"], ["proof (prove)\nusing this:\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. set XS\\<^sub>L = set YS\\<^sub>L &&& set XS\\<^sub>R = set YS\\<^sub>R", "by blast+"], ["proof (state)\nthis:\n  set XS\\<^sub>L = set YS\\<^sub>L\n  set XS\\<^sub>R = set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "ultimately"], ["proof (chain)\npicking this:\n  set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}\n  set XS\\<^sub>L = set YS\\<^sub>L\n  set XS\\<^sub>R = set YS\\<^sub>R", "have \"set YS\\<^sub>L \\<inter> set YS\\<^sub>R = {}\""], ["proof (prove)\nusing this:\n  set XS\\<^sub>L \\<inter> set XS\\<^sub>R = {}\n  set XS\\<^sub>L = set YS\\<^sub>L\n  set XS\\<^sub>R = set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. set YS\\<^sub>L \\<inter> set YS\\<^sub>R = {}", "by blast"], ["proof (state)\nthis:\n  set YS\\<^sub>L \\<inter> set YS\\<^sub>R = {}\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "hence DISTINCT: \"distinct YS\""], ["proof (prove)\nusing this:\n  set YS\\<^sub>L \\<inter> set YS\\<^sub>R = {}\n\ngoal (1 subgoal):\n 1. distinct YS", "using distinct_merge IH defs"], ["proof (prove)\nusing this:\n  set YS\\<^sub>L \\<inter> set YS\\<^sub>R = {}\n  \\<lbrakk>set ?xs \\<inter> set ?ys = {}; distinct ?xs;\n   distinct ?ys\\<rbrakk>\n  \\<Longrightarrow> distinct (Common.merge ?f ?xs ?ys)\n  distinct YS\\<^sub>L\n  distinct YS\\<^sub>R\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. distinct YS", "by blast"], ["proof (state)\nthis:\n  distinct YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "have \"(YS, P) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, P) = closest_pair_rec xs", "using False closest_pair_rec_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, P\\<^sub>L) = closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, P\\<^sub>R) = closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  P = combine P\\<^sub>L P\\<^sub>R L YS\n\ngoal (1 subgoal):\n 1. (YS, P) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, P) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "hence \"(ys, p) = (YS, P)\""], ["proof (prove)\nusing this:\n  (YS, P) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. (ys, p) = (YS, P)", "using \"1.prems\""], ["proof (prove)\nusing this:\n  (YS, P) = closest_pair_rec xs\n  distinct xs\n  (ys, p) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. (ys, p) = (YS, P)", "by argo"], ["proof (state)\nthis:\n  (ys, p) = (YS, P)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> distinct ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ys, p) = (YS, P)\n\ngoal (1 subgoal):\n 1. distinct ys", "using DISTINCT"], ["proof (prove)\nusing this:\n  (ys, p) = (YS, P)\n  distinct YS\n\ngoal (1 subgoal):\n 1. distinct ys", "by blast"], ["proof (state)\nthis:\n  distinct ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_c0_c1:\n  assumes \"1 < length xs\" \"distinct xs\" \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  shows \"c\\<^sub>0 \\<in> set xs \\<and> c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  1 < length xs\n  distinct xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "proof (induction xs arbitrary: ys c\\<^sub>0 c\\<^sub>1 rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       xa \\<in> set ys \\<and>\n                       xb \\<in> set ys \\<and> xa \\<noteq> xb);\n        1 < length xs; distinct xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 \\<in> set xs \\<and>\n                         c\\<^sub>1 \\<in> set xs \\<and>\n                         c\\<^sub>0 \\<noteq> c\\<^sub>1", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         xa \\<in> set ys \\<and> xb \\<in> set ys \\<and> xa \\<noteq> xb)\n  1 < length xs\n  distinct xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       xa \\<in> set ys \\<and>\n                       xb \\<in> set ys \\<and> xa \\<noteq> xb);\n        1 < length xs; distinct xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 \\<in> set xs \\<and>\n                         c\\<^sub>1 \\<in> set xs \\<and>\n                         c\\<^sub>0 \\<noteq> c\\<^sub>1", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       xa \\<in> set ys \\<and>\n                       xb \\<in> set ys \\<and> xa \\<noteq> xb);\n        1 < length xs; distinct xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 \\<in> set xs \\<and>\n                         c\\<^sub>1 \\<in> set xs \\<and>\n                         c\\<^sub>0 \\<noteq> c\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "hence \"(c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "using \"1.prems\"(3) closest_pair_rec.simps"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  closest_pair_rec ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys,\n               combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R))\n                ys))\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "using \"1.prems\"(1,2) closest_pair_bf_c0_c1"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n  1 < length xs\n  distinct xs\n  \\<lbrakk>1 < length ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<in> set ?ps\n  \\<lbrakk>1 < length ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>1 \\<in> set ?ps\n  \\<lbrakk>1 < length ?ps; distinct ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  c\\<^sub>0 \\<in> set xs \\<and>\n  c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L where YSC\\<^sub>0\\<^sub>1\\<^sub>L_def: \"(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = closest_pair_rec XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R where YSC\\<^sub>0\\<^sub>1\\<^sub>R_def: \"(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = closest_pair_rec XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "define YS where \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "obtain C\\<^sub>0 C\\<^sub>1 where C\\<^sub>0\\<^sub>1_def: \"(C\\<^sub>0, C\\<^sub>1) = combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSC\\<^sub>0\\<^sub>1\\<^sub>L_def YSC\\<^sub>0\\<^sub>1\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length xs\" \"distinct XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&&\n    length XS\\<^sub>L < length xs &&& distinct XS\\<^sub>L", "using False \"1.prems\"(2) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  distinct xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&&\n    length XS\\<^sub>L < length xs &&& distinct XS\\<^sub>L", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  distinct XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "hence \"C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L\" \"C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L\" and IHL1: \"C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  distinct XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L &&&\n     C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L) &&&\n    C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  distinct XS\\<^sub>L\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         xa \\<in> set ys \\<and> xb \\<in> set ys \\<and> xa \\<noteq> xb)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L &&&\n     C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L) &&&\n    C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "hence IHL2: \"C\\<^sub>0\\<^sub>L \\<in> set xs\" \"C\\<^sub>1\\<^sub>L \\<in> set xs\""], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>L \\<in> set xs &&& C\\<^sub>1\\<^sub>L \\<in> set xs", "using split_at_take_drop_conv in_set_takeD fst_conv defs"], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>1\\<^sub>L \\<in> set XS\\<^sub>L\n  C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L\n  split_at ?n ?xs = (take ?n ?xs, drop ?n ?xs)\n  ?x \\<in> set (take ?n ?xs) \\<Longrightarrow> ?x \\<in> set ?xs\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>L \\<in> set xs &&& C\\<^sub>1\\<^sub>L \\<in> set xs", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>L \\<in> set xs\n  C\\<^sub>1\\<^sub>L \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length xs\" \"distinct XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&&\n    length XS\\<^sub>R < length xs &&& distinct XS\\<^sub>R", "using False \"1.prems\"(2) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  distinct xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&&\n    length XS\\<^sub>R < length xs &&& distinct XS\\<^sub>R", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "hence \"C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R\" \"C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R\" and IHR1: \"C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R &&&\n     C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R) &&&\n    C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  distinct XS\\<^sub>R\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         xa \\<in> set ys \\<and> xb \\<in> set ys \\<and> xa \\<noteq> xb)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R &&&\n     C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R) &&&\n    C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "hence IHR2: \"C\\<^sub>0\\<^sub>R \\<in> set xs\" \"C\\<^sub>1\\<^sub>R \\<in> set xs\""], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>R \\<in> set xs &&& C\\<^sub>1\\<^sub>R \\<in> set xs", "using split_at_take_drop_conv in_set_dropD snd_conv defs"], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>1\\<^sub>R \\<in> set XS\\<^sub>R\n  C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R\n  split_at ?n ?xs = (take ?n ?xs, drop ?n ?xs)\n  ?x \\<in> set (drop ?n ?xs) \\<Longrightarrow> ?x \\<in> set ?xs\n  snd (?x1.0, ?x2.0) = ?x2.0\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>R \\<in> set xs &&& C\\<^sub>1\\<^sub>R \\<in> set xs", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>R \\<in> set xs\n  C\\<^sub>1\\<^sub>R \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have *: \"(YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "using False closest_pair_rec_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have YS: \"set xs = set YS\" \"distinct YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = set YS &&& distinct YS", "using \"1.prems\"(2) closest_pair_rec_set_length_sorted_snd closest_pair_rec_distinct *"], ["proof (prove)\nusing this:\n  distinct xs\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  \\<lbrakk>distinct ?xs; (?ys, ?p) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> distinct ?ys\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. set xs = set YS &&& distinct YS", "by blast+"], ["proof (state)\nthis:\n  set xs = set YS\n  distinct YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"C\\<^sub>0 \\<in> set xs\" \"C\\<^sub>1 \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set xs &&& C\\<^sub>1 \\<in> set xs", "using combine_set IHL2 IHR2 YS defs"], ["proof (prove)\nusing this:\n  (?c\\<^sub>0, ?c\\<^sub>1) =\n  combine (?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n   (?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l ?ps \\<Longrightarrow>\n  ?c\\<^sub>0 \\<in> set ?ps \\<and> ?c\\<^sub>1 \\<in> set ?ps \\<or>\n  ?c\\<^sub>0 = ?p\\<^sub>0\\<^sub>L \\<and>\n  ?c\\<^sub>1 = ?p\\<^sub>1\\<^sub>L \\<or>\n  ?c\\<^sub>0 = ?p\\<^sub>0\\<^sub>R \\<and> ?c\\<^sub>1 = ?p\\<^sub>1\\<^sub>R\n  C\\<^sub>0\\<^sub>L \\<in> set xs\n  C\\<^sub>1\\<^sub>L \\<in> set xs\n  C\\<^sub>0\\<^sub>R \\<in> set xs\n  C\\<^sub>1\\<^sub>R \\<in> set xs\n  set xs = set YS\n  distinct YS\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<in> set xs &&& C\\<^sub>1 \\<in> set xs", "by blast+"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set xs\n  C\\<^sub>1 \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<in> set xs\n  C\\<^sub>1 \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "have \"C\\<^sub>0 \\<noteq> C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "using combine_c0_ne_c1 IHL1(1) IHR1(1) YS defs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p\\<^sub>0\\<^sub>L \\<noteq> ?p\\<^sub>1\\<^sub>L;\n   ?p\\<^sub>0\\<^sub>R \\<noteq> ?p\\<^sub>1\\<^sub>R; distinct ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) =\n   combine (?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n    (?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n  C\\<^sub>0\\<^sub>L \\<noteq> C\\<^sub>1\\<^sub>L\n  C\\<^sub>0\\<^sub>R \\<noteq> C\\<^sub>1\\<^sub>R\n  set xs = set YS\n  distinct YS\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 \\<noteq> C\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0 \\<in> set xs\n  C\\<^sub>1 \\<in> set xs\n  C\\<^sub>0 \\<noteq> C\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set xs\n  C\\<^sub>1 \\<in> set xs\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "using \"1.prems\"(3) *"], ["proof (prove)\nusing this:\n  C\\<^sub>0 \\<in> set xs\n  C\\<^sub>1 \\<in> set xs\n  C\\<^sub>0 \\<noteq> C\\<^sub>1\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set xs \\<and>\n    c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1", "by (metis Pair_inject)"], ["proof (state)\nthis:\n  c\\<^sub>0 \\<in> set xs \\<and>\n  c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c\\<^sub>0 \\<in> set xs \\<and>\n  c\\<^sub>1 \\<in> set xs \\<and> c\\<^sub>0 \\<noteq> c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_dist:\n  assumes \"1 < length xs\" \"sorted_fst xs\" \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "using assms"], ["proof (prove)\nusing this:\n  1 < length xs\n  sorted_fst xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "proof (induction xs arbitrary: ys c\\<^sub>0 c\\<^sub>1 rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   (\\<forall>x xa xaa.\n                       (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n                       sparse\n                        (dist\n                          (case xa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case xaa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y)))\n                        (set ys));\n        1 < length xs; sorted_fst xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case c\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case c\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set xs)", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     (\\<forall>x xa xaa.\n         (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n         sparse\n          (dist\n            (case xa of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case xaa of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n          (set ys))\n  1 < length xs\n  sorted_fst xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   (\\<forall>x xa xaa.\n                       (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n                       sparse\n                        (dist\n                          (case xa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case xaa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y)))\n                        (set ys));\n        1 < length xs; sorted_fst xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case c\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case c\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set xs)", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   (\\<forall>x xa xaa.\n                       (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n                       sparse\n                        (dist\n                          (case xa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case xaa of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y)))\n                        (set ys));\n        1 < length xs; sorted_fst xs;\n        (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\\<rbrakk>\n       \\<Longrightarrow> sparse\n                          (dist\n                            (case c\\<^sub>0 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y))\n                            (case c\\<^sub>1 of\n                             (x, y) \\<Rightarrow>\n                               (real_of_int x, real_of_int y)))\n                          (set xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "hence \"(c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "using \"1.prems\"(3) closest_pair_rec.simps"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  closest_pair_rec ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys,\n               combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R))\n                ys))\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "using \"1.prems\"(1,3) closest_pair_bf_dist"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n  1 < length xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  \\<lbrakk>1 < length ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf ?ps\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set ?ps)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "by metis"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "obtain YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L where YSC\\<^sub>0\\<^sub>1\\<^sub>L_def: \"(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = closest_pair_rec XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "obtain YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R where YSC\\<^sub>0\\<^sub>1\\<^sub>R_def: \"(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = closest_pair_rec XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "define YS where \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "obtain C\\<^sub>0 C\\<^sub>1 where C\\<^sub>0\\<^sub>1_def: \"(C\\<^sub>0, C\\<^sub>1) = combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSC\\<^sub>0\\<^sub>1\\<^sub>L_def YSC\\<^sub>0\\<^sub>1\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have XSLR: \"XS\\<^sub>L = take (?n div 2) xs\" \"XS\\<^sub>R = drop (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. XS\\<^sub>L = take (length xs div 2) xs &&&\n    XS\\<^sub>R = drop (length xs div 2) xs", "using defs"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. XS\\<^sub>L = take (length xs div 2) xs &&&\n    XS\\<^sub>R = drop (length xs div 2) xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "using False XSLR"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "by simp_all"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"sorted_fst XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_fst XS\\<^sub>L", "using \"1.prems\"(2) XSLR"], ["proof (prove)\nusing this:\n  sorted_fst xs\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. sorted_fst XS\\<^sub>L", "by (auto simp: sorted_fst_def sorted_wrt_take)"], ["proof (state)\nthis:\n  sorted_fst XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "ultimately"], ["proof (chain)\npicking this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  sorted_fst XS\\<^sub>L", "have L: \"sparse (dist C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L) (set XS\\<^sub>L)\"\n                       \"set XS\\<^sub>L = set YS\\<^sub>L\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  sorted_fst XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set XS\\<^sub>L) &&&\n    set XS\\<^sub>L = set YS\\<^sub>L", "using 1 closest_pair_rec_set_length_sorted_snd closest_pair_rec_c0_c1\n              YSC\\<^sub>0\\<^sub>1\\<^sub>L_def"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  sorted_fst XS\\<^sub>L\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     (\\<forall>x xa xaa.\n         (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n         sparse\n          (dist\n            (case xa of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case xaa of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n          (set ys))\n  1 < length xs\n  sorted_fst xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  \\<lbrakk>1 < length ?xs; distinct ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<in> set ?xs \\<and>\n                    ?c\\<^sub>1 \\<in> set ?xs \\<and>\n                    ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set XS\\<^sub>L) &&&\n    set XS\\<^sub>L = set YS\\<^sub>L", "by blast+"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set XS\\<^sub>L)\n  set XS\\<^sub>L = set YS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "hence IHL: \"sparse (dist C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L) (set YS\\<^sub>L)\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set XS\\<^sub>L)\n  set XS\\<^sub>L = set YS\\<^sub>L\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>L)", "by argo"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "using False XSLR"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "by simp_all"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"sorted_fst XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_fst XS\\<^sub>R", "using \"1.prems\"(2) XSLR"], ["proof (prove)\nusing this:\n  sorted_fst xs\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. sorted_fst XS\\<^sub>R", "by (auto simp: sorted_fst_def sorted_wrt_drop)"], ["proof (state)\nthis:\n  sorted_fst XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "ultimately"], ["proof (chain)\npicking this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  sorted_fst XS\\<^sub>R", "have R: \"sparse (dist C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R) (set XS\\<^sub>R)\"\n                       \"set XS\\<^sub>R = set YS\\<^sub>R\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  sorted_fst XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set XS\\<^sub>R) &&&\n    set XS\\<^sub>R = set YS\\<^sub>R", "using 1 closest_pair_rec_set_length_sorted_snd closest_pair_rec_c0_c1\n              YSC\\<^sub>0\\<^sub>1\\<^sub>R_def"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  sorted_fst XS\\<^sub>R\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     (\\<forall>x xa xaa.\n         (x, xa, xaa) = closest_pair_rec ys \\<longrightarrow>\n         sparse\n          (dist\n            (case xa of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case xaa of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n          (set ys))\n  1 < length xs\n  sorted_fst xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  \\<lbrakk>1 < length ?xs; distinct ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<in> set ?xs \\<and>\n                    ?c\\<^sub>1 \\<in> set ?xs \\<and>\n                    ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set XS\\<^sub>R) &&&\n    set XS\\<^sub>R = set YS\\<^sub>R", "by blast+"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set XS\\<^sub>R)\n  set XS\\<^sub>R = set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "hence IHR: \"sparse (dist C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R) (set YS\\<^sub>R)\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set XS\\<^sub>R)\n  set XS\\<^sub>R = set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>R)", "by argo"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have *: \"(YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "using False closest_pair_rec_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"set xs = set YS\" \"sorted_snd YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = set YS &&& sorted_snd YS", "using \"1.prems\"(2) closest_pair_rec_set_length_sorted_snd closest_pair_rec_distinct *"], ["proof (prove)\nusing this:\n  sorted_fst xs\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  \\<lbrakk>distinct ?xs; (?ys, ?p) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> distinct ?ys\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. set xs = set YS &&& sorted_snd YS", "by blast+"], ["proof (state)\nthis:\n  set xs = set YS\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  set xs = set YS\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"\\<forall>p \\<in> set YS\\<^sub>L. fst p \\<le> L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L", "using False \"1.prems\"(2) XSLR L_def L(2) sorted_fst_take_less_hd_drop"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  sorted_fst xs\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  set XS\\<^sub>L = set YS\\<^sub>L\n  \\<lbrakk>sorted_fst ?ps; ?n < length ?ps\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p\\<in>set (take ?n ?ps).\n                       fst p \\<le> fst (hd (drop ?n ?ps))\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L", "by simp"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"\\<forall>p \\<in> set YS\\<^sub>R. L \\<le> fst p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p", "using False \"1.prems\"(2) XSLR L_def R(2) sorted_fst_hd_drop_less_drop"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  sorted_fst xs\n  XS\\<^sub>L = take (length xs div 2) xs\n  XS\\<^sub>R = drop (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  set XS\\<^sub>R = set YS\\<^sub>R\n  sorted_fst ?ps \\<Longrightarrow>\n  \\<forall>p\\<in>set (drop ?n ?ps). fst (hd (drop ?n ?ps)) \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p", "by simp"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R", "using set_merge defs"], ["proof (prove)\nusing this:\n  set (Common.merge ?f ?xs ?ys) = set ?xs \\<union> set ?ys\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R", "by fast"], ["proof (state)\nthis:\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"(C\\<^sub>0, C\\<^sub>1) = combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C\\<^sub>0, C\\<^sub>1) =\n    combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS", "by (auto simp add: defs)"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "ultimately"], ["proof (chain)\npicking this:\n  set xs = set YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L\n  \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS", "have \"sparse (dist C\\<^sub>0 C\\<^sub>1) (set xs)\""], ["proof (prove)\nusing this:\n  set xs = set YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L\n  \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "using combine_dist IHL IHR"], ["proof (prove)\nusing this:\n  set xs = set YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> L\n  \\<forall>p\\<in>set YS\\<^sub>R. L \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  \\<lbrakk>sorted_snd ?ps; set ?ps = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> ?l;\n   \\<forall>p\\<in>?ps\\<^sub>R. ?l \\<le> fst p;\n   sparse\n    (dist\n      (case ?p\\<^sub>0\\<^sub>L of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>1\\<^sub>L of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n    ?ps\\<^sub>L;\n   sparse\n    (dist\n      (case ?p\\<^sub>0\\<^sub>R of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>1\\<^sub>R of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n    ?ps\\<^sub>R;\n   (?c\\<^sub>0, ?c\\<^sub>1) =\n   combine (?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n    (?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l ?ps\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set ?ps)\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "by auto"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "moreover"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "have \"(YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)", "using \"1.prems\"(3) *"], ["proof (prove)\nusing this:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)", "by simp"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "ultimately"], ["proof (chain)\npicking this:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n  (YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)", "show ?thesis"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case C\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n  (YS, C\\<^sub>0, C\\<^sub>1) = (ys, c\\<^sub>0, c\\<^sub>1)\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set xs)", "by blast"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun closest_pair_tm :: \"point list \\<Rightarrow> (point * point) tm\" where\n  \"closest_pair_tm [] =1 return undefined\"\n| \"closest_pair_tm [_] =1 return undefined\"\n| \"closest_pair_tm ps =1 (\n    do {\n      xs <- mergesort_tm fst ps;\n      (_, p) <- closest_pair_rec_tm xs;\n      return p\n    }\n  )\""], ["", "fun closest_pair :: \"point list \\<Rightarrow> (point * point)\" where\n  \"closest_pair [] = undefined\"\n| \"closest_pair [_] = undefined\"\n| \"closest_pair ps = (let (_, p) = closest_pair_rec (mergesort fst ps) in p)\""], ["", "lemma closest_pair_eq_val_closest_pair_tm:\n  \"val (closest_pair_tm ps) = closest_pair ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Time_Monad.val (closest_pair_tm ps) = closest_pair ps", "by (induction ps rule: induct_list012)\n     (auto simp del: closest_pair_rec_tm.simps mergesort_tm.simps\n           simp add: closest_pair_rec_eq_val_closest_pair_rec_tm mergesort_eq_val_mergesort_tm\n           split: prod.split)"], ["", "lemma closest_pair_simps:\n  \"1 < length ps \\<Longrightarrow> closest_pair ps = (let (_, p) = closest_pair_rec (mergesort fst ps) in p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length ps \\<Longrightarrow>\n    closest_pair ps =\n    (let (uu_, p) = closest_pair_rec (mergesort fst ps) in p)", "by (induction ps rule: induct_list012) auto"], ["", "declare closest_pair.simps [simp del]"], ["", "theorem closest_pair_c0_c1:\n  assumes \"1 < length ps\" \"distinct ps\" \"(c\\<^sub>0, c\\<^sub>1) = closest_pair ps\"\n  shows \"c\\<^sub>0 \\<in> set ps\" \"c\\<^sub>1 \\<in> set ps\" \"c\\<^sub>0 \\<noteq> c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps &&&\n    c\\<^sub>1 \\<in> set ps &&& c\\<^sub>0 \\<noteq> c\\<^sub>1", "using assms closest_pair_rec_c0_c1[of \"mergesort fst ps\"]"], ["proof (prove)\nusing this:\n  1 < length ps\n  distinct ps\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair ps\n  \\<lbrakk>1 < length (mergesort fst ps); distinct (mergesort fst ps);\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) =\n   closest_pair_rec (mergesort fst ps)\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<in> set (mergesort fst ps) \\<and>\n                    ?c\\<^sub>1 \\<in> set (mergesort fst ps) \\<and>\n                    ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<in> set ps &&&\n    c\\<^sub>1 \\<in> set ps &&& c\\<^sub>0 \\<noteq> c\\<^sub>1", "by (auto simp: closest_pair_simps mergesort split: prod.splits)"], ["", "theorem closest_pair_dist:\n  assumes \"1 < length ps\" \"(c\\<^sub>0, c\\<^sub>1) = closest_pair ps\"\n  shows \"sparse (dist c\\<^sub>0 c\\<^sub>1) (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "using assms sorted_fst_def closest_pair_rec_dist[of \"mergesort fst ps\"] closest_pair_rec_c0_c1[of \"mergesort fst ps\"]"], ["proof (prove)\nusing this:\n  1 < length ps\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair ps\n  sorted_fst ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. fst p\\<^sub>0 \\<le> fst p\\<^sub>1) ?ps\n  \\<lbrakk>1 < length (mergesort fst ps); sorted_fst (mergesort fst ps);\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) =\n   closest_pair_rec (mergesort fst ps)\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set (mergesort fst ps))\n  \\<lbrakk>1 < length (mergesort fst ps); distinct (mergesort fst ps);\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) =\n   closest_pair_rec (mergesort fst ps)\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 \\<in> set (mergesort fst ps) \\<and>\n                    ?c\\<^sub>1 \\<in> set (mergesort fst ps) \\<and>\n                    ?c\\<^sub>0 \\<noteq> ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set ps)", "by (auto simp: closest_pair_simps mergesort split: prod.splits)"], ["", "subsection \"Time Complexity Proof\""], ["", "subsubsection \"Core Argument\""], ["", "lemma core_argument:\n  fixes \\<delta> :: real and p :: point and ps :: \"point list\"\n  assumes \"distinct (p # ps)\" \"sorted_snd (p # ps)\" \"0 \\<le> \\<delta>\" \"set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>q \\<in> set (p # ps). l - \\<delta> < fst q \\<and> fst q < l + \\<delta>\"\n  assumes \"\\<forall>q \\<in> ps\\<^sub>L. fst q \\<le> l\" \"\\<forall>q \\<in> ps\\<^sub>R. l \\<le> fst q\"\n  assumes \"sparse \\<delta> ps\\<^sub>L\" \"sparse \\<delta> ps\\<^sub>R\"\n  shows \"length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps) \\<le> 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define PS where \"PS = p # ps\""], ["proof (state)\nthis:\n  PS = p # ps\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define R where \"R = cbox (l - \\<delta>, snd p) (l + \\<delta>, snd p + \\<delta>)\""], ["proof (state)\nthis:\n  R =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define RPS where \"RPS = { p \\<in> set PS. p \\<in> R }\""], ["proof (state)\nthis:\n  RPS =\n  {p \\<in> set PS.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R}\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define LSQ where \"LSQ = cbox (l - \\<delta>, snd p) (l, snd p + \\<delta>)\""], ["proof (state)\nthis:\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define LSQPS where \"LSQPS = { p \\<in> ps\\<^sub>L. p \\<in> LSQ }\""], ["proof (state)\nthis:\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define RSQ where \"RSQ = cbox (l, snd p) (l + \\<delta>, snd p + \\<delta>)\""], ["proof (state)\nthis:\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "define RSQPS where \"RSQPS = { p \\<in> ps\\<^sub>R. p \\<in> RSQ }\""], ["proof (state)\nthis:\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "note defs = PS_def R_def RPS_def LSQ_def LSQPS_def RSQ_def RSQPS_def"], ["proof (state)\nthis:\n  PS = p # ps\n  R =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  RPS =\n  {p \\<in> set PS.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R}\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"R = LSQ \\<union> RSQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = LSQ \\<union> RSQ", "using defs cbox_right_un"], ["proof (prove)\nusing this:\n  PS = p # ps\n  R =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  RPS =\n  {p \\<in> set PS.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R}\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n  \\<lbrakk>?x\\<^sub>0 \\<le> ?x\\<^sub>1; ?x\\<^sub>1 \\<le> ?x\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> cbox (?x\\<^sub>0, ?y\\<^sub>0)\n                     (?x\\<^sub>1, ?y\\<^sub>1) \\<union>\n                    cbox (?x\\<^sub>1, ?y\\<^sub>0) (?x\\<^sub>2, ?y\\<^sub>1) =\n                    cbox (?x\\<^sub>0, ?y\\<^sub>0) (?x\\<^sub>2, ?y\\<^sub>1)\n\ngoal (1 subgoal):\n 1. R = LSQ \\<union> RSQ", "by auto"], ["proof (state)\nthis:\n  R = LSQ \\<union> RSQ\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "moreover"], ["proof (state)\nthis:\n  R = LSQ \\<union> RSQ\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"\\<forall>p \\<in> ps\\<^sub>L. p \\<in> RSQ \\<longrightarrow> p \\<in> LSQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>ps\\<^sub>L.\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> RSQ \\<longrightarrow>\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> LSQ", "using RSQ_def LSQ_def assms(6)"], ["proof (prove)\nusing this:\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n  \\<forall>q\\<in>ps\\<^sub>L. fst q \\<le> l\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>ps\\<^sub>L.\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> RSQ \\<longrightarrow>\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> LSQ", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>ps\\<^sub>L.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>ps\\<^sub>L.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"\\<forall>p \\<in> ps\\<^sub>R. p \\<in> LSQ \\<longrightarrow> p \\<in> RSQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>ps\\<^sub>R.\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> LSQ \\<longrightarrow>\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> RSQ", "using RSQ_def LSQ_def assms(7)"], ["proof (prove)\nusing this:\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n  \\<forall>q\\<in>ps\\<^sub>R. l \\<le> fst q\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>ps\\<^sub>R.\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> LSQ \\<longrightarrow>\n       (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       \\<in> RSQ", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>ps\\<^sub>R.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "ultimately"], ["proof (chain)\npicking this:\n  R = LSQ \\<union> RSQ\n  \\<forall>x\\<in>ps\\<^sub>L.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ\n  \\<forall>x\\<in>ps\\<^sub>R.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ", "have \"RPS = LSQPS \\<union> RSQPS\""], ["proof (prove)\nusing this:\n  R = LSQ \\<union> RSQ\n  \\<forall>x\\<in>ps\\<^sub>L.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ\n  \\<forall>x\\<in>ps\\<^sub>R.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ\n\ngoal (1 subgoal):\n 1. RPS = LSQPS \\<union> RSQPS", "using LSQPS_def RSQPS_def PS_def RPS_def assms(4)"], ["proof (prove)\nusing this:\n  R = LSQ \\<union> RSQ\n  \\<forall>x\\<in>ps\\<^sub>L.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ\n  \\<forall>x\\<in>ps\\<^sub>R.\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> LSQ \\<longrightarrow>\n     (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     \\<in> RSQ\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n  PS = p # ps\n  RPS =\n  {p \\<in> set PS.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R}\n  set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\n\ngoal (1 subgoal):\n 1. RPS = LSQPS \\<union> RSQPS", "by blast"], ["proof (state)\nthis:\n  RPS = LSQPS \\<union> RSQPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"sparse \\<delta> LSQPS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse \\<delta> LSQPS", "using assms(8) LSQPS_def sparse_def"], ["proof (prove)\nusing this:\n  sparse \\<delta> ps\\<^sub>L\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse \\<delta> LSQPS", "by simp"], ["proof (state)\nthis:\n  sparse \\<delta> LSQPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "hence CLSQPS: \"card LSQPS \\<le> 4\""], ["proof (prove)\nusing this:\n  sparse \\<delta> LSQPS\n\ngoal (1 subgoal):\n 1. card LSQPS \\<le> 4", "using max_points_square[of LSQPS \"l - \\<delta>\" \"snd p\" \\<delta>] assms(3) LSQ_def LSQPS_def"], ["proof (prove)\nusing this:\n  sparse \\<delta> LSQPS\n  \\<lbrakk>\\<forall>pa\\<in>LSQPS.\n              (case pa of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<in> cbox (real_of_int l - \\<delta>, real_of_int (snd p))\n                     (real_of_int l - \\<delta> + \\<delta>,\n                      real_of_int (snd p) + \\<delta>);\n   sparse \\<delta> LSQPS; 0 \\<le> \\<delta>\\<rbrakk>\n  \\<Longrightarrow> card LSQPS \\<le> 4\n  0 \\<le> \\<delta>\n  LSQ =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (case (l, real_of_int (snd p) + \\<delta>) of\n    (x, y) \\<Rightarrow> (real_of_int x, y))\n  LSQPS =\n  {p \\<in> ps\\<^sub>L.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> LSQ}\n\ngoal (1 subgoal):\n 1. card LSQPS \\<le> 4", "by auto"], ["proof (state)\nthis:\n  card LSQPS \\<le> 4\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"sparse \\<delta> RSQPS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse \\<delta> RSQPS", "using assms(9) RSQPS_def sparse_def"], ["proof (prove)\nusing this:\n  sparse \\<delta> ps\\<^sub>R\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse \\<delta> RSQPS", "by simp"], ["proof (state)\nthis:\n  sparse \\<delta> RSQPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "hence CRSQPS: \"card RSQPS \\<le> 4\""], ["proof (prove)\nusing this:\n  sparse \\<delta> RSQPS\n\ngoal (1 subgoal):\n 1. card RSQPS \\<le> 4", "using max_points_square[of RSQPS l \"snd p\" \\<delta>] assms(3) RSQ_def RSQPS_def"], ["proof (prove)\nusing this:\n  sparse \\<delta> RSQPS\n  \\<lbrakk>\\<forall>pa\\<in>RSQPS.\n              (case pa of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              \\<in> cbox (real_of_int l, real_of_int (snd p))\n                     (real_of_int l + \\<delta>,\n                      real_of_int (snd p) + \\<delta>);\n   sparse \\<delta> RSQPS; 0 \\<le> \\<delta>\\<rbrakk>\n  \\<Longrightarrow> card RSQPS \\<le> 4\n  0 \\<le> \\<delta>\n  RSQ =\n  cbox\n   (case (l, snd p) of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  RSQPS =\n  {p \\<in> ps\\<^sub>R.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<in> RSQ}\n\ngoal (1 subgoal):\n 1. card RSQPS \\<le> 4", "by auto"], ["proof (state)\nthis:\n  card RSQPS \\<le> 4\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have CRPS: \"card RPS \\<le> 8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card RPS \\<le> 8", "using CLSQPS CRSQPS card_Un_le[of LSQPS RSQPS] \\<open>RPS = LSQPS \\<union> RSQPS\\<close>"], ["proof (prove)\nusing this:\n  card LSQPS \\<le> 4\n  card RSQPS \\<le> 4\n  card (LSQPS \\<union> RSQPS) \\<le> card LSQPS + card RSQPS\n  RPS = LSQPS \\<union> RSQPS\n\ngoal (1 subgoal):\n 1. card RPS \\<le> 8", "by auto"], ["proof (state)\nthis:\n  card RPS \\<le> 8\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"set (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps) \\<subseteq> RPS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<subseteq> RPS", "proof standard"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "assume *: \"q \\<in> set (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)\""], ["proof (state)\nthis:\n  q \\<in> set (p #\n               filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "hence CPS: \"q \\<in> set PS\""], ["proof (prove)\nusing this:\n  q \\<in> set (p #\n               filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n\ngoal (1 subgoal):\n 1. q \\<in> set PS", "using PS_def"], ["proof (prove)\nusing this:\n  q \\<in> set (p #\n               filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  PS = p # ps\n\ngoal (1 subgoal):\n 1. q \\<in> set PS", "by auto"], ["proof (state)\nthis:\n  q \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "hence \"snd p \\<le> snd q\" \"snd q \\<le> snd p + \\<delta>\""], ["proof (prove)\nusing this:\n  q \\<in> set PS\n\ngoal (1 subgoal):\n 1. snd p \\<le> snd q &&&\n    real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>", "using assms(2,3) PS_def sorted_snd_def *"], ["proof (prove)\nusing this:\n  q \\<in> set PS\n  sorted_snd (p # ps)\n  0 \\<le> \\<delta>\n  PS = p # ps\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  q \\<in> set (p #\n               filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n\ngoal (1 subgoal):\n 1. snd p \\<le> snd q &&&\n    real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  snd p \\<le> snd q\n  real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "moreover"], ["proof (state)\nthis:\n  snd p \\<le> snd q\n  real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "have \"l - \\<delta> < fst q\" \"fst q < l + \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int l - \\<delta> < real_of_int (fst q) &&&\n    real_of_int (fst q) < real_of_int l + \\<delta>", "using CPS assms(5) PS_def"], ["proof (prove)\nusing this:\n  q \\<in> set PS\n  \\<forall>q\\<in>set (p # ps).\n     real_of_int l - \\<delta> < real_of_int (fst q) \\<and>\n     real_of_int (fst q) < real_of_int l + \\<delta>\n  PS = p # ps\n\ngoal (1 subgoal):\n 1. real_of_int l - \\<delta> < real_of_int (fst q) &&&\n    real_of_int (fst q) < real_of_int l + \\<delta>", "by blast+"], ["proof (state)\nthis:\n  real_of_int l - \\<delta> < real_of_int (fst q)\n  real_of_int (fst q) < real_of_int l + \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "ultimately"], ["proof (chain)\npicking this:\n  snd p \\<le> snd q\n  real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>\n  real_of_int l - \\<delta> < real_of_int (fst q)\n  real_of_int (fst q) < real_of_int l + \\<delta>", "have \"q \\<in> R\""], ["proof (prove)\nusing this:\n  snd p \\<le> snd q\n  real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>\n  real_of_int l - \\<delta> < real_of_int (fst q)\n  real_of_int (fst q) < real_of_int l + \\<delta>\n\ngoal (1 subgoal):\n 1. (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R", "using R_def mem_cbox_2D[of \"l - \\<delta>\" \"fst q\" \"l + \\<delta>\" \"snd p\" \"snd q\" \"snd p + \\<delta>\"]"], ["proof (prove)\nusing this:\n  snd p \\<le> snd q\n  real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>\n  real_of_int l - \\<delta> < real_of_int (fst q)\n  real_of_int (fst q) < real_of_int l + \\<delta>\n  R =\n  cbox\n   (case (real_of_int l - \\<delta>, snd p) of\n    (x, y) \\<Rightarrow> (x, real_of_int y))\n   (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>)\n  (real_of_int l - \\<delta> \\<le> real_of_int (fst q) \\<and>\n   real_of_int (fst q) \\<le> real_of_int l + \\<delta> \\<and>\n   real_of_int (snd p) \\<le> real_of_int (snd q) \\<and>\n   real_of_int (snd q) \\<le> real_of_int (snd p) + \\<delta>) =\n  ((real_of_int (fst q), real_of_int (snd q))\n   \\<in> cbox (real_of_int l - \\<delta>, real_of_int (snd p))\n          (real_of_int l + \\<delta>, real_of_int (snd p) + \\<delta>))\n\ngoal (1 subgoal):\n 1. (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R", "by (simp add: prod.case_eq_if)"], ["proof (state)\nthis:\n  (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (p #\n                    filter\n                     (\\<lambda>q.\n                         real_of_int (snd q - snd p) \\<le> \\<delta>)\n                     ps) \\<Longrightarrow>\n       x \\<in> RPS", "thus \"q \\<in> RPS\""], ["proof (prove)\nusing this:\n  (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R\n\ngoal (1 subgoal):\n 1. q \\<in> RPS", "using CPS RPS_def"], ["proof (prove)\nusing this:\n  (case q of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R\n  q \\<in> set PS\n  RPS =\n  {p \\<in> set PS.\n   (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) \\<in> R}\n\ngoal (1 subgoal):\n 1. q \\<in> RPS", "by simp"], ["proof (state)\nthis:\n  q \\<in> RPS\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (p #\n       filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<subseteq> RPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "moreover"], ["proof (state)\nthis:\n  set (p #\n       filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<subseteq> RPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"finite RPS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite RPS", "by (simp add: RPS_def)"], ["proof (state)\nthis:\n  finite RPS\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "ultimately"], ["proof (chain)\npicking this:\n  set (p #\n       filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<subseteq> RPS\n  finite RPS", "have \"card (set (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)) \\<le> 8\""], ["proof (prove)\nusing this:\n  set (p #\n       filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<subseteq> RPS\n  finite RPS\n\ngoal (1 subgoal):\n 1. card\n     (set (p #\n           filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n            ps))\n    \\<le> 8", "using CRPS card_mono[of RPS \"set (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)\"]"], ["proof (prove)\nusing this:\n  set (p #\n       filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<subseteq> RPS\n  finite RPS\n  card RPS \\<le> 8\n  \\<lbrakk>finite RPS;\n   set (p #\n        filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n   \\<subseteq> RPS\\<rbrakk>\n  \\<Longrightarrow> card\n                     (set (p #\n                           filter\n                            (\\<lambda>q.\n                                real_of_int (snd q - snd p) \\<le> \\<delta>)\n                            ps))\n                    \\<le> card RPS\n\ngoal (1 subgoal):\n 1. card\n     (set (p #\n           filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n            ps))\n    \\<le> 8", "by simp"], ["proof (state)\nthis:\n  card\n   (set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n          ps))\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "moreover"], ["proof (state)\nthis:\n  card\n   (set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n          ps))\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "have \"distinct (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (p #\n      filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)", "using assms(1)"], ["proof (prove)\nusing this:\n  distinct (p # ps)\n\ngoal (1 subgoal):\n 1. distinct\n     (p #\n      filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)", "by simp"], ["proof (state)\nthis:\n  distinct\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "ultimately"], ["proof (chain)\npicking this:\n  card\n   (set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n          ps))\n  \\<le> 8\n  distinct\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)", "have \"length (p # filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps) \\<le> 8\""], ["proof (prove)\nusing this:\n  card\n   (set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n          ps))\n  \\<le> 8\n  distinct\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n\ngoal (1 subgoal):\n 1. length\n     (p #\n      filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 8", "using assms(1) PS_def distinct_card"], ["proof (prove)\nusing this:\n  card\n   (set (p #\n         filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n          ps))\n  \\<le> 8\n  distinct\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  distinct (p # ps)\n  PS = p # ps\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. length\n     (p #\n      filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 8", "by metis"], ["proof (state)\nthis:\n  length\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "thus ?thesis"], ["proof (prove)\nusing this:\n  length\n   (p # filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n    \\<le> 7", "by simp"], ["proof (state)\nthis:\n  length\n   (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>) ps)\n  \\<le> 7\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Combine Step\""], ["", "fun t_find_closest :: \"point \\<Rightarrow> real \\<Rightarrow> point list \\<Rightarrow> nat\" where\n  \"t_find_closest _ _ [] = 1\"\n| \"t_find_closest _ _ [_] = 1\"\n| \"t_find_closest p \\<delta> (p\\<^sub>0 # ps) = 1 + (\n    if \\<delta> \\<le> snd p\\<^sub>0 - snd p then 0\n    else t_find_closest p (min \\<delta> (dist p p\\<^sub>0)) ps\n  )\""], ["", "lemma t_find_closest_eq_time_find_closest_tm:\n  \"t_find_closest p \\<delta> ps = time (find_closest_tm p \\<delta> ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> ps = time (find_closest_tm p \\<delta> ps)", "by (induction p \\<delta> ps rule: t_find_closest.induct)\n     (auto simp: time_simps)"], ["", "lemma t_find_closest_mono:\n  \"\\<delta>' \\<le> \\<delta> \\<Longrightarrow> t_find_closest p \\<delta>' ps \\<le> t_find_closest p \\<delta> ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>' \\<le> \\<delta> \\<Longrightarrow>\n    t_find_closest p \\<delta>' ps \\<le> t_find_closest p \\<delta> ps", "by (induction rule: t_find_closest.induct)\n     (auto simp: Let_def min_def)"], ["", "lemma t_find_closest_cnt:\n  \"t_find_closest p \\<delta> ps \\<le> 1 + length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> ps\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             ps)", "proof (induction p \\<delta> ps rule: t_find_closest.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       t_find_closest uu_ uv_ []\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uu_) \\<le> uv_)\n                [])\n 2. \\<And>uw_ ux_ uy_.\n       t_find_closest uw_ ux_ [uy_]\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uw_) \\<le> ux_)\n                [uy_])\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       (\\<not> \\<delta>\n               \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n        t_find_closest p\n         (min \\<delta>\n           (dist\n             (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n         (v # va)\n        \\<le> 1 +\n              length\n               (filter\n                 (\\<lambda>q.\n                     real_of_int (snd q - snd p)\n                     \\<le> min \\<delta>\n                            (dist\n                              (case p of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case p\\<^sub>0 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))))\n                 (v # va))) \\<Longrightarrow>\n       t_find_closest p \\<delta> (p\\<^sub>0 # v # va)\n       \\<le> 1 +\n             length\n              (filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n                (p\\<^sub>0 # v # va))", "case (3 p \\<delta> p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<not> \\<delta>\n         \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<le> 1 +\n        length\n         (filter\n           (\\<lambda>q.\n               real_of_int (snd q - snd p)\n               \\<le> min \\<delta>\n                      (dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case p\\<^sub>0 of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))))\n           (p\\<^sub>2 # ps))\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_.\n       t_find_closest uu_ uv_ []\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uu_) \\<le> uv_)\n                [])\n 2. \\<And>uw_ ux_ uy_.\n       t_find_closest uw_ ux_ [uy_]\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uw_) \\<le> ux_)\n                [uy_])\n 3. \\<And>p \\<delta> p\\<^sub>0 v va.\n       (\\<not> \\<delta>\n               \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n        t_find_closest p\n         (min \\<delta>\n           (dist\n             (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n         (v # va)\n        \\<le> 1 +\n              length\n               (filter\n                 (\\<lambda>q.\n                     real_of_int (snd q - snd p)\n                     \\<le> min \\<delta>\n                            (dist\n                              (case p of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))\n                              (case p\\<^sub>0 of\n                               (x, y) \\<Rightarrow>\n                                 (real_of_int x, real_of_int y))))\n                 (v # va))) \\<Longrightarrow>\n       t_find_closest p \\<delta> (p\\<^sub>0 # v # va)\n       \\<le> 1 +\n             length\n              (filter\n                (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n                (p\\<^sub>0 # v # va))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "proof (cases \"\\<delta> \\<le> snd p\\<^sub>0 - snd p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "case True"], ["proof (state)\nthis:\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))\n 2. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "by simp"], ["proof (state)\nthis:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "case False"], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "hence *: \"snd p\\<^sub>0 - snd p \\<le> \\<delta>\""], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. real_of_int (snd p\\<^sub>0 - snd p) \\<le> \\<delta>", "by simp"], ["proof (state)\nthis:\n  real_of_int (snd p\\<^sub>0 - snd p) \\<le> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) = 1 + t_find_closest p (min \\<delta> (dist p p\\<^sub>0)) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\n     (min \\<delta>\n       (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps)", "using False"], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\n     (min \\<delta>\n       (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "also"], ["proof (state)\nthis:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"... \\<le> 1 + 1 + length (filter (\\<lambda>q. snd q - snd p \\<le> min \\<delta> (dist p p\\<^sub>0)) (p\\<^sub>2 # ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 +\n    t_find_closest p\n     (min \\<delta>\n       (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps)\n    \\<le> 1 + 1 +\n          length\n           (filter\n             (\\<lambda>q.\n                 real_of_int (snd q - snd p)\n                 \\<le> min \\<delta>\n                        (dist\n                          (case p of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))))\n             (p\\<^sub>2 # ps))", "using False 3"], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  \\<not> \\<delta>\n         \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<le> 1 +\n        length\n         (filter\n           (\\<lambda>q.\n               real_of_int (snd q - snd p)\n               \\<le> min \\<delta>\n                      (dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case p\\<^sub>0 of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))))\n           (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. 1 +\n    t_find_closest p\n     (min \\<delta>\n       (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps)\n    \\<le> 1 + 1 +\n          length\n           (filter\n             (\\<lambda>q.\n                 real_of_int (snd q - snd p)\n                 \\<le> min \\<delta>\n                        (dist\n                          (case p of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))))\n             (p\\<^sub>2 # ps))", "by simp"], ["proof (state)\nthis:\n  1 +\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<le> 1 + 1 +\n        length\n         (filter\n           (\\<lambda>q.\n               real_of_int (snd q - snd p)\n               \\<le> min \\<delta>\n                      (dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case p\\<^sub>0 of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))))\n           (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "also"], ["proof (state)\nthis:\n  1 +\n  t_find_closest p\n   (min \\<delta>\n     (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n   (p\\<^sub>2 # ps)\n  \\<le> 1 + 1 +\n        length\n         (filter\n           (\\<lambda>q.\n               real_of_int (snd q - snd p)\n               \\<le> min \\<delta>\n                      (dist\n                        (case p of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case p\\<^sub>0 of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))))\n           (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"... \\<le> 1 + 1 + length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) (p\\<^sub>2 # ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + 1 +\n    length\n     (filter\n       (\\<lambda>q.\n           real_of_int (snd q - snd p)\n           \\<le> min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (p\\<^sub>2 # ps))\n    \\<le> 1 + 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>2 # ps))", "using *"], ["proof (prove)\nusing this:\n  real_of_int (snd p\\<^sub>0 - snd p) \\<le> \\<delta>\n\ngoal (1 subgoal):\n 1. 1 + 1 +\n    length\n     (filter\n       (\\<lambda>q.\n           real_of_int (snd q - snd p)\n           \\<le> min \\<delta>\n                  (dist\n                    (case p of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case p\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n       (p\\<^sub>2 # ps))\n    \\<le> 1 + 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>2 # ps))", "by (meson add_le_cancel_left length_filter_P_impl_Q min.bounded_iff)"], ["proof (state)\nthis:\n  1 + 1 +\n  length\n   (filter\n     (\\<lambda>q.\n         real_of_int (snd q - snd p)\n         \\<le> min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps))\n  \\<le> 1 + 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "also"], ["proof (state)\nthis:\n  1 + 1 +\n  length\n   (filter\n     (\\<lambda>q.\n         real_of_int (snd q - snd p)\n         \\<le> min \\<delta>\n                (dist\n                  (case p of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n     (p\\<^sub>2 # ps))\n  \\<le> 1 + 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "have \"... \\<le> 1 + length (filter (\\<lambda>q. snd q - snd p \\<le> \\<delta>) (p\\<^sub>0 # p\\<^sub>2 # ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + 1 +\n    length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n       (p\\<^sub>2 # ps))\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "using False"], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. 1 + 1 +\n    length\n     (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n       (p\\<^sub>2 # ps))\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "by simp"], ["proof (state)\nthis:\n  1 + 1 +\n  length\n   (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n     (p\\<^sub>2 # ps))\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "ultimately"], ["proof (chain)\npicking this:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 1 + 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>2 # ps))\n  1 + 1 +\n  length\n   (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n     (p\\<^sub>2 # ps))\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 1 + 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>2 # ps))\n  1 + 1 +\n  length\n   (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n     (p\\<^sub>2 # ps))\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 1 +\n          length\n           (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n             (p\\<^sub>0 # p\\<^sub>2 # ps))", "by simp"], ["proof (state)\nthis:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t_find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           (p\\<^sub>0 # p\\<^sub>2 # ps))\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_.\n       t_find_closest uu_ uv_ []\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uu_) \\<le> uv_)\n                [])\n 2. \\<And>uw_ ux_ uy_.\n       t_find_closest uw_ ux_ [uy_]\n       \\<le> 1 +\n             length\n              (filter (\\<lambda>q. real_of_int (snd q - snd uw_) \\<le> ux_)\n                [uy_])", "qed auto"], ["", "corollary t_find_closest_bound:\n  fixes \\<delta> :: real and p :: point and ps :: \"point list\" and l :: int\n  assumes \"distinct (p # ps)\" \"sorted_snd (p # ps)\" \"0 \\<le> \\<delta>\" \"set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p' \\<in> set (p # ps). l - \\<delta> < fst p' \\<and> fst p' < l + \\<delta>\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse \\<delta> ps\\<^sub>L\" \"sparse \\<delta> ps\\<^sub>R\"\n  shows \"t_find_closest p \\<delta> ps \\<le> 8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> ps \\<le> 8", "using assms core_argument[of p ps \\<delta> ps\\<^sub>L ps\\<^sub>R l] t_find_closest_cnt[of p \\<delta> ps]"], ["proof (prove)\nusing this:\n  distinct (p # ps)\n  sorted_snd (p # ps)\n  0 \\<le> \\<delta>\n  set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\n  \\<forall>p'\\<in>set (p # ps).\n     real_of_int l - \\<delta> < real_of_int (fst p') \\<and>\n     real_of_int (fst p') < real_of_int l + \\<delta>\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  sparse \\<delta> ps\\<^sub>L\n  sparse \\<delta> ps\\<^sub>R\n  \\<lbrakk>distinct (p # ps); sorted_snd (p # ps); 0 \\<le> \\<delta>;\n   set (p # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n   \\<forall>q\\<in>set (p # ps).\n      real_of_int l - \\<delta> < real_of_int (fst q) \\<and>\n      real_of_int (fst q) < real_of_int l + \\<delta>;\n   \\<forall>q\\<in>ps\\<^sub>L. fst q \\<le> l;\n   \\<forall>q\\<in>ps\\<^sub>R. l \\<le> fst q; sparse \\<delta> ps\\<^sub>L;\n   sparse \\<delta> ps\\<^sub>R\\<rbrakk>\n  \\<Longrightarrow> length\n                     (filter\n                       (\\<lambda>q.\n                           real_of_int (snd q - snd p) \\<le> \\<delta>)\n                       ps)\n                    \\<le> 7\n  t_find_closest p \\<delta> ps\n  \\<le> 1 +\n        length\n         (filter (\\<lambda>q. real_of_int (snd q - snd p) \\<le> \\<delta>)\n           ps)\n\ngoal (1 subgoal):\n 1. t_find_closest p \\<delta> ps \\<le> 8", "by linarith"], ["", "fun t_find_closest_pair :: \"(point * point) \\<Rightarrow> point list \\<Rightarrow> nat\" where\n  \"t_find_closest_pair _ [] = 1\"\n| \"t_find_closest_pair _ [_] = 1\"\n| \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ps) = 1 + (\n    let p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ps in\n    t_find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ps + (\n    if dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1 then\n      t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n    else\n      t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) ps\n  ))\""], ["", "lemma t_find_closest_pair_eq_time_find_closest_pair_tm:\n  \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps = time (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps =\n    time (find_closest_pair_tm (c\\<^sub>0, c\\<^sub>1) ps)", "by (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: c\\<^sub>0 c\\<^sub>1 rule: t_find_closest_pair.induct)\n     (auto simp: time_simps find_closest_eq_val_find_closest_tm t_find_closest_eq_time_find_closest_tm)"], ["", "lemma t_find_closest_pair_bound:\n  assumes \"distinct ps\" \"sorted_snd ps\" \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> set ps. l - \\<Delta> < fst p \\<and> fst p < l + \\<Delta>\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse \\<Delta> ps\\<^sub>L\" \"sparse \\<Delta> ps\\<^sub>R\" \"\\<delta> \\<le> \\<Delta>\"\n  shows \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<le> 9 * length ps + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<le> 9 * length ps + 1", "using assms"], ["proof (prove)\nusing this:\n  distinct ps\n  sorted_snd ps\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\n  \\<forall>p\\<in>set ps.\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  sparse \\<Delta> ps\\<^sub>L\n  sparse \\<Delta> ps\\<^sub>R\n  \\<delta> \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps \\<le> 9 * length ps + 1", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: \\<delta> c\\<^sub>0 c\\<^sub>1 ps\\<^sub>L ps\\<^sub>R rule: t_find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   distinct (p\\<^sub>2 # ps); sorted_snd (p\\<^sub>2 # ps);\n   ?\\<delta> =\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   set (p\\<^sub>2 # ps) = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n      real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n      real_of_int (fst p) < real_of_int l + \\<Delta>;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> l;\n   \\<forall>p\\<in>?ps\\<^sub>R. l \\<le> fst p; sparse \\<Delta> ?ps\\<^sub>L;\n   sparse \\<Delta> ?ps\\<^sub>R; ?\\<delta> \\<le> \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (p\\<^sub>2 # ps)\n                    \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   distinct (p\\<^sub>2 # ps); sorted_snd (p\\<^sub>2 # ps);\n   ?\\<delta> =\n   dist\n    (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   set (p\\<^sub>2 # ps) = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n      real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n      real_of_int (fst p) < real_of_int l + \\<Delta>;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> l;\n   \\<forall>p\\<in>?ps\\<^sub>R. l \\<le> fst p; sparse \\<Delta> ?ps\\<^sub>L;\n   sparse \\<Delta> ?ps\\<^sub>R; ?\\<delta> \\<le> \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\n                    \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set (p\\<^sub>0 # p\\<^sub>2 # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\n  \\<forall>p\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  sparse \\<Delta> ps\\<^sub>L\n  sparse \\<Delta> ps\\<^sub>R\n  \\<delta> \\<le> \\<Delta>\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "let ?ps = \"p\\<^sub>2 # ps\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "define p\\<^sub>1 where p\\<^sub>1_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ?ps\""], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "define PS\\<^sub>L where PS\\<^sub>L_def: \"PS\\<^sub>L = ps\\<^sub>L - { p\\<^sub>0 }\""], ["proof (state)\nthis:\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "define PS\\<^sub>R where PS\\<^sub>R_def: \"PS\\<^sub>R = ps\\<^sub>R - { p\\<^sub>0 }\""], ["proof (state)\nthis:\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "note defs = p\\<^sub>1_def PS\\<^sub>L_def PS\\<^sub>R_def"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have *: \"0 \\<le> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> \\<Delta>", "using \"3.prems\"(3,10) zero_le_dist[of c\\<^sub>0 c\\<^sub>1]"], ["proof (prove)\nusing this:\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta> \\<le> \\<Delta>\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. 0 \\<le> \\<Delta>", "by argo"], ["proof (state)\nthis:\n  0 \\<le> \\<Delta>\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "hence \"t_find_closest p\\<^sub>0 \\<Delta> ?ps \\<le> 8\""], ["proof (prove)\nusing this:\n  0 \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. t_find_closest p\\<^sub>0 \\<Delta> (p\\<^sub>2 # ps) \\<le> 8", "using t_find_closest_bound[of p\\<^sub>0 ?ps \\<Delta> ps\\<^sub>L ps\\<^sub>R] \"3.prems\""], ["proof (prove)\nusing this:\n  0 \\<le> \\<Delta>\n  \\<lbrakk>distinct (p\\<^sub>0 # p\\<^sub>2 # ps);\n   sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps); 0 \\<le> \\<Delta>;\n   set (p\\<^sub>0 # p\\<^sub>2 # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n   \\<forall>p'\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n      real_of_int ?l - \\<Delta> < real_of_int (fst p') \\<and>\n      real_of_int (fst p') < real_of_int ?l + \\<Delta>;\n   \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> ?l;\n   \\<forall>p\\<in>ps\\<^sub>R. ?l \\<le> fst p; sparse \\<Delta> ps\\<^sub>L;\n   sparse \\<Delta> ps\\<^sub>R\\<rbrakk>\n  \\<Longrightarrow> t_find_closest p\\<^sub>0 \\<Delta> (p\\<^sub>2 # ps)\n                    \\<le> 8\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set (p\\<^sub>0 # p\\<^sub>2 # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\n  \\<forall>p\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  sparse \\<Delta> ps\\<^sub>L\n  sparse \\<Delta> ps\\<^sub>R\n  \\<delta> \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. t_find_closest p\\<^sub>0 \\<Delta> (p\\<^sub>2 # ps) \\<le> 8", "by blast"], ["proof (state)\nthis:\n  t_find_closest p\\<^sub>0 \\<Delta> (p\\<^sub>2 # ps) \\<le> 8\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "hence A: \"t_find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ?ps \\<le> 8\""], ["proof (prove)\nusing this:\n  t_find_closest p\\<^sub>0 \\<Delta> (p\\<^sub>2 # ps) \\<le> 8\n\ngoal (1 subgoal):\n 1. t_find_closest p\\<^sub>0\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (p\\<^sub>2 # ps)\n    \\<le> 8", "by (metis \"3.prems\"(3,10) order_trans t_find_closest_mono)"], ["proof (state)\nthis:\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<le> 8\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have B: \"distinct ?ps\" \"sorted_snd ?ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (p\\<^sub>2 # ps) &&& sorted_snd (p\\<^sub>2 # ps)", "using \"3.prems\"(1,2) sorted_snd_def"], ["proof (prove)\nusing this:\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. distinct (p\\<^sub>2 # ps) &&& sorted_snd (p\\<^sub>2 # ps)", "by simp_all"], ["proof (state)\nthis:\n  distinct (p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have C: \"set ?ps = PS\\<^sub>L \\<union> PS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (p\\<^sub>2 # ps) = PS\\<^sub>L \\<union> PS\\<^sub>R", "using defs \"3.prems\"(1,4)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n  distinct (p\\<^sub>0 # p\\<^sub>2 # ps)\n  set (p\\<^sub>0 # p\\<^sub>2 # ps) = ps\\<^sub>L \\<union> ps\\<^sub>R\n\ngoal (1 subgoal):\n 1. set (p\\<^sub>2 # ps) = PS\\<^sub>L \\<union> PS\\<^sub>R", "by auto"], ["proof (state)\nthis:\n  set (p\\<^sub>2 # ps) = PS\\<^sub>L \\<union> PS\\<^sub>R\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have D: \"\\<forall>p \\<in> set ?ps. l - \\<Delta> < fst p \\<and> fst p < l + \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n       real_of_int (fst p) < real_of_int l + \\<Delta>", "using \"3.prems\"(5)"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (p\\<^sub>0 # p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n       real_of_int (fst p) < real_of_int l + \\<Delta>", "by simp"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have E: \"\\<forall>p \\<in> PS\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> PS\\<^sub>R. l \\<le> fst p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>PS\\<^sub>L. fst p \\<le> l &&&\n    \\<forall>p\\<in>PS\\<^sub>R. l \\<le> fst p", "using defs \"3.prems\"(6,7)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>PS\\<^sub>L. fst p \\<le> l &&&\n    \\<forall>p\\<in>PS\\<^sub>R. l \\<le> fst p", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>p\\<in>PS\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>PS\\<^sub>R. l \\<le> fst p\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "have F: \"sparse \\<Delta> PS\\<^sub>L\" \"sparse \\<Delta> PS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse \\<Delta> PS\\<^sub>L &&& sparse \\<Delta> PS\\<^sub>R", "using defs \"3.prems\"(8,9) sparse_def"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n  sparse \\<Delta> ps\\<^sub>L\n  sparse \\<Delta> ps\\<^sub>R\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse \\<Delta> PS\\<^sub>L &&& sparse \\<Delta> PS\\<^sub>R", "by simp_all"], ["proof (state)\nthis:\n  sparse \\<Delta> PS\\<^sub>L\n  sparse \\<Delta> PS\\<^sub>R\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>\\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    distinct (v # va); sorted_snd (v # va);\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n                    \\<forall>p\\<in>set (v # va).\n                       real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n                       real_of_int (fst p) < real_of_int l + \\<Delta>;\n                    \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n                    \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n                    sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n                    \\<delta> \\<le> \\<Delta>\\<rbrakk>\n                   \\<Longrightarrow> t_find_closest_pair\n(c\\<^sub>0, c\\<^sub>1) (v # va)\n                                     \\<le> 9 * length (v # va) + 1;\n        \\<And>x \\<delta> ps\\<^sub>L ps\\<^sub>R.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            distinct (v # va); sorted_snd (v # va);\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            set (v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n            \\<forall>p\\<in>set (v # va).\n               real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n               real_of_int (fst p) < real_of_int l + \\<Delta>;\n            \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n            \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n            sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n            \\<delta> \\<le> \\<Delta>\\<rbrakk>\n           \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, x) (v # va)\n                             \\<le> 9 * length (v # va) + 1;\n        distinct (p\\<^sub>0 # v # va); sorted_snd (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set (p\\<^sub>0 # v # va) = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set (p\\<^sub>0 # v # va).\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                          (p\\<^sub>0 # v # va)\n                         \\<le> 9 * length (p\\<^sub>0 # v # va) + 1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "proof (cases \"dist c\\<^sub>0 c\\<^sub>1 \\<le> dist p\\<^sub>0 p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "case True"], ["proof (state)\nthis:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "hence \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ?ps \\<le> 9 * length ?ps + 1\""], ["proof (prove)\nusing this:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>2 # ps) + 1", "using \"3.hyps\"(1) \"3.prems\"(3,10) defs(1) B C D E F"], ["proof (prove)\nusing this:\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   distinct (p\\<^sub>2 # ps); sorted_snd (p\\<^sub>2 # ps);\n   ?\\<delta> =\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   set (p\\<^sub>2 # ps) = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n      real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n      real_of_int (fst p) < real_of_int l + \\<Delta>;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> l;\n   \\<forall>p\\<in>?ps\\<^sub>R. l \\<le> fst p; sparse \\<Delta> ?ps\\<^sub>L;\n   sparse \\<Delta> ?ps\\<^sub>R; ?\\<delta> \\<le> \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n                     (p\\<^sub>2 # ps)\n                    \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta> \\<le> \\<Delta>\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  distinct (p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>2 # ps)\n  set (p\\<^sub>2 # ps) = PS\\<^sub>L \\<union> PS\\<^sub>R\n  \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n  \\<forall>p\\<in>PS\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>PS\\<^sub>R. l \\<le> fst p\n  sparse \\<Delta> PS\\<^sub>L\n  sparse \\<Delta> PS\\<^sub>R\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>2 # ps) + 1", "by blast"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "moreover"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "have \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ?ps) =\n                   1 + t_find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ?ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ?ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n     (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\\<^sub>0\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (p\\<^sub>2 # ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)", "using defs True"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n     (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\\<^sub>0\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (p\\<^sub>2 # ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n 2. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "ultimately"], ["proof (chain)\npicking this:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "using A"], ["proof (prove)\nusing this:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "by auto"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "case False"], ["proof (state)\nthis:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "moreover"], ["proof (state)\nthis:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "have \"0 \\<le> dist p\\<^sub>0 p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>1 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by auto"], ["proof (state)\nthis:\n  0 \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  0 \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "have \"t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) ?ps \\<le> 9 * length ?ps + 1\""], ["proof (prove)\nusing this:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  0 \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>2 # ps) + 1", "using \"3.hyps\"(2) \"3.prems\"(3,10) defs(1) B C D E F"], ["proof (prove)\nusing this:\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  0 \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   distinct (p\\<^sub>2 # ps); sorted_snd (p\\<^sub>2 # ps);\n   ?\\<delta> =\n   dist\n    (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   set (p\\<^sub>2 # ps) = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n      real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n      real_of_int (fst p) < real_of_int l + \\<Delta>;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> l;\n   \\<forall>p\\<in>?ps\\<^sub>R. l \\<le> fst p; sparse \\<Delta> ?ps\\<^sub>L;\n   sparse \\<Delta> ?ps\\<^sub>R; ?\\<delta> \\<le> \\<Delta>\\<rbrakk>\n  \\<Longrightarrow> t_find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps)\n                    \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta> \\<le> \\<Delta>\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  distinct (p\\<^sub>2 # ps)\n  sorted_snd (p\\<^sub>2 # ps)\n  set (p\\<^sub>2 # ps) = PS\\<^sub>L \\<union> PS\\<^sub>R\n  \\<forall>p\\<in>set (p\\<^sub>2 # ps).\n     real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n     real_of_int (fst p) < real_of_int l + \\<Delta>\n  \\<forall>p\\<in>PS\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>PS\\<^sub>R. l \\<le> fst p\n  sparse \\<Delta> PS\\<^sub>L\n  sparse \\<Delta> PS\\<^sub>R\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>2 # ps) + 1", "by auto"], ["proof (state)\nthis:\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "moreover"], ["proof (state)\nthis:\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "have \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ?ps) =\n                   1 + t_find_closest p\\<^sub>0 (dist c\\<^sub>0 c\\<^sub>1) ?ps + t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) ?ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n     (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\\<^sub>0\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (p\\<^sub>2 # ps) +\n    t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)", "using defs False"], ["proof (prove)\nusing this:\n  p\\<^sub>1 =\n  find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  PS\\<^sub>L = ps\\<^sub>L - {p\\<^sub>0}\n  PS\\<^sub>R = ps\\<^sub>R - {p\\<^sub>0}\n  \\<not> dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1)\n     (p\\<^sub>0 # p\\<^sub>2 # ps) =\n    1 +\n    t_find_closest p\\<^sub>0\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (p\\<^sub>2 # ps) +\n    t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "ultimately"], ["proof (chain)\npicking this:\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "using A"], ["proof (prove)\nusing this:\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>2 # ps) + 1\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps) =\n  1 +\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps) +\n  t_find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  t_find_closest p\\<^sub>0\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (p\\<^sub>2 # ps)\n  \\<le> 8\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n    \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1", "by simp"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<le> 9 * length (p\\<^sub>0 # p\\<^sub>2 # ps) + 1\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct []; sorted_snd [];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) []\n                         \\<le> 9 * length [] + 1\n 2. \\<And>uw_ c\\<^sub>0 c\\<^sub>1 \\<delta> ps\\<^sub>L ps\\<^sub>R.\n       \\<lbrakk>distinct [uw_]; sorted_snd [uw_];\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        set [uw_] = ps\\<^sub>L \\<union> ps\\<^sub>R;\n        \\<forall>p\\<in>set [uw_].\n           real_of_int l - \\<Delta> < real_of_int (fst p) \\<and>\n           real_of_int (fst p) < real_of_int l + \\<Delta>;\n        \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l;\n        \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p;\n        sparse \\<Delta> ps\\<^sub>L; sparse \\<Delta> ps\\<^sub>R;\n        \\<delta> \\<le> \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uw_]\n                         \\<le> 9 * length [uw_] + 1", "qed auto"], ["", "fun t_combine :: \"(point * point) \\<Rightarrow> (point * point) \\<Rightarrow> int \\<Rightarrow> point list \\<Rightarrow> nat\" where\n  \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps = 1 + (\n    let (c\\<^sub>0, c\\<^sub>1) = if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) in\n    let ps' = filter (\\<lambda>p. dist p (l, snd p) < dist c\\<^sub>0 c\\<^sub>1) ps in\n    time (filter_tm (\\<lambda>p. dist p (l, snd p) < dist c\\<^sub>0 c\\<^sub>1) ps) + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n  )\""], ["", "lemma t_combine_eq_time_combine_tm:\n  \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps = time (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n    time\n     (combine_tm (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n       (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps)", "by (auto simp: combine_tm.simps time_simps t_find_closest_pair_eq_time_find_closest_pair_tm filter_eq_val_filter_tm)"], ["", "lemma t_combine_bound:\n  fixes ps :: \"point list\"\n  assumes \"distinct ps\" \"sorted_snd ps\" \"set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\"\n  assumes \"\\<forall>p \\<in> ps\\<^sub>L. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R. l \\<le> fst p\"\n  assumes \"sparse (dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L) ps\\<^sub>L\" \"sparse (dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R) ps\\<^sub>R\"\n  shows \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps \\<le> 10 * length ps + 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "obtain c\\<^sub>0 c\\<^sub>1 where c_def:\n    \"(c\\<^sub>0, c\\<^sub>1) = (if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>0 c\\<^sub>1.\n        (c\\<^sub>0, c\\<^sub>1) =\n        (if dist\n             (case p\\<^sub>0\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case p\\<^sub>1\\<^sub>L of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            < dist\n               (case p\\<^sub>0\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n               (case p\\<^sub>1\\<^sub>R of\n                (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n         else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "let ?P = \"(\\<lambda>p. dist p (l, snd p) < dist c\\<^sub>0 c\\<^sub>1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "define ps' where ps'_def: \"ps' = filter ?P ps\""], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "define ps\\<^sub>L' where ps\\<^sub>L'_def: \"ps\\<^sub>L' = { p \\<in> ps\\<^sub>L. ?P p }\""], ["proof (state)\nthis:\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "define ps\\<^sub>R' where ps\\<^sub>R'_def: \"ps\\<^sub>R' = { p \\<in> ps\\<^sub>R. ?P p }\""], ["proof (state)\nthis:\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "note defs = c_def ps'_def ps\\<^sub>L'_def ps\\<^sub>R'_def"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"sparse (dist c\\<^sub>0 c\\<^sub>1) ps\\<^sub>L\" \"sparse (dist c\\<^sub>0 c\\<^sub>1) ps\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L &&&\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R", "using assms(6,7) sparse_mono c_def"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case p\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  sparse\n   (dist\n     (case p\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case p\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n  \\<lbrakk>sparse ?\\<Delta> ?P; ?\\<delta> \\<le> ?\\<Delta>\\<rbrakk>\n  \\<Longrightarrow> sparse ?\\<delta> ?P\n  (c\\<^sub>0, c\\<^sub>1) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L &&&\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "hence \"sparse (dist c\\<^sub>0 c\\<^sub>1) ps\\<^sub>L'\" \"sparse (dist c\\<^sub>0 c\\<^sub>1) ps\\<^sub>R'\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L' &&&\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R'", "using ps\\<^sub>L'_def ps\\<^sub>R'_def sparse_def"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  sparse ?\\<delta> ?ps =\n  (\\<forall>p\\<^sub>0\\<in>?ps.\n      \\<forall>p\\<^sub>1\\<in>?ps.\n         p\\<^sub>0 \\<noteq> p\\<^sub>1 \\<longrightarrow>\n         ?\\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>L' &&&\n    sparse\n     (dist\n       (case c\\<^sub>0 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case c\\<^sub>1 of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps\\<^sub>R'", "by auto"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L'\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L'\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"distinct ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ps'", "using ps'_def assms(1)"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  distinct ps\n\ngoal (1 subgoal):\n 1. distinct ps'", "by simp"], ["proof (state)\nthis:\n  distinct ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  distinct ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"sorted_snd ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd ps'", "using ps'_def assms(2) sorted_snd_def sorted_wrt_filter"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  sorted_snd ps\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  sorted_wrt ?f ?xs \\<Longrightarrow> sorted_wrt ?f (filter ?P ?xs)\n\ngoal (1 subgoal):\n 1. sorted_snd ps'", "by blast"], ["proof (state)\nthis:\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"0 \\<le> dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> dist\n             (case c\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case c\\<^sub>1 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by simp"], ["proof (state)\nthis:\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'", "using assms(3) defs(2,3,4) filter_Un"], ["proof (prove)\nusing this:\n  set ps = ps\\<^sub>L \\<union> ps\\<^sub>R\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  set ?xs = ?A \\<union> ?B \\<Longrightarrow>\n  set (filter ?P ?xs) = {x \\<in> ?A. ?P x} \\<union> {x \\<in> ?B. ?P x}\n\ngoal (1 subgoal):\n 1. set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'", "by auto"], ["proof (state)\nthis:\n  set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"\\<forall>p \\<in> set ps'. l - dist c\\<^sub>0 c\\<^sub>1 < fst p \\<and> fst p < l + dist c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps'.\n       real_of_int l -\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < real_of_int (fst p) \\<and>\n       real_of_int (fst p)\n       < real_of_int l +\n         dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "using ps'_def dist_transform"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (dist (case ?p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case (?l, snd ?p) of\n     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   < ?\\<delta>) =\n  (real_of_int ?l - ?\\<delta> < real_of_int (fst ?p) \\<and>\n   real_of_int (fst ?p) < real_of_int ?l + ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps'.\n       real_of_int l -\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < real_of_int (fst p) \\<and>\n       real_of_int (fst p)\n       < real_of_int l +\n         dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))", "by force"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps'.\n     real_of_int l -\n     dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < real_of_int (fst p) \\<and>\n     real_of_int (fst p)\n     < real_of_int l +\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps'.\n     real_of_int l -\n     dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < real_of_int (fst p) \\<and>\n     real_of_int (fst p)\n     < real_of_int l +\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"\\<forall>p \\<in> ps\\<^sub>L'. fst p \\<le> l\" \"\\<forall>p \\<in> ps\\<^sub>R'. l \\<le> fst p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l &&&\n    \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p", "using assms(4,5) ps\\<^sub>L'_def ps\\<^sub>R'_def"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>ps\\<^sub>L. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R. l \\<le> fst p\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l &&&\n    \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p", "by blast+"], ["proof (state)\nthis:\n  \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "ultimately"], ["proof (chain)\npicking this:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L'\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R'\n  distinct ps'\n  sorted_snd ps'\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\n  \\<forall>p\\<in>set ps'.\n     real_of_int l -\n     dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < real_of_int (fst p) \\<and>\n     real_of_int (fst p)\n     < real_of_int l +\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p", "have \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1\""], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L'\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R'\n  distinct ps'\n  sorted_snd ps'\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\n  \\<forall>p\\<in>set ps'.\n     real_of_int l -\n     dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < real_of_int (fst p) \\<and>\n     real_of_int (fst p)\n     < real_of_int l +\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1", "using t_find_closest_pair_bound"], ["proof (prove)\nusing this:\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>L'\n  sparse\n   (dist\n     (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case c\\<^sub>1 of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\\<^sub>R'\n  distinct ps'\n  sorted_snd ps'\n  0 \\<le> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  set ps' = ps\\<^sub>L' \\<union> ps\\<^sub>R'\n  \\<forall>p\\<in>set ps'.\n     real_of_int l -\n     dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     < real_of_int (fst p) \\<and>\n     real_of_int (fst p)\n     < real_of_int l +\n       dist\n        (case c\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case c\\<^sub>1 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<forall>p\\<in>ps\\<^sub>L'. fst p \\<le> l\n  \\<forall>p\\<in>ps\\<^sub>R'. l \\<le> fst p\n  \\<lbrakk>distinct ?ps; sorted_snd ?ps;\n   ?\\<delta> =\n   dist\n    (case ?c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?c\\<^sub>1 of\n     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   set ?ps = ?ps\\<^sub>L \\<union> ?ps\\<^sub>R;\n   \\<forall>p\\<in>set ?ps.\n      real_of_int ?l - ?\\<Delta> < real_of_int (fst p) \\<and>\n      real_of_int (fst p) < real_of_int ?l + ?\\<Delta>;\n   \\<forall>p\\<in>?ps\\<^sub>L. fst p \\<le> ?l;\n   \\<forall>p\\<in>?ps\\<^sub>R. ?l \\<le> fst p; sparse ?\\<Delta> ?ps\\<^sub>L;\n   sparse ?\\<Delta> ?ps\\<^sub>R; ?\\<delta> \\<le> ?\\<Delta>\\<rbrakk>\n  \\<Longrightarrow> t_find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps\n                    \\<le> 9 * length ?ps + 1\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1", "by blast"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "moreover"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"length ps' \\<le> length ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ps' \\<le> length ps", "using ps'_def"], ["proof (prove)\nusing this:\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n\ngoal (1 subgoal):\n 1. length ps' \\<le> length ps", "by simp"], ["proof (state)\nthis:\n  length ps' \\<le> length ps\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "ultimately"], ["proof (chain)\npicking this:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1\n  length ps' \\<le> length ps", "have *: \"t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps + 1\""], ["proof (prove)\nusing this:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps' + 1\n  length ps' \\<le> length ps\n\ngoal (1 subgoal):\n 1. t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps + 1", "by simp"], ["proof (state)\nthis:\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps + 1\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n        1 + time (filter_tm ?P ps) + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n    1 +\n    time\n     (filter_tm\n       (\\<lambda>x.\n           dist\n            (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case (l, snd (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))) of\n             (x, y) \\<Rightarrow> (real_of_int x, y))\n           < dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n       ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'", "using defs"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>x.\n       dist (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd (case x of\n                       (x, y) \\<Rightarrow>\n                         (real_of_int x, real_of_int y))) of\n         (x, y) \\<Rightarrow> (real_of_int x, y))\n       < dist\n          (case c\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case c\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps\\<^sub>L' =\n  {p \\<in> ps\\<^sub>L.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n  ps\\<^sub>R' =\n  {p \\<in> ps\\<^sub>R.\n   dist\n    (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n     (x, y) \\<Rightarrow> (x, real_of_int y))\n    (case (l, snd (case case p of (x, y) \\<Rightarrow> (real_of_int x, y) of\n                   (x, y) \\<Rightarrow> (x, real_of_int y))) of\n     (x, y) \\<Rightarrow> (real_of_int x, y))\n   < dist\n      (case c\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case c\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))}\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n    1 +\n    time\n     (filter_tm\n       (\\<lambda>x.\n           dist\n            (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case (l, snd (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))) of\n             (x, y) \\<Rightarrow> (real_of_int x, y))\n           < dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n       ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n  1 +\n  time\n   (filter_tm\n     (\\<lambda>x.\n         dist\n          (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case (l, snd (case x of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))) of\n           (x, y) \\<Rightarrow> (real_of_int x, y))\n         < dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "also"], ["proof (state)\nthis:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n  1 +\n  time\n   (filter_tm\n     (\\<lambda>x.\n         dist\n          (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case (l, snd (case x of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))) of\n           (x, y) \\<Rightarrow> (real_of_int x, y))\n         < dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "have \"... = 2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 +\n    time\n     (filter_tm\n       (\\<lambda>x.\n           dist\n            (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case (l, snd (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))) of\n             (x, y) \\<Rightarrow> (real_of_int x, y))\n           < dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n       ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' =\n    2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'", "using time_filter_tm"], ["proof (prove)\nusing this:\n  time (filter_tm ?P ?xs) = length ?xs + 1\n\ngoal (1 subgoal):\n 1. 1 +\n    time\n     (filter_tm\n       (\\<lambda>x.\n           dist\n            (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case (l, snd (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))) of\n             (x, y) \\<Rightarrow> (real_of_int x, y))\n           < dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n       ps) +\n    t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' =\n    2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'", "by auto"], ["proof (state)\nthis:\n  1 +\n  time\n   (filter_tm\n     (\\<lambda>x.\n         dist\n          (case x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case (l, snd (case x of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))) of\n           (x, y) \\<Rightarrow> (real_of_int x, y))\n         < dist\n            (case c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     ps) +\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' =\n  2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "finally"], ["proof (chain)\npicking this:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n  2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'", "show ?thesis"], ["proof (prove)\nusing this:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n  2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "using *"], ["proof (prove)\nusing this:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps =\n  2 + length ps + t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps'\n  t_find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps' \\<le> 9 * length ps + 1\n\ngoal (1 subgoal):\n 1. t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n     (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n    \\<le> 10 * length ps + 3", "by simp"], ["proof (state)\nthis:\n  t_combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  \\<le> 10 * length ps + 3\n\ngoal:\nNo subgoals!", "qed"], ["", "declare t_combine.simps [simp del]"], ["", "subsubsection \"Divide and Conquer Algorithm\""], ["", "lemma time_closest_pair_rec_tm_simps_1:\n  assumes \"length xs \\<le> 3\"\n  shows \"time (closest_pair_rec_tm xs) = 1 + time (length_tm xs) + time (mergesort_tm snd xs) + time (closest_pair_bf_tm xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm xs) =\n    1 + time (length_tm xs) + time (mergesort_tm snd xs) +\n    time (closest_pair_bf_tm xs)", "using assms"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm xs) =\n    1 + time (length_tm xs) + time (mergesort_tm snd xs) +\n    time (closest_pair_bf_tm xs)", "by  (auto simp: time_simps length_eq_val_length_tm)"], ["", "lemma time_closest_pair_rec_tm_simps_2:\n  assumes \"\\<not> (length xs \\<le> 3)\"\n  shows \"time (closest_pair_rec_tm xs) = 1 + (\n    let (xs\\<^sub>L, xs\\<^sub>R) = val (split_at_tm (length xs div 2) xs) in\n    let (ys\\<^sub>L, p\\<^sub>L) = val (closest_pair_rec_tm xs\\<^sub>L) in\n    let (ys\\<^sub>R, p\\<^sub>R) = val (closest_pair_rec_tm xs\\<^sub>R) in\n    let ys = val (merge_tm (\\<lambda>p. snd p) ys\\<^sub>L ys\\<^sub>R) in\n    time (length_tm xs) + time (split_at_tm (length xs div 2) xs) + time (closest_pair_rec_tm xs\\<^sub>L) +\n    time (closest_pair_rec_tm xs\\<^sub>R) + time (merge_tm (\\<lambda>p. snd p) ys\\<^sub>L ys\\<^sub>R) + t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm xs) =\n    1 +\n    (let (xs\\<^sub>L, xs\\<^sub>R) =\n           Time_Monad.val (split_at_tm (length xs div 2) xs);\n         (ys\\<^sub>L, p\\<^sub>L) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L);\n         (ys\\<^sub>R, p\\<^sub>R) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R);\n         ys = Time_Monad.val (merge_tm snd ys\\<^sub>L ys\\<^sub>R)\n     in time (length_tm xs) + time (split_at_tm (length xs div 2) xs) +\n        time (closest_pair_rec_tm xs\\<^sub>L) +\n        time (closest_pair_rec_tm xs\\<^sub>R) +\n        time (merge_tm snd ys\\<^sub>L ys\\<^sub>R) +\n        t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm xs) =\n    1 +\n    (let (xs\\<^sub>L, xs\\<^sub>R) =\n           Time_Monad.val (split_at_tm (length xs div 2) xs);\n         (ys\\<^sub>L, p\\<^sub>L) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L);\n         (ys\\<^sub>R, p\\<^sub>R) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R);\n         ys = Time_Monad.val (merge_tm snd ys\\<^sub>L ys\\<^sub>R)\n     in time (length_tm xs) + time (split_at_tm (length xs div 2) xs) +\n        time (closest_pair_rec_tm xs\\<^sub>L) +\n        time (closest_pair_rec_tm xs\\<^sub>R) +\n        time (merge_tm snd ys\\<^sub>L ys\\<^sub>R) +\n        t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys)", "apply (subst closest_pair_rec_tm.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    time\n     (length_tm xs \\<bind>\n      (\\<lambda>n.\n          if n \\<le> 3\n          then mergesort_tm snd xs \\<bind>\n               (\\<lambda>ys.\n                   closest_pair_bf_tm xs \\<bind>\n                   (\\<lambda>p. return (ys, p)))\n          else split_at_tm (n div 2) xs \\<bind>\n               (\\<lambda>(xs\\<^sub>L, xs\\<^sub>R).\n                   closest_pair_rec_tm xs\\<^sub>L \\<bind>\n                   (\\<lambda>(ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                       p\\<^sub>1\\<^sub>L).\n                       closest_pair_rec_tm xs\\<^sub>R \\<bind>\n                       (\\<lambda>(ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R).\n                           merge_tm snd ys\\<^sub>L ys\\<^sub>R \\<bind>\n                           (\\<lambda>ys.\n                               combine_tm\n                                (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                                (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                                (fst (hd xs\\<^sub>R)) ys \\<bind>\n                               (\\<lambda>(p\\<^sub>0, p\\<^sub>1).\n                                   return\n                                    (ys, p\\<^sub>0, p\\<^sub>1))))))) \\<bind>\n      tick) =\n    1 +\n    (let (xs\\<^sub>L, xs\\<^sub>R) =\n           Time_Monad.val (split_at_tm (length xs div 2) xs);\n         (ys\\<^sub>L, p\\<^sub>L) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L);\n         (ys\\<^sub>R, p\\<^sub>R) =\n           Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R);\n         ys = Time_Monad.val (merge_tm snd ys\\<^sub>L ys\\<^sub>R)\n     in time (length_tm xs) + time (split_at_tm (length xs div 2) xs) +\n        time (closest_pair_rec_tm xs\\<^sub>L) +\n        time (closest_pair_rec_tm xs\\<^sub>R) +\n        time (merge_tm snd ys\\<^sub>L ys\\<^sub>R) +\n        t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys)", "by (auto simp del: closest_pair_rec_tm.simps\n           simp add: time_simps length_eq_val_length_tm t_combine_eq_time_combine_tm\n              split: prod.split)"], ["", "function closest_pair_recurrence :: \"nat \\<Rightarrow> real\" where\n  \"n \\<le> 3 \\<Longrightarrow> closest_pair_recurrence n = 3 + n + mergesort_recurrence n + n * n\"\n| \"3 < n \\<Longrightarrow> closest_pair_recurrence n = 7 + 13 * n +\n    closest_pair_recurrence (nat \\<lfloor>real n / 2\\<rfloor>) + closest_pair_recurrence (nat \\<lceil>real n / 2\\<rceil>)\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n \\<le> 3; x = n\\<rbrakk> \\<Longrightarrow> P;\n        \\<And>n. \\<lbrakk>3 < n; x = n\\<rbrakk> \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n na.\n       \\<lbrakk>n \\<le> 3; na \\<le> 3; n = na\\<rbrakk>\n       \\<Longrightarrow> 3 + real n + mergesort_recurrence n +\n                         real n * real n =\n                         3 + real na + mergesort_recurrence na +\n                         real na * real na\n 3. \\<And>n na.\n       \\<lbrakk>n \\<le> 3; 3 < na; n = na\\<rbrakk>\n       \\<Longrightarrow> 3 + real n + mergesort_recurrence n +\n                         real n * real n =\n                         7 + 13 * real na +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lfloor>real na / 2\\<rfloor>) +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lceil>real na / 2\\<rceil>)\n 4. \\<And>n na.\n       \\<lbrakk>3 < n; 3 < na; n = na\\<rbrakk>\n       \\<Longrightarrow> 7 + 13 * real n +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lfloor>real n / 2\\<rfloor>) +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lceil>real n / 2\\<rceil>) =\n                         7 + 13 * real na +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lfloor>real na / 2\\<rfloor>) +\n                         closest_pair_recurrence_sumC\n                          (nat \\<lceil>real na / 2\\<rceil>)", "by force simp_all"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All closest_pair_recurrence_dom", "by akra_bazzi_termination simp_all"], ["", "lemma closest_pair_recurrence_nonneg[simp]:\n  \"0 \\<le> closest_pair_recurrence n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> closest_pair_recurrence n", "by (induction n rule: closest_pair_recurrence.induct) auto"], ["", "lemma time_closest_pair_rec_conv_closest_pair_recurrence:\n  assumes \"distinct ps\" \"sorted_fst ps\"\n  shows \"time (closest_pair_rec_tm ps) \\<le> closest_pair_recurrence (length ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "using assms"], ["proof (prove)\nusing this:\n  distinct ps\n  sorted_fst ps\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "proof (induction ps rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   real (time (closest_pair_rec_tm ys))\n                   \\<le> closest_pair_recurrence (length ys);\n        distinct xs; sorted_fst xs\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_rec_tm xs))\n                         \\<le> closest_pair_recurrence (length xs)", "case (1 ps)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length ps \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     real (time (closest_pair_rec_tm ys))\n     \\<le> closest_pair_recurrence (length ys)\n  distinct ps\n  sorted_fst ps\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   real (time (closest_pair_rec_tm ys))\n                   \\<le> closest_pair_recurrence (length ys);\n        distinct xs; sorted_fst xs\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_rec_tm xs))\n                         \\<le> closest_pair_recurrence (length xs)", "let ?n = \"length ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   distinct ys \\<longrightarrow>\n                   sorted_fst ys \\<longrightarrow>\n                   real (time (closest_pair_rec_tm ys))\n                   \\<le> closest_pair_recurrence (length ys);\n        distinct xs; sorted_fst xs\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_rec_tm xs))\n                         \\<le> closest_pair_recurrence (length xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "case True"], ["proof (state)\nthis:\n  length ps \\<le> 3\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence \"time (closest_pair_rec_tm ps) = 1 + time (length_tm ps) + time (mergesort_tm snd ps) + time (closest_pair_bf_tm ps)\""], ["proof (prove)\nusing this:\n  length ps \\<le> 3\n\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm ps) =\n    1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n    time (closest_pair_bf_tm ps)", "using time_closest_pair_rec_tm_simps_1"], ["proof (prove)\nusing this:\n  length ps \\<le> 3\n  length ?xs \\<le> 3 \\<Longrightarrow>\n  time (closest_pair_rec_tm ?xs) =\n  1 + time (length_tm ?xs) + time (mergesort_tm snd ?xs) +\n  time (closest_pair_bf_tm ?xs)\n\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm ps) =\n    1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n    time (closest_pair_bf_tm ps)", "by simp"], ["proof (state)\nthis:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n  time (closest_pair_bf_tm ps)\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n  time (closest_pair_bf_tm ps)\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"closest_pair_recurrence ?n = 3 + ?n + mergesort_recurrence ?n + ?n * ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair_recurrence (length ps) =\n    real (3 + length ps) + mergesort_recurrence (length ps) +\n    real (length ps * length ps)", "using True"], ["proof (prove)\nusing this:\n  length ps \\<le> 3\n\ngoal (1 subgoal):\n 1. closest_pair_recurrence (length ps) =\n    real (3 + length ps) + mergesort_recurrence (length ps) +\n    real (length ps * length ps)", "by simp"], ["proof (state)\nthis:\n  closest_pair_recurrence (length ps) =\n  real (3 + length ps) + mergesort_recurrence (length ps) +\n  real (length ps * length ps)\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  closest_pair_recurrence (length ps) =\n  real (3 + length ps) + mergesort_recurrence (length ps) +\n  real (length ps * length ps)\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"time (length_tm ps) \\<le> 1 + ?n\" \"time (mergesort_tm snd ps) \\<le> mergesort_recurrence ?n\"\n                  \"time (closest_pair_bf_tm ps) \\<le> 1 + ?n * ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time (length_tm ps) \\<le> 1 + length ps &&&\n    real (time (mergesort_tm snd ps))\n    \\<le> mergesort_recurrence (length ps) &&&\n    time (closest_pair_bf_tm ps) \\<le> 1 + length ps * length ps", "using time_length_tm[of ps] time_mergesort_conv_mergesort_recurrence[of snd ps] time_closest_pair_bf_tm[of ps]"], ["proof (prove)\nusing this:\n  time (length_tm ps) = length ps + 1\n  real (time (mergesort_tm snd ps)) \\<le> mergesort_recurrence (length ps)\n  time (closest_pair_bf_tm ps) \\<le> length ps * length ps + 1\n\ngoal (1 subgoal):\n 1. time (length_tm ps) \\<le> 1 + length ps &&&\n    real (time (mergesort_tm snd ps))\n    \\<le> mergesort_recurrence (length ps) &&&\n    time (closest_pair_bf_tm ps) \\<le> 1 + length ps * length ps", "by auto"], ["proof (state)\nthis:\n  time (length_tm ps) \\<le> 1 + length ps\n  real (time (mergesort_tm snd ps)) \\<le> mergesort_recurrence (length ps)\n  time (closest_pair_bf_tm ps) \\<le> 1 + length ps * length ps\n\ngoal (2 subgoals):\n 1. length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)\n 2. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "ultimately"], ["proof (chain)\npicking this:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n  time (closest_pair_bf_tm ps)\n  closest_pair_recurrence (length ps) =\n  real (3 + length ps) + mergesort_recurrence (length ps) +\n  real (length ps * length ps)\n  time (length_tm ps) \\<le> 1 + length ps\n  real (time (mergesort_tm snd ps)) \\<le> mergesort_recurrence (length ps)\n  time (closest_pair_bf_tm ps) \\<le> 1 + length ps * length ps", "show ?thesis"], ["proof (prove)\nusing this:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (mergesort_tm snd ps) +\n  time (closest_pair_bf_tm ps)\n  closest_pair_recurrence (length ps) =\n  real (3 + length ps) + mergesort_recurrence (length ps) +\n  real (length ps * length ps)\n  time (length_tm ps) \\<le> 1 + length ps\n  real (time (mergesort_tm snd ps)) \\<le> mergesort_recurrence (length ps)\n  time (closest_pair_bf_tm ps) \\<le> 1 + length ps * length ps\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "by linarith"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm ps))\n  \\<le> closest_pair_recurrence (length ps)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "case False"], ["proof (state)\nthis:\n  \\<not> length ps \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "obtain XS\\<^sub>L XS\\<^sub>R where XS_def: \"(XS\\<^sub>L, XS\\<^sub>R) = val (split_at_tm (?n div 2) ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        Time_Monad.val (split_at_tm (length ps div 2) ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        Time_Monad.val (split_at_tm (length ps div 2) ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "obtain YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L where CP\\<^sub>L_def: \"(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = val (closest_pair_rec_tm XS\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n        Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "obtain YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R where CP\\<^sub>R_def: \"(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = val (closest_pair_rec_tm XS\\<^sub>R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n        Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "define YS where \"YS = val (merge_tm (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R)\""], ["proof (state)\nthis:\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "obtain C\\<^sub>0 C\\<^sub>1 where C\\<^sub>0\\<^sub>1_def: \"(C\\<^sub>0, C\\<^sub>1) = val (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        Time_Monad.val\n         (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n           (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R))\n           YS) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1.\n        (C\\<^sub>0, C\\<^sub>1) =\n        Time_Monad.val\n         (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n           (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R))\n           YS) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "note defs = XS_def CP\\<^sub>L_def CP\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have XSLR: \"XS\\<^sub>L = take (?n div 2) ps\" \"XS\\<^sub>R = drop (?n div 2) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. XS\\<^sub>L = take (length ps div 2) ps &&&\n    XS\\<^sub>R = drop (length ps div 2) ps", "using defs"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. XS\\<^sub>L = take (length ps div 2) ps &&&\n    XS\\<^sub>R = drop (length ps div 2) ps", "by (auto simp: split_at_take_drop_conv split_at_eq_val_split_at_tm)"], ["proof (state)\nthis:\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence \"length XS\\<^sub>L = ?n div 2\" \"length XS\\<^sub>R = ?n - ?n div 2\""], ["proof (prove)\nusing this:\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n\ngoal (1 subgoal):\n 1. length XS\\<^sub>L = length ps div 2 &&&\n    length XS\\<^sub>R = length ps - length ps div 2", "by simp_all"], ["proof (state)\nthis:\n  length XS\\<^sub>L = length ps div 2\n  length XS\\<^sub>R = length ps - length ps div 2\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence *: \"(nat \\<lfloor>real ?n / 2\\<rfloor>) = length XS\\<^sub>L\" \"(nat \\<lceil>real ?n / 2\\<rceil>) = length XS\\<^sub>R\""], ["proof (prove)\nusing this:\n  length XS\\<^sub>L = length ps div 2\n  length XS\\<^sub>R = length ps - length ps div 2\n\ngoal (1 subgoal):\n 1. nat \\<lfloor>real (length ps) / 2\\<rfloor> = length XS\\<^sub>L &&&\n    nat \\<lceil>real (length ps) / 2\\<rceil> = length XS\\<^sub>R", "by linarith+"], ["proof (state)\nthis:\n  nat \\<lfloor>real (length ps) / 2\\<rfloor> = length XS\\<^sub>L\n  nat \\<lceil>real (length ps) / 2\\<rceil> = length XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"length XS\\<^sub>L = length YS\\<^sub>L\" \"length XS\\<^sub>R = length YS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length XS\\<^sub>L = length YS\\<^sub>L &&&\n    length XS\\<^sub>R = length YS\\<^sub>R", "using defs closest_pair_rec_set_length_sorted_snd closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. length XS\\<^sub>L = length YS\\<^sub>L &&&\n    length XS\\<^sub>R = length YS\\<^sub>R", "by metis+"], ["proof (state)\nthis:\n  length XS\\<^sub>L = length YS\\<^sub>L\n  length XS\\<^sub>R = length YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence L: \"?n = length YS\\<^sub>L + length YS\\<^sub>R\""], ["proof (prove)\nusing this:\n  length XS\\<^sub>L = length YS\\<^sub>L\n  length XS\\<^sub>R = length YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. length ps = length YS\\<^sub>L + length YS\\<^sub>R", "using defs XSLR"], ["proof (prove)\nusing this:\n  length XS\\<^sub>L = length YS\\<^sub>L\n  length XS\\<^sub>R = length YS\\<^sub>R\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n\ngoal (1 subgoal):\n 1. length ps = length YS\\<^sub>L + length YS\\<^sub>R", "by fastforce"], ["proof (state)\nthis:\n  length ps = length YS\\<^sub>L + length YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length ps", "using False XSLR"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length ps", "by simp_all"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"distinct XS\\<^sub>L\" \"sorted_fst XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>L &&& sorted_fst XS\\<^sub>L", "using XSLR \"1.prems\"(1,2) sorted_fst_def sorted_wrt_take"], ["proof (prove)\nusing this:\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n  distinct ps\n  sorted_fst ps\n  sorted_fst ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. fst p\\<^sub>0 \\<le> fst p\\<^sub>1) ?ps\n  sorted_wrt ?f ?xs \\<Longrightarrow> sorted_wrt ?f (take ?n ?xs)\n\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>L &&& sorted_fst XS\\<^sub>L", "by simp_all"], ["proof (state)\nthis:\n  distinct XS\\<^sub>L\n  sorted_fst XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "ultimately"], ["proof (chain)\npicking this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length ps\n  distinct XS\\<^sub>L\n  sorted_fst XS\\<^sub>L", "have \"time (closest_pair_rec_tm XS\\<^sub>L) \\<le> closest_pair_recurrence (length XS\\<^sub>L)\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length ps\n  distinct XS\\<^sub>L\n  sorted_fst XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>L))\n    \\<le> closest_pair_recurrence (length XS\\<^sub>L)", "using \"1.IH\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length ps\n  distinct XS\\<^sub>L\n  sorted_fst XS\\<^sub>L\n  \\<forall>ys.\n     length ys < length ps \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     real (time (closest_pair_rec_tm ys))\n     \\<le> closest_pair_recurrence (length ys)\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>L))\n    \\<le> closest_pair_recurrence (length XS\\<^sub>L)", "by simp"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm XS\\<^sub>L))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence IHL: \"time (closest_pair_rec_tm XS\\<^sub>L) \\<le> closest_pair_recurrence (nat \\<lfloor>real ?n / 2\\<rfloor>)\""], ["proof (prove)\nusing this:\n  real (time (closest_pair_rec_tm XS\\<^sub>L))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>L))\n    \\<le> closest_pair_recurrence\n           (nat \\<lfloor>real (length ps) / 2\\<rfloor>)", "using *"], ["proof (prove)\nusing this:\n  real (time (closest_pair_rec_tm XS\\<^sub>L))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>L)\n  nat \\<lfloor>real (length ps) / 2\\<rfloor> = length XS\\<^sub>L\n  nat \\<lceil>real (length ps) / 2\\<rceil> = length XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>L))\n    \\<le> closest_pair_recurrence\n           (nat \\<lfloor>real (length ps) / 2\\<rfloor>)", "by simp"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm XS\\<^sub>L))\n  \\<le> closest_pair_recurrence (nat \\<lfloor>real (length ps) / 2\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length ps", "using False XSLR"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length ps", "by simp_all"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"distinct XS\\<^sub>R\" \"sorted_fst XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>R &&& sorted_fst XS\\<^sub>R", "using XSLR \"1.prems\"(1,2) sorted_fst_def sorted_wrt_drop"], ["proof (prove)\nusing this:\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n  distinct ps\n  sorted_fst ps\n  sorted_fst ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. fst p\\<^sub>0 \\<le> fst p\\<^sub>1) ?ps\n  sorted_wrt ?f ?xs \\<Longrightarrow> sorted_wrt ?f (drop ?n ?xs)\n\ngoal (1 subgoal):\n 1. distinct XS\\<^sub>R &&& sorted_fst XS\\<^sub>R", "by simp_all"], ["proof (state)\nthis:\n  distinct XS\\<^sub>R\n  sorted_fst XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "ultimately"], ["proof (chain)\npicking this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length ps\n  distinct XS\\<^sub>R\n  sorted_fst XS\\<^sub>R", "have \"time (closest_pair_rec_tm XS\\<^sub>R) \\<le> closest_pair_recurrence (length XS\\<^sub>R)\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length ps\n  distinct XS\\<^sub>R\n  sorted_fst XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> closest_pair_recurrence (length XS\\<^sub>R)", "using \"1.IH\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length ps\n  distinct XS\\<^sub>R\n  sorted_fst XS\\<^sub>R\n  \\<forall>ys.\n     length ys < length ps \\<longrightarrow>\n     distinct ys \\<longrightarrow>\n     sorted_fst ys \\<longrightarrow>\n     real (time (closest_pair_rec_tm ys))\n     \\<le> closest_pair_recurrence (length ys)\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> closest_pair_recurrence (length XS\\<^sub>R)", "by simp"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence IHR: \"time (closest_pair_rec_tm XS\\<^sub>R) \\<le> closest_pair_recurrence (nat \\<lceil>real ?n / 2\\<rceil>)\""], ["proof (prove)\nusing this:\n  real (time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)", "using *"], ["proof (prove)\nusing this:\n  real (time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> closest_pair_recurrence (length XS\\<^sub>R)\n  nat \\<lfloor>real (length ps) / 2\\<rfloor> = length XS\\<^sub>L\n  nat \\<lceil>real (length ps) / 2\\<rceil> = length XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)", "by simp"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"(YS, C\\<^sub>0, C\\<^sub>1) = val (closest_pair_rec_tm ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = Time_Monad.val (closest_pair_rec_tm ps)", "using False closest_pair_rec_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = Time_Monad.val (closest_pair_rec_tm ps)", "by (auto simp: Let_def length_eq_val_length_tm split!: prod.split)"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = Time_Monad.val (closest_pair_rec_tm ps)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "hence \"set ps = set YS\" \"length ps = length YS\" \"distinct YS\" \"sorted_snd YS\""], ["proof (prove)\nusing this:\n  (YS, C\\<^sub>0, C\\<^sub>1) = Time_Monad.val (closest_pair_rec_tm ps)\n\ngoal (1 subgoal):\n 1. (set ps = set YS &&& length ps = length YS) &&&\n    distinct YS &&& sorted_snd YS", "using \"1.prems\" closest_pair_rec_set_length_sorted_snd closest_pair_rec_distinct\n            closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  (YS, C\\<^sub>0, C\\<^sub>1) = Time_Monad.val (closest_pair_rec_tm ps)\n  distinct ps\n  sorted_fst ps\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  \\<lbrakk>distinct ?xs; (?ys, ?p) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> distinct ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. (set ps = set YS &&& length ps = length YS) &&&\n    distinct YS &&& sorted_snd YS", "by auto"], ["proof (state)\nthis:\n  set ps = set YS\n  length ps = length YS\n  distinct YS\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  set ps = set YS\n  length ps = length YS\n  distinct YS\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"\\<forall>p \\<in> set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)", "using False \"1.prems\"(2) XSLR \\<open>length XS\\<^sub>L < length ps\\<close> \\<open>length XS\\<^sub>L = length ps div 2\\<close>\n            CP\\<^sub>L_def sorted_fst_take_less_hd_drop closest_pair_rec_set_length_sorted_snd\n            closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n  sorted_fst ps\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n  length XS\\<^sub>L < length ps\n  length XS\\<^sub>L = length ps div 2\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  \\<lbrakk>sorted_fst ?ps; ?n < length ?ps\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p\\<in>set (take ?n ?ps).\n                       fst p \\<le> fst (hd (drop ?n ?ps))\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)", "by metis"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"\\<forall>p \\<in> set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p", "using False \"1.prems\"(2) XSLR CP\\<^sub>R_def sorted_fst_hd_drop_less_drop\n            closest_pair_rec_set_length_sorted_snd closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n  sorted_fst ps\n  XS\\<^sub>L = take (length ps div 2) ps\n  XS\\<^sub>R = drop (length ps div 2) ps\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  sorted_fst ?ps \\<Longrightarrow>\n  \\<forall>p\\<in>set (drop ?n ?ps). fst (hd (drop ?n ?ps)) \\<le> fst p\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p", "by metis"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R", "using set_merge defs"], ["proof (prove)\nusing this:\n  set (Common.merge ?f ?xs ?ys) = set ?xs \\<union> set ?ys\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R", "by (metis merge_eq_val_merge_tm)"], ["proof (state)\nthis:\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"sparse (dist C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L) (set YS\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>L)", "using CP\\<^sub>L_def \\<open>1 < length XS\\<^sub>L\\<close> \\<open>distinct XS\\<^sub>L\\<close> \\<open>sorted_fst XS\\<^sub>L\\<close>\n            closest_pair_rec_dist closest_pair_rec_set_length_sorted_snd\n            closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  1 < length XS\\<^sub>L\n  distinct XS\\<^sub>L\n  sorted_fst XS\\<^sub>L\n  \\<lbrakk>1 < length ?xs; sorted_fst ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set ?xs)\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>L)", "by auto"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "moreover"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"sparse (dist C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R) (set YS\\<^sub>R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>R)", "using CP\\<^sub>R_def \\<open>1 < length XS\\<^sub>R\\<close> \\<open>distinct XS\\<^sub>R\\<close> \\<open>sorted_fst XS\\<^sub>R\\<close>\n            closest_pair_rec_dist closest_pair_rec_set_length_sorted_snd\n            closest_pair_rec_eq_val_closest_pair_rec_tm"], ["proof (prove)\nusing this:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  1 < length XS\\<^sub>R\n  distinct XS\\<^sub>R\n  sorted_fst XS\\<^sub>R\n  \\<lbrakk>1 < length ?xs; sorted_fst ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs\\<rbrakk>\n  \\<Longrightarrow> sparse\n                     (dist\n                       (case ?c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case ?c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (set ?xs)\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs\n\ngoal (1 subgoal):\n 1. sparse\n     (dist\n       (case C\\<^sub>0\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case C\\<^sub>1\\<^sub>R of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n     (set YS\\<^sub>R)", "by auto"], ["proof (state)\nthis:\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "ultimately"], ["proof (chain)\npicking this:\n  set ps = set YS\n  length ps = length YS\n  distinct YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\n  \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)", "have combine_bound: \"t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS \\<le> 3 + 10 * ?n\""], ["proof (prove)\nusing this:\n  set ps = set YS\n  length ps = length YS\n  distinct YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\n  \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n    \\<le> 3 + 10 * length ps", "using t_combine_bound[of YS \"set YS\\<^sub>L\" \"set YS\\<^sub>R\" \"fst (hd XS\\<^sub>R)\"]"], ["proof (prove)\nusing this:\n  set ps = set YS\n  length ps = length YS\n  distinct YS\n  sorted_snd YS\n  \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R)\n  \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p\n  set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>L of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>L)\n  sparse\n   (dist\n     (case C\\<^sub>0\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n     (case C\\<^sub>1\\<^sub>R of\n      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   (set YS\\<^sub>R)\n  \\<lbrakk>distinct YS; sorted_snd YS;\n   set YS = set YS\\<^sub>L \\<union> set YS\\<^sub>R;\n   \\<forall>p\\<in>set YS\\<^sub>L. fst p \\<le> fst (hd XS\\<^sub>R);\n   \\<forall>p\\<in>set YS\\<^sub>R. fst (hd XS\\<^sub>R) \\<le> fst p;\n   sparse\n    (dist\n      (case ?p\\<^sub>0\\<^sub>L of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>1\\<^sub>L of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n    (set YS\\<^sub>L);\n   sparse\n    (dist\n      (case ?p\\<^sub>0\\<^sub>R of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>1\\<^sub>R of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n    (set YS\\<^sub>R)\\<rbrakk>\n  \\<Longrightarrow> t_combine (?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n                     (?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R)\n                     (fst (hd XS\\<^sub>R)) YS\n                    \\<le> 10 * length YS + 3\n\ngoal (1 subgoal):\n 1. t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n    \\<le> 3 + 10 * length ps", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n  \\<le> 3 + 10 * length ps\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"time (closest_pair_rec_tm ps) = 1 + time (length_tm ps) + time (split_at_tm (?n div 2) ps) +\n              time (closest_pair_rec_tm XS\\<^sub>L) + time (closest_pair_rec_tm XS\\<^sub>R) + time (merge_tm (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R) +\n              t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm ps) =\n    1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n    time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R) +\n    time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n    t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS", "using time_closest_pair_rec_tm_simps_2[OF False] defs"], ["proof (prove)\nusing this:\n  time (closest_pair_rec_tm ps) =\n  1 +\n  (let (xs\\<^sub>L, xs\\<^sub>R) =\n         Time_Monad.val (split_at_tm (length ps div 2) ps);\n       (ys\\<^sub>L, p\\<^sub>L) =\n         Time_Monad.val (closest_pair_rec_tm xs\\<^sub>L);\n       (ys\\<^sub>R, p\\<^sub>R) =\n         Time_Monad.val (closest_pair_rec_tm xs\\<^sub>R);\n       ys = Time_Monad.val (merge_tm snd ys\\<^sub>L ys\\<^sub>R)\n   in time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n      time (closest_pair_rec_tm xs\\<^sub>L) +\n      time (closest_pair_rec_tm xs\\<^sub>R) +\n      time (merge_tm snd ys\\<^sub>L ys\\<^sub>R) +\n      t_combine p\\<^sub>L p\\<^sub>R (fst (hd xs\\<^sub>R)) ys)\n  (XS\\<^sub>L, XS\\<^sub>R) =\n  Time_Monad.val (split_at_tm (length ps div 2) ps)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>L)\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  Time_Monad.val (closest_pair_rec_tm XS\\<^sub>R)\n  YS = Time_Monad.val (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  (C\\<^sub>0, C\\<^sub>1) =\n  Time_Monad.val\n   (combine_tm (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS)\n\ngoal (1 subgoal):\n 1. time (closest_pair_rec_tm ps) =\n    1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n    time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R) +\n    time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n    t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS", "by (auto simp del: closest_pair_rec_tm.simps simp add: Let_def split: prod.split)"], ["proof (state)\nthis:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n  time (closest_pair_rec_tm XS\\<^sub>L) +\n  time (closest_pair_rec_tm XS\\<^sub>R) +\n  time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "also"], ["proof (state)\nthis:\n  time (closest_pair_rec_tm ps) =\n  1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n  time (closest_pair_rec_tm XS\\<^sub>L) +\n  time (closest_pair_rec_tm XS\\<^sub>R) +\n  time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"... \\<le> 7 + 13 * ?n + time (closest_pair_rec_tm XS\\<^sub>L) + time (closest_pair_rec_tm XS\\<^sub>R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n    time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R) +\n    time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n    t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n    \\<le> 7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n          time (closest_pair_rec_tm XS\\<^sub>R)", "using time_merge_tm[of \"(\\<lambda>p. snd p)\" YS\\<^sub>L YS\\<^sub>R] L combine_bound"], ["proof (prove)\nusing this:\n  time (merge_tm snd YS\\<^sub>L YS\\<^sub>R)\n  \\<le> length YS\\<^sub>L + length YS\\<^sub>R + 1\n  length ps = length YS\\<^sub>L + length YS\\<^sub>R\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n  \\<le> 3 + 10 * length ps\n\ngoal (1 subgoal):\n 1. 1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n    time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R) +\n    time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n    t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n     (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n    \\<le> 7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n          time (closest_pair_rec_tm XS\\<^sub>R)", "by (simp add: time_length_tm time_split_at_tm)"], ["proof (state)\nthis:\n  1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n  time (closest_pair_rec_tm XS\\<^sub>L) +\n  time (closest_pair_rec_tm XS\\<^sub>R) +\n  time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n  \\<le> 7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n        time (closest_pair_rec_tm XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "also"], ["proof (state)\nthis:\n  1 + time (length_tm ps) + time (split_at_tm (length ps div 2) ps) +\n  time (closest_pair_rec_tm XS\\<^sub>L) +\n  time (closest_pair_rec_tm XS\\<^sub>R) +\n  time (merge_tm snd YS\\<^sub>L YS\\<^sub>R) +\n  t_combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) (fst (hd XS\\<^sub>R)) YS\n  \\<le> 7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n        time (closest_pair_rec_tm XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"... \\<le> 7 + 13 * ?n + closest_pair_recurrence (nat \\<lfloor>real ?n / 2\\<rfloor>) +\n              closest_pair_recurrence (nat \\<lceil>real ?n / 2\\<rceil>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real\n     (7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n      time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> real (7 + 13 * length ps) +\n          closest_pair_recurrence\n           (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n          closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)", "using IHL IHR"], ["proof (prove)\nusing this:\n  real (time (closest_pair_rec_tm XS\\<^sub>L))\n  \\<le> closest_pair_recurrence (nat \\<lfloor>real (length ps) / 2\\<rfloor>)\n  real (time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)\n\ngoal (1 subgoal):\n 1. real\n     (7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n      time (closest_pair_rec_tm XS\\<^sub>R))\n    \\<le> real (7 + 13 * length ps) +\n          closest_pair_recurrence\n           (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n          closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)", "by simp"], ["proof (state)\nthis:\n  real\n   (7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> real (7 + 13 * length ps) +\n        closest_pair_recurrence\n         (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n        closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "also"], ["proof (state)\nthis:\n  real\n   (7 + 13 * length ps + time (closest_pair_rec_tm XS\\<^sub>L) +\n    time (closest_pair_rec_tm XS\\<^sub>R))\n  \\<le> real (7 + 13 * length ps) +\n        closest_pair_recurrence\n         (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n        closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "have \"... = closest_pair_recurrence (length ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (7 + 13 * length ps) +\n    closest_pair_recurrence (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n    closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>) =\n    closest_pair_recurrence (length ps)", "using False"], ["proof (prove)\nusing this:\n  \\<not> length ps \\<le> 3\n\ngoal (1 subgoal):\n 1. real (7 + 13 * length ps) +\n    closest_pair_recurrence (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n    closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>) =\n    closest_pair_recurrence (length ps)", "by simp"], ["proof (state)\nthis:\n  real (7 + 13 * length ps) +\n  closest_pair_recurrence (nat \\<lfloor>real (length ps) / 2\\<rfloor>) +\n  closest_pair_recurrence (nat \\<lceil>real (length ps) / 2\\<rceil>) =\n  closest_pair_recurrence (length ps)\n\ngoal (1 subgoal):\n 1. \\<not> length ps \\<le> 3 \\<Longrightarrow>\n    real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (time (closest_pair_rec_tm ps))\n  \\<le> closest_pair_recurrence (length ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (time (closest_pair_rec_tm ps))\n  \\<le> closest_pair_recurrence (length ps)\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_rec_tm ps))\n    \\<le> closest_pair_recurrence (length ps)", "by simp"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm ps))\n  \\<le> closest_pair_recurrence (length ps)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  real (time (closest_pair_rec_tm ps))\n  \\<le> closest_pair_recurrence (length ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem closest_pair_recurrence:\n  \"closest_pair_recurrence \\<in> \\<Theta>(\\<lambda>n. n * ln n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair_recurrence \\<in> \\<Theta>(\\<lambda>x. real x * ln (real x))", "by (master_theorem) auto"], ["", "theorem time_closest_pair_rec_bigo:\n  \"(\\<lambda>xs. time (closest_pair_rec_tm xs)) \\<in> O[length going_to at_top within { ps. distinct ps \\<and> sorted_fst ps }]((\\<lambda>n. n * ln n) o length)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct ps \\<and>\n                   sorted_fst\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct ps \\<and>\n                   sorted_fst\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "have 0: \"\\<And>ps. ps \\<in> { ps. distinct ps \\<and> sorted_fst ps } \\<Longrightarrow>\n           time (closest_pair_rec_tm ps) \\<le> (closest_pair_recurrence o length) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps \\<and> sorted_fst ps} \\<Longrightarrow>\n       real (time (closest_pair_rec_tm ps))\n       \\<le> (closest_pair_recurrence \\<circ> length) ps", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps \\<and> sorted_fst ps} \\<Longrightarrow>\n       real (time (closest_pair_rec_tm ps))\n       \\<le> closest_pair_recurrence (length ps)", "using time_closest_pair_rec_conv_closest_pair_recurrence"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct ?ps; sorted_fst ?ps\\<rbrakk>\n  \\<Longrightarrow> real (time (closest_pair_rec_tm ?ps))\n                    \\<le> closest_pair_recurrence (length ?ps)\n\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps \\<and> sorted_fst ps} \\<Longrightarrow>\n       real (time (closest_pair_rec_tm ps))\n       \\<le> closest_pair_recurrence (length ps)", "by auto"], ["proof (state)\nthis:\n  ?ps \\<in> {ps. distinct ps \\<and> sorted_fst ps} \\<Longrightarrow>\n  real (time (closest_pair_rec_tm ?ps))\n  \\<le> (closest_pair_recurrence \\<circ> length) ?ps\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct ps \\<and>\n                   sorted_fst\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct ps \\<and>\n                   sorted_fst\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "using bigo_measure_trans[OF 0] bigthetaD1[OF closest_pair_recurrence] of_nat_0_le_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x.\n              x \\<in> ?A \\<Longrightarrow>\n              x \\<in> {ps. distinct ps \\<and> sorted_fst ps};\n   closest_pair_recurrence \\<in> O(?f);\n   \\<And>x.\n      x \\<in> ?A \\<Longrightarrow>\n      0 \\<le> real (time (closest_pair_rec_tm x))\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n                    \\<in> O[length going_to sequentially\n                           within ?A](?f \\<circ> length)\n  closest_pair_recurrence \\<in> O(\\<lambda>x. real x * ln (real x))\n  (0::?'a) \\<le> of_nat ?n\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct ps \\<and>\n                   sorted_fst\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. real (time (closest_pair_rec_tm x)))\n  \\<in> O[length going_to sequentially\n         within {ps.\n                 distinct ps \\<and>\n                 sorted_fst\n                  ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition closest_pair_time :: \"nat \\<Rightarrow> real\" where\n  \"closest_pair_time n = 1 + mergesort_recurrence n + closest_pair_recurrence n\""], ["", "lemma time_closest_pair_conv_closest_pair_recurrence:\n  assumes \"distinct ps\"\n  shows \"time (closest_pair_tm ps) \\<le> closest_pair_time (length ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (time (closest_pair_tm ps)) \\<le> closest_pair_time (length ps)", "using assms"], ["proof (prove)\nusing this:\n  distinct ps\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_tm ps)) \\<le> closest_pair_time (length ps)", "unfolding closest_pair_time_def"], ["proof (prove)\nusing this:\n  distinct ps\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_tm ps))\n    \\<le> 1 + mergesort_recurrence (length ps) +\n          closest_pair_recurrence (length ps)", "proof (induction rule: induct_list012)"], ["proof (state)\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "case (3 x y zs)"], ["proof (state)\nthis:\n  distinct zs \\<Longrightarrow>\n  real (time (closest_pair_tm zs))\n  \\<le> 1 + mergesort_recurrence (length zs) +\n        closest_pair_recurrence (length zs)\n  distinct (y # zs) \\<Longrightarrow>\n  real (time (closest_pair_tm (y # zs)))\n  \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n        closest_pair_recurrence (length (y # zs))\n  distinct (x # y # zs)\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "let ?ps = \"x # y # zs\""], ["proof (state)\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "define xs where \"xs = val (mergesort_tm fst ?ps)\""], ["proof (state)\nthis:\n  xs = Time_Monad.val (mergesort_tm fst (x # y # zs))\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "have *: \"distinct xs\" \"sorted_fst xs\" \"length xs = length ?ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct xs &&& sorted_fst xs &&& length xs = length (x # y # zs)", "using xs_def mergesort(4)[OF \"3.prems\", of fst] mergesort(1)[of fst ?ps] mergesort(3)[of fst ?ps]\n          sorted_fst_def mergesort_eq_val_mergesort_tm"], ["proof (prove)\nusing this:\n  xs = Time_Monad.val (mergesort_tm fst (x # y # zs))\n  distinct (mergesort fst (x # y # zs))\n  sorted_wrt (\\<lambda>x y. fst x \\<le> fst y) (mergesort fst (x # y # zs))\n  length (mergesort fst (x # y # zs)) = length (x # y # zs)\n  sorted_fst ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. fst p\\<^sub>0 \\<le> fst p\\<^sub>1) ?ps\n  Time_Monad.val (mergesort_tm ?f ?xs) = mergesort ?f ?xs\n\ngoal (1 subgoal):\n 1. distinct xs &&& sorted_fst xs &&& length xs = length (x # y # zs)", "by metis+"], ["proof (state)\nthis:\n  distinct xs\n  sorted_fst xs\n  length xs = length (x # y # zs)\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "have \"time (closest_pair_tm ?ps) = 1 + time (mergesort_tm fst ?ps) + time (closest_pair_rec_tm xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. time (closest_pair_tm (x # y # zs)) =\n    1 + time (mergesort_tm fst (x # y # zs)) + time (closest_pair_rec_tm xs)", "using xs_def"], ["proof (prove)\nusing this:\n  xs = Time_Monad.val (mergesort_tm fst (x # y # zs))\n\ngoal (1 subgoal):\n 1. time (closest_pair_tm (x # y # zs)) =\n    1 + time (mergesort_tm fst (x # y # zs)) + time (closest_pair_rec_tm xs)", "by (auto simp del: mergesort_tm.simps closest_pair_rec_tm.simps simp add: time_simps split: prod.split)"], ["proof (state)\nthis:\n  time (closest_pair_tm (x # y # zs)) =\n  1 + time (mergesort_tm fst (x # y # zs)) + time (closest_pair_rec_tm xs)\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "also"], ["proof (state)\nthis:\n  time (closest_pair_tm (x # y # zs)) =\n  1 + time (mergesort_tm fst (x # y # zs)) + time (closest_pair_rec_tm xs)\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "have \"... \\<le> 1 + mergesort_recurrence (length ?ps) + time (closest_pair_rec_tm xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real\n     (1 + time (mergesort_tm fst (x # y # zs)) +\n      time (closest_pair_rec_tm xs))\n    \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n          real (time (closest_pair_rec_tm xs))", "using time_mergesort_conv_mergesort_recurrence[of fst ?ps]"], ["proof (prove)\nusing this:\n  real (time (mergesort_tm fst (x # y # zs)))\n  \\<le> mergesort_recurrence (length (x # y # zs))\n\ngoal (1 subgoal):\n 1. real\n     (1 + time (mergesort_tm fst (x # y # zs)) +\n      time (closest_pair_rec_tm xs))\n    \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n          real (time (closest_pair_rec_tm xs))", "by simp"], ["proof (state)\nthis:\n  real\n   (1 + time (mergesort_tm fst (x # y # zs)) +\n    time (closest_pair_rec_tm xs))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        real (time (closest_pair_rec_tm xs))\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "also"], ["proof (state)\nthis:\n  real\n   (1 + time (mergesort_tm fst (x # y # zs)) +\n    time (closest_pair_rec_tm xs))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        real (time (closest_pair_rec_tm xs))\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "have \"... \\<le> 1 + mergesort_recurrence (length ?ps) + closest_pair_recurrence (length ?ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + mergesort_recurrence (length (x # y # zs)) +\n    real (time (closest_pair_rec_tm xs))\n    \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n          closest_pair_recurrence (length (x # y # zs))", "using time_closest_pair_rec_conv_closest_pair_recurrence[of xs] *"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct xs; sorted_fst xs\\<rbrakk>\n  \\<Longrightarrow> real (time (closest_pair_rec_tm xs))\n                    \\<le> closest_pair_recurrence (length xs)\n  distinct xs\n  sorted_fst xs\n  length xs = length (x # y # zs)\n\ngoal (1 subgoal):\n 1. 1 + mergesort_recurrence (length (x # y # zs)) +\n    real (time (closest_pair_rec_tm xs))\n    \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n          closest_pair_recurrence (length (x # y # zs))", "by auto"], ["proof (state)\nthis:\n  1 + mergesort_recurrence (length (x # y # zs)) +\n  real (time (closest_pair_rec_tm xs))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        closest_pair_recurrence (length (x # y # zs))\n\ngoal (3 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>distinct zs \\<Longrightarrow>\n                real (time (closest_pair_tm zs))\n                \\<le> 1 + mergesort_recurrence (length zs) +\n                      closest_pair_recurrence (length zs);\n        distinct (y # zs) \\<Longrightarrow>\n        real (time (closest_pair_tm (y # zs)))\n        \\<le> 1 + mergesort_recurrence (length (y # zs)) +\n              closest_pair_recurrence (length (y # zs));\n        distinct (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> real (time (closest_pair_tm (x # y # zs)))\n                         \\<le> 1 +\n                               mergesort_recurrence (length (x # y # zs)) +\n                               closest_pair_recurrence (length (x # y # zs))", "finally"], ["proof (chain)\npicking this:\n  real (time (closest_pair_tm (x # y # zs)))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        closest_pair_recurrence (length (x # y # zs))", "show ?case"], ["proof (prove)\nusing this:\n  real (time (closest_pair_tm (x # y # zs)))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        closest_pair_recurrence (length (x # y # zs))\n\ngoal (1 subgoal):\n 1. real (time (closest_pair_tm (x # y # zs)))\n    \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n          closest_pair_recurrence (length (x # y # zs))", "by blast"], ["proof (state)\nthis:\n  real (time (closest_pair_tm (x # y # zs)))\n  \\<le> 1 + mergesort_recurrence (length (x # y # zs)) +\n        closest_pair_recurrence (length (x # y # zs))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    real (time (closest_pair_tm []))\n    \\<le> 1 + mergesort_recurrence (length []) +\n          closest_pair_recurrence (length [])\n 2. \\<And>x.\n       distinct [x] \\<Longrightarrow>\n       real (time (closest_pair_tm [x]))\n       \\<le> 1 + mergesort_recurrence (length [x]) +\n             closest_pair_recurrence (length [x])", "qed (auto simp: time_simps)"], ["", "corollary closest_pair_time:\n  \"closest_pair_time \\<in> O(\\<lambda>n. n * ln n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair_time \\<in> O(\\<lambda>x. real x * ln (real x))", "unfolding closest_pair_time_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. 1 + mergesort_recurrence n + closest_pair_recurrence n)\n    \\<in> O(\\<lambda>x. real x * ln (real x))", "using mergesort_recurrence closest_pair_recurrence sum_in_bigo(1) const_1_bigo_n_ln_n"], ["proof (prove)\nusing this:\n  mergesort_recurrence \\<in> \\<Theta>(\\<lambda>x. real x * ln (real x))\n  closest_pair_recurrence \\<in> \\<Theta>(\\<lambda>x. real x * ln (real x))\n  \\<lbrakk>?f \\<in> O[?F](?h); ?g \\<in> O[?F](?h)\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. ?f x + ?g x) \\<in> O[?F](?h)\n  (\\<lambda>n. 1) \\<in> O(\\<lambda>n. real n * ln (real n))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. 1 + mergesort_recurrence n + closest_pair_recurrence n)\n    \\<in> O(\\<lambda>x. real x * ln (real x))", "by blast"], ["", "corollary time_closest_pair_bigo:\n  \"(\\<lambda>ps. time (closest_pair_tm ps)) \\<in> O[length going_to at_top within { ps. distinct ps }]((\\<lambda>n. n * ln n) o length)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "have 0: \"\\<And>ps. ps \\<in> { ps. distinct ps } \\<Longrightarrow>\n           time (closest_pair_tm ps) \\<le> (closest_pair_time o length) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps} \\<Longrightarrow>\n       real (time (closest_pair_tm ps))\n       \\<le> (closest_pair_time \\<circ> length) ps", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps} \\<Longrightarrow>\n       real (time (closest_pair_tm ps)) \\<le> closest_pair_time (length ps)", "using time_closest_pair_conv_closest_pair_recurrence"], ["proof (prove)\nusing this:\n  distinct ?ps \\<Longrightarrow>\n  real (time (closest_pair_tm ?ps)) \\<le> closest_pair_time (length ?ps)\n\ngoal (1 subgoal):\n 1. \\<And>ps.\n       ps \\<in> {ps. distinct ps} \\<Longrightarrow>\n       real (time (closest_pair_tm ps)) \\<le> closest_pair_time (length ps)", "by auto"], ["proof (state)\nthis:\n  ?ps \\<in> {ps. distinct ps} \\<Longrightarrow>\n  real (time (closest_pair_tm ?ps))\n  \\<le> (closest_pair_time \\<circ> length) ?ps\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "using bigo_measure_trans[OF 0] closest_pair_time"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> {ps. distinct ps};\n   closest_pair_time \\<in> O(?f);\n   \\<And>x.\n      x \\<in> ?A \\<Longrightarrow>\n      0 \\<le> real (time (closest_pair_tm x))\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. real (time (closest_pair_tm x)))\n                    \\<in> O[length going_to sequentially\n                           within ?A](?f \\<circ> length)\n  closest_pair_time \\<in> O(\\<lambda>x. real x * ln (real x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. real (time (closest_pair_tm x)))\n    \\<in> O[length going_to sequentially\n           within {ps.\n                   distinct\n                    ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x. real (time (closest_pair_tm x)))\n  \\<in> O[length going_to sequentially\n         within {ps.\n                 distinct\n                  ps}]((\\<lambda>n. real n * ln (real n)) \\<circ> length)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Code Export\""], ["", "subsubsection \"Combine Step\""], ["", "fun find_closest_code :: \"point \\<Rightarrow> int \\<Rightarrow> point list \\<Rightarrow> (int * point)\" where\n  \"find_closest_code _ _ [] = undefined\"\n| \"find_closest_code p _ [p\\<^sub>0] = (dist_code p p\\<^sub>0, p\\<^sub>0)\"\n| \"find_closest_code p \\<delta> (p\\<^sub>0 # ps) = (\n    let \\<delta>\\<^sub>0 = dist_code p p\\<^sub>0 in\n    if \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 then\n      (\\<delta>\\<^sub>0, p\\<^sub>0)\n    else\n      let (\\<delta>\\<^sub>1, p\\<^sub>1) = find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) ps in\n      if \\<delta>\\<^sub>0 \\<le> \\<delta>\\<^sub>1 then\n        (\\<delta>\\<^sub>0, p\\<^sub>0)\n      else\n        (\\<delta>\\<^sub>1, p\\<^sub>1)\n  )\""], ["", "lemma find_closest_code_dist_eq:\n  \"0 < length ps \\<Longrightarrow> (\\<delta>\\<^sub>c, c) = find_closest_code p \\<delta> ps \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < length ps;\n     (\\<delta>\\<^sub>c, c) = find_closest_code p \\<delta> ps\\<rbrakk>\n    \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "proof (induction p \\<delta> ps arbitrary: \\<delta>\\<^sub>c c rule: find_closest_code.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [];\n        (\\<delta>\\<^sub>c, c) = find_closest_code uu_ uv_ []\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code uu_ c\n 2. \\<And>p uw_ p\\<^sub>0 \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [p\\<^sub>0];\n        (\\<delta>\\<^sub>c, c) = find_closest_code p uw_ [p\\<^sub>0]\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>\\<^sub>c c.\n       \\<lbrakk>\\<And>x \\<delta>\\<^sub>c c.\n                   \\<lbrakk>x = dist_code p p\\<^sub>0;\n                    \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2;\n                    0 < length (v # va);\n                    (\\<delta>\\<^sub>c, c) =\n                    find_closest_code p (min \\<delta> x) (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c;\n        0 < length (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c, c) =\n        find_closest_code p \\<delta> (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "case (3 p \\<delta> p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = dist_code p p\\<^sub>0;\n   \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2;\n   0 < length (p\\<^sub>2 # ps);\n   (?\\<delta>\\<^sub>c, ?c) =\n   find_closest_code p (min \\<delta> ?x) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta>\\<^sub>c = dist_code p ?c\n  0 < length (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>c, c) =\n  find_closest_code p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [];\n        (\\<delta>\\<^sub>c, c) = find_closest_code uu_ uv_ []\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code uu_ c\n 2. \\<And>p uw_ p\\<^sub>0 \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [p\\<^sub>0];\n        (\\<delta>\\<^sub>c, c) = find_closest_code p uw_ [p\\<^sub>0]\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>\\<^sub>c c.\n       \\<lbrakk>\\<And>x \\<delta>\\<^sub>c c.\n                   \\<lbrakk>x = dist_code p p\\<^sub>0;\n                    \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2;\n                    0 < length (v # va);\n                    (\\<delta>\\<^sub>c, c) =\n                    find_closest_code p (min \\<delta> x) (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c;\n        0 < length (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c, c) =\n        find_closest_code p \\<delta> (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>c = dist_code p c", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\n 2. \\<not> ?P \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "assume \"\\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\""], ["proof (state)\nthis:\n  \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c\n 2. \\<not> ?P \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>c = dist_code p c", "using \"3.prems\"(2)"], ["proof (prove)\nusing this:\n  \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n  (\\<delta>\\<^sub>c, c) =\n  find_closest_code p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>c = dist_code p c", "by simp"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>c = dist_code p c\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "assume A: \"\\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\""], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "define \\<delta>\\<^sub>0 where \\<delta>\\<^sub>0_def: \"\\<delta>\\<^sub>0 = dist_code p p\\<^sub>0\""], ["proof (state)\nthis:\n  \\<delta>\\<^sub>0 = dist_code p p\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "obtain \\<delta>\\<^sub>1 p\\<^sub>1 where \\<delta>\\<^sub>1_def: \"(\\<delta>\\<^sub>1, p\\<^sub>1) = find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>\\<^sub>1 p\\<^sub>1.\n        (\\<delta>\\<^sub>1, p\\<^sub>1) =\n        find_closest_code p (min \\<delta> \\<delta>\\<^sub>0)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  (\\<delta>\\<^sub>1, p\\<^sub>1) =\n  find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "note defs = \\<delta>\\<^sub>0_def \\<delta>\\<^sub>1_def"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>0 = dist_code p p\\<^sub>0\n  (\\<delta>\\<^sub>1, p\\<^sub>1) =\n  find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "have \"\\<delta>\\<^sub>1 = dist_code p p\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1", "using \"3.IH\"[of \\<delta>\\<^sub>0 \\<delta>\\<^sub>1 p\\<^sub>1] A defs"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<delta>\\<^sub>0 = dist_code p p\\<^sub>0;\n   \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2;\n   0 < length (p\\<^sub>2 # ps);\n   (\\<delta>\\<^sub>1, p\\<^sub>1) =\n   find_closest_code p (min \\<delta> \\<delta>\\<^sub>0)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1\n  \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n  \\<delta>\\<^sub>0 = dist_code p p\\<^sub>0\n  (\\<delta>\\<^sub>1, p\\<^sub>1) =\n  find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2 \\<Longrightarrow>\n    \\<delta>\\<^sub>c = dist_code p c", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>c = dist_code p c", "using defs \"3.prems\""], ["proof (prove)\nusing this:\n  \\<delta>\\<^sub>1 = dist_code p p\\<^sub>1\n  \\<delta>\\<^sub>0 = dist_code p p\\<^sub>0\n  (\\<delta>\\<^sub>1, p\\<^sub>1) =\n  find_closest_code p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  0 < length (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>c, c) =\n  find_closest_code p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>c = dist_code p c", "by (auto simp: Let_def split: if_splits prod.splits)"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>c = dist_code p c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>c = dist_code p c\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [];\n        (\\<delta>\\<^sub>c, c) = find_closest_code uu_ uv_ []\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code uu_ c\n 2. \\<And>p uw_ p\\<^sub>0 \\<delta>\\<^sub>c c.\n       \\<lbrakk>0 < length [p\\<^sub>0];\n        (\\<delta>\\<^sub>c, c) = find_closest_code p uw_ [p\\<^sub>0]\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\\<^sub>c = dist_code p c", "qed simp_all"], ["", "declare find_closest.simps [simp add]"], ["", "lemma find_closest_code_eq:\n  assumes \"0 < length ps\" \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\" \"sorted_snd (p # ps)\"\n  assumes \"c = find_closest p \\<delta> ps\" \"(\\<delta>\\<^sub>c', c') = find_closest_code p \\<delta>' ps\"\n  shows \"c = c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = c'", "using assms"], ["proof (prove)\nusing this:\n  0 < length ps\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  sorted_snd (p # ps)\n  c = find_closest p \\<delta> ps\n  (\\<delta>\\<^sub>c', c') = find_closest_code p \\<delta>' ps\n\ngoal (1 subgoal):\n 1. c = c'", "proof (induction p \\<delta> ps arbitrary: \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c' rule: find_closest.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>' c\\<^sub>0 c\\<^sub>1 c\n       \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>\\<And>\\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n                   \\<lbrakk>\\<not> \\<delta>\n                                   \\<le> real_of_int\n    (snd p\\<^sub>0 - snd p);\n                    0 < length (v # va);\n                    min \\<delta>\n                     (dist\n                       (case p of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case p\\<^sub>0 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y))) =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (p # v # va);\n                    c =\n                    find_closest p\n                     (min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))))\n                     (v # va);\n                    (\\<delta>\\<^sub>c', c') =\n                    find_closest_code p \\<delta>' (v # va)\\<rbrakk>\n                   \\<Longrightarrow> c = c';\n        0 < length (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        c = find_closest p \\<delta> (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code p \\<delta>' (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> c = c'", "case (3 p \\<delta> p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n   0 < length (p\\<^sub>2 # ps);\n   min \\<delta>\n    (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n   dist\n    (case ?c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?c\\<^sub>1 of\n     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code ?c\\<^sub>0 ?c\\<^sub>1;\n   sorted_snd (p # p\\<^sub>2 # ps);\n   ?c =\n   find_closest p\n    (min \\<delta>\n      (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n    (p\\<^sub>2 # ps);\n   (?\\<delta>\\<^sub>c', ?c') =\n   find_closest_code p ?\\<delta>' (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?c = ?c'\n  0 < length (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  c = find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>c', c') =\n  find_closest_code p \\<delta>' (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>' c\\<^sub>0 c\\<^sub>1 c\n       \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>\\<And>\\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n                   \\<lbrakk>\\<not> \\<delta>\n                                   \\<le> real_of_int\n    (snd p\\<^sub>0 - snd p);\n                    0 < length (v # va);\n                    min \\<delta>\n                     (dist\n                       (case p of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case p\\<^sub>0 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y))) =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (p # v # va);\n                    c =\n                    find_closest p\n                     (min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))))\n                     (v # va);\n                    (\\<delta>\\<^sub>c', c') =\n                    find_closest_code p \\<delta>' (v # va)\\<rbrakk>\n                   \\<Longrightarrow> c = c';\n        0 < length (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        c = find_closest p \\<delta> (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code p \\<delta>' (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> c = c'", "define \\<delta>\\<^sub>0 \\<delta>\\<^sub>0' where \\<delta>\\<^sub>0_def: \"\\<delta>\\<^sub>0 = dist p p\\<^sub>0\" \"\\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\""], ["proof (state)\nthis:\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>' c\\<^sub>0 c\\<^sub>1 c\n       \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>\\<And>\\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n                   \\<lbrakk>\\<not> \\<delta>\n                                   \\<le> real_of_int\n    (snd p\\<^sub>0 - snd p);\n                    0 < length (v # va);\n                    min \\<delta>\n                     (dist\n                       (case p of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case p\\<^sub>0 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y))) =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (p # v # va);\n                    c =\n                    find_closest p\n                     (min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))))\n                     (v # va);\n                    (\\<delta>\\<^sub>c', c') =\n                    find_closest_code p \\<delta>' (v # va)\\<rbrakk>\n                   \\<Longrightarrow> c = c';\n        0 < length (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        c = find_closest p \\<delta> (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code p \\<delta>' (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> c = c'", "obtain p\\<^sub>1 \\<delta>\\<^sub>1' p\\<^sub>1' where \\<delta>\\<^sub>1_def: \"p\\<^sub>1 = find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\"\n    \"(\\<delta>\\<^sub>1', p\\<^sub>1') = find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p\\<^sub>1 \\<delta>\\<^sub>1' p\\<^sub>1'.\n        \\<lbrakk>p\\<^sub>1 =\n                 find_closest p (min \\<delta> \\<delta>\\<^sub>0)\n                  (p\\<^sub>2 # ps);\n         (\\<delta>\\<^sub>1', p\\<^sub>1') =\n         find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0')\n          (p\\<^sub>2 # ps)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  p\\<^sub>1 =\n  find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>1', p\\<^sub>1') =\n  find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>' c\\<^sub>0 c\\<^sub>1 c\n       \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>\\<And>\\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n                   \\<lbrakk>\\<not> \\<delta>\n                                   \\<le> real_of_int\n    (snd p\\<^sub>0 - snd p);\n                    0 < length (v # va);\n                    min \\<delta>\n                     (dist\n                       (case p of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case p\\<^sub>0 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y))) =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (p # v # va);\n                    c =\n                    find_closest p\n                     (min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))))\n                     (v # va);\n                    (\\<delta>\\<^sub>c', c') =\n                    find_closest_code p \\<delta>' (v # va)\\<rbrakk>\n                   \\<Longrightarrow> c = c';\n        0 < length (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        c = find_closest p \\<delta> (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code p \\<delta>' (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> c = c'", "note defs = \\<delta>\\<^sub>0_def \\<delta>\\<^sub>1_def"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n  p\\<^sub>1 =\n  find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>1', p\\<^sub>1') =\n  find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 3. \\<And>p \\<delta> p\\<^sub>0 v va \\<delta>' c\\<^sub>0 c\\<^sub>1 c\n       \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>\\<And>\\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n                   \\<lbrakk>\\<not> \\<delta>\n                                   \\<le> real_of_int\n    (snd p\\<^sub>0 - snd p);\n                    0 < length (v # va);\n                    min \\<delta>\n                     (dist\n                       (case p of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case p\\<^sub>0 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y))) =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (p # v # va);\n                    c =\n                    find_closest p\n                     (min \\<delta>\n                       (dist\n                         (case p of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))\n                         (case p\\<^sub>0 of\n                          (x, y) \\<Rightarrow>\n                            (real_of_int x, real_of_int y))))\n                     (v # va);\n                    (\\<delta>\\<^sub>c', c') =\n                    find_closest_code p \\<delta>' (v # va)\\<rbrakk>\n                   \\<Longrightarrow> c = c';\n        0 < length (p\\<^sub>0 # v # va);\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p # p\\<^sub>0 # v # va);\n        c = find_closest p \\<delta> (p\\<^sub>0 # v # va);\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code p \\<delta>' (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> c = c'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. c = c'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> c = c'\n 2. \\<not> ?P \\<Longrightarrow> c = c'", "assume *: \"\\<delta> \\<le> snd p\\<^sub>0 - snd p\""], ["proof (state)\nthis:\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> c = c'\n 2. \\<not> ?P \\<Longrightarrow> c = c'", "hence \"\\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\""], ["proof (prove)\nusing this:\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2", "using \"3.prems\"(2,3) dist_eq_dist_code_abs_le"], ["proof (prove)\nusing this:\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  (dist\n    (case ?p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> \\<bar>real_of_int ?c\\<bar>) =\n  (dist_code ?p\\<^sub>0 ?p\\<^sub>1 \\<le> ?c\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2", "by fastforce"], ["proof (state)\nthis:\n  \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> c = c'\n 2. \\<not> ?P \\<Longrightarrow> c = c'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (1 subgoal):\n 1. c = c'", "using * \"3.prems\"(5,6)"], ["proof (prove)\nusing this:\n  \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n  \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  c = find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>c', c') =\n  find_closest_code p \\<delta>' (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. c = c'", "by simp"], ["proof (state)\nthis:\n  c = c'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "assume *: \"\\<not> \\<delta> \\<le> snd p\\<^sub>0 - snd p\""], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "have \"0 \\<le> snd p\\<^sub>0 - snd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> snd p\\<^sub>0 - snd p", "using \"3.prems\"(4) sorted_snd_def"], ["proof (prove)\nusing this:\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. 0 \\<le> snd p\\<^sub>0 - snd p", "by simp"], ["proof (state)\nthis:\n  0 \\<le> snd p\\<^sub>0 - snd p\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  0 \\<le> snd p\\<^sub>0 - snd p", "have A: \"\\<not> \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\""], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  0 \\<le> snd p\\<^sub>0 - snd p\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2", "using \"3.prems\"(2,3) dist_eq_dist_code_abs_le[of c\\<^sub>0 c\\<^sub>1 \"snd p\\<^sub>0 - snd p\"]"], ["proof (prove)\nusing this:\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  0 \\<le> snd p\\<^sub>0 - snd p\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  (dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> \\<bar>real_of_int (snd p\\<^sub>0 - snd p)\\<bar>) =\n  (dist_code c\\<^sub>0 c\\<^sub>1 \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "have \"min \\<delta> \\<delta>\\<^sub>0 = \\<delta> \\<longleftrightarrow> min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>'\" \"min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0 \\<longleftrightarrow> min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n    (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>') &&&\n    (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n    (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')", "by (metis \"3.prems\"(2,3) defs(1,2) dist_eq_dist_code_le min.commute min_def)+"], ["proof (state)\nthis:\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>')\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "moreover"], ["proof (state)\nthis:\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>')\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "have \"sorted_snd (p # p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd (p # p\\<^sub>2 # ps)", "using \"3.prems\"(4) sorted_snd_def"], ["proof (prove)\nusing this:\n  sorted_snd (p # p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. sorted_snd (p # p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  sorted_snd (p # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "ultimately"], ["proof (chain)\npicking this:\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>')\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')\n  sorted_snd (p # p\\<^sub>2 # ps)", "have B: \"p\\<^sub>1 = p\\<^sub>1'\""], ["proof (prove)\nusing this:\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>')\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')\n  sorted_snd (p # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>1'", "using \"3.IH\"[of c\\<^sub>0 c\\<^sub>1 \\<delta>' p\\<^sub>1 \\<delta>\\<^sub>1' p\\<^sub>1'] \"3.IH\"[of p p\\<^sub>0 \\<delta>\\<^sub>0' p\\<^sub>1 \\<delta>\\<^sub>1' p\\<^sub>1'] \"3.prems\"(2,3) defs *"], ["proof (prove)\nusing this:\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>')\n  (min \\<delta> \\<delta>\\<^sub>0 = \\<delta>\\<^sub>0) =\n  (min \\<delta>' \\<delta>\\<^sub>0' = \\<delta>\\<^sub>0')\n  sorted_snd (p # p\\<^sub>2 # ps)\n  \\<lbrakk>\\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n   0 < length (p\\<^sub>2 # ps);\n   min \\<delta>\n    (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n   sorted_snd (p # p\\<^sub>2 # ps);\n   p\\<^sub>1 =\n   find_closest p\n    (min \\<delta>\n      (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n    (p\\<^sub>2 # ps);\n   (\\<delta>\\<^sub>1', p\\<^sub>1') =\n   find_closest_code p \\<delta>' (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> p\\<^sub>1 = p\\<^sub>1'\n  \\<lbrakk>\\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p);\n   0 < length (p\\<^sub>2 # ps);\n   min \\<delta>\n    (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n   dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0;\n   sorted_snd (p # p\\<^sub>2 # ps);\n   p\\<^sub>1 =\n   find_closest p\n    (min \\<delta>\n      (dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case p\\<^sub>0 of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))))\n    (p\\<^sub>2 # ps);\n   (\\<delta>\\<^sub>1', p\\<^sub>1') =\n   find_closest_code p \\<delta>\\<^sub>0' (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> p\\<^sub>1 = p\\<^sub>1'\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n  p\\<^sub>1 =\n  find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>1', p\\<^sub>1') =\n  find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>1'", "by auto"], ["proof (state)\nthis:\n  p\\<^sub>1 = p\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "have \"\\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'", "using find_closest_code_dist_eq defs"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length ?ps;\n   (?\\<delta>\\<^sub>c, ?c) = find_closest_code ?p ?\\<delta> ?ps\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta>\\<^sub>c = dist_code ?p ?c\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n  p\\<^sub>1 =\n  find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>1', p\\<^sub>1') =\n  find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "hence \"\\<delta>\\<^sub>0 \\<le> dist p p\\<^sub>1 \\<longleftrightarrow> \\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1'\""], ["proof (prove)\nusing this:\n  \\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'\n\ngoal (1 subgoal):\n 1. (\\<delta>\\<^sub>0\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case p\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n    (\\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1')", "using defs(1,2) dist_eq_dist_code_le"], ["proof (prove)\nusing this:\n  \\<delta>\\<^sub>1' = dist_code p p\\<^sub>1'\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n  (dist\n    (case ?p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case ?p\\<^sub>2 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?p\\<^sub>3 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (dist_code ?p\\<^sub>0 ?p\\<^sub>1 \\<le> dist_code ?p\\<^sub>2 ?p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. (\\<delta>\\<^sub>0\n     \\<le> dist\n            (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case p\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n    (\\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1')", "by (simp add: B)"], ["proof (state)\nthis:\n  (\\<delta>\\<^sub>0\n   \\<le> dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (\\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1')\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> real_of_int (snd p\\<^sub>0 - snd p) \\<Longrightarrow>\n    c = c'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<delta>\\<^sub>0\n   \\<le> dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (\\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1')\n\ngoal (1 subgoal):\n 1. c = c'", "using \"3.prems\"(5,6) * A B defs"], ["proof (prove)\nusing this:\n  (\\<delta>\\<^sub>0\n   \\<le> dist\n          (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case p\\<^sub>1 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (\\<delta>\\<^sub>0' \\<le> \\<delta>\\<^sub>1')\n  c = find_closest p \\<delta> (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>c', c') =\n  find_closest_code p \\<delta>' (p\\<^sub>0 # p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> real_of_int (snd p\\<^sub>0 - snd p)\n  \\<not> \\<delta>' \\<le> (snd p\\<^sub>0 - snd p)\\<^sup>2\n  p\\<^sub>1 = p\\<^sub>1'\n  \\<delta>\\<^sub>0 =\n  dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>\\<^sub>0' = dist_code p p\\<^sub>0\n  p\\<^sub>1 =\n  find_closest p (min \\<delta> \\<delta>\\<^sub>0) (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>1', p\\<^sub>1') =\n  find_closest_code p (min \\<delta>' \\<delta>\\<^sub>0') (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. c = c'", "by (auto simp: Let_def split: prod.splits)"], ["proof (state)\nthis:\n  c = c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c = c'\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_ \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [];\n        uv_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        c = find_closest uu_ uv_ [];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uu_ \\<delta>' []\\<rbrakk>\n       \\<Longrightarrow> c = c'\n 2. \\<And>uw_ ux_ p \\<delta>' c\\<^sub>0 c\\<^sub>1 c \\<delta>\\<^sub>c' c'.\n       \\<lbrakk>0 < length [p];\n        ux_ =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uw_, p];\n        c = find_closest uw_ ux_ [p];\n        (\\<delta>\\<^sub>c', c') =\n        find_closest_code uw_ \\<delta>' [p]\\<rbrakk>\n       \\<Longrightarrow> c = c'", "qed auto"], ["", "fun find_closest_pair_code :: \"(int * point * point) \\<Rightarrow> point list \\<Rightarrow> (int * point * point)\" where\n  \"find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [] = (\\<delta>, c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p] = (\\<delta>, c\\<^sub>0, c\\<^sub>1)\"\n| \"find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # ps) = (\n    let (\\<delta>', p\\<^sub>1) = find_closest_code p\\<^sub>0 \\<delta> ps in\n    if \\<delta> \\<le> \\<delta>' then\n      find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) ps\n    else\n      find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) ps\n  )\""], ["", "lemma find_closest_pair_code_dist_eq:\n  assumes \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\" \"(\\<Delta>, C\\<^sub>0, C\\<^sub>1) = find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"\\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) ps\n\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "proof (induction \"(\\<delta>, c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: \\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1 rule: find_closest_pair_code.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p]\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 3. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<Delta> C\\<^sub>0\n       C\\<^sub>1.\n       \\<lbrakk>\\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest_code p\\<^sub>0 \\<delta> (v # va);\n                    (xa, y) = x; \\<delta> \\<le> xa;\n                    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n                    (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<Delta> =\n                                     dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x = find_closest_code p\\<^sub>0 \\<delta> (v # va);\n            (xa, y) = x; \\<not> \\<delta> \\<le> xa;\n            xa = dist_code p\\<^sub>0 y;\n            (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair_code (xa, p\\<^sub>0, y) (v # va)\\<rbrakk>\n           \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "case (3 \\<delta> c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps);\n   (?xa, ?y) = ?x; \\<delta> \\<le> ?xa;\n   \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n   (?\\<Delta>, ?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?\\<Delta> = dist_code ?C\\<^sub>0 ?C\\<^sub>1\n  \\<lbrakk>?x = find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps);\n   (?xa, ?y) = ?x; \\<not> \\<delta> \\<le> ?xa; ?xa = dist_code p\\<^sub>0 ?y;\n   (?\\<Delta>, ?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair_code (?xa, p\\<^sub>0, ?y) (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?\\<Delta> = dist_code ?C\\<^sub>0 ?C\\<^sub>1\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p]\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 3. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<Delta> C\\<^sub>0\n       C\\<^sub>1.\n       \\<lbrakk>\\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest_code p\\<^sub>0 \\<delta> (v # va);\n                    (xa, y) = x; \\<delta> \\<le> xa;\n                    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n                    (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<Delta> =\n                                     dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x = find_closest_code p\\<^sub>0 \\<delta> (v # va);\n            (xa, y) = x; \\<not> \\<delta> \\<le> xa;\n            xa = dist_code p\\<^sub>0 y;\n            (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair_code (xa, p\\<^sub>0, y) (v # va)\\<rbrakk>\n           \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "obtain \\<delta>' p\\<^sub>1 where \\<delta>'_def: \"(\\<delta>', p\\<^sub>1) = find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>'' p\\<^sub>1.\n        (\\<delta>'', p\\<^sub>1) =\n        find_closest_code p\\<^sub>0 \\<delta>\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p]\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 3. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<Delta> C\\<^sub>0\n       C\\<^sub>1.\n       \\<lbrakk>\\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest_code p\\<^sub>0 \\<delta> (v # va);\n                    (xa, y) = x; \\<delta> \\<le> xa;\n                    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n                    (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<Delta> =\n                                     dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x = find_closest_code p\\<^sub>0 \\<delta> (v # va);\n            (xa, y) = x; \\<not> \\<delta> \\<le> xa;\n            xa = dist_code p\\<^sub>0 y;\n            (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair_code (xa, p\\<^sub>0, y) (v # va)\\<rbrakk>\n           \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "hence A: \"\\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1\""], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1", "using find_closest_code_dist_eq"], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  \\<lbrakk>0 < length ?ps;\n   (?\\<delta>\\<^sub>c, ?c) = find_closest_code ?p ?\\<delta> ?ps\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta>\\<^sub>c = dist_code ?p ?c\n\ngoal (1 subgoal):\n 1. \\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  \\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p]\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 3. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<Delta> C\\<^sub>0\n       C\\<^sub>1.\n       \\<lbrakk>\\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n                   \\<lbrakk>x =\n                            find_closest_code p\\<^sub>0 \\<delta> (v # va);\n                    (xa, y) = x; \\<delta> \\<le> xa;\n                    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n                    (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> \\<Delta> =\n                                     dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<And>x xa y \\<Delta> C\\<^sub>0 C\\<^sub>1.\n           \\<lbrakk>x = find_closest_code p\\<^sub>0 \\<delta> (v # va);\n            (xa, y) = x; \\<not> \\<delta> \\<le> xa;\n            xa = dist_code p\\<^sub>0 y;\n            (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair_code (xa, p\\<^sub>0, y) (v # va)\\<rbrakk>\n           \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1;\n        \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "proof (cases \"\\<delta> \\<le> \\<delta>'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "case True"], ["proof (state)\nthis:\n  \\<delta> \\<le> \\<delta>'\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "obtain \\<Delta>' C\\<^sub>0' C\\<^sub>1' where \\<Delta>'_def: \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases4)"], ["proof (state)\nthis:\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "note defs = \\<delta>'_def \\<Delta>'_def"], ["proof (state)\nthis:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "hence \"\\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'", "using \"3.hyps\"(1)[of \"(\\<delta>', p\\<^sub>1)\" \\<delta>' p\\<^sub>1] \"3.prems\"(1) True \\<delta>'_def"], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>(\\<delta>', p\\<^sub>1) =\n           find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps);\n   (\\<delta>', p\\<^sub>1) = (\\<delta>', p\\<^sub>1);\n   \\<delta> \\<le> \\<delta>'; \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n   (?\\<Delta>, ?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?\\<Delta> = dist_code ?C\\<^sub>0 ?C\\<^sub>1\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n  \\<delta> \\<le> \\<delta>'\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "have \"\\<Delta> = \\<Delta>'\" \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> = \\<Delta>' &&&\n    C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs True \"3.prems\"(2)"], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<delta> \\<le> \\<delta>'\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta> = \\<Delta>' &&&\n    C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> \\<Delta> = \\<Delta>'\n 2. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0'\n 3. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>1 = C\\<^sub>1'", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "case False"], ["proof (state)\nthis:\n  \\<not> \\<delta> \\<le> \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "obtain \\<Delta>' C\\<^sub>0' C\\<^sub>1' where \\<Delta>'_def: \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n         (p\\<^sub>2 # ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases4)"], ["proof (state)\nthis:\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "note defs = \\<delta>'_def \\<Delta>'_def"], ["proof (state)\nthis:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "hence \"\\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'", "using \"3.hyps\"(2)[of \"(\\<delta>', p\\<^sub>1)\" \\<delta>' p\\<^sub>1] A False \\<delta>'_def"], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<lbrakk>(\\<delta>', p\\<^sub>1) =\n           find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps);\n   (\\<delta>', p\\<^sub>1) = (\\<delta>', p\\<^sub>1);\n   \\<not> \\<delta> \\<le> \\<delta>';\n   \\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1;\n   (?\\<Delta>, ?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?\\<Delta> = dist_code ?C\\<^sub>0 ?C\\<^sub>1\n  \\<delta>' = dist_code p\\<^sub>0 p\\<^sub>1\n  \\<not> \\<delta> \\<le> \\<delta>'\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "have \"\\<Delta> = \\<Delta>'\" \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> = \\<Delta>' &&&\n    C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using defs False \"3.prems\"(2)"], ["proof (prove)\nusing this:\n  (\\<delta>', p\\<^sub>1) =\n  find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<not> \\<delta> \\<le> \\<delta>'\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta> = \\<Delta>' &&&\n    C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<not> \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> \\<Delta> = \\<Delta>'\n 2. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<not> \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0'\n 3. \\<lbrakk>(\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n             find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<not> \\<delta> \\<le> \\<delta>';\n     find_closest_code p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps) =\n     (\\<delta>', p\\<^sub>1);\n     (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n     find_closest_pair_code (\\<delta>', p\\<^sub>0, p\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>1 = C\\<^sub>1'", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> \\<le> \\<delta>' \\<Longrightarrow>\n    \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta>' = dist_code C\\<^sub>0' C\\<^sub>1'\n  \\<Delta> = \\<Delta>'\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n 2. \\<And>\\<delta> c\\<^sub>0 c\\<^sub>1 p \\<Delta> C\\<^sub>0 C\\<^sub>1.\n       \\<lbrakk>\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1;\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) [p]\\<rbrakk>\n       \\<Longrightarrow> \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "qed auto"], ["", "declare find_closest_pair.simps [simp add]"], ["", "lemma find_closest_pair_code_eq:\n  assumes \"\\<delta> = dist c\\<^sub>0 c\\<^sub>1\" \"\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\" \"sorted_snd ps\"\n  assumes \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\"\n  assumes \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) ps\"\n  shows \"C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "using assms"], ["proof (prove)\nusing this:\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  sorted_snd ps\n  (C\\<^sub>0, C\\<^sub>1) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) ps\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) ps\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "proof (induction \"(c\\<^sub>0, c\\<^sub>1)\" ps arbitrary: \\<delta> \\<delta>' c\\<^sub>0 c\\<^sub>1 C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1' rule: find_closest_pair.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> \\<delta>' C\\<^sub>0\n       C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>'\n                   C\\<^sub>0' C\\<^sub>1'.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (v # va);\n                    (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n                    find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                                     C\\<^sub>1 = C\\<^sub>1';\n        \\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0'\n           C\\<^sub>1'.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            \\<delta>' = dist_code p\\<^sub>0 x; sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va);\n            (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n            find_closest_pair_code (\\<delta>', p\\<^sub>0, x)\n             (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                             C\\<^sub>1 = C\\<^sub>1';\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # v # va);\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "case (3 c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 p\\<^sub>2 ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta> =\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps);\n   (?\\<Delta>', ?C\\<^sub>0', ?C\\<^sub>1') =\n   find_closest_pair_code (?\\<delta>', c\\<^sub>0, c\\<^sub>1)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 = ?C\\<^sub>0' \\<and> ?C\\<^sub>1 = ?C\\<^sub>1'\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta> =\n   dist\n    (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code p\\<^sub>0 ?x; sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps);\n   (?\\<Delta>', ?C\\<^sub>0', ?C\\<^sub>1') =\n   find_closest_pair_code (?\\<delta>', p\\<^sub>0, ?x)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 = ?C\\<^sub>0' \\<and> ?C\\<^sub>1 = ?C\\<^sub>1'\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> \\<delta>' C\\<^sub>0\n       C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>'\n                   C\\<^sub>0' C\\<^sub>1'.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (v # va);\n                    (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n                    find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                                     C\\<^sub>1 = C\\<^sub>1';\n        \\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0'\n           C\\<^sub>1'.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            \\<delta>' = dist_code p\\<^sub>0 x; sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va);\n            (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n            find_closest_pair_code (\\<delta>', p\\<^sub>0, x)\n             (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                             C\\<^sub>1 = C\\<^sub>1';\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # v # va);\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "obtain p\\<^sub>1 \\<delta>\\<^sub>p' p\\<^sub>1' where \\<delta>\\<^sub>p_def: \"p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\"\n    \"(\\<delta>\\<^sub>p', p\\<^sub>1') = find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p\\<^sub>1 \\<delta>\\<^sub>p' p\\<^sub>1'.\n        \\<lbrakk>p\\<^sub>1 =\n                 find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps);\n         (\\<delta>\\<^sub>p', p\\<^sub>1') =\n         find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> \\<delta>' C\\<^sub>0\n       C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>'\n                   C\\<^sub>0' C\\<^sub>1'.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (v # va);\n                    (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n                    find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                                     C\\<^sub>1 = C\\<^sub>1';\n        \\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0'\n           C\\<^sub>1'.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            \\<delta>' = dist_code p\\<^sub>0 x; sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va);\n            (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n            find_closest_pair_code (\\<delta>', p\\<^sub>0, x)\n             (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                             C\\<^sub>1 = C\\<^sub>1';\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # v # va);\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "hence A: \"\\<delta>\\<^sub>p' = dist_code p\\<^sub>0 p\\<^sub>1'\""], ["proof (prove)\nusing this:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>p' = dist_code p\\<^sub>0 p\\<^sub>1'", "using find_closest_code_dist_eq"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  \\<lbrakk>0 < length ?ps;\n   (?\\<delta>\\<^sub>c, ?c) = find_closest_code ?p ?\\<delta> ?ps\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta>\\<^sub>c = dist_code ?p ?c\n\ngoal (1 subgoal):\n 1. \\<delta>\\<^sub>p' = dist_code p\\<^sub>0 p\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  \\<delta>\\<^sub>p' = dist_code p\\<^sub>0 p\\<^sub>1'\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> \\<delta>' C\\<^sub>0\n       C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>'\n                   C\\<^sub>0' C\\<^sub>1'.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (v # va);\n                    (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n                    find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                                     C\\<^sub>1 = C\\<^sub>1';\n        \\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0'\n           C\\<^sub>1'.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            \\<delta>' = dist_code p\\<^sub>0 x; sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va);\n            (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n            find_closest_pair_code (\\<delta>', p\\<^sub>0, x)\n             (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                             C\\<^sub>1 = C\\<^sub>1';\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # v # va);\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "have B: \"p\\<^sub>1 = p\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>1'", "using \"3.prems\"(1,2,3) \\<delta>\\<^sub>p_def find_closest_code_eq"], ["proof (prove)\nusing this:\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  \\<lbrakk>0 < length ?ps;\n   ?\\<delta> =\n   dist\n    (case ?c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?c\\<^sub>1 of\n     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code ?c\\<^sub>0 ?c\\<^sub>1; sorted_snd (?p # ?ps);\n   ?c = find_closest ?p ?\\<delta> ?ps;\n   (?\\<delta>\\<^sub>c', ?c') = find_closest_code ?p ?\\<delta>' ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c = ?c'\n\ngoal (1 subgoal):\n 1. p\\<^sub>1 = p\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  p\\<^sub>1 = p\\<^sub>1'\n\ngoal (3 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 3. \\<And>c\\<^sub>0 c\\<^sub>1 p\\<^sub>0 v va \\<delta> \\<delta>' C\\<^sub>0\n       C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>'\n                   C\\<^sub>0' C\\<^sub>1'.\n                   \\<lbrakk>x =\n                            find_closest p\\<^sub>0\n                             (dist\n                               (case c\\<^sub>0 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y))\n                               (case c\\<^sub>1 of\n                                (x, y) \\<Rightarrow>\n                                  (real_of_int x, real_of_int y)))\n                             (v # va);\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    \\<le> dist\n                           (case p\\<^sub>0 of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y))\n                           (case x of\n                            (x, y) \\<Rightarrow>\n                              (real_of_int x, real_of_int y));\n                    \\<delta> =\n                    dist\n                     (case c\\<^sub>0 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     (case c\\<^sub>1 of\n                      (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n                    \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n                    sorted_snd (v # va);\n                    (C\\<^sub>0, C\\<^sub>1) =\n                    find_closest_pair (c\\<^sub>0, c\\<^sub>1) (v # va);\n                    (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n                    find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n                     (v # va)\\<rbrakk>\n                   \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                                     C\\<^sub>1 = C\\<^sub>1';\n        \\<And>x \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0'\n           C\\<^sub>1'.\n           \\<lbrakk>x =\n                    find_closest p\\<^sub>0\n                     (dist\n                       (case c\\<^sub>0 of\n                        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                       (case c\\<^sub>1 of\n                        (x, y) \\<Rightarrow>\n                          (real_of_int x, real_of_int y)))\n                     (v # va);\n            \\<not> dist\n                    (case c\\<^sub>0 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                    (case c\\<^sub>1 of\n                     (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                   \\<le> dist\n                          (case p\\<^sub>0 of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y))\n                          (case x of\n                           (x, y) \\<Rightarrow>\n                             (real_of_int x, real_of_int y));\n            \\<delta> =\n            dist\n             (case p\\<^sub>0 of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n             (case x of\n              (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n            \\<delta>' = dist_code p\\<^sub>0 x; sorted_snd (v # va);\n            (C\\<^sub>0, C\\<^sub>1) =\n            find_closest_pair (p\\<^sub>0, x) (v # va);\n            (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n            find_closest_pair_code (\\<delta>', p\\<^sub>0, x)\n             (v # va)\\<rbrakk>\n           \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                             C\\<^sub>1 = C\\<^sub>1';\n        \\<delta> =\n        dist\n         (case c\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case c\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1;\n        sorted_snd (p\\<^sub>0 # v # va);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # v # va);\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         (p\\<^sub>0 # v # va)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "proof (cases \"\\<delta> \\<le> dist p\\<^sub>0 p\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "case True"], ["proof (state)\nthis:\n  \\<delta>\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "hence C: \"\\<delta>' \\<le> \\<delta>\\<^sub>p'\""], ["proof (prove)\nusing this:\n  \\<delta>\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<delta>' \\<le> \\<delta>\\<^sub>p'", "by (simp add: \"3.prems\"(1,2) A B dist_eq_dist_code_le)"], ["proof (state)\nthis:\n  \\<delta>' \\<le> \\<delta>\\<^sub>p'\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "obtain C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i' C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i' where \\<Delta>\\<^sub>i_def:\n      \"(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) = find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\"\n      \"(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') = find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i'\n        C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'.\n        \\<lbrakk>(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n                 find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps);\n         (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n         find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n          (p\\<^sub>2 # ps)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "note defs = \\<delta>\\<^sub>p_def \\<Delta>\\<^sub>i_def"], ["proof (state)\nthis:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"sorted_snd (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd (p\\<^sub>2 # ps)", "using \"3.prems\"(3) sorted_snd_def"], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. sorted_snd (p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  sorted_snd (p\\<^sub>2 # ps)\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "hence \"C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and> C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\""], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'", "using \"3.hyps\"(1) \"3.prems\"(1,2) True defs"], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>2 # ps)\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   \\<le> dist\n          (case p\\<^sub>0 of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta> =\n   dist\n    (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps);\n   (?\\<Delta>', ?C\\<^sub>0', ?C\\<^sub>1') =\n   find_closest_pair_code (?\\<delta>', c\\<^sub>0, c\\<^sub>1)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 = ?C\\<^sub>0' \\<and> ?C\\<^sub>1 = ?C\\<^sub>1'\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1\n  \\<delta>\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'", "by blast"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"C\\<^sub>0 = C\\<^sub>0\\<^sub>i\" \"C\\<^sub>1 = C\\<^sub>1\\<^sub>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0\\<^sub>i &&& C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "using defs(1,3) True \"3.prems\"(1,4)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<delta>\n  \\<le> dist\n         (case p\\<^sub>0 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1 of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0\\<^sub>i &&& C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>c\\<^sub>0 = (x1b, x2b);\n        \\<delta> =\n        dist (real_of_int x1b, real_of_int x2b)\n         (real_of_int x1, real_of_int x2);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1b, x2b), x1, x2) (p\\<^sub>2 # ps);\n        c\\<^sub>1 = (x1, x2); p\\<^sub>1 = (x1a, x2a);\n        (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n        find_closest_pair ((x1b, x2b), x1, x2) (p\\<^sub>2 # ps);\n        find_closest (x1c, x2c)\n         (dist (real_of_int x1b, real_of_int x2b)\n           (real_of_int x1, real_of_int x2))\n         (p\\<^sub>2 # ps) =\n        (x1a, x2a);\n        p\\<^sub>0 = (x1c, x2c);\n        dist (real_of_int x1b, real_of_int x2b)\n         (real_of_int x1, real_of_int x2)\n        \\<le> dist (real_of_int x1c, real_of_int x2c)\n               (real_of_int x1a, real_of_int x2a)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>c\\<^sub>0 = (x1b, x2b);\n        \\<delta> =\n        dist (real_of_int x1b, real_of_int x2b)\n         (real_of_int x1, real_of_int x2);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1b, x2b), x1, x2) (p\\<^sub>2 # ps);\n        c\\<^sub>1 = (x1, x2); p\\<^sub>1 = (x1a, x2a);\n        (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n        find_closest_pair ((x1b, x2b), x1, x2) (p\\<^sub>2 # ps);\n        find_closest (x1c, x2c)\n         (dist (real_of_int x1b, real_of_int x2b)\n           (real_of_int x1, real_of_int x2))\n         (p\\<^sub>2 # ps) =\n        (x1a, x2a);\n        p\\<^sub>0 = (x1c, x2c);\n        dist (real_of_int x1b, real_of_int x2b)\n         (real_of_int x1, real_of_int x2)\n        \\<le> dist (real_of_int x1c, real_of_int x2c)\n               (real_of_int x1a, real_of_int x2a)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"\\<Delta>' = \\<Delta>\\<^sub>i'\" \"C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\" \"C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta>' = \\<Delta>\\<^sub>i' &&&\n    C\\<^sub>0' = C\\<^sub>0\\<^sub>i' &&& C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "using defs(2,4) C \"3.prems\"(5)"], ["proof (prove)\nusing this:\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<delta>' \\<le> \\<delta>\\<^sub>p'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = \\<Delta>\\<^sub>i' &&&\n    C\\<^sub>0' = C\\<^sub>0\\<^sub>i' &&& C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> \\<Delta>' = \\<Delta>\\<^sub>i'\n 2. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n 3. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n              (p\\<^sub>2 # ps);\n     \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\n\ngoal (2 subgoals):\n 1. \\<delta>\n    \\<le> dist\n           (case p\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case p\\<^sub>1 of\n            (x, y) \\<Rightarrow>\n              (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n 2. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "case False"], ["proof (state)\nthis:\n  \\<not> \\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "hence C: \"\\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p'\""], ["proof (prove)\nusing this:\n  \\<not> \\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p'", "by (simp add: \"3.prems\"(1,2) A B dist_eq_dist_code_le)"], ["proof (state)\nthis:\n  \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "obtain C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i' C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i' where \\<Delta>\\<^sub>i_def:\n      \"(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) = find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\"\n      \"(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') = find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1') (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i'\n        C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'.\n        \\<lbrakk>(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n                 find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps);\n         (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n         find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n          (p\\<^sub>2 # ps)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "note defs = \\<delta>\\<^sub>p_def \\<Delta>\\<^sub>i_def"], ["proof (state)\nthis:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"sorted_snd (p\\<^sub>2 # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd (p\\<^sub>2 # ps)", "using \"3.prems\"(3) sorted_snd_def"], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>0 # p\\<^sub>2 # ps)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n\ngoal (1 subgoal):\n 1. sorted_snd (p\\<^sub>2 # ps)", "by simp"], ["proof (state)\nthis:\n  sorted_snd (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "hence \"C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and> C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\""], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'", "using \"3.prems\"(1) \"3.hyps\"(2) A B False defs"], ["proof (prove)\nusing this:\n  sorted_snd (p\\<^sub>2 # ps)\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<lbrakk>?x =\n           find_closest p\\<^sub>0\n            (dist\n              (case c\\<^sub>0 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n              (case c\\<^sub>1 of\n               (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n            (p\\<^sub>2 # ps);\n   \\<not> dist\n           (case c\\<^sub>0 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case c\\<^sub>1 of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          \\<le> dist\n                 (case p\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case ?x of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta> =\n   dist\n    (case p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?x of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code p\\<^sub>0 ?x; sorted_snd (p\\<^sub>2 # ps);\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (p\\<^sub>0, ?x) (p\\<^sub>2 # ps);\n   (?\\<Delta>', ?C\\<^sub>0', ?C\\<^sub>1') =\n   find_closest_pair_code (?\\<delta>', p\\<^sub>0, ?x)\n    (p\\<^sub>2 # ps)\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 = ?C\\<^sub>0' \\<and> ?C\\<^sub>1 = ?C\\<^sub>1'\n  \\<delta>\\<^sub>p' = dist_code p\\<^sub>0 p\\<^sub>1'\n  p\\<^sub>1 = p\\<^sub>1'\n  \\<not> \\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n   (p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'", "by blast"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"C\\<^sub>0 = C\\<^sub>0\\<^sub>i\" \"C\\<^sub>1 = C\\<^sub>1\\<^sub>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0\\<^sub>i &&& C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "using defs(1,3) False \"3.prems\"(1,4)"], ["proof (prove)\nusing this:\n  p\\<^sub>1 = find_closest p\\<^sub>0 \\<delta> (p\\<^sub>2 # ps)\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  find_closest_pair (p\\<^sub>0, p\\<^sub>1) (p\\<^sub>2 # ps)\n  \\<not> \\<delta>\n         \\<le> dist\n                (case p\\<^sub>0 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                (case p\\<^sub>1 of\n                 (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  \\<delta> =\n  dist\n   (case c\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case c\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (c\\<^sub>0, c\\<^sub>1) (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0\\<^sub>i &&& C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>\\<delta> =\n                dist (real_of_int x1a, real_of_int x2a)\n                 (real_of_int x1, real_of_int x2);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1c, x2c), x1b, x2b) (p\\<^sub>2 # ps);\n        c\\<^sub>1 = (x1, x2); p\\<^sub>1 = (x1b, x2b);\n        c\\<^sub>0 = (x1a, x2a);\n        (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n        find_closest_pair ((x1c, x2c), x1b, x2b) (p\\<^sub>2 # ps);\n        find_closest (x1c, x2c)\n         (dist (real_of_int x1a, real_of_int x2a)\n           (real_of_int x1, real_of_int x2))\n         (p\\<^sub>2 # ps) =\n        (x1b, x2b);\n        p\\<^sub>0 = (x1c, x2c);\n        \\<not> dist (real_of_int x1a, real_of_int x2a)\n                (real_of_int x1, real_of_int x2)\n               \\<le> dist (real_of_int x1c, real_of_int x2c)\n                      (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>\\<delta> =\n                dist (real_of_int x1a, real_of_int x2a)\n                 (real_of_int x1, real_of_int x2);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1c, x2c), x1b, x2b) (p\\<^sub>2 # ps);\n        c\\<^sub>1 = (x1, x2); p\\<^sub>1 = (x1b, x2b);\n        c\\<^sub>0 = (x1a, x2a);\n        (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n        find_closest_pair ((x1c, x2c), x1b, x2b) (p\\<^sub>2 # ps);\n        find_closest (x1c, x2c)\n         (dist (real_of_int x1a, real_of_int x2a)\n           (real_of_int x1, real_of_int x2))\n         (p\\<^sub>2 # ps) =\n        (x1b, x2b);\n        p\\<^sub>0 = (x1c, x2c);\n        \\<not> dist (real_of_int x1a, real_of_int x2a)\n                (real_of_int x1, real_of_int x2)\n               \\<le> dist (real_of_int x1c, real_of_int x2c)\n                      (real_of_int x1b, real_of_int x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = C\\<^sub>1\\<^sub>i", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "have \"\\<Delta>' = \\<Delta>\\<^sub>i'\" \"C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\" \"C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta>' = \\<Delta>\\<^sub>i' &&&\n    C\\<^sub>0' = C\\<^sub>0\\<^sub>i' &&& C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "using defs(2,4) C \"3.prems\"(5)"], ["proof (prove)\nusing this:\n  (\\<delta>\\<^sub>p', p\\<^sub>1') =\n  find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps)\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n   (p\\<^sub>2 # ps)\n  \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n   (p\\<^sub>0 # p\\<^sub>2 # ps)\n\ngoal (1 subgoal):\n 1. \\<Delta>' = \\<Delta>\\<^sub>i' &&&\n    C\\<^sub>0' = C\\<^sub>0\\<^sub>i' &&& C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code\n              (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1') (p\\<^sub>2 # ps);\n     \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> \\<Delta>' = \\<Delta>\\<^sub>i'\n 2. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code\n              (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1') (p\\<^sub>2 # ps);\n     \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n 3. \\<lbrakk>(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n             find_closest_pair_code\n              (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1') (p\\<^sub>2 # ps);\n     \\<not> \\<delta>' \\<le> \\<delta>\\<^sub>p';\n     find_closest_code p\\<^sub>0 \\<delta>' (p\\<^sub>2 # ps) =\n     (\\<delta>\\<^sub>p', p\\<^sub>1');\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code (\\<delta>\\<^sub>p', p\\<^sub>0, p\\<^sub>1')\n      (p\\<^sub>2 # ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta>\n           \\<le> dist\n                  (case p\\<^sub>0 of\n                   (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                  (case p\\<^sub>1 of\n                   (x, y) \\<Rightarrow>\n                     (real_of_int x, real_of_int y)) \\<Longrightarrow>\n    C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' \\<and>\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  C\\<^sub>0 = C\\<^sub>0\\<^sub>i\n  C\\<^sub>1 = C\\<^sub>1\\<^sub>i\n  \\<Delta>' = \\<Delta>\\<^sub>i'\n  C\\<^sub>0' = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1' = C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'", "by simp"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0' \\<and> C\\<^sub>1 = C\\<^sub>1'\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>0 c\\<^sub>1 \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1) []\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'\n 2. \\<And>c\\<^sub>0 c\\<^sub>1 uu_ \\<delta> \\<delta>' C\\<^sub>0 C\\<^sub>1\n       \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n       \\<lbrakk>\\<delta> =\n                dist\n                 (case c\\<^sub>0 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                 (case c\\<^sub>1 of\n                  (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n        \\<delta>' = dist_code c\\<^sub>0 c\\<^sub>1; sorted_snd [uu_];\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair (c\\<^sub>0, c\\<^sub>1) [uu_];\n        (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n        find_closest_pair_code (\\<delta>', c\\<^sub>0, c\\<^sub>1)\n         [uu_]\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = C\\<^sub>0' \\<and>\n                         C\\<^sub>1 = C\\<^sub>1'", "qed auto"], ["", "fun combine_code :: \"(int * point * point) \\<Rightarrow> (int * point * point) \\<Rightarrow> int \\<Rightarrow> point list \\<Rightarrow> (int * point * point)\" where\n  \"combine_code (\\<delta>\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (\\<delta>\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps = (\n    let (\\<delta>, c\\<^sub>0, c\\<^sub>1) = if \\<delta>\\<^sub>L < \\<delta>\\<^sub>R then (\\<delta>\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (\\<delta>\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) in\n    let ps' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<delta>) ps in\n    find_closest_pair_code (\\<delta>, c\\<^sub>0, c\\<^sub>1) ps'\n  )\""], ["", "lemma combine_code_dist_eq:\n  assumes \"\\<delta>\\<^sub>L = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\" \"\\<delta>\\<^sub>R = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\"\n  assumes \"(\\<delta>, c\\<^sub>0, c\\<^sub>1) = combine_code (\\<delta>\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (\\<delta>\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  \\<delta>\\<^sub>L = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\n  \\<delta>\\<^sub>R = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\n  (\\<delta>, c\\<^sub>0, c\\<^sub>1) =\n  combine_code (\\<delta>\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (\\<delta>\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "by (auto simp: find_closest_pair_code_dist_eq split: if_splits)"], ["", "lemma combine_code_eq:\n  assumes \"\\<delta>\\<^sub>L' = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\" \"\\<delta>\\<^sub>R' = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\" \"sorted_snd ps\"\n  assumes \"(c\\<^sub>0, c\\<^sub>1) = combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  assumes \"(\\<delta>', c\\<^sub>0', c\\<^sub>1') = combine_code (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\"\n  shows \"c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i' C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i' where \\<Delta>\\<^sub>i_def:\n    \"(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) = (if dist p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L < dist p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\"\n    \"(\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') = (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R' then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<Delta>\\<^sub>i'\n        C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'.\n        \\<lbrakk>(C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n                 (if dist\n                      (case p\\<^sub>0\\<^sub>L of\n                       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                      (case p\\<^sub>1\\<^sub>L of\n                       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n                     < dist\n                        (case p\\<^sub>0\\<^sub>R of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                        (case p\\<^sub>1\\<^sub>R of\n                         (x, y) \\<Rightarrow>\n                           (real_of_int x, real_of_int y))\n                  then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                  else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R));\n         (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n         (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n          then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n          else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R,\n                p\\<^sub>1\\<^sub>R))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n   then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "define ps' ps'' where ps'_def:\n    \"ps' = filter (\\<lambda>p. dist p (l, snd p) < dist C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i) ps\"\n    \"ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\""], ["proof (state)\nthis:\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1' where \\<Delta>_def:\n    \"(C\\<^sub>0, C\\<^sub>1) = find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) ps'\"\n    \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = find_closest_pair_code (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') ps''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        \\<lbrakk>(C\\<^sub>0, C\\<^sub>1) =\n                 find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i)\n                  ps';\n         (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n         find_closest_pair_code\n          (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i')\n          ps''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) ps'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code\n   (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') ps''\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "note defs = \\<Delta>\\<^sub>i_def ps'_def \\<Delta>_def"], ["proof (state)\nthis:\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n   then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) ps'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code\n   (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') ps''\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have *: \"C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i'\" \"C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\" \"\\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' &&&\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i' &&&\n    \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'", "using \\<Delta>\\<^sub>i_def assms(1,2,3,4) dist_eq_dist_code_lt"], ["proof (prove)\nusing this:\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n   then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  \\<delta>\\<^sub>L' = dist_code p\\<^sub>0\\<^sub>L p\\<^sub>1\\<^sub>L\n  \\<delta>\\<^sub>R' = dist_code p\\<^sub>0\\<^sub>R p\\<^sub>1\\<^sub>R\n  sorted_snd ps\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  (dist\n    (case ?p\\<^sub>0 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n    (case ?p\\<^sub>1 of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   < dist\n      (case ?p\\<^sub>2 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>3 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (dist_code ?p\\<^sub>0 ?p\\<^sub>1 < dist_code ?p\\<^sub>2 ?p\\<^sub>3)\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i' &&&\n    C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i' &&&\n    \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence \"\\<And>p. \\<bar>fst p - l\\<bar> < dist C\\<^sub>0\\<^sub>i C\\<^sub>1\\<^sub>i \\<longleftrightarrow> (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i'\""], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (real_of_int \\<bar>fst p - l\\<bar>\n        < dist\n           (case C\\<^sub>0\\<^sub>i of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1\\<^sub>i of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n       ((fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')", "using dist_eq_dist_code_abs_lt"], ["proof (prove)\nusing this:\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'\n  (\\<bar>real_of_int ?c\\<bar>\n   < dist\n      (case ?p\\<^sub>0 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case ?p\\<^sub>1 of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  (?c\\<^sup>2 < dist_code ?p\\<^sub>0 ?p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (real_of_int \\<bar>fst p - l\\<bar>\n        < dist\n           (case C\\<^sub>0\\<^sub>i of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n           (case C\\<^sub>1\\<^sub>i of\n            (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n       ((fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')", "by (metis (mono_tags) of_int_abs)"], ["proof (state)\nthis:\n  (real_of_int \\<bar>fst ?p - l\\<bar>\n   < dist\n      (case C\\<^sub>0\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case C\\<^sub>1\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  ((fst ?p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence \"ps' = ps''\""], ["proof (prove)\nusing this:\n  (real_of_int \\<bar>fst ?p - l\\<bar>\n   < dist\n      (case C\\<^sub>0\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case C\\<^sub>1\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  ((fst ?p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n\ngoal (1 subgoal):\n 1. ps' = ps''", "using ps'_def dist_fst_abs"], ["proof (prove)\nusing this:\n  (real_of_int \\<bar>fst ?p - l\\<bar>\n   < dist\n      (case C\\<^sub>0\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      (case C\\<^sub>1\\<^sub>i of\n       (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))) =\n  ((fst ?p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\n  dist (case ?p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   (case (?l, snd ?p) of\n    (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)) =\n  real_of_int \\<bar>fst ?p - ?l\\<bar>\n\ngoal (1 subgoal):\n 1. ps' = ps''", "by auto"], ["proof (state)\nthis:\n  ps' = ps''\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  ps' = ps''\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"sorted_snd ps'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd ps'", "using assms(3) ps'_def sorted_snd_def sorted_wrt_filter"], ["proof (prove)\nusing this:\n  sorted_snd ps\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  sorted_wrt ?f ?xs \\<Longrightarrow> sorted_wrt ?f (filter ?P ?xs)\n\ngoal (1 subgoal):\n 1. sorted_snd ps'", "by blast"], ["proof (state)\nthis:\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  ps' = ps''\n  sorted_snd ps'", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  ps' = ps''\n  sorted_snd ps'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using * find_closest_pair_code_eq \\<Delta>_def"], ["proof (prove)\nusing this:\n  ps' = ps''\n  sorted_snd ps'\n  C\\<^sub>0\\<^sub>i = C\\<^sub>0\\<^sub>i'\n  C\\<^sub>1\\<^sub>i = C\\<^sub>1\\<^sub>i'\n  \\<Delta>\\<^sub>i' = dist_code C\\<^sub>0\\<^sub>i' C\\<^sub>1\\<^sub>i'\n  \\<lbrakk>?\\<delta> =\n           dist\n            (case ?c\\<^sub>0 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n            (case ?c\\<^sub>1 of\n             (x, y) \\<Rightarrow> (real_of_int x, real_of_int y));\n   ?\\<delta>' = dist_code ?c\\<^sub>0 ?c\\<^sub>1; sorted_snd ?ps;\n   (?C\\<^sub>0, ?C\\<^sub>1) =\n   find_closest_pair (?c\\<^sub>0, ?c\\<^sub>1) ?ps;\n   (?\\<Delta>', ?C\\<^sub>0', ?C\\<^sub>1') =\n   find_closest_pair_code (?\\<delta>', ?c\\<^sub>0, ?c\\<^sub>1) ?ps\\<rbrakk>\n  \\<Longrightarrow> ?C\\<^sub>0 = ?C\\<^sub>0' \\<and> ?C\\<^sub>1 = ?C\\<^sub>1'\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) ps'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code\n   (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') ps''\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by blast+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"C\\<^sub>0 = c\\<^sub>0\" \"C\\<^sub>1 = c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "using assms(4) defs(1,3,5)"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) =\n  combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) =\n  (if dist\n       (case p\\<^sub>0\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       (case p\\<^sub>1\\<^sub>L of\n        (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n      < dist\n         (case p\\<^sub>0\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n         (case p\\<^sub>1\\<^sub>R of\n          (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n   then (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps' =\n  filter\n   (\\<lambda>p.\n       dist (case p of (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n        (case (l, snd p) of\n         (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n       < dist\n          (case C\\<^sub>0\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y))\n          (case C\\<^sub>1\\<^sub>i of\n           (x, y) \\<Rightarrow> (real_of_int x, real_of_int y)))\n   ps\n  (C\\<^sub>0, C\\<^sub>1) =\n  find_closest_pair (C\\<^sub>0\\<^sub>i, C\\<^sub>1\\<^sub>i) ps'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = c\\<^sub>0 &&& C\\<^sub>1 = c\\<^sub>1", "apply (auto simp: combine.simps split: prod.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c x1d x2d x1e x2e.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>1\\<^sub>i = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        C\\<^sub>0\\<^sub>i = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>0\\<^sub>R = (x1c, x2c); p\\<^sub>1\\<^sub>L = (x1d, x2d);\n        p\\<^sub>0\\<^sub>L = (x1e, x2e);\n        (if dist (real_of_int x1e, real_of_int x2e)\n             (real_of_int x1d, real_of_int x2d)\n            < dist (real_of_int x1c, real_of_int x2c)\n               (real_of_int x1b, real_of_int x2b)\n         then ((x1e, x2e), x1d, x2d) else ((x1c, x2c), x1b, x2b)) =\n        ((x1a, x2a), x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>0 = c\\<^sub>0\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c x1d x2d x1e x2e.\n       \\<lbrakk>(c\\<^sub>0, c\\<^sub>1) =\n                find_closest_pair ((x1a, x2a), x1, x2)\n                 (filter\n                   (\\<lambda>p.\n                       \\<forall>x1b x2b.\n                          p = (x1b, x2b) \\<longrightarrow>\n                          dist (real_of_int x1b, real_of_int x2b)\n                           (real_of_int l, real_of_int x2b)\n                          < dist (real_of_int x1a, real_of_int x2a)\n                             (real_of_int x1, real_of_int x2))\n                   ps);\n        C\\<^sub>1\\<^sub>i = (x1, x2);\n        ps' =\n        filter\n         (\\<lambda>p.\n             \\<forall>x1b x2b.\n                p = (x1b, x2b) \\<longrightarrow>\n                dist (real_of_int x1b, real_of_int x2b)\n                 (real_of_int l, real_of_int x2b)\n                < dist (real_of_int x1a, real_of_int x2a)\n                   (real_of_int x1, real_of_int x2))\n         ps;\n        C\\<^sub>0\\<^sub>i = (x1a, x2a);\n        (C\\<^sub>0, C\\<^sub>1) =\n        find_closest_pair ((x1a, x2a), x1, x2)\n         (filter\n           (\\<lambda>p.\n               \\<forall>x1b x2b.\n                  p = (x1b, x2b) \\<longrightarrow>\n                  dist (real_of_int x1b, real_of_int x2b)\n                   (real_of_int l, real_of_int x2b)\n                  < dist (real_of_int x1a, real_of_int x2a)\n                     (real_of_int x1, real_of_int x2))\n           ps);\n        p\\<^sub>0\\<^sub>R = (x1c, x2c); p\\<^sub>1\\<^sub>L = (x1d, x2d);\n        p\\<^sub>0\\<^sub>L = (x1e, x2e);\n        (if dist (real_of_int x1e, real_of_int x2e)\n             (real_of_int x1d, real_of_int x2d)\n            < dist (real_of_int x1c, real_of_int x2c)\n               (real_of_int x1b, real_of_int x2b)\n         then ((x1e, x2e), x1d, x2d) else ((x1c, x2c), x1b, x2b)) =\n        ((x1a, x2a), x1, x2);\n        p\\<^sub>1\\<^sub>R = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> C\\<^sub>1 = c\\<^sub>1", "by (metis Pair_inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"C\\<^sub>0' = c\\<^sub>0'\" \"C\\<^sub>1' = c\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>0' = c\\<^sub>0' &&& C\\<^sub>1' = c\\<^sub>1'", "using assms(5) defs(2,4,6)"], ["proof (prove)\nusing this:\n  (\\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  combine_code (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) l ps\n  (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') =\n  (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n   then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n   else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R))\n  ps'' = filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  find_closest_pair_code\n   (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i') ps''\n\ngoal (1 subgoal):\n 1. C\\<^sub>0' = c\\<^sub>0' &&& C\\<^sub>1' = c\\<^sub>1'", "apply (auto split: prod.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ps'' =\n             filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n              ps;\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code\n      (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i')\n      (filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps);\n     (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n      then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n      else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) =\n     (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i');\n     (\\<delta>', c\\<^sub>0', c\\<^sub>1') =\n     find_closest_pair_code\n      (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i')\n      (filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n        ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>0' = c\\<^sub>0'\n 2. \\<lbrakk>ps'' =\n             filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n              ps;\n     (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n     find_closest_pair_code\n      (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i')\n      (filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i') ps);\n     (if \\<delta>\\<^sub>L' < \\<delta>\\<^sub>R'\n      then (\\<delta>\\<^sub>L', p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n      else (\\<delta>\\<^sub>R', p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)) =\n     (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i');\n     (\\<delta>', c\\<^sub>0', c\\<^sub>1') =\n     find_closest_pair_code\n      (\\<Delta>\\<^sub>i', C\\<^sub>0\\<^sub>i', C\\<^sub>1\\<^sub>i')\n      (filter (\\<lambda>p. (fst p - l)\\<^sup>2 < \\<Delta>\\<^sub>i')\n        ps)\\<rbrakk>\n    \\<Longrightarrow> C\\<^sub>1' = c\\<^sub>1'", "by (metis prod.inject)+"], ["proof (state)\nthis:\n  C\\<^sub>0' = c\\<^sub>0'\n  C\\<^sub>1' = c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n  C\\<^sub>0' = c\\<^sub>0'\n  C\\<^sub>1' = c\\<^sub>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  C\\<^sub>0 = c\\<^sub>0\n  C\\<^sub>1 = c\\<^sub>1\n  C\\<^sub>0' = c\\<^sub>0'\n  C\\<^sub>1' = c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "by blast"], ["proof (state)\nthis:\n  c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Divide and Conquer Algorithm\""], ["", "function closest_pair_rec_code :: \"point list \\<Rightarrow> (point list * int * point * point)\" where\n  \"closest_pair_rec_code xs = (\n    let n = length xs in\n    if n \\<le> 3 then\n      (mergesort snd xs, closest_pair_bf_code xs)\n    else\n      let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n      let l = fst (hd xs\\<^sub>R) in\n\n      let (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L in\n      let (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R in\n\n      let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n      (ys, combine_code p\\<^sub>L p\\<^sub>R l ys)\n  )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. (\\<And>xs. x = xs \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>xs xsa.\n       xs = xsa \\<Longrightarrow>\n       (let n = length xs\n        in if n \\<le> 3 then (mergesort snd xs, closest_pair_bf_code xs)\n           else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n                    l = fst (hd xs\\<^sub>R);\n                    (ys\\<^sub>L, p\\<^sub>L) =\n                      closest_pair_rec_code_sumC xs\\<^sub>L;\n                    (ys\\<^sub>R, p\\<^sub>R) =\n                      closest_pair_rec_code_sumC xs\\<^sub>R;\n                    ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys)) =\n       (let n = length xsa\n        in if n \\<le> 3 then (mergesort snd xsa, closest_pair_bf_code xsa)\n           else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xsa;\n                    l = fst (hd xs\\<^sub>R);\n                    (ys\\<^sub>L, p\\<^sub>L) =\n                      closest_pair_rec_code_sumC xs\\<^sub>L;\n                    (ys\\<^sub>R, p\\<^sub>R) =\n                      closest_pair_rec_code_sumC xs\\<^sub>R;\n                    ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))", "by pat_completeness auto"], ["", "termination closest_pair_rec_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. All closest_pair_rec_code_dom", "by (relation \"Wellfounded.measure (\\<lambda>xs. length xs)\")\n     (auto simp: split_at_take_drop_conv Let_def)"], ["", "lemma closest_pair_rec_code_simps:\n  assumes \"n = length xs\" \"\\<not> (n \\<le> 3)\"\n  shows \"closest_pair_rec_code xs = (\n    let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs in\n    let l = fst (hd xs\\<^sub>R) in\n    let (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L in\n    let (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R in\n    let ys = merge snd ys\\<^sub>L ys\\<^sub>R in\n    (ys, combine_code p\\<^sub>L p\\<^sub>R l ys)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair_rec_code xs =\n    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n         l = fst (hd xs\\<^sub>R);\n         (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L;\n         (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R;\n         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n     in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))", "using assms"], ["proof (prove)\nusing this:\n  n = length xs\n  \\<not> n \\<le> 3\n\ngoal (1 subgoal):\n 1. closest_pair_rec_code xs =\n    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) xs;\n         l = fst (hd xs\\<^sub>R);\n         (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L;\n         (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R;\n         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n     in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))", "by (auto simp: Let_def)"], ["", "declare combine.simps combine_code.simps closest_pair_rec_code.simps [simp del]"], ["", "lemma closest_pair_rec_code_dist_eq:\n  assumes \"1 < length xs\" \"(ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\"\n  shows \"\\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  1 < length xs\n  (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "proof (induction xs arbitrary: ys \\<delta> c\\<^sub>0 c\\<^sub>1 rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys \\<delta> c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb xc.\n                       (x, xa, xb, xc) =\n                       closest_pair_rec_code ys \\<longrightarrow>\n                       xa = dist_code xb xc);\n        1 < length xs;\n        (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb xc.\n         (x, xa, xb, xc) = closest_pair_rec_code ys \\<longrightarrow>\n         xa = dist_code xb xc)\n  1 < length xs\n  (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys \\<delta> c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb xc.\n                       (x, xa, xb, xc) =\n                       closest_pair_rec_code ys \\<longrightarrow>\n                       xa = dist_code xb xc);\n        1 < length xs;\n        (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys \\<delta> c\\<^sub>0 c\\<^sub>1.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb xc.\n                       (x, xa, xb, xc) =\n                       closest_pair_rec_code ys \\<longrightarrow>\n                       xa = dist_code xb xc);\n        1 < length xs;\n        (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "hence \"(\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. (\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs", "using \"1.prems\"(2) closest_pair_rec_code.simps"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\n  closest_pair_rec_code ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf_code ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               l = fst (hd xs\\<^sub>R);\n               (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n\ngoal (1 subgoal):\n 1. (\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs", "by simp"], ["proof (state)\nthis:\n  (\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "using \"1.prems\"(1) closest_pair_bf_code_dist_eq"], ["proof (prove)\nusing this:\n  (\\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_bf_code xs\n  1 < length xs\n  \\<lbrakk>1 < length ?ps;\n   (?\\<delta>, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf_code ?ps\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta> = dist_code ?c\\<^sub>0 ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "obtain YS\\<^sub>L \\<Delta>\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L where YSC\\<^sub>0\\<^sub>1\\<^sub>L_def: \"(YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = closest_pair_rec_code XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L \\<Delta>\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L,\n         C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec_code XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L \\<Delta>\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L.\n        (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L,\n         C\\<^sub>1\\<^sub>L) =\n        closest_pair_rec_code XS\\<^sub>L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "obtain YS\\<^sub>R \\<Delta>\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R where YSC\\<^sub>0\\<^sub>1\\<^sub>R_def: \"(YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = closest_pair_rec_code XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R \\<Delta>\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R,\n         C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec_code XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R \\<Delta>\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R.\n        (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R,\n         C\\<^sub>1\\<^sub>R) =\n        closest_pair_rec_code XS\\<^sub>R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "define YS where \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "obtain \\<Delta> C\\<^sub>0 C\\<^sub>1 where C\\<^sub>0\\<^sub>1_def: \"(\\<Delta>, C\\<^sub>0, C\\<^sub>1) = combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta> C\\<^sub>0 C\\<^sub>1.\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        combine_code\n         (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L\n         YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta> C\\<^sub>0 C\\<^sub>1.\n        (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n        combine_code\n         (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n         (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L\n         YS \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSC\\<^sub>0\\<^sub>1\\<^sub>L_def YSC\\<^sub>0\\<^sub>1\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "hence IHL: \"\\<Delta>\\<^sub>L = dist_code C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>L = dist_code C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb xc.\n         (x, xa, xb, xc) = closest_pair_rec_code ys \\<longrightarrow>\n         xa = dist_code xb xc)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>L = dist_code C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L", "by metis+"], ["proof (state)\nthis:\n  \\<Delta>\\<^sub>L = dist_code C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "hence IHR: \"\\<Delta>\\<^sub>R = dist_code C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>R = dist_code C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb xc.\n         (x, xa, xb, xc) = closest_pair_rec_code ys \\<longrightarrow>\n         xa = dist_code xb xc)\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>R = dist_code C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R", "by metis+"], ["proof (state)\nthis:\n  \\<Delta>\\<^sub>R = dist_code C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "have *: \"(YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs", "using False closest_pair_rec_code_simps defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec_code ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         l = fst (hd xs\\<^sub>R);\n                         (ys\\<^sub>L, p\\<^sub>L) =\n                           closest_pair_rec_code xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>R) =\n                           closest_pair_rec_code xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, \\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, \\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "have \"\\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "using combine_code_dist_eq IHL IHR C\\<^sub>0\\<^sub>1_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<delta>\\<^sub>L =\n           dist_code ?p\\<^sub>0\\<^sub>L ?p\\<^sub>1\\<^sub>L;\n   ?\\<delta>\\<^sub>R = dist_code ?p\\<^sub>0\\<^sub>R ?p\\<^sub>1\\<^sub>R;\n   (?\\<delta>, ?c\\<^sub>0, ?c\\<^sub>1) =\n   combine_code (?\\<delta>\\<^sub>L, ?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n    (?\\<delta>\\<^sub>R, ?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l\n    ?ps\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta> = dist_code ?c\\<^sub>0 ?c\\<^sub>1\n  \\<Delta>\\<^sub>L = dist_code C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L\n  \\<Delta>\\<^sub>R = dist_code C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R\n  (\\<Delta>, C\\<^sub>0, C\\<^sub>1) =\n  combine_code (\\<Delta>\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (\\<Delta>\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "using \"1.prems\"(2) *"], ["proof (prove)\nusing this:\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n  \\<Delta> = dist_code C\\<^sub>0 C\\<^sub>1\n  (ys, \\<delta>, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code xs\n  (YS, \\<Delta>, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1", "by (metis Pair_inject)"], ["proof (state)\nthis:\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<delta> = dist_code c\\<^sub>0 c\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_ys_eq:\n  assumes \"1 < length xs\"\n  assumes \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  assumes \"(ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\"\n  shows \"ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = ys'", "using assms"], ["proof (prove)\nusing this:\n  1 < length xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. ys = ys'", "proof (induction xs arbitrary: ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1' rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>xa xb xc xd.\n                           (xa, xb, xc, xd) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           x = xa));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>xa xb xc xd.\n             (xa, xb, xc, xd) = closest_pair_rec_code ys \\<longrightarrow>\n             x = xa))\n  1 < length xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>xa xb xc xd.\n                           (xa, xb, xc, xd) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           x = xa));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>xa xb xc xd.\n                           (xa, xb, xc, xd) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           x = xa));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = ys'", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> ys = ys'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> ys = ys'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "hence \"ys = mergesort snd xs\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. ys = mergesort snd xs", "using \"1.prems\"(2) closest_pair_rec.simps"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  closest_pair_rec ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys,\n               combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R))\n                ys))\n\ngoal (1 subgoal):\n 1. ys = mergesort snd xs", "by simp"], ["proof (state)\nthis:\n  ys = mergesort snd xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> ys = ys'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "moreover"], ["proof (state)\nthis:\n  ys = mergesort snd xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> ys = ys'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"ys' = mergesort snd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys' = mergesort snd xs", "using \"1.prems\"(3) closest_pair_rec_code.simps"], ["proof (prove)\nusing this:\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n  closest_pair_rec_code ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf_code ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               l = fst (hd xs\\<^sub>R);\n               (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n\ngoal (1 subgoal):\n 1. ys' = mergesort snd xs", "by (simp add: True)"], ["proof (state)\nthis:\n  ys' = mergesort snd xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow> ys = ys'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "ultimately"], ["proof (chain)\npicking this:\n  ys = mergesort snd xs\n  ys' = mergesort snd xs", "show ?thesis"], ["proof (prove)\nusing this:\n  ys = mergesort snd xs\n  ys' = mergesort snd xs\n\ngoal (1 subgoal):\n 1. ys = ys'", "using \"1.prems\"(1)"], ["proof (prove)\nusing this:\n  ys = mergesort snd xs\n  ys' = mergesort snd xs\n  1 < length xs\n\ngoal (1 subgoal):\n 1. ys = ys'", "by simp"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "obtain YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L' \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L' where YSC\\<^sub>0\\<^sub>1\\<^sub>L_def:\n      \"(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = closest_pair_rec XS\\<^sub>L\"\n      \"(YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') = closest_pair_rec_code XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L'\n        \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'.\n        \\<lbrakk>(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec XS\\<^sub>L;\n         (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L',\n          C\\<^sub>1\\<^sub>L') =\n         closest_pair_rec_code XS\\<^sub>L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L'\n        \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'.\n        \\<lbrakk>(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec XS\\<^sub>L;\n         (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L',\n          C\\<^sub>1\\<^sub>L') =\n         closest_pair_rec_code XS\\<^sub>L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "obtain YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R' \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R' where YSC\\<^sub>0\\<^sub>1\\<^sub>R_def:\n      \"(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = closest_pair_rec XS\\<^sub>R\"\n      \"(YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') = closest_pair_rec_code XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R'\n        \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'.\n        \\<lbrakk>(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec XS\\<^sub>R;\n         (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R',\n          C\\<^sub>1\\<^sub>R') =\n         closest_pair_rec_code XS\\<^sub>R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R'\n        \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'.\n        \\<lbrakk>(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec XS\\<^sub>R;\n         (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R',\n          C\\<^sub>1\\<^sub>R') =\n         closest_pair_rec_code XS\\<^sub>R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "define YS YS' where YS_def:\n      \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\"\n      \"YS' = merge (\\<lambda>p. snd p) YS\\<^sub>L' YS\\<^sub>R'\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "obtain C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1' where C\\<^sub>0\\<^sub>1_def:\n      \"(C\\<^sub>0, C\\<^sub>1) = combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\"\n      \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        \\<lbrakk>(C\\<^sub>0, C\\<^sub>1) =\n                 combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n                  (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS;\n         (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n         combine_code\n          (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n          (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L\n          YS'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        \\<lbrakk>(C\\<^sub>0, C\\<^sub>1) =\n                 combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n                  (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS;\n         (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n         combine_code\n          (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n          (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L\n          YS'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSC\\<^sub>0\\<^sub>1\\<^sub>L_def YSC\\<^sub>0\\<^sub>1\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "hence IHL: \"YS\\<^sub>L = YS\\<^sub>L'\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. YS\\<^sub>L = YS\\<^sub>L'", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>xa xb xc xd.\n             (xa, xb, xc, xd) = closest_pair_rec_code ys \\<longrightarrow>\n             x = xa))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. YS\\<^sub>L = YS\\<^sub>L'", "by metis"], ["proof (state)\nthis:\n  YS\\<^sub>L = YS\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "hence IHR: \"YS\\<^sub>R = YS\\<^sub>R'\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. YS\\<^sub>R = YS\\<^sub>R'", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>xa xb xc xd.\n             (xa, xb, xc, xd) = closest_pair_rec_code ys \\<longrightarrow>\n             x = xa))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. YS\\<^sub>R = YS\\<^sub>R'", "by metis"], ["proof (state)\nthis:\n  YS\\<^sub>R = YS\\<^sub>R'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"(YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "using False closest_pair_rec_simps defs(1,2,3,5,7,9)"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "moreover"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"(YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs", "using False closest_pair_rec_code_simps defs(1,2,4,6,8,10)"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec_code ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         l = fst (hd xs\\<^sub>R);\n                         (ys\\<^sub>L, p\\<^sub>L) =\n                           closest_pair_rec_code xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>R) =\n                           closest_pair_rec_code xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "moreover"], ["proof (state)\nthis:\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "have \"YS = YS'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. YS = YS'", "using IHL IHR YS_def"], ["proof (prove)\nusing this:\n  YS\\<^sub>L = YS\\<^sub>L'\n  YS\\<^sub>R = YS\\<^sub>R'\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n\ngoal (1 subgoal):\n 1. YS = YS'", "by simp"], ["proof (state)\nthis:\n  YS = YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow> ys = ys'", "ultimately"], ["proof (chain)\npicking this:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n  YS = YS'", "show ?thesis"], ["proof (prove)\nusing this:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n  YS = YS'\n\ngoal (1 subgoal):\n 1. ys = ys'", "by (metis \"1.prems\"(2,3) Pair_inject)"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closest_pair_rec_code_eq:\n  assumes \"1 < length xs\"\n  assumes \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\"\n  assumes \"(ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\"\n  shows \"c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "using assms"], ["proof (prove)\nusing this:\n  1 < length xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "proof (induction xs arbitrary: ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1' rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>x xc xd xe.\n                           (x, xc, xd, xe) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           xa = xd \\<and> xb = xe));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 = c\\<^sub>0' \\<and>\n                         c\\<^sub>1 = c\\<^sub>1'", "case (1 xs)"], ["proof (state)\nthis:\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>x xc xd xe.\n             (x, xc, xd, xe) = closest_pair_rec_code ys \\<longrightarrow>\n             xa = xd \\<and> xb = xe))\n  1 < length xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>x xc xd xe.\n                           (x, xc, xd, xe) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           xa = xd \\<and> xb = xe));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 = c\\<^sub>0' \\<and>\n                         c\\<^sub>1 = c\\<^sub>1'", "let ?n = \"length xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   1 < length ys \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n                       (\\<forall>x xc xd xe.\n                           (x, xc, xd, xe) =\n                           closest_pair_rec_code ys \\<longrightarrow>\n                           xa = xd \\<and> xb = xe));\n        1 < length xs; (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs;\n        (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n        closest_pair_rec_code xs\\<rbrakk>\n       \\<Longrightarrow> c\\<^sub>0 = c\\<^sub>0' \\<and>\n                         c\\<^sub>1 = c\\<^sub>1'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "proof (cases \"?n \\<le> 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "case True"], ["proof (state)\nthis:\n  length xs \\<le> 3\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence \"(c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\""], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "using \"1.prems\"(2) closest_pair_rec.simps"], ["proof (prove)\nusing this:\n  length xs \\<le> 3\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  closest_pair_rec ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               (ys\\<^sub>L, p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys,\n               combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R) (fst (hd xs\\<^sub>R))\n                ys))\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs", "by simp"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"(\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs", "using \"1.prems\"(3) closest_pair_rec_code.simps"], ["proof (prove)\nusing this:\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n  closest_pair_rec_code ?xs =\n  (let n = length ?xs\n   in if n \\<le> 3 then (mergesort snd ?xs, closest_pair_bf_code ?xs)\n      else let (xs\\<^sub>L, xs\\<^sub>R) = split_at (n div 2) ?xs;\n               l = fst (hd xs\\<^sub>R);\n               (ys\\<^sub>L, p\\<^sub>L) = closest_pair_rec_code xs\\<^sub>L;\n               (ys\\<^sub>R, p\\<^sub>R) = closest_pair_rec_code xs\\<^sub>R;\n               ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n           in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n\ngoal (1 subgoal):\n 1. (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs", "by (simp add: True)"], ["proof (state)\nthis:\n  (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs\n\ngoal (2 subgoals):\n 1. length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n 2. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n  (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs", "show ?thesis"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n  (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "using \"1.prems\"(1) closest_pair_bf_code_eq"], ["proof (prove)\nusing this:\n  (c\\<^sub>0, c\\<^sub>1) = closest_pair_bf xs\n  (\\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_bf_code xs\n  1 < length xs\n  \\<lbrakk>1 < length ?ps; (?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_bf ?ps;\n   (?\\<delta>', ?c\\<^sub>0', ?c\\<^sub>1') =\n   closest_pair_bf_code ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 = ?c\\<^sub>0' \\<and> ?c\\<^sub>1 = ?c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "by simp"], ["proof (state)\nthis:\n  c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain XS\\<^sub>L XS\\<^sub>R where XS\\<^sub>L\\<^sub>R_def: \"(XS\\<^sub>L, XS\\<^sub>R) = split_at (?n div 2) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>XS\\<^sub>L XS\\<^sub>R.\n        (XS\\<^sub>L, XS\\<^sub>R) =\n        split_at (length xs div 2) xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "define L where \"L = fst (hd XS\\<^sub>R)\""], ["proof (state)\nthis:\n  L = fst (hd XS\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L' \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L' where YSC\\<^sub>0\\<^sub>1\\<^sub>L_def:\n      \"(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) = closest_pair_rec XS\\<^sub>L\"\n      \"(YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') = closest_pair_rec_code XS\\<^sub>L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L'\n        \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'.\n        \\<lbrakk>(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec XS\\<^sub>L;\n         (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L',\n          C\\<^sub>1\\<^sub>L') =\n         closest_pair_rec_code XS\\<^sub>L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>L C\\<^sub>0\\<^sub>L C\\<^sub>1\\<^sub>L YS\\<^sub>L'\n        \\<Delta>\\<^sub>L' C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'.\n        \\<lbrakk>(YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n                 closest_pair_rec XS\\<^sub>L;\n         (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L',\n          C\\<^sub>1\\<^sub>L') =\n         closest_pair_rec_code XS\\<^sub>L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R' \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R' where YSC\\<^sub>0\\<^sub>1\\<^sub>R_def:\n      \"(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) = closest_pair_rec XS\\<^sub>R\"\n      \"(YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') = closest_pair_rec_code XS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R'\n        \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'.\n        \\<lbrakk>(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec XS\\<^sub>R;\n         (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R',\n          C\\<^sub>1\\<^sub>R') =\n         closest_pair_rec_code XS\\<^sub>R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>YS\\<^sub>R C\\<^sub>0\\<^sub>R C\\<^sub>1\\<^sub>R YS\\<^sub>R'\n        \\<Delta>\\<^sub>R' C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'.\n        \\<lbrakk>(YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n                 closest_pair_rec XS\\<^sub>R;\n         (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R',\n          C\\<^sub>1\\<^sub>R') =\n         closest_pair_rec_code XS\\<^sub>R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "define YS YS' where YS_def:\n      \"YS = merge (\\<lambda>p. snd p) YS\\<^sub>L YS\\<^sub>R\"\n      \"YS' = merge (\\<lambda>p. snd p) YS\\<^sub>L' YS\\<^sub>R'\""], ["proof (state)\nthis:\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "obtain C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1' where C\\<^sub>0\\<^sub>1_def:\n      \"(C\\<^sub>0, C\\<^sub>1) = combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\"\n      \"(\\<Delta>', C\\<^sub>0', C\\<^sub>1') = combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        \\<lbrakk>(C\\<^sub>0, C\\<^sub>1) =\n                 combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n                  (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS;\n         (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n         combine_code\n          (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n          (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L\n          YS'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>0 C\\<^sub>1 \\<Delta>' C\\<^sub>0' C\\<^sub>1'.\n        \\<lbrakk>(C\\<^sub>0, C\\<^sub>1) =\n                 combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n                  (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS;\n         (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n         combine_code\n          (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n          (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L\n          YS'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "note defs = XS\\<^sub>L\\<^sub>R_def L_def YSC\\<^sub>0\\<^sub>1\\<^sub>L_def YSC\\<^sub>0\\<^sub>1\\<^sub>R_def YS_def C\\<^sub>0\\<^sub>1_def"], ["proof (state)\nthis:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"1 < length XS\\<^sub>L\" \"length XS\\<^sub>L < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>L &&& length XS\\<^sub>L < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence IHL: \"C\\<^sub>0\\<^sub>L = C\\<^sub>0\\<^sub>L'\" \"C\\<^sub>1\\<^sub>L = C\\<^sub>1\\<^sub>L'\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>L = C\\<^sub>0\\<^sub>L' &&&\n    C\\<^sub>1\\<^sub>L = C\\<^sub>1\\<^sub>L'", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>L\n  length XS\\<^sub>L < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>x xc xd xe.\n             (x, xc, xd, xe) = closest_pair_rec_code ys \\<longrightarrow>\n             xa = xd \\<and> xb = xe))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>L = C\\<^sub>0\\<^sub>L' &&&\n    C\\<^sub>1\\<^sub>L = C\\<^sub>1\\<^sub>L'", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>L = C\\<^sub>0\\<^sub>L'\n  C\\<^sub>1\\<^sub>L = C\\<^sub>1\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"1 < length XS\\<^sub>R\" \"length XS\\<^sub>R < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "using False \"1.prems\"(1) defs"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  1 < length xs\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. 1 < length XS\\<^sub>R &&& length XS\\<^sub>R < length xs", "by (auto simp: split_at_take_drop_conv)"], ["proof (state)\nthis:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence IHR: \"C\\<^sub>0\\<^sub>R = C\\<^sub>0\\<^sub>R'\" \"C\\<^sub>1\\<^sub>R = C\\<^sub>1\\<^sub>R'\""], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>R = C\\<^sub>0\\<^sub>R' &&&\n    C\\<^sub>1\\<^sub>R = C\\<^sub>1\\<^sub>R'", "using \"1.IH\" defs"], ["proof (prove)\nusing this:\n  1 < length XS\\<^sub>R\n  length XS\\<^sub>R < length xs\n  \\<forall>ys.\n     length ys < length xs \\<longrightarrow>\n     1 < length ys \\<longrightarrow>\n     (\\<forall>x xa xb.\n         (x, xa, xb) = closest_pair_rec ys \\<longrightarrow>\n         (\\<forall>x xc xd xe.\n             (x, xc, xd, xe) = closest_pair_rec_code ys \\<longrightarrow>\n             xa = xd \\<and> xb = xe))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0\\<^sub>R = C\\<^sub>0\\<^sub>R' &&&\n    C\\<^sub>1\\<^sub>R = C\\<^sub>1\\<^sub>R'", "by metis+"], ["proof (state)\nthis:\n  C\\<^sub>0\\<^sub>R = C\\<^sub>0\\<^sub>R'\n  C\\<^sub>1\\<^sub>R = C\\<^sub>1\\<^sub>R'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"sorted_snd YS\\<^sub>L\" \"sorted_snd YS\\<^sub>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_snd YS\\<^sub>L &&& sorted_snd YS\\<^sub>R", "using closest_pair_rec_set_length_sorted_snd YSC\\<^sub>0\\<^sub>1\\<^sub>L_def(1) YSC\\<^sub>0\\<^sub>1\\<^sub>R_def(1)"], ["proof (prove)\nusing this:\n  (?ys, ?p) = closest_pair_rec ?xs \\<Longrightarrow>\n  set ?ys = set ?xs \\<and> length ?ys = length ?xs \\<and> sorted_snd ?ys\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sorted_snd YS\\<^sub>L &&& sorted_snd YS\\<^sub>R", "by blast+"], ["proof (state)\nthis:\n  sorted_snd YS\\<^sub>L\n  sorted_snd YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "hence \"sorted_snd YS\""], ["proof (prove)\nusing this:\n  sorted_snd YS\\<^sub>L\n  sorted_snd YS\\<^sub>R\n\ngoal (1 subgoal):\n 1. sorted_snd YS", "using sorted_merge sorted_snd_def YS_def"], ["proof (prove)\nusing this:\n  sorted_snd YS\\<^sub>L\n  sorted_snd YS\\<^sub>R\n  ?P = (\\<lambda>x y. ?f x \\<le> ?f y) \\<Longrightarrow>\n  sorted_wrt ?P (Common.merge ?f ?xs ?ys) =\n  (sorted_wrt ?P ?xs \\<and> sorted_wrt ?P ?ys)\n  sorted_snd ?ps =\n  sorted_wrt\n   (\\<lambda>p\\<^sub>0 p\\<^sub>1. snd p\\<^sub>0 \\<le> snd p\\<^sub>1) ?ps\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n\ngoal (1 subgoal):\n 1. sorted_snd YS", "by blast"], ["proof (state)\nthis:\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  sorted_snd YS\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"YS = YS'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. YS = YS'", "using defs \\<open>1 < length XS\\<^sub>L\\<close> \\<open>1 < length XS\\<^sub>R\\<close> closest_pair_rec_ys_eq"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n  1 < length XS\\<^sub>L\n  1 < length XS\\<^sub>R\n  \\<lbrakk>1 < length ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs;\n   (?ys', ?\\<delta>', ?c\\<^sub>0', ?c\\<^sub>1') =\n   closest_pair_rec_code ?xs\\<rbrakk>\n  \\<Longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. YS = YS'", "by blast"], ["proof (state)\nthis:\n  YS = YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  YS = YS'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"\\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'\" \"\\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L' &&&\n    \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'", "using defs \\<open>1 < length XS\\<^sub>L\\<close> \\<open>1 < length XS\\<^sub>R\\<close> closest_pair_rec_code_dist_eq"], ["proof (prove)\nusing this:\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n  1 < length XS\\<^sub>L\n  1 < length XS\\<^sub>R\n  \\<lbrakk>1 < length ?xs;\n   (?ys, ?\\<delta>, ?c\\<^sub>0, ?c\\<^sub>1) =\n   closest_pair_rec_code ?xs\\<rbrakk>\n  \\<Longrightarrow> ?\\<delta> = dist_code ?c\\<^sub>0 ?c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L' &&&\n    \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'", "by blast+"], ["proof (state)\nthis:\n  \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'\n  \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  sorted_snd YS\n  YS = YS'\n  \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'\n  \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'", "have \"C\\<^sub>0 = C\\<^sub>0'\" \"C\\<^sub>1 = C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  sorted_snd YS\n  YS = YS'\n  \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'\n  \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "using combine_code_eq IHL IHR C\\<^sub>0\\<^sub>1_def"], ["proof (prove)\nusing this:\n  sorted_snd YS\n  YS = YS'\n  \\<Delta>\\<^sub>L' = dist_code C\\<^sub>0\\<^sub>L' C\\<^sub>1\\<^sub>L'\n  \\<Delta>\\<^sub>R' = dist_code C\\<^sub>0\\<^sub>R' C\\<^sub>1\\<^sub>R'\n  \\<lbrakk>?\\<delta>\\<^sub>L' =\n           dist_code ?p\\<^sub>0\\<^sub>L ?p\\<^sub>1\\<^sub>L;\n   ?\\<delta>\\<^sub>R' = dist_code ?p\\<^sub>0\\<^sub>R ?p\\<^sub>1\\<^sub>R;\n   sorted_snd ?ps;\n   (?c\\<^sub>0, ?c\\<^sub>1) =\n   combine (?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n    (?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l ?ps;\n   (?\\<delta>', ?c\\<^sub>0', ?c\\<^sub>1') =\n   combine_code (?\\<delta>\\<^sub>L', ?p\\<^sub>0\\<^sub>L, ?p\\<^sub>1\\<^sub>L)\n    (?\\<delta>\\<^sub>R', ?p\\<^sub>0\\<^sub>R, ?p\\<^sub>1\\<^sub>R) ?l\n    ?ps\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 = ?c\\<^sub>0' \\<and> ?c\\<^sub>1 = ?c\\<^sub>1'\n  C\\<^sub>0\\<^sub>L = C\\<^sub>0\\<^sub>L'\n  C\\<^sub>1\\<^sub>L = C\\<^sub>1\\<^sub>L'\n  C\\<^sub>0\\<^sub>R = C\\<^sub>0\\<^sub>R'\n  C\\<^sub>1\\<^sub>R = C\\<^sub>1\\<^sub>R'\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. C\\<^sub>0 = C\\<^sub>0' &&& C\\<^sub>1 = C\\<^sub>1'", "by blast+"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"(YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "using False closest_pair_rec_simps defs(1,2,3,5,7,9)"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         (ys\\<^sub>L, p\\<^sub>0\\<^sub>L,\n                           p\\<^sub>1\\<^sub>L) = closest_pair_rec xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>0\\<^sub>R,\n                           p\\<^sub>1\\<^sub>R) = closest_pair_rec xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys,\n                         combine (p\\<^sub>0\\<^sub>L, p\\<^sub>1\\<^sub>L)\n                          (p\\<^sub>0\\<^sub>R, p\\<^sub>1\\<^sub>R)\n                          (fst (hd xs\\<^sub>R)) ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L, C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L) =\n  closest_pair_rec XS\\<^sub>L\n  (YS\\<^sub>R, C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) =\n  closest_pair_rec XS\\<^sub>R\n  YS = Common.merge snd YS\\<^sub>L YS\\<^sub>R\n  (C\\<^sub>0, C\\<^sub>1) =\n  combine (C\\<^sub>0\\<^sub>L, C\\<^sub>1\\<^sub>L)\n   (C\\<^sub>0\\<^sub>R, C\\<^sub>1\\<^sub>R) L YS\n\ngoal (1 subgoal):\n 1. (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "moreover"], ["proof (state)\nthis:\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "have \"(YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs", "using False closest_pair_rec_code_simps defs(1,2,4,6,8,10)"], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> 3\n  \\<lbrakk>?n = length ?xs; \\<not> ?n \\<le> 3\\<rbrakk>\n  \\<Longrightarrow> closest_pair_rec_code ?xs =\n                    (let (xs\\<^sub>L, xs\\<^sub>R) = split_at (?n div 2) ?xs;\n                         l = fst (hd xs\\<^sub>R);\n                         (ys\\<^sub>L, p\\<^sub>L) =\n                           closest_pair_rec_code xs\\<^sub>L;\n                         (ys\\<^sub>R, p\\<^sub>R) =\n                           closest_pair_rec_code xs\\<^sub>R;\n                         ys = Common.merge snd ys\\<^sub>L ys\\<^sub>R\n                     in (ys, combine_code p\\<^sub>L p\\<^sub>R l ys))\n  (XS\\<^sub>L, XS\\<^sub>R) = split_at (length xs div 2) xs\n  L = fst (hd XS\\<^sub>R)\n  (YS\\<^sub>L', \\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L') =\n  closest_pair_rec_code XS\\<^sub>L\n  (YS\\<^sub>R', \\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') =\n  closest_pair_rec_code XS\\<^sub>R\n  YS' = Common.merge snd YS\\<^sub>L' YS\\<^sub>R'\n  (\\<Delta>', C\\<^sub>0', C\\<^sub>1') =\n  combine_code (\\<Delta>\\<^sub>L', C\\<^sub>0\\<^sub>L', C\\<^sub>1\\<^sub>L')\n   (\\<Delta>\\<^sub>R', C\\<^sub>0\\<^sub>R', C\\<^sub>1\\<^sub>R') L YS'\n\ngoal (1 subgoal):\n 1. (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs", "by (auto simp: Let_def split: prod.split)"], ["proof (state)\nthis:\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> 3 \\<Longrightarrow>\n    c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "ultimately"], ["proof (chain)\npicking this:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs", "show ?thesis"], ["proof (prove)\nusing this:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "using \"1.prems\"(2,3)"], ["proof (prove)\nusing this:\n  C\\<^sub>0 = C\\<^sub>0'\n  C\\<^sub>1 = C\\<^sub>1'\n  (YS, C\\<^sub>0, C\\<^sub>1) = closest_pair_rec xs\n  (YS', \\<Delta>', C\\<^sub>0', C\\<^sub>1') = closest_pair_rec_code xs\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec xs\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code xs\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'", "by (metis Pair_inject)"], ["proof (state)\nthis:\n  c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c\\<^sub>0 = c\\<^sub>0' \\<and> c\\<^sub>1 = c\\<^sub>1'\n\ngoal:\nNo subgoals!", "qed"], ["", "declare closest_pair.simps [simp add]"], ["", "fun closest_pair_code :: \"point list \\<Rightarrow> (point * point)\" where\n  \"closest_pair_code [] = undefined\"\n| \"closest_pair_code [_] = undefined\"\n| \"closest_pair_code ps = (let (_, _, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec_code (mergesort fst ps) in (c\\<^sub>0, c\\<^sub>1))\""], ["", "lemma closest_pair_code_eq:\n  \"closest_pair ps = closest_pair_code ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closest_pair ps = closest_pair_code ps", "proof (induction ps rule: induct_list012)"], ["proof (state)\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "case (3 x y zs)"], ["proof (state)\nthis:\n  closest_pair zs = closest_pair_code zs\n  closest_pair (y # zs) = closest_pair_code (y # zs)\n\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "obtain ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1' where *:\n    \"(ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\"\n    \"(ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') = closest_pair_rec_code (mergesort fst (x # y # zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ys c\\<^sub>0 c\\<^sub>1 ys' \\<delta>' c\\<^sub>0' c\\<^sub>1'.\n        \\<lbrakk>(ys, c\\<^sub>0, c\\<^sub>1) =\n                 closest_pair_rec (mergesort fst (x # y # zs));\n         (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n         closest_pair_rec_code (mergesort fst (x # y # zs))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "moreover"], ["proof (state)\nthis:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "have \"1 < length (mergesort fst (x # y # zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length (mergesort fst (x # y # zs))", "using length_mergesort[of fst \"x # y # zs\"]"], ["proof (prove)\nusing this:\n  length (mergesort fst (x # y # zs)) = length (x # y # zs)\n\ngoal (1 subgoal):\n 1. 1 < length (mergesort fst (x # y # zs))", "by simp"], ["proof (state)\nthis:\n  1 < length (mergesort fst (x # y # zs))\n\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "ultimately"], ["proof (chain)\npicking this:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n  1 < length (mergesort fst (x # y # zs))", "have \"c\\<^sub>0 = c\\<^sub>0'\" \"c\\<^sub>1 = c\\<^sub>1'\""], ["proof (prove)\nusing this:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n  1 < length (mergesort fst (x # y # zs))\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' &&& c\\<^sub>1 = c\\<^sub>1'", "using closest_pair_rec_code_eq"], ["proof (prove)\nusing this:\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n  1 < length (mergesort fst (x # y # zs))\n  \\<lbrakk>1 < length ?xs;\n   (?ys, ?c\\<^sub>0, ?c\\<^sub>1) = closest_pair_rec ?xs;\n   (?ys', ?\\<delta>', ?c\\<^sub>0', ?c\\<^sub>1') =\n   closest_pair_rec_code ?xs\\<rbrakk>\n  \\<Longrightarrow> ?c\\<^sub>0 = ?c\\<^sub>0' \\<and> ?c\\<^sub>1 = ?c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. c\\<^sub>0 = c\\<^sub>0' &&& c\\<^sub>1 = c\\<^sub>1'", "by blast+"], ["proof (state)\nthis:\n  c\\<^sub>0 = c\\<^sub>0'\n  c\\<^sub>1 = c\\<^sub>1'\n\ngoal (3 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]\n 3. \\<And>x y zs.\n       \\<lbrakk>closest_pair zs = closest_pair_code zs;\n        closest_pair (y # zs) = closest_pair_code (y # zs)\\<rbrakk>\n       \\<Longrightarrow> closest_pair (x # y # zs) =\n                         closest_pair_code (x # y # zs)", "thus ?case"], ["proof (prove)\nusing this:\n  c\\<^sub>0 = c\\<^sub>0'\n  c\\<^sub>1 = c\\<^sub>1'\n\ngoal (1 subgoal):\n 1. closest_pair (x # y # zs) = closest_pair_code (x # y # zs)", "using *"], ["proof (prove)\nusing this:\n  c\\<^sub>0 = c\\<^sub>0'\n  c\\<^sub>1 = c\\<^sub>1'\n  (ys, c\\<^sub>0, c\\<^sub>1) = closest_pair_rec (mergesort fst (x # y # zs))\n  (ys', \\<delta>', c\\<^sub>0', c\\<^sub>1') =\n  closest_pair_rec_code (mergesort fst (x # y # zs))\n\ngoal (1 subgoal):\n 1. closest_pair (x # y # zs) = closest_pair_code (x # y # zs)", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  closest_pair (x # y # zs) = closest_pair_code (x # y # zs)\n\ngoal (2 subgoals):\n 1. closest_pair [] = closest_pair_code []\n 2. \\<And>x. closest_pair [x] = closest_pair_code [x]", "qed auto"], ["", "export_code closest_pair_code in OCaml\n  module_name Verified"], ["", "end"]]}