{"file_name": "/home/qj213/afp-2021-10-22/thys/LLL_Factorization/Sub_Sums.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LLL_Factorization", "problem_names": ["lemma subset_add_mset: \"ys \\<subseteq># add_mset x zs \\<longleftrightarrow> (ys \\<subseteq># zs \\<or> (\\<exists> xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs))\" \n  (is \"?l = ?r\")", "lemma sub_mset_sums[simp]: \"sub_mset_sums xs = sum_mset ` { ys. ys \\<subseteq># mset xs }\""], "translations": [["", "lemma subset_add_mset: \"ys \\<subseteq># add_mset x zs \\<longleftrightarrow> (ys \\<subseteq># zs \\<or> (\\<exists> xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs))\" \n  (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys \\<subseteq># add_mset x zs) =\n    (ys \\<subseteq># zs \\<or>\n     (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs.\n        xs \\<subseteq># zs \\<and> ys = add_mset x xs) \\<Longrightarrow>\n    ys \\<subseteq># add_mset x zs", "have sub: \"ys \\<subseteq># zs \\<Longrightarrow> ys \\<subseteq># add_mset x zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<subseteq># zs \\<Longrightarrow> ys \\<subseteq># add_mset x zs", "by (metis add_mset_remove_trivial diff_subset_eq_self subset_mset.dual_order.trans)"], ["proof (state)\nthis:\n  ys \\<subseteq># zs \\<Longrightarrow> ys \\<subseteq># add_mset x zs\n\ngoal (2 subgoals):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs.\n        xs \\<subseteq># zs \\<and> ys = add_mset x xs) \\<Longrightarrow>\n    ys \\<subseteq># add_mset x zs", "assume ?r"], ["proof (state)\nthis:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n\ngoal (2 subgoals):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs.\n        xs \\<subseteq># zs \\<and> ys = add_mset x xs) \\<Longrightarrow>\n    ys \\<subseteq># add_mset x zs", "thus ?l"], ["proof (prove)\nusing this:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># add_mset x zs", "using sub"], ["proof (prove)\nusing this:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n  ys \\<subseteq># zs \\<Longrightarrow> ys \\<subseteq># add_mset x zs\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># add_mset x zs", "by auto"], ["proof (state)\nthis:\n  ys \\<subseteq># add_mset x zs\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "assume l: ?l"], ["proof (state)\nthis:\n  ys \\<subseteq># add_mset x zs\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># add_mset x zs \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "proof (cases \"x \\<in># ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "case True"], ["proof (state)\nthis:\n  x \\<in># ys\n\ngoal (2 subgoals):\n 1. x \\<in># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "define xs where \"xs = (ys - {# x #})\""], ["proof (state)\nthis:\n  xs = ys - {#x#}\n\ngoal (2 subgoals):\n 1. x \\<in># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "from True"], ["proof (chain)\npicking this:\n  x \\<in># ys", "have ys: \"ys = add_mset x xs\""], ["proof (prove)\nusing this:\n  x \\<in># ys\n\ngoal (1 subgoal):\n 1. ys = add_mset x xs", "unfolding xs_def"], ["proof (prove)\nusing this:\n  x \\<in># ys\n\ngoal (1 subgoal):\n 1. ys = add_mset x (ys - {#x#})", "by auto"], ["proof (state)\nthis:\n  ys = add_mset x xs\n\ngoal (2 subgoals):\n 1. x \\<in># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "from l[unfolded ys]"], ["proof (chain)\npicking this:\n  add_mset x xs \\<subseteq># add_mset x zs", "have \"xs \\<subseteq># zs\""], ["proof (prove)\nusing this:\n  add_mset x xs \\<subseteq># add_mset x zs\n\ngoal (1 subgoal):\n 1. xs \\<subseteq># zs", "by auto"], ["proof (state)\nthis:\n  xs \\<subseteq># zs\n\ngoal (2 subgoals):\n 1. x \\<in># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n 2. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "thus ?r"], ["proof (prove)\nusing this:\n  xs \\<subseteq># zs\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "unfolding ys"], ["proof (prove)\nusing this:\n  xs \\<subseteq># zs\n\ngoal (1 subgoal):\n 1. add_mset x xs \\<subseteq># zs \\<or>\n    (\\<exists>xsa.\n        xsa \\<subseteq># zs \\<and> add_mset x xs = add_mset x xsa)", "by auto"], ["proof (state)\nthis:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n\ngoal (1 subgoal):\n 1. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "case False"], ["proof (state)\nthis:\n  x \\<notin># ys\n\ngoal (1 subgoal):\n 1. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "with l"], ["proof (chain)\npicking this:\n  ys \\<subseteq># add_mset x zs\n  x \\<notin># ys", "have \"ys \\<subseteq># zs\""], ["proof (prove)\nusing this:\n  ys \\<subseteq># add_mset x zs\n  x \\<notin># ys\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># zs", "by (simp add: subset_mset.le_iff_sup)"], ["proof (state)\nthis:\n  ys \\<subseteq># zs\n\ngoal (1 subgoal):\n 1. x \\<notin># ys \\<Longrightarrow>\n    ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ys \\<subseteq># zs\n\ngoal (1 subgoal):\n 1. ys \\<subseteq># zs \\<or>\n    (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)", "by auto"], ["proof (state)\nthis:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ys \\<subseteq># zs \\<or>\n  (\\<exists>xs. xs \\<subseteq># zs \\<and> ys = add_mset x xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_mset_sums[simp]: \"sub_mset_sums xs = sum_mset ` { ys. ys \\<subseteq># mset xs }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_mset_sums xs = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs}", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. sub_mset_sums [] = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset []}\n 2. \\<And>a xs.\n       sub_mset_sums xs =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} \\<Longrightarrow>\n       sub_mset_sums (a # xs) =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset (a # xs)}", "case (Cons x xs)"], ["proof (state)\nthis:\n  sub_mset_sums xs = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs}\n\ngoal (2 subgoals):\n 1. sub_mset_sums [] = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset []}\n 2. \\<And>a xs.\n       sub_mset_sums xs =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} \\<Longrightarrow>\n       sub_mset_sums (a # xs) =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset (a # xs)}", "have id: \"{ys. ys \\<subseteq># mset (x # xs)} = {ys. ys \\<subseteq># mset xs} \\<union> {add_mset x ys | ys. ys \\<subseteq># mset xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ys. ys \\<subseteq># mset (x # xs)} =\n    {ys. ys \\<subseteq># mset xs} \\<union>\n    {add_mset x ys |ys. ys \\<subseteq># mset xs}", "unfolding mset.simps subset_add_mset"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ys.\n     ys \\<subseteq># mset xs \\<or>\n     (\\<exists>xs. xs \\<subseteq># mset xs \\<and> ys = add_mset x xs)} =\n    {ys. ys \\<subseteq># mset xs} \\<union>\n    {add_mset x ys |ys. ys \\<subseteq># mset xs}", "by auto"], ["proof (state)\nthis:\n  {ys. ys \\<subseteq># mset (x # xs)} =\n  {ys. ys \\<subseteq># mset xs} \\<union>\n  {add_mset x ys |ys. ys \\<subseteq># mset xs}\n\ngoal (2 subgoals):\n 1. sub_mset_sums [] = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset []}\n 2. \\<And>a xs.\n       sub_mset_sums xs =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} \\<Longrightarrow>\n       sub_mset_sums (a # xs) =\n       \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset (a # xs)}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_mset_sums (x # xs) =\n    \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset (x # xs)}", "unfolding sub_mset_sums.simps Let_def Cons id image_Un"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} \\<union>\n    (+) x ` \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} =\n    \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset xs} \\<union>\n    \\<Sum>\\<^sub># ` {add_mset x ys |ys. ys \\<subseteq># mset xs}", "by force"], ["proof (state)\nthis:\n  sub_mset_sums (x # xs) =\n  \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset (x # xs)}\n\ngoal (1 subgoal):\n 1. sub_mset_sums [] = \\<Sum>\\<^sub># ` {ys. ys \\<subseteq># mset []}", "qed auto"], ["", "end"]]}